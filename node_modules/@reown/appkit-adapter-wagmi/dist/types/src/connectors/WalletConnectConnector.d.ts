import UniversalProvider from '@walletconnect/universal-provider';
import { type AddEthereumChainParameter, type Address, type ProviderConnectInfo } from 'viem';
export type AppKitOptionsParams = {
    isNewChainsStale?: boolean;
    universalProvider: UniversalProvider;
};
export declare function walletConnect(parameters: AppKitOptionsParams): import("@wagmi/core").CreateConnectorFn<UniversalProvider, {
    connect(parameters?: {
        chainId?: number;
        pairingTopic?: string;
    }): Promise<{
        accounts: readonly Address[];
        chainId: number;
    }>;
    getProvider(parameters?: {
        chainId?: number;
    }): Promise<UniversalProvider>;
    getAccounts(): Promise<readonly Address[]>;
    getChainId(): Promise<number>;
    switchChain(parameters: {
        addEthereumChainParameter?: AddEthereumChainParameter;
        chainId: number;
    }): Promise<unknown>;
    onAccountsChanged(accounts: string[]): void;
    onChainChanged(chain: string | number): void;
    onDisconnect(error?: unknown): Promise<void>;
    getNamespaceChainsIds(): number[];
    getRequestedChainsIds(): Promise<number[]>;
    isChainsStale(): Promise<boolean>;
    onConnect(connectInfo: ProviderConnectInfo): void;
    onDisplayUri(uri: string): void;
    onSessionDelete(data: {
        topic: string;
    }): void;
    setRequestedChainsIds(chains: number[]): void;
    requestedChainsStorageKey: `${string}.requestedChains`;
}, {
    [x: `${string}.requestedChains`]: number[];
}>;
export declare namespace walletConnect {
    var type: "walletConnect";
}
