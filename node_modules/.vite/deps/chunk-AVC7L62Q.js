import {
  C,
  IEvents,
  Po,
  Qe,
  Qo,
  bases,
  detect,
  esm_default,
  esm_exports,
  f,
  f2,
  formatJsonRpcError,
  formatJsonRpcRequest,
  formatJsonRpcResult,
  getBigIntRpcId,
  h,
  i,
  isJsonRpcError,
  isJsonRpcRequest,
  isJsonRpcResponse,
  isJsonRpcResult,
  o,
  payloadId,
  r,
  require_cjs,
  require_cjs2,
  require_cjs3,
  sn
} from "./chunk-TTJ6PQO6.js";
import {
  base32
} from "./chunk-F6XJSCRZ.js";
import {
  formatAbiItem,
  parseAbiItem
} from "./chunk-U6643BKF.js";
import {
  require_events
} from "./chunk-2YULO2GZ.js";
import {
  ApiController,
  BalanceUtil,
  BlockchainApiController,
  ChainController,
  ConnectionController,
  ConnectorController,
  ConstantsUtil as ConstantsUtil2,
  CoreHelperUtil,
  D,
  EventsController,
  MELD_PUBLIC_KEY,
  ModalController,
  ONRAMP_PROVIDERS,
  OptionsController,
  ProviderController,
  RouterController,
  SnackController,
  StorageUtil,
  SwapApiUtil,
  W3mFrameRpcConstants,
  X,
  Y,
  getActiveCaipNetwork,
  getActiveNetworkTokenAddress,
  getPreferredAccountType,
  subscribeKey,
  w,
  withErrorBoundary
} from "./chunk-3XOEPFNB.js";
import {
  proxy,
  subscribe
} from "./chunk-FUV7PBD3.js";
import {
  safeJsonParse,
  safeJsonStringify
} from "./chunk-PKKOUJRU.js";
import {
  hmac
} from "./chunk-4B53ZGGF.js";
import {
  ConstantsUtil,
  NumberUtil,
  ParseUtil,
  UserRejectedRequestError
} from "./chunk-UZRBU537.js";
import {
  SHA256_IV,
  sha256,
  sha384,
  sha512
} from "./chunk-3NIYQQ3T.js";
import {
  keccak_256
} from "./chunk-ZKD6ANST.js";
import {
  Hash,
  abytes,
  add,
  add3H,
  add3L,
  aexists,
  anumber,
  aoutput,
  clean,
  concatBytes,
  createOptHasher,
  createXOFer,
  fromBig,
  randomBytes,
  rotr,
  rotr32H,
  rotr32L,
  rotrBH,
  rotrBL,
  rotrSH,
  rotrSL,
  swap32IfBE,
  swap8IfBE,
  toBytes,
  u32,
  u8,
  utf8ToBytes
} from "./chunk-VKJLEXYM.js";
import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-MMN2DTB3.js";

// node_modules/blakejs/util.js
var require_util = __commonJS({
  "node_modules/blakejs/util.js"(exports, module) {
    var ERROR_MSG_INPUT = "Input must be an string, Buffer or Uint8Array";
    function normalizeInput(input) {
      let ret;
      if (input instanceof Uint8Array) {
        ret = input;
      } else if (typeof input === "string") {
        const encoder4 = new TextEncoder();
        ret = encoder4.encode(input);
      } else {
        throw new Error(ERROR_MSG_INPUT);
      }
      return ret;
    }
    function toHex5(bytes) {
      return Array.prototype.map.call(bytes, function(n2) {
        return (n2 < 16 ? "0" : "") + n2.toString(16);
      }).join("");
    }
    function uint32ToHex(val) {
      return (4294967296 + val).toString(16).substring(1);
    }
    function debugPrint(label, arr, size3) {
      let msg = "\n" + label + " = ";
      for (let i3 = 0; i3 < arr.length; i3 += 2) {
        if (size3 === 32) {
          msg += uint32ToHex(arr[i3]).toUpperCase();
          msg += " ";
          msg += uint32ToHex(arr[i3 + 1]).toUpperCase();
        } else if (size3 === 64) {
          msg += uint32ToHex(arr[i3 + 1]).toUpperCase();
          msg += uint32ToHex(arr[i3]).toUpperCase();
        } else throw new Error("Invalid size " + size3);
        if (i3 % 6 === 4) {
          msg += "\n" + new Array(label.length + 4).join(" ");
        } else if (i3 < arr.length - 2) {
          msg += " ";
        }
      }
      console.log(msg);
    }
    function testSpeed(hashFn, N3, M4) {
      let startMs = (/* @__PURE__ */ new Date()).getTime();
      const input = new Uint8Array(N3);
      for (let i3 = 0; i3 < N3; i3++) {
        input[i3] = i3 % 256;
      }
      const genMs = (/* @__PURE__ */ new Date()).getTime();
      console.log("Generated random input in " + (genMs - startMs) + "ms");
      startMs = genMs;
      for (let i3 = 0; i3 < M4; i3++) {
        const hashHex = hashFn(input);
        const hashMs = (/* @__PURE__ */ new Date()).getTime();
        const ms3 = hashMs - startMs;
        startMs = hashMs;
        console.log("Hashed in " + ms3 + "ms: " + hashHex.substring(0, 20) + "...");
        console.log(
          Math.round(N3 / (1 << 20) / (ms3 / 1e3) * 100) / 100 + " MB PER SECOND"
        );
      }
    }
    module.exports = {
      normalizeInput,
      toHex: toHex5,
      debugPrint,
      testSpeed
    };
  }
});

// node_modules/blakejs/blake2b.js
var require_blake2b = __commonJS({
  "node_modules/blakejs/blake2b.js"(exports, module) {
    var util = require_util();
    function ADD64AA(v5, a2, b3) {
      const o0 = v5[a2] + v5[b3];
      let o1 = v5[a2 + 1] + v5[b3 + 1];
      if (o0 >= 4294967296) {
        o1++;
      }
      v5[a2] = o0;
      v5[a2 + 1] = o1;
    }
    function ADD64AC(v5, a2, b0, b1) {
      let o0 = v5[a2] + b0;
      if (b0 < 0) {
        o0 += 4294967296;
      }
      let o1 = v5[a2 + 1] + b1;
      if (o0 >= 4294967296) {
        o1++;
      }
      v5[a2] = o0;
      v5[a2 + 1] = o1;
    }
    function B2B_GET32(arr, i3) {
      return arr[i3] ^ arr[i3 + 1] << 8 ^ arr[i3 + 2] << 16 ^ arr[i3 + 3] << 24;
    }
    function B2B_G(a2, b3, c3, d4, ix, iy) {
      const x0 = m3[ix];
      const x1 = m3[ix + 1];
      const y0 = m3[iy];
      const y1 = m3[iy + 1];
      ADD64AA(v4, a2, b3);
      ADD64AC(v4, a2, x0, x1);
      let xor0 = v4[d4] ^ v4[a2];
      let xor1 = v4[d4 + 1] ^ v4[a2 + 1];
      v4[d4] = xor1;
      v4[d4 + 1] = xor0;
      ADD64AA(v4, c3, d4);
      xor0 = v4[b3] ^ v4[c3];
      xor1 = v4[b3 + 1] ^ v4[c3 + 1];
      v4[b3] = xor0 >>> 24 ^ xor1 << 8;
      v4[b3 + 1] = xor1 >>> 24 ^ xor0 << 8;
      ADD64AA(v4, a2, b3);
      ADD64AC(v4, a2, y0, y1);
      xor0 = v4[d4] ^ v4[a2];
      xor1 = v4[d4 + 1] ^ v4[a2 + 1];
      v4[d4] = xor0 >>> 16 ^ xor1 << 16;
      v4[d4 + 1] = xor1 >>> 16 ^ xor0 << 16;
      ADD64AA(v4, c3, d4);
      xor0 = v4[b3] ^ v4[c3];
      xor1 = v4[b3 + 1] ^ v4[c3 + 1];
      v4[b3] = xor1 >>> 31 ^ xor0 << 1;
      v4[b3 + 1] = xor0 >>> 31 ^ xor1 << 1;
    }
    var BLAKE2B_IV32 = new Uint32Array([
      4089235720,
      1779033703,
      2227873595,
      3144134277,
      4271175723,
      1013904242,
      1595750129,
      2773480762,
      2917565137,
      1359893119,
      725511199,
      2600822924,
      4215389547,
      528734635,
      327033209,
      1541459225
    ]);
    var SIGMA8 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3
    ];
    var SIGMA82 = new Uint8Array(
      SIGMA8.map(function(x3) {
        return x3 * 2;
      })
    );
    var v4 = new Uint32Array(32);
    var m3 = new Uint32Array(32);
    function blake2bCompress(ctx, last) {
      let i3 = 0;
      for (i3 = 0; i3 < 16; i3++) {
        v4[i3] = ctx.h[i3];
        v4[i3 + 16] = BLAKE2B_IV32[i3];
      }
      v4[24] = v4[24] ^ ctx.t;
      v4[25] = v4[25] ^ ctx.t / 4294967296;
      if (last) {
        v4[28] = ~v4[28];
        v4[29] = ~v4[29];
      }
      for (i3 = 0; i3 < 32; i3++) {
        m3[i3] = B2B_GET32(ctx.b, 4 * i3);
      }
      for (i3 = 0; i3 < 12; i3++) {
        B2B_G(0, 8, 16, 24, SIGMA82[i3 * 16 + 0], SIGMA82[i3 * 16 + 1]);
        B2B_G(2, 10, 18, 26, SIGMA82[i3 * 16 + 2], SIGMA82[i3 * 16 + 3]);
        B2B_G(4, 12, 20, 28, SIGMA82[i3 * 16 + 4], SIGMA82[i3 * 16 + 5]);
        B2B_G(6, 14, 22, 30, SIGMA82[i3 * 16 + 6], SIGMA82[i3 * 16 + 7]);
        B2B_G(0, 10, 20, 30, SIGMA82[i3 * 16 + 8], SIGMA82[i3 * 16 + 9]);
        B2B_G(2, 12, 22, 24, SIGMA82[i3 * 16 + 10], SIGMA82[i3 * 16 + 11]);
        B2B_G(4, 14, 16, 26, SIGMA82[i3 * 16 + 12], SIGMA82[i3 * 16 + 13]);
        B2B_G(6, 8, 18, 28, SIGMA82[i3 * 16 + 14], SIGMA82[i3 * 16 + 15]);
      }
      for (i3 = 0; i3 < 16; i3++) {
        ctx.h[i3] = ctx.h[i3] ^ v4[i3] ^ v4[i3 + 16];
      }
    }
    var parameterBlock = new Uint8Array([
      0,
      0,
      0,
      0,
      //  0: outlen, keylen, fanout, depth
      0,
      0,
      0,
      0,
      //  4: leaf length, sequential mode
      0,
      0,
      0,
      0,
      //  8: node offset
      0,
      0,
      0,
      0,
      // 12: node offset
      0,
      0,
      0,
      0,
      // 16: node depth, inner length, rfu
      0,
      0,
      0,
      0,
      // 20: rfu
      0,
      0,
      0,
      0,
      // 24: rfu
      0,
      0,
      0,
      0,
      // 28: rfu
      0,
      0,
      0,
      0,
      // 32: salt
      0,
      0,
      0,
      0,
      // 36: salt
      0,
      0,
      0,
      0,
      // 40: salt
      0,
      0,
      0,
      0,
      // 44: salt
      0,
      0,
      0,
      0,
      // 48: personal
      0,
      0,
      0,
      0,
      // 52: personal
      0,
      0,
      0,
      0,
      // 56: personal
      0,
      0,
      0,
      0
      // 60: personal
    ]);
    function blake2bInit(outlen, key, salt, personal) {
      if (outlen === 0 || outlen > 64) {
        throw new Error("Illegal output length, expected 0 < length <= 64");
      }
      if (key && key.length > 64) {
        throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");
      }
      if (salt && salt.length !== 16) {
        throw new Error("Illegal salt, expected Uint8Array with length is 16");
      }
      if (personal && personal.length !== 16) {
        throw new Error("Illegal personal, expected Uint8Array with length is 16");
      }
      const ctx = {
        b: new Uint8Array(128),
        h: new Uint32Array(16),
        t: 0,
        // input count
        c: 0,
        // pointer within buffer
        outlen
        // output length in bytes
      };
      parameterBlock.fill(0);
      parameterBlock[0] = outlen;
      if (key) parameterBlock[1] = key.length;
      parameterBlock[2] = 1;
      parameterBlock[3] = 1;
      if (salt) parameterBlock.set(salt, 32);
      if (personal) parameterBlock.set(personal, 48);
      for (let i3 = 0; i3 < 16; i3++) {
        ctx.h[i3] = BLAKE2B_IV32[i3] ^ B2B_GET32(parameterBlock, i3 * 4);
      }
      if (key) {
        blake2bUpdate(ctx, key);
        ctx.c = 128;
      }
      return ctx;
    }
    function blake2bUpdate(ctx, input) {
      for (let i3 = 0; i3 < input.length; i3++) {
        if (ctx.c === 128) {
          ctx.t += ctx.c;
          blake2bCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i3];
      }
    }
    function blake2bFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 128) {
        ctx.b[ctx.c++] = 0;
      }
      blake2bCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i3 = 0; i3 < ctx.outlen; i3++) {
        out[i3] = ctx.h[i3 >> 2] >> 8 * (i3 & 3);
      }
      return out;
    }
    function blake2b2(input, key, outlen, salt, personal) {
      outlen = outlen || 64;
      input = util.normalizeInput(input);
      if (salt) {
        salt = util.normalizeInput(salt);
      }
      if (personal) {
        personal = util.normalizeInput(personal);
      }
      const ctx = blake2bInit(outlen, key, salt, personal);
      blake2bUpdate(ctx, input);
      return blake2bFinal(ctx);
    }
    function blake2bHex(input, key, outlen, salt, personal) {
      const output = blake2b2(input, key, outlen, salt, personal);
      return util.toHex(output);
    }
    module.exports = {
      blake2b: blake2b2,
      blake2bHex,
      blake2bInit,
      blake2bUpdate,
      blake2bFinal
    };
  }
});

// node_modules/blakejs/blake2s.js
var require_blake2s = __commonJS({
  "node_modules/blakejs/blake2s.js"(exports, module) {
    var util = require_util();
    function B2S_GET32(v5, i3) {
      return v5[i3] ^ v5[i3 + 1] << 8 ^ v5[i3 + 2] << 16 ^ v5[i3 + 3] << 24;
    }
    function B2S_G(a2, b3, c3, d4, x3, y3) {
      v4[a2] = v4[a2] + v4[b3] + x3;
      v4[d4] = ROTR32(v4[d4] ^ v4[a2], 16);
      v4[c3] = v4[c3] + v4[d4];
      v4[b3] = ROTR32(v4[b3] ^ v4[c3], 12);
      v4[a2] = v4[a2] + v4[b3] + y3;
      v4[d4] = ROTR32(v4[d4] ^ v4[a2], 8);
      v4[c3] = v4[c3] + v4[d4];
      v4[b3] = ROTR32(v4[b3] ^ v4[c3], 7);
    }
    function ROTR32(x3, y3) {
      return x3 >>> y3 ^ x3 << 32 - y3;
    }
    var BLAKE2S_IV = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SIGMA = new Uint8Array([
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0
    ]);
    var v4 = new Uint32Array(16);
    var m3 = new Uint32Array(16);
    function blake2sCompress(ctx, last) {
      let i3 = 0;
      for (i3 = 0; i3 < 8; i3++) {
        v4[i3] = ctx.h[i3];
        v4[i3 + 8] = BLAKE2S_IV[i3];
      }
      v4[12] ^= ctx.t;
      v4[13] ^= ctx.t / 4294967296;
      if (last) {
        v4[14] = ~v4[14];
      }
      for (i3 = 0; i3 < 16; i3++) {
        m3[i3] = B2S_GET32(ctx.b, 4 * i3);
      }
      for (i3 = 0; i3 < 10; i3++) {
        B2S_G(0, 4, 8, 12, m3[SIGMA[i3 * 16 + 0]], m3[SIGMA[i3 * 16 + 1]]);
        B2S_G(1, 5, 9, 13, m3[SIGMA[i3 * 16 + 2]], m3[SIGMA[i3 * 16 + 3]]);
        B2S_G(2, 6, 10, 14, m3[SIGMA[i3 * 16 + 4]], m3[SIGMA[i3 * 16 + 5]]);
        B2S_G(3, 7, 11, 15, m3[SIGMA[i3 * 16 + 6]], m3[SIGMA[i3 * 16 + 7]]);
        B2S_G(0, 5, 10, 15, m3[SIGMA[i3 * 16 + 8]], m3[SIGMA[i3 * 16 + 9]]);
        B2S_G(1, 6, 11, 12, m3[SIGMA[i3 * 16 + 10]], m3[SIGMA[i3 * 16 + 11]]);
        B2S_G(2, 7, 8, 13, m3[SIGMA[i3 * 16 + 12]], m3[SIGMA[i3 * 16 + 13]]);
        B2S_G(3, 4, 9, 14, m3[SIGMA[i3 * 16 + 14]], m3[SIGMA[i3 * 16 + 15]]);
      }
      for (i3 = 0; i3 < 8; i3++) {
        ctx.h[i3] ^= v4[i3] ^ v4[i3 + 8];
      }
    }
    function blake2sInit(outlen, key) {
      if (!(outlen > 0 && outlen <= 32)) {
        throw new Error("Incorrect output length, should be in [1, 32]");
      }
      const keylen = key ? key.length : 0;
      if (key && !(keylen > 0 && keylen <= 32)) {
        throw new Error("Incorrect key length, should be in [1, 32]");
      }
      const ctx = {
        h: new Uint32Array(BLAKE2S_IV),
        // hash state
        b: new Uint8Array(64),
        // input block
        c: 0,
        // pointer within block
        t: 0,
        // input count
        outlen
        // output length in bytes
      };
      ctx.h[0] ^= 16842752 ^ keylen << 8 ^ outlen;
      if (keylen > 0) {
        blake2sUpdate(ctx, key);
        ctx.c = 64;
      }
      return ctx;
    }
    function blake2sUpdate(ctx, input) {
      for (let i3 = 0; i3 < input.length; i3++) {
        if (ctx.c === 64) {
          ctx.t += ctx.c;
          blake2sCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i3];
      }
    }
    function blake2sFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 64) {
        ctx.b[ctx.c++] = 0;
      }
      blake2sCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i3 = 0; i3 < ctx.outlen; i3++) {
        out[i3] = ctx.h[i3 >> 2] >> 8 * (i3 & 3) & 255;
      }
      return out;
    }
    function blake2s2(input, key, outlen) {
      outlen = outlen || 32;
      input = util.normalizeInput(input);
      const ctx = blake2sInit(outlen, key);
      blake2sUpdate(ctx, input);
      return blake2sFinal(ctx);
    }
    function blake2sHex(input, key, outlen) {
      const output = blake2s2(input, key, outlen);
      return util.toHex(output);
    }
    module.exports = {
      blake2s: blake2s2,
      blake2sHex,
      blake2sInit,
      blake2sUpdate,
      blake2sFinal
    };
  }
});

// node_modules/blakejs/index.js
var require_blakejs = __commonJS({
  "node_modules/blakejs/index.js"(exports, module) {
    var b2b = require_blake2b();
    var b2s = require_blake2s();
    module.exports = {
      blake2b: b2b.blake2b,
      blake2bHex: b2b.blake2bHex,
      blake2bInit: b2b.blake2bInit,
      blake2bUpdate: b2b.blake2bUpdate,
      blake2bFinal: b2b.blake2bFinal,
      blake2s: b2s.blake2s,
      blake2sHex: b2s.blake2sHex,
      blake2sInit: b2s.blake2sInit,
      blake2sUpdate: b2s.blake2sUpdate,
      blake2sFinal: b2s.blake2sFinal
    };
  }
});

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OnRampController.js
var USDC_CURRENCY_DEFAULT = {
  id: "2b92315d-eab7-5bef-84fa-089a131333f5",
  name: "USD Coin",
  symbol: "USDC",
  networks: [
    {
      name: "ethereum-mainnet",
      display_name: "Ethereum",
      chain_id: "1",
      contract_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
    },
    {
      name: "polygon-mainnet",
      display_name: "Polygon",
      chain_id: "137",
      contract_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
    }
  ]
};
var USD_CURRENCY_DEFAULT = {
  id: "USD",
  payment_method_limits: [
    {
      id: "card",
      min: "10.00",
      max: "7500.00"
    },
    {
      id: "ach_bank_account",
      min: "10.00",
      max: "25000.00"
    }
  ]
};
var defaultState = {
  providers: ONRAMP_PROVIDERS,
  selectedProvider: null,
  error: null,
  purchaseCurrency: USDC_CURRENCY_DEFAULT,
  paymentCurrency: USD_CURRENCY_DEFAULT,
  purchaseCurrencies: [USDC_CURRENCY_DEFAULT],
  paymentCurrencies: [],
  quotesLoading: false
};
var state = proxy(defaultState);
var controller = {
  state,
  subscribe(callback) {
    return subscribe(state, () => callback(state));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state, key, callback);
  },
  setSelectedProvider(provider) {
    if (provider && provider.name === "meld") {
      const activeChain = ChainController.state.activeChain;
      const currency = activeChain === ConstantsUtil.CHAIN.SOLANA ? "SOL" : "USDC";
      const address = activeChain ? ChainController.state.chains.get(activeChain)?.accountState?.address ?? "" : "";
      const url = new URL(provider.url);
      url.searchParams.append("publicKey", MELD_PUBLIC_KEY);
      url.searchParams.append("destinationCurrencyCode", currency);
      url.searchParams.append("walletAddress", address);
      url.searchParams.append("externalCustomerId", OptionsController.state.projectId);
      state.selectedProvider = { ...provider, url: url.toString() };
    } else {
      state.selectedProvider = provider;
    }
  },
  setOnrampProviders(providers) {
    if (Array.isArray(providers) && providers.every((item) => typeof item === "string")) {
      const validOnramp = providers;
      const newProviders = ONRAMP_PROVIDERS.filter((provider) => validOnramp.includes(provider.name));
      state.providers = newProviders;
    } else {
      state.providers = [];
    }
  },
  setPurchaseCurrency(currency) {
    state.purchaseCurrency = currency;
  },
  setPaymentCurrency(currency) {
    state.paymentCurrency = currency;
  },
  setPurchaseAmount(amount) {
    OnRampController.state.purchaseAmount = amount;
  },
  setPaymentAmount(amount) {
    OnRampController.state.paymentAmount = amount;
  },
  async getAvailableCurrencies() {
    const options = await BlockchainApiController.getOnrampOptions();
    state.purchaseCurrencies = options.purchaseCurrencies;
    state.paymentCurrencies = options.paymentCurrencies;
    state.paymentCurrency = options.paymentCurrencies[0] || USD_CURRENCY_DEFAULT;
    state.purchaseCurrency = options.purchaseCurrencies[0] || USDC_CURRENCY_DEFAULT;
    await ApiController.fetchCurrencyImages(options.paymentCurrencies.map((currency) => currency.id));
    await ApiController.fetchTokenImages(options.purchaseCurrencies.map((currency) => currency.symbol));
  },
  async getQuote() {
    state.quotesLoading = true;
    try {
      const quote = await BlockchainApiController.getOnrampQuote({
        purchaseCurrency: state.purchaseCurrency,
        paymentCurrency: state.paymentCurrency,
        amount: state.paymentAmount?.toString() || "0",
        network: state.purchaseCurrency?.symbol
      });
      state.quotesLoading = false;
      state.purchaseAmount = Number(quote?.purchaseAmount.amount);
      return quote;
    } catch (error) {
      state.error = error.message;
      state.quotesLoading = false;
      return null;
    } finally {
      state.quotesLoading = false;
    }
  },
  resetState() {
    state.selectedProvider = null;
    state.error = null;
    state.purchaseCurrency = USDC_CURRENCY_DEFAULT;
    state.paymentCurrency = USD_CURRENCY_DEFAULT;
    state.purchaseCurrencies = [USDC_CURRENCY_DEFAULT];
    state.paymentCurrencies = [];
    state.paymentAmount = void 0;
    state.purchaseAmount = void 0;
    state.quotesLoading = false;
  }
};
var OnRampController = withErrorBoundary(controller);

// node_modules/@walletconnect/sign-client/dist/index.js
var import_events4 = __toESM(require_events());

// node_modules/@walletconnect/core/dist/index.js
var import_events3 = __toESM(require_events());

// node_modules/@walletconnect/types/dist/index.js
var import_events2 = __toESM(require_events());
var a = Object.defineProperty;
var u = (e, s, r2) => s in e ? a(e, s, { enumerable: true, configurable: true, writable: true, value: r2 }) : e[s] = r2;
var c = (e, s, r2) => u(e, typeof s != "symbol" ? s + "" : s, r2);
var h2 = class extends IEvents {
  constructor(s) {
    super(), this.opts = s, c(this, "protocol", "wc"), c(this, "version", 2);
  }
};
var p = Object.defineProperty;
var b = (e, s, r2) => s in e ? p(e, s, { enumerable: true, configurable: true, writable: true, value: r2 }) : e[s] = r2;
var v = (e, s, r2) => b(e, typeof s != "symbol" ? s + "" : s, r2);
var I = class extends IEvents {
  constructor(s, r2) {
    super(), this.core = s, this.logger = r2, v(this, "records", /* @__PURE__ */ new Map());
  }
};
var y = class {
  constructor(s, r2) {
    this.logger = s, this.core = r2;
  }
};
var m = class extends IEvents {
  constructor(s, r2) {
    super(), this.relayer = s, this.logger = r2;
  }
};
var d = class extends IEvents {
  constructor(s) {
    super();
  }
};
var f3 = class {
  constructor(s, r2, t, q2) {
    this.core = s, this.logger = r2, this.name = t;
  }
};
var P = class extends IEvents {
  constructor(s, r2) {
    super(), this.relayer = s, this.logger = r2;
  }
};
var S = class extends IEvents {
  constructor(s, r2) {
    super(), this.core = s, this.logger = r2;
  }
};
var M = class {
  constructor(s, r2, t) {
    this.core = s, this.logger = r2, this.store = t;
  }
};
var O = class {
  constructor(s, r2) {
    this.projectId = s, this.logger = r2;
  }
};
var R = class {
  constructor(s, r2, t) {
    this.core = s, this.logger = r2, this.telemetryEnabled = t;
  }
};
var T = Object.defineProperty;
var k = (e, s, r2) => s in e ? T(e, s, { enumerable: true, configurable: true, writable: true, value: r2 }) : e[s] = r2;
var i2 = (e, s, r2) => k(e, typeof s != "symbol" ? s + "" : s, r2);
var J = class {
  constructor(s) {
    this.opts = s, i2(this, "protocol", "wc"), i2(this, "version", 2);
  }
};
var V = class {
  constructor(s) {
    this.client = s;
  }
};

// node_modules/@walletconnect/core/dist/index.js
var import_time2 = __toESM(require_cjs());

// node_modules/@walletconnect/utils/dist/index.js
var import_time = __toESM(require_cjs());
var import_window_getters = __toESM(require_cjs2());
var import_window_metadata = __toESM(require_cjs3());

// node_modules/ox/_esm/core/version.js
var version = "0.1.1";

// node_modules/ox/_esm/core/internal/errors.js
function getVersion() {
  return version;
}

// node_modules/ox/_esm/core/Errors.js
var BaseError = class _BaseError extends Error {
  constructor(shortMessage, options = {}) {
    const details = (() => {
      if (options.cause instanceof _BaseError) {
        if (options.cause.details)
          return options.cause.details;
        if (options.cause.shortMessage)
          return options.cause.shortMessage;
      }
      if (options.cause && "details" in options.cause && typeof options.cause.details === "string")
        return options.cause.details;
      if (options.cause?.message)
        return options.cause.message;
      return options.details;
    })();
    const docsPath = (() => {
      if (options.cause instanceof _BaseError)
        return options.cause.docsPath || options.docsPath;
      return options.docsPath;
    })();
    const docsBaseUrl = "https://oxlib.sh";
    const docs = `${docsBaseUrl}${docsPath ?? ""}`;
    const message = [
      shortMessage || "An error occurred.",
      ...options.metaMessages ? ["", ...options.metaMessages] : [],
      ...details || docsPath ? [
        "",
        details ? `Details: ${details}` : void 0,
        docsPath ? `See: ${docs}` : void 0
      ] : []
    ].filter((x3) => typeof x3 === "string").join("\n");
    super(message, options.cause ? { cause: options.cause } : void 0);
    Object.defineProperty(this, "details", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docsPath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shortMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cause", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "BaseError"
    });
    Object.defineProperty(this, "version", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: `ox@${getVersion()}`
    });
    this.cause = options.cause;
    this.details = details;
    this.docs = docs;
    this.docsPath = docsPath;
    this.shortMessage = shortMessage;
  }
  walk(fn3) {
    return walk(this, fn3);
  }
};
function walk(err, fn3) {
  if (fn3?.(err))
    return err;
  if (err && typeof err === "object" && "cause" in err && err.cause)
    return walk(err.cause, fn3);
  return fn3 ? null : err;
}

// node_modules/ox/node_modules/@noble/curves/esm/abstract/utils.js
var _0n = BigInt(0);
var _1n = BigInt(1);
function isBytes(a2) {
  return a2 instanceof Uint8Array || ArrayBuffer.isView(a2) && a2.constructor.name === "Uint8Array";
}
function abytes2(item) {
  if (!isBytes(item))
    throw new Error("Uint8Array expected");
}
function abool(title, value) {
  if (typeof value !== "boolean")
    throw new Error(title + " boolean expected, got " + value);
}
function numberToHexUnpadded(num2) {
  const hex = num2.toString(16);
  return hex.length & 1 ? "0" + hex : hex;
}
function hexToNumber(hex) {
  if (typeof hex !== "string")
    throw new Error("hex string expected, got " + typeof hex);
  return hex === "" ? _0n : BigInt("0x" + hex);
}
var hasHexBuiltin = (
  // @ts-ignore
  typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
);
var hexes = Array.from({ length: 256 }, (_2, i3) => i3.toString(16).padStart(2, "0"));
function bytesToHex(bytes) {
  abytes2(bytes);
  if (hasHexBuiltin)
    return bytes.toHex();
  let hex = "";
  for (let i3 = 0; i3 < bytes.length; i3++) {
    hex += hexes[bytes[i3]];
  }
  return hex;
}
var asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function asciiToBase16(ch) {
  if (ch >= asciis._0 && ch <= asciis._9)
    return ch - asciis._0;
  if (ch >= asciis.A && ch <= asciis.F)
    return ch - (asciis.A - 10);
  if (ch >= asciis.a && ch <= asciis.f)
    return ch - (asciis.a - 10);
  return;
}
function hexToBytes(hex) {
  if (typeof hex !== "string")
    throw new Error("hex string expected, got " + typeof hex);
  if (hasHexBuiltin)
    return Uint8Array.fromHex(hex);
  const hl = hex.length;
  const al = hl / 2;
  if (hl % 2)
    throw new Error("hex string expected, got unpadded hex of length " + hl);
  const array = new Uint8Array(al);
  for (let ai3 = 0, hi2 = 0; ai3 < al; ai3++, hi2 += 2) {
    const n1 = asciiToBase16(hex.charCodeAt(hi2));
    const n2 = asciiToBase16(hex.charCodeAt(hi2 + 1));
    if (n1 === void 0 || n2 === void 0) {
      const char = hex[hi2] + hex[hi2 + 1];
      throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi2);
    }
    array[ai3] = n1 * 16 + n2;
  }
  return array;
}
function bytesToNumberBE(bytes) {
  return hexToNumber(bytesToHex(bytes));
}
function bytesToNumberLE(bytes) {
  abytes2(bytes);
  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
}
function numberToBytesBE(n2, len) {
  return hexToBytes(n2.toString(16).padStart(len * 2, "0"));
}
function numberToBytesLE(n2, len) {
  return numberToBytesBE(n2, len).reverse();
}
function ensureBytes(title, hex, expectedLength) {
  let res;
  if (typeof hex === "string") {
    try {
      res = hexToBytes(hex);
    } catch (e) {
      throw new Error(title + " must be hex string or Uint8Array, cause: " + e);
    }
  } else if (isBytes(hex)) {
    res = Uint8Array.from(hex);
  } else {
    throw new Error(title + " must be hex string or Uint8Array");
  }
  const len = res.length;
  if (typeof expectedLength === "number" && len !== expectedLength)
    throw new Error(title + " of length " + expectedLength + " expected, got " + len);
  return res;
}
function concatBytes2(...arrays) {
  let sum = 0;
  for (let i3 = 0; i3 < arrays.length; i3++) {
    const a2 = arrays[i3];
    abytes2(a2);
    sum += a2.length;
  }
  const res = new Uint8Array(sum);
  for (let i3 = 0, pad3 = 0; i3 < arrays.length; i3++) {
    const a2 = arrays[i3];
    res.set(a2, pad3);
    pad3 += a2.length;
  }
  return res;
}
function equalBytes(a2, b3) {
  if (a2.length !== b3.length)
    return false;
  let diff = 0;
  for (let i3 = 0; i3 < a2.length; i3++)
    diff |= a2[i3] ^ b3[i3];
  return diff === 0;
}
function utf8ToBytes2(str) {
  if (typeof str !== "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(str));
}
var isPosBig = (n2) => typeof n2 === "bigint" && _0n <= n2;
function inRange(n2, min, max) {
  return isPosBig(n2) && isPosBig(min) && isPosBig(max) && min <= n2 && n2 < max;
}
function aInRange(title, n2, min, max) {
  if (!inRange(n2, min, max))
    throw new Error("expected valid " + title + ": " + min + " <= n < " + max + ", got " + n2);
}
function bitLen(n2) {
  let len;
  for (len = 0; n2 > _0n; n2 >>= _1n, len += 1)
    ;
  return len;
}
function bitGet(n2, pos) {
  return n2 >> BigInt(pos) & _1n;
}
var bitMask = (n2) => (_1n << BigInt(n2)) - _1n;
var u8n = (len) => new Uint8Array(len);
var u8fr = (arr) => Uint8Array.from(arr);
function createHmacDrbg(hashLen, qByteLen, hmacFn) {
  if (typeof hashLen !== "number" || hashLen < 2)
    throw new Error("hashLen must be a number");
  if (typeof qByteLen !== "number" || qByteLen < 2)
    throw new Error("qByteLen must be a number");
  if (typeof hmacFn !== "function")
    throw new Error("hmacFn must be a function");
  let v4 = u8n(hashLen);
  let k2 = u8n(hashLen);
  let i3 = 0;
  const reset = () => {
    v4.fill(1);
    k2.fill(0);
    i3 = 0;
  };
  const h3 = (...b3) => hmacFn(k2, v4, ...b3);
  const reseed = (seed = u8n(0)) => {
    k2 = h3(u8fr([0]), seed);
    v4 = h3();
    if (seed.length === 0)
      return;
    k2 = h3(u8fr([1]), seed);
    v4 = h3();
  };
  const gen = () => {
    if (i3++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let len = 0;
    const out = [];
    while (len < qByteLen) {
      v4 = h3();
      const sl = v4.slice();
      out.push(sl);
      len += v4.length;
    }
    return concatBytes2(...out);
  };
  const genUntil = (seed, pred) => {
    reset();
    reseed(seed);
    let res = void 0;
    while (!(res = pred(gen())))
      reseed();
    reset();
    return res;
  };
  return genUntil;
}
var validatorFns = {
  bigint: (val) => typeof val === "bigint",
  function: (val) => typeof val === "function",
  boolean: (val) => typeof val === "boolean",
  string: (val) => typeof val === "string",
  stringOrUint8Array: (val) => typeof val === "string" || isBytes(val),
  isSafeInteger: (val) => Number.isSafeInteger(val),
  array: (val) => Array.isArray(val),
  field: (val, object) => object.Fp.isValid(val),
  hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
};
function validateObject(object, validators, optValidators = {}) {
  const checkField = (fieldName, type, isOptional) => {
    const checkVal = validatorFns[type];
    if (typeof checkVal !== "function")
      throw new Error("invalid validator function");
    const val = object[fieldName];
    if (isOptional && val === void 0)
      return;
    if (!checkVal(val, object)) {
      throw new Error("param " + String(fieldName) + " is invalid. Expected " + type + ", got " + val);
    }
  };
  for (const [fieldName, type] of Object.entries(validators))
    checkField(fieldName, type, false);
  for (const [fieldName, type] of Object.entries(optValidators))
    checkField(fieldName, type, true);
  return object;
}
var notImplemented = () => {
  throw new Error("not implemented");
};
function memoized(fn3) {
  const map = /* @__PURE__ */ new WeakMap();
  return (arg, ...args) => {
    const val = map.get(arg);
    if (val !== void 0)
      return val;
    const computed = fn3(arg, ...args);
    map.set(arg, computed);
    return computed;
  };
}

// node_modules/ox/_esm/core/internal/bytes.js
function assertSize(bytes, size_) {
  if (size(bytes) > size_)
    throw new SizeOverflowError({
      givenSize: size(bytes),
      maxSize: size_
    });
}
var charCodeMap = {
  zero: 48,
  nine: 57,
  A: 65,
  F: 70,
  a: 97,
  f: 102
};
function charCodeToBase16(char) {
  if (char >= charCodeMap.zero && char <= charCodeMap.nine)
    return char - charCodeMap.zero;
  if (char >= charCodeMap.A && char <= charCodeMap.F)
    return char - (charCodeMap.A - 10);
  if (char >= charCodeMap.a && char <= charCodeMap.f)
    return char - (charCodeMap.a - 10);
  return void 0;
}
function pad(bytes, options = {}) {
  const { dir, size: size3 = 32 } = options;
  if (size3 === 0)
    return bytes;
  if (bytes.length > size3)
    throw new SizeExceedsPaddingSizeError({
      size: bytes.length,
      targetSize: size3,
      type: "Bytes"
    });
  const paddedBytes = new Uint8Array(size3);
  for (let i3 = 0; i3 < size3; i3++) {
    const padEnd = dir === "right";
    paddedBytes[padEnd ? i3 : size3 - i3 - 1] = bytes[padEnd ? i3 : bytes.length - i3 - 1];
  }
  return paddedBytes;
}

// node_modules/ox/_esm/core/internal/hex.js
function assertSize2(hex, size_) {
  if (size2(hex) > size_)
    throw new SizeOverflowError2({
      givenSize: size2(hex),
      maxSize: size_
    });
}
function assertStartOffset(value, start) {
  if (typeof start === "number" && start > 0 && start > size2(value) - 1)
    throw new SliceOffsetOutOfBoundsError2({
      offset: start,
      position: "start",
      size: size2(value)
    });
}
function assertEndOffset(value, start, end) {
  if (typeof start === "number" && typeof end === "number" && size2(value) !== end - start) {
    throw new SliceOffsetOutOfBoundsError2({
      offset: end,
      position: "end",
      size: size2(value)
    });
  }
}
function pad2(hex_, options = {}) {
  const { dir, size: size3 = 32 } = options;
  if (size3 === 0)
    return hex_;
  const hex = hex_.replace("0x", "");
  if (hex.length > size3 * 2)
    throw new SizeExceedsPaddingSizeError2({
      size: Math.ceil(hex.length / 2),
      targetSize: size3,
      type: "Hex"
    });
  return `0x${hex[dir === "right" ? "padEnd" : "padStart"](size3 * 2, "0")}`;
}
function trim(value, options = {}) {
  const { dir = "left" } = options;
  let data = value.replace("0x", "");
  let sliceLength = 0;
  for (let i3 = 0; i3 < data.length - 1; i3++) {
    if (data[dir === "left" ? i3 : data.length - i3 - 1].toString() === "0")
      sliceLength++;
    else
      break;
  }
  data = dir === "left" ? data.slice(sliceLength) : data.slice(0, data.length - sliceLength);
  if (data === "0")
    return "0x";
  if (dir === "right" && data.length % 2 === 1)
    return `0x${data}0`;
  return `0x${data}`;
}

// node_modules/ox/_esm/core/Json.js
var bigIntSuffix = "#__bigint";
function stringify(value, replacer, space) {
  return JSON.stringify(value, (key, value2) => {
    if (typeof replacer === "function")
      return replacer(key, value2);
    if (typeof value2 === "bigint")
      return value2.toString() + bigIntSuffix;
    return value2;
  }, space);
}

// node_modules/ox/_esm/core/Hex.js
var encoder = new TextEncoder();
var hexes2 = Array.from({ length: 256 }, (_v, i3) => i3.toString(16).padStart(2, "0"));
function assert(value, options = {}) {
  const { strict = false } = options;
  if (!value)
    throw new InvalidHexTypeError(value);
  if (typeof value !== "string")
    throw new InvalidHexTypeError(value);
  if (strict) {
    if (!/^0x[0-9a-fA-F]*$/.test(value))
      throw new InvalidHexValueError(value);
  }
  if (!value.startsWith("0x"))
    throw new InvalidHexValueError(value);
}
function concat(...values) {
  return `0x${values.reduce((acc, x3) => acc + x3.replace("0x", ""), "")}`;
}
function from(value) {
  if (value instanceof Uint8Array)
    return fromBytes(value);
  if (Array.isArray(value))
    return fromBytes(new Uint8Array(value));
  return value;
}
function fromBoolean(value, options = {}) {
  const hex = `0x${Number(value)}`;
  if (typeof options.size === "number") {
    assertSize2(hex, options.size);
    return padLeft(hex, options.size);
  }
  return hex;
}
function fromBytes(value, options = {}) {
  let string2 = "";
  for (let i3 = 0; i3 < value.length; i3++)
    string2 += hexes2[value[i3]];
  const hex = `0x${string2}`;
  if (typeof options.size === "number") {
    assertSize2(hex, options.size);
    return padRight(hex, options.size);
  }
  return hex;
}
function fromNumber(value, options = {}) {
  const { signed, size: size3 } = options;
  const value_ = BigInt(value);
  let maxValue;
  if (size3) {
    if (signed)
      maxValue = (1n << BigInt(size3) * 8n - 1n) - 1n;
    else
      maxValue = 2n ** (BigInt(size3) * 8n) - 1n;
  } else if (typeof value === "number") {
    maxValue = BigInt(Number.MAX_SAFE_INTEGER);
  }
  const minValue = typeof maxValue === "bigint" && signed ? -maxValue - 1n : 0;
  if (maxValue && value_ > maxValue || value_ < minValue) {
    const suffix = typeof value === "bigint" ? "n" : "";
    throw new IntegerOutOfRangeError({
      max: maxValue ? `${maxValue}${suffix}` : void 0,
      min: `${minValue}${suffix}`,
      signed,
      size: size3,
      value: `${value}${suffix}`
    });
  }
  const stringValue = (signed && value_ < 0 ? (1n << BigInt(size3 * 8)) + BigInt(value_) : value_).toString(16);
  const hex = `0x${stringValue}`;
  if (size3)
    return padLeft(hex, size3);
  return hex;
}
function fromString(value, options = {}) {
  return fromBytes(encoder.encode(value), options);
}
function padLeft(value, size3) {
  return pad2(value, { dir: "left", size: size3 });
}
function padRight(value, size3) {
  return pad2(value, { dir: "right", size: size3 });
}
function slice(value, start, end, options = {}) {
  const { strict } = options;
  assertStartOffset(value, start);
  const value_ = `0x${value.replace("0x", "").slice((start ?? 0) * 2, (end ?? value.length) * 2)}`;
  if (strict)
    assertEndOffset(value_, start, end);
  return value_;
}
function size2(value) {
  return Math.ceil((value.length - 2) / 2);
}
function trimLeft(value) {
  return trim(value, { dir: "left" });
}
function validate(value, options = {}) {
  const { strict = false } = options;
  try {
    assert(value, { strict });
    return true;
  } catch {
    return false;
  }
}
var IntegerOutOfRangeError = class extends BaseError {
  constructor({ max, min, signed, size: size3, value }) {
    super(`Number \`${value}\` is not in safe${size3 ? ` ${size3 * 8}-bit` : ""}${signed ? " signed" : " unsigned"} integer range ${max ? `(\`${min}\` to \`${max}\`)` : `(above \`${min}\`)`}`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.IntegerOutOfRangeError"
    });
  }
};
var InvalidHexTypeError = class extends BaseError {
  constructor(value) {
    super(`Value \`${typeof value === "object" ? stringify(value) : value}\` of type \`${typeof value}\` is an invalid hex type.`, {
      metaMessages: ['Hex types must be represented as `"0x${string}"`.']
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.InvalidHexTypeError"
    });
  }
};
var InvalidHexValueError = class extends BaseError {
  constructor(value) {
    super(`Value \`${value}\` is an invalid hex value.`, {
      metaMessages: [
        'Hex values must start with `"0x"` and contain only hexadecimal characters (0-9, a-f, A-F).'
      ]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.InvalidHexValueError"
    });
  }
};
var SizeOverflowError2 = class extends BaseError {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeOverflowError"
    });
  }
};
var SliceOffsetOutOfBoundsError2 = class extends BaseError {
  constructor({ offset, position, size: size3 }) {
    super(`Slice ${position === "start" ? "starting" : "ending"} at offset \`${offset}\` is out-of-bounds (size: \`${size3}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SliceOffsetOutOfBoundsError"
    });
  }
};
var SizeExceedsPaddingSizeError2 = class extends BaseError {
  constructor({ size: size3, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size3}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeExceedsPaddingSizeError"
    });
  }
};

// node_modules/ox/_esm/core/Bytes.js
var decoder = new TextDecoder();
var encoder2 = new TextEncoder();
function assert2(value) {
  if (value instanceof Uint8Array)
    return;
  if (!value)
    throw new InvalidBytesTypeError(value);
  if (typeof value !== "object")
    throw new InvalidBytesTypeError(value);
  if (!("BYTES_PER_ELEMENT" in value))
    throw new InvalidBytesTypeError(value);
  if (value.BYTES_PER_ELEMENT !== 1 || value.constructor.name !== "Uint8Array")
    throw new InvalidBytesTypeError(value);
}
function from2(value) {
  if (value instanceof Uint8Array)
    return value;
  if (typeof value === "string")
    return fromHex(value);
  return fromArray(value);
}
function fromArray(value) {
  return value instanceof Uint8Array ? value : new Uint8Array(value);
}
function fromHex(value, options = {}) {
  const { size: size3 } = options;
  let hex = value;
  if (size3) {
    assertSize2(value, size3);
    hex = padRight(value, size3);
  }
  let hexString = hex.slice(2);
  if (hexString.length % 2)
    hexString = `0${hexString}`;
  const length = hexString.length / 2;
  const bytes = new Uint8Array(length);
  for (let index = 0, j3 = 0; index < length; index++) {
    const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j3++));
    const nibbleRight = charCodeToBase16(hexString.charCodeAt(j3++));
    if (nibbleLeft === void 0 || nibbleRight === void 0) {
      throw new BaseError(`Invalid byte sequence ("${hexString[j3 - 2]}${hexString[j3 - 1]}" in "${hexString}").`);
    }
    bytes[index] = nibbleLeft * 16 + nibbleRight;
  }
  return bytes;
}
function fromString2(value, options = {}) {
  const { size: size3 } = options;
  const bytes = encoder2.encode(value);
  if (typeof size3 === "number") {
    assertSize(bytes, size3);
    return padRight2(bytes, size3);
  }
  return bytes;
}
function padRight2(value, size3) {
  return pad(value, { dir: "right", size: size3 });
}
function size(value) {
  return value.length;
}
function validate2(value) {
  try {
    assert2(value);
    return true;
  } catch {
    return false;
  }
}
var InvalidBytesTypeError = class extends BaseError {
  constructor(value) {
    super(`Value \`${typeof value === "object" ? stringify(value) : value}\` of type \`${typeof value}\` is an invalid Bytes value.`, {
      metaMessages: ["Bytes values must be of type `Bytes`."]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.InvalidBytesTypeError"
    });
  }
};
var SizeOverflowError = class extends BaseError {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeOverflowError"
    });
  }
};
var SizeExceedsPaddingSizeError = class extends BaseError {
  constructor({ size: size3, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size3}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeExceedsPaddingSizeError"
    });
  }
};

// node_modules/ox/_esm/core/Hash.js
function keccak256(value, options = {}) {
  const { as: as2 = typeof value === "string" ? "Hex" : "Bytes" } = options;
  const bytes = keccak_256(from2(value));
  if (as2 === "Bytes")
    return bytes;
  return fromBytes(bytes);
}

// node_modules/ox/_esm/core/internal/lru.js
var LruMap = class extends Map {
  constructor(size3) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size3;
  }
  get(key) {
    const value = super.get(key);
    if (super.has(key) && value !== void 0) {
      this.delete(key);
      super.set(key, value);
    }
    return value;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      const firstKey = this.keys().next().value;
      if (firstKey)
        this.delete(firstKey);
    }
    return this;
  }
};

// node_modules/ox/_esm/core/Caches.js
var caches = {
  checksum: new LruMap(8192)
};
var checksum = caches.checksum;

// node_modules/ox/_esm/core/PublicKey.js
function assert3(publicKey, options = {}) {
  const { compressed } = options;
  const { prefix, x: x3, y: y3 } = publicKey;
  if (compressed === false || typeof x3 === "bigint" && typeof y3 === "bigint") {
    if (prefix !== 4)
      throw new InvalidPrefixError({
        prefix,
        cause: new InvalidUncompressedPrefixError()
      });
    return;
  }
  if (compressed === true || typeof x3 === "bigint" && typeof y3 === "undefined") {
    if (prefix !== 3 && prefix !== 2)
      throw new InvalidPrefixError({
        prefix,
        cause: new InvalidCompressedPrefixError()
      });
    return;
  }
  throw new InvalidError({ publicKey });
}
function from3(value) {
  const publicKey = (() => {
    if (validate(value))
      return fromHex2(value);
    if (validate2(value))
      return fromBytes2(value);
    const { prefix, x: x3, y: y3 } = value;
    if (typeof x3 === "bigint" && typeof y3 === "bigint")
      return { prefix: prefix ?? 4, x: x3, y: y3 };
    return { prefix, x: x3 };
  })();
  assert3(publicKey);
  return publicKey;
}
function fromBytes2(publicKey) {
  return fromHex2(fromBytes(publicKey));
}
function fromHex2(publicKey) {
  if (publicKey.length !== 132 && publicKey.length !== 130 && publicKey.length !== 68)
    throw new InvalidSerializedSizeError({ publicKey });
  if (publicKey.length === 130) {
    const x4 = BigInt(slice(publicKey, 0, 32));
    const y3 = BigInt(slice(publicKey, 32, 64));
    return {
      prefix: 4,
      x: x4,
      y: y3
    };
  }
  if (publicKey.length === 132) {
    const prefix2 = Number(slice(publicKey, 0, 1));
    const x4 = BigInt(slice(publicKey, 1, 33));
    const y3 = BigInt(slice(publicKey, 33, 65));
    return {
      prefix: prefix2,
      x: x4,
      y: y3
    };
  }
  const prefix = Number(slice(publicKey, 0, 1));
  const x3 = BigInt(slice(publicKey, 1, 33));
  return {
    prefix,
    x: x3
  };
}
function toBytes2(publicKey, options = {}) {
  return fromHex(toHex(publicKey, options));
}
function toHex(publicKey, options = {}) {
  assert3(publicKey);
  const { prefix, x: x3, y: y3 } = publicKey;
  const { includePrefix = true } = options;
  const publicKey_ = concat(
    includePrefix ? fromNumber(prefix, { size: 1 }) : "0x",
    fromNumber(x3, { size: 32 }),
    // If the public key is not compressed, add the y coordinate.
    typeof y3 === "bigint" ? fromNumber(y3, { size: 32 }) : "0x"
  );
  return publicKey_;
}
var InvalidError = class extends BaseError {
  constructor({ publicKey }) {
    super(`Value \`${stringify(publicKey)}\` is not a valid public key.`, {
      metaMessages: [
        "Public key must contain:",
        "- an `x` and `prefix` value (compressed)",
        "- an `x`, `y`, and `prefix` value (uncompressed)"
      ]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "PublicKey.InvalidError"
    });
  }
};
var InvalidPrefixError = class extends BaseError {
  constructor({ prefix, cause }) {
    super(`Prefix "${prefix}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "PublicKey.InvalidPrefixError"
    });
  }
};
var InvalidCompressedPrefixError = class extends BaseError {
  constructor() {
    super("Prefix must be 2 or 3 for compressed public keys.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "PublicKey.InvalidCompressedPrefixError"
    });
  }
};
var InvalidUncompressedPrefixError = class extends BaseError {
  constructor() {
    super("Prefix must be 4 for uncompressed public keys.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "PublicKey.InvalidUncompressedPrefixError"
    });
  }
};
var InvalidSerializedSizeError = class extends BaseError {
  constructor({ publicKey }) {
    super(`Value \`${publicKey}\` is an invalid public key size.`, {
      metaMessages: [
        "Expected: 33 bytes (compressed + prefix), 64 bytes (uncompressed) or 65 bytes (uncompressed + prefix).",
        `Received ${size2(from(publicKey))} bytes.`
      ]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "PublicKey.InvalidSerializedSizeError"
    });
  }
};

// node_modules/ox/_esm/core/Address.js
var addressRegex = /^0x[a-fA-F0-9]{40}$/;
function assert4(value, options = {}) {
  const { strict = true } = options;
  if (!addressRegex.test(value))
    throw new InvalidAddressError({
      address: value,
      cause: new InvalidInputError()
    });
  if (strict) {
    if (value.toLowerCase() === value)
      return;
    if (checksum2(value) !== value)
      throw new InvalidAddressError({
        address: value,
        cause: new InvalidChecksumError()
      });
  }
}
function checksum2(address) {
  if (checksum.has(address))
    return checksum.get(address);
  assert4(address, { strict: false });
  const hexAddress = address.substring(2).toLowerCase();
  const hash = keccak256(fromString2(hexAddress), { as: "Bytes" });
  const characters = hexAddress.split("");
  for (let i3 = 0; i3 < 40; i3 += 2) {
    if (hash[i3 >> 1] >> 4 >= 8 && characters[i3]) {
      characters[i3] = characters[i3].toUpperCase();
    }
    if ((hash[i3 >> 1] & 15) >= 8 && characters[i3 + 1]) {
      characters[i3 + 1] = characters[i3 + 1].toUpperCase();
    }
  }
  const result = `0x${characters.join("")}`;
  checksum.set(address, result);
  return result;
}
function from4(address, options = {}) {
  const { checksum: checksumVal = false } = options;
  assert4(address);
  if (checksumVal)
    return checksum2(address);
  return address;
}
function fromPublicKey(publicKey, options = {}) {
  const address = keccak256(`0x${toHex(publicKey).slice(4)}`).substring(26);
  return from4(`0x${address}`, options);
}
function isEqual(addressA, addressB) {
  assert4(addressA, { strict: false });
  assert4(addressB, { strict: false });
  return addressA.toLowerCase() === addressB.toLowerCase();
}
var InvalidAddressError = class extends BaseError {
  constructor({ address, cause }) {
    super(`Address "${address}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidAddressError"
    });
  }
};
var InvalidInputError = class extends BaseError {
  constructor() {
    super("Address is not a 20 byte (40 hexadecimal character) value.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidInputError"
    });
  }
};
var InvalidChecksumError = class extends BaseError {
  constructor() {
    super("Address does not match its checksum counterpart.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidChecksumError"
    });
  }
};

// node_modules/ox/_esm/core/internal/abiItem.js
function normalizeSignature(signature) {
  let active = true;
  let current = "";
  let level = 0;
  let result = "";
  let valid = false;
  for (let i3 = 0; i3 < signature.length; i3++) {
    const char = signature[i3];
    if (["(", ")", ","].includes(char))
      active = true;
    if (char === "(")
      level++;
    if (char === ")")
      level--;
    if (!active)
      continue;
    if (level === 0) {
      if (char === " " && ["event", "function", "error", ""].includes(result))
        result = "";
      else {
        result += char;
        if (char === ")") {
          valid = true;
          break;
        }
      }
      continue;
    }
    if (char === " ") {
      if (signature[i3 - 1] !== "," && current !== "," && current !== ",(") {
        current = "";
        active = false;
      }
      continue;
    }
    result += char;
    current += char;
  }
  if (!valid)
    throw new BaseError("Unable to normalize signature.");
  return result;
}

// node_modules/ox/_esm/core/AbiItem.js
function from5(abiItem, options = {}) {
  const { prepare = true } = options;
  const item = (() => {
    if (Array.isArray(abiItem))
      return parseAbiItem(abiItem);
    if (typeof abiItem === "string")
      return parseAbiItem(abiItem);
    return abiItem;
  })();
  return {
    ...item,
    ...prepare ? { hash: getSignatureHash(item) } : {}
  };
}
function getSignature(abiItem) {
  const signature = (() => {
    if (typeof abiItem === "string")
      return abiItem;
    return formatAbiItem(abiItem);
  })();
  return normalizeSignature(signature);
}
function getSignatureHash(abiItem) {
  if (typeof abiItem !== "string" && "hash" in abiItem && abiItem.hash)
    return abiItem.hash;
  return keccak256(fromString(getSignature(abiItem)));
}

// node_modules/ox/_esm/core/Solidity.js
var arrayRegex = /^(.*)\[([0-9]*)\]$/;
var bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var maxInt8 = 2n ** (8n - 1n) - 1n;
var maxInt16 = 2n ** (16n - 1n) - 1n;
var maxInt24 = 2n ** (24n - 1n) - 1n;
var maxInt32 = 2n ** (32n - 1n) - 1n;
var maxInt40 = 2n ** (40n - 1n) - 1n;
var maxInt48 = 2n ** (48n - 1n) - 1n;
var maxInt56 = 2n ** (56n - 1n) - 1n;
var maxInt64 = 2n ** (64n - 1n) - 1n;
var maxInt72 = 2n ** (72n - 1n) - 1n;
var maxInt80 = 2n ** (80n - 1n) - 1n;
var maxInt88 = 2n ** (88n - 1n) - 1n;
var maxInt96 = 2n ** (96n - 1n) - 1n;
var maxInt104 = 2n ** (104n - 1n) - 1n;
var maxInt112 = 2n ** (112n - 1n) - 1n;
var maxInt120 = 2n ** (120n - 1n) - 1n;
var maxInt128 = 2n ** (128n - 1n) - 1n;
var maxInt136 = 2n ** (136n - 1n) - 1n;
var maxInt144 = 2n ** (144n - 1n) - 1n;
var maxInt152 = 2n ** (152n - 1n) - 1n;
var maxInt160 = 2n ** (160n - 1n) - 1n;
var maxInt168 = 2n ** (168n - 1n) - 1n;
var maxInt176 = 2n ** (176n - 1n) - 1n;
var maxInt184 = 2n ** (184n - 1n) - 1n;
var maxInt192 = 2n ** (192n - 1n) - 1n;
var maxInt200 = 2n ** (200n - 1n) - 1n;
var maxInt208 = 2n ** (208n - 1n) - 1n;
var maxInt216 = 2n ** (216n - 1n) - 1n;
var maxInt224 = 2n ** (224n - 1n) - 1n;
var maxInt232 = 2n ** (232n - 1n) - 1n;
var maxInt240 = 2n ** (240n - 1n) - 1n;
var maxInt248 = 2n ** (248n - 1n) - 1n;
var maxInt256 = 2n ** (256n - 1n) - 1n;
var minInt8 = -(2n ** (8n - 1n));
var minInt16 = -(2n ** (16n - 1n));
var minInt24 = -(2n ** (24n - 1n));
var minInt32 = -(2n ** (32n - 1n));
var minInt40 = -(2n ** (40n - 1n));
var minInt48 = -(2n ** (48n - 1n));
var minInt56 = -(2n ** (56n - 1n));
var minInt64 = -(2n ** (64n - 1n));
var minInt72 = -(2n ** (72n - 1n));
var minInt80 = -(2n ** (80n - 1n));
var minInt88 = -(2n ** (88n - 1n));
var minInt96 = -(2n ** (96n - 1n));
var minInt104 = -(2n ** (104n - 1n));
var minInt112 = -(2n ** (112n - 1n));
var minInt120 = -(2n ** (120n - 1n));
var minInt128 = -(2n ** (128n - 1n));
var minInt136 = -(2n ** (136n - 1n));
var minInt144 = -(2n ** (144n - 1n));
var minInt152 = -(2n ** (152n - 1n));
var minInt160 = -(2n ** (160n - 1n));
var minInt168 = -(2n ** (168n - 1n));
var minInt176 = -(2n ** (176n - 1n));
var minInt184 = -(2n ** (184n - 1n));
var minInt192 = -(2n ** (192n - 1n));
var minInt200 = -(2n ** (200n - 1n));
var minInt208 = -(2n ** (208n - 1n));
var minInt216 = -(2n ** (216n - 1n));
var minInt224 = -(2n ** (224n - 1n));
var minInt232 = -(2n ** (232n - 1n));
var minInt240 = -(2n ** (240n - 1n));
var minInt248 = -(2n ** (248n - 1n));
var minInt256 = -(2n ** (256n - 1n));
var maxUint8 = 2n ** 8n - 1n;
var maxUint16 = 2n ** 16n - 1n;
var maxUint24 = 2n ** 24n - 1n;
var maxUint32 = 2n ** 32n - 1n;
var maxUint40 = 2n ** 40n - 1n;
var maxUint48 = 2n ** 48n - 1n;
var maxUint56 = 2n ** 56n - 1n;
var maxUint64 = 2n ** 64n - 1n;
var maxUint72 = 2n ** 72n - 1n;
var maxUint80 = 2n ** 80n - 1n;
var maxUint88 = 2n ** 88n - 1n;
var maxUint96 = 2n ** 96n - 1n;
var maxUint104 = 2n ** 104n - 1n;
var maxUint112 = 2n ** 112n - 1n;
var maxUint120 = 2n ** 120n - 1n;
var maxUint128 = 2n ** 128n - 1n;
var maxUint136 = 2n ** 136n - 1n;
var maxUint144 = 2n ** 144n - 1n;
var maxUint152 = 2n ** 152n - 1n;
var maxUint160 = 2n ** 160n - 1n;
var maxUint168 = 2n ** 168n - 1n;
var maxUint176 = 2n ** 176n - 1n;
var maxUint184 = 2n ** 184n - 1n;
var maxUint192 = 2n ** 192n - 1n;
var maxUint200 = 2n ** 200n - 1n;
var maxUint208 = 2n ** 208n - 1n;
var maxUint216 = 2n ** 216n - 1n;
var maxUint224 = 2n ** 224n - 1n;
var maxUint232 = 2n ** 232n - 1n;
var maxUint240 = 2n ** 240n - 1n;
var maxUint248 = 2n ** 248n - 1n;
var maxUint256 = 2n ** 256n - 1n;

// node_modules/ox/_esm/core/internal/cursor.js
var staticCursor = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new RecursiveReadLimitExceededError({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(position) {
    if (position < 0 || position > this.bytes.length - 1)
      throw new PositionOutOfBoundsError({
        length: this.bytes.length,
        position
      });
  },
  decrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position - offset;
    this.assertPosition(position);
    this.position = position;
  },
  getReadCount(position) {
    return this.positionReadCount.get(position || this.position) || 0;
  },
  incrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position + offset;
    this.assertPosition(position);
    this.position = position;
  },
  inspectByte(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectBytes(length, position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + length - 1);
    return this.bytes.subarray(position, position + length);
  },
  inspectUint8(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectUint16(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 1);
    return this.dataView.getUint16(position);
  },
  inspectUint24(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 2);
    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
  },
  inspectUint32(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 3);
    return this.dataView.getUint32(position);
  },
  pushByte(byte) {
    this.assertPosition(this.position);
    this.bytes[this.position] = byte;
    this.position++;
  },
  pushBytes(bytes) {
    this.assertPosition(this.position + bytes.length - 1);
    this.bytes.set(bytes, this.position);
    this.position += bytes.length;
  },
  pushUint8(value) {
    this.assertPosition(this.position);
    this.bytes[this.position] = value;
    this.position++;
  },
  pushUint16(value) {
    this.assertPosition(this.position + 1);
    this.dataView.setUint16(this.position, value);
    this.position += 2;
  },
  pushUint24(value) {
    this.assertPosition(this.position + 2);
    this.dataView.setUint16(this.position, value >> 8);
    this.dataView.setUint8(this.position + 2, value & ~4294967040);
    this.position += 3;
  },
  pushUint32(value) {
    this.assertPosition(this.position + 3);
    this.dataView.setUint32(this.position, value);
    this.position += 4;
  },
  readByte() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectByte();
    this.position++;
    return value;
  },
  readBytes(length, size3) {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectBytes(length);
    this.position += size3 ?? length;
    return value;
  },
  readUint8() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint8();
    this.position += 1;
    return value;
  },
  readUint16() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint16();
    this.position += 2;
    return value;
  },
  readUint24() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint24();
    this.position += 3;
    return value;
  },
  readUint32() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint32();
    this.position += 4;
    return value;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(position) {
    const oldPosition = this.position;
    this.assertPosition(position);
    this.position = position;
    return () => this.position = oldPosition;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const count = this.getReadCount();
    this.positionReadCount.set(this.position, count + 1);
    if (count > 0)
      this.recursiveReadCount++;
  }
};
var NegativeOffsetError = class extends BaseError {
  constructor({ offset }) {
    super(`Offset \`${offset}\` cannot be negative.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.NegativeOffsetError"
    });
  }
};
var PositionOutOfBoundsError = class extends BaseError {
  constructor({ length, position }) {
    super(`Position \`${position}\` is out of bounds (\`0 < position < ${length}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.PositionOutOfBoundsError"
    });
  }
};
var RecursiveReadLimitExceededError = class extends BaseError {
  constructor({ count, limit: limit2 }) {
    super(`Recursive read limit of \`${limit2}\` exceeded (recursive read count: \`${count}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.RecursiveReadLimitExceededError"
    });
  }
};

// node_modules/ox/_esm/core/AbiParameters.js
function encodePacked(types, values) {
  if (types.length !== values.length)
    throw new LengthMismatchError({
      expectedLength: types.length,
      givenLength: values.length
    });
  const data = [];
  for (let i3 = 0; i3 < types.length; i3++) {
    const type = types[i3];
    const value = values[i3];
    data.push(encodePacked.encode(type, value));
  }
  return concat(...data);
}
(function(encodePacked2) {
  function encode4(type, value, isArray = false) {
    if (type === "address") {
      const address = value;
      assert4(address);
      return padLeft(address.toLowerCase(), isArray ? 32 : 0);
    }
    if (type === "string")
      return fromString(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return padLeft(fromBoolean(value), isArray ? 32 : 1);
    const intMatch = type.match(integerRegex);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size3 = Number.parseInt(bits, 10) / 8;
      return fromNumber(value, {
        size: isArray ? 32 : size3,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex);
    if (bytesMatch) {
      const [_type, size3] = bytesMatch;
      if (Number.parseInt(size3, 10) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError({
          expectedSize: Number.parseInt(size3, 10),
          value
        });
      return padRight(value, isArray ? 32 : 0);
    }
    const arrayMatch = type.match(arrayRegex);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i3 = 0; i3 < value.length; i3++) {
        data.push(encode4(childType, value[i3], true));
      }
      if (data.length === 0)
        return "0x";
      return concat(...data);
    }
    throw new InvalidTypeError(type);
  }
  encodePacked2.encode = encode4;
})(encodePacked || (encodePacked = {}));
var BytesSizeMismatchError = class extends BaseError {
  constructor({ expectedSize, value }) {
    super(`Size of bytes "${value}" (bytes${size2(value)}) does not match expected size (bytes${expectedSize}).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.BytesSizeMismatchError"
    });
  }
};
var LengthMismatchError = class extends BaseError {
  constructor({ expectedLength, givenLength }) {
    super([
      "ABI encoding parameters/values length mismatch.",
      `Expected length (parameters): ${expectedLength}`,
      `Given length (values): ${givenLength}`
    ].join("\n"));
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.LengthMismatchError"
    });
  }
};
var InvalidTypeError = class extends BaseError {
  constructor(type) {
    super(`Type \`${type}\` is not a valid ABI Type.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidTypeError"
    });
  }
};

// node_modules/ox/_esm/core/AbiError.js
function from6(abiError, options = {}) {
  return from5(abiError, options);
}
var solidityError = from6({
  inputs: [
    {
      name: "message",
      type: "string"
    }
  ],
  name: "Error",
  type: "error"
});
var solidityPanic = from6({
  inputs: [
    {
      name: "reason",
      type: "uint8"
    }
  ],
  name: "Panic",
  type: "error"
});

// node_modules/ox/_esm/core/Signature.js
var Signature_exports = {};
__export(Signature_exports, {
  InvalidRError: () => InvalidRError,
  InvalidSError: () => InvalidSError,
  InvalidSerializedSizeError: () => InvalidSerializedSizeError2,
  InvalidVError: () => InvalidVError,
  InvalidYParityError: () => InvalidYParityError,
  MissingPropertiesError: () => MissingPropertiesError,
  assert: () => assert5,
  extract: () => extract,
  from: () => from7,
  fromBytes: () => fromBytes3,
  fromDerBytes: () => fromDerBytes,
  fromDerHex: () => fromDerHex,
  fromHex: () => fromHex3,
  fromLegacy: () => fromLegacy,
  fromRpc: () => fromRpc,
  fromTuple: () => fromTuple,
  toBytes: () => toBytes3,
  toDerBytes: () => toDerBytes,
  toDerHex: () => toDerHex,
  toHex: () => toHex2,
  toLegacy: () => toLegacy,
  toRpc: () => toRpc,
  toTuple: () => toTuple,
  vToYParity: () => vToYParity,
  validate: () => validate5,
  yParityToV: () => yParityToV
});

// node_modules/ox/node_modules/@noble/curves/esm/abstract/modular.js
var _0n2 = BigInt(0);
var _1n2 = BigInt(1);
var _2n = BigInt(2);
var _3n = BigInt(3);
var _4n = BigInt(4);
var _5n = BigInt(5);
var _8n = BigInt(8);
function mod(a2, b3) {
  const result = a2 % b3;
  return result >= _0n2 ? result : b3 + result;
}
function pow2(x3, power, modulo) {
  let res = x3;
  while (power-- > _0n2) {
    res *= res;
    res %= modulo;
  }
  return res;
}
function invert(number, modulo) {
  if (number === _0n2)
    throw new Error("invert: expected non-zero number");
  if (modulo <= _0n2)
    throw new Error("invert: expected positive modulus, got " + modulo);
  let a2 = mod(number, modulo);
  let b3 = modulo;
  let x3 = _0n2, y3 = _1n2, u2 = _1n2, v4 = _0n2;
  while (a2 !== _0n2) {
    const q2 = b3 / a2;
    const r2 = b3 % a2;
    const m3 = x3 - u2 * q2;
    const n2 = y3 - v4 * q2;
    b3 = a2, a2 = r2, x3 = u2, y3 = v4, u2 = m3, v4 = n2;
  }
  const gcd = b3;
  if (gcd !== _1n2)
    throw new Error("invert: does not exist");
  return mod(x3, modulo);
}
function sqrt3mod4(Fp4, n2) {
  const p1div4 = (Fp4.ORDER + _1n2) / _4n;
  const root = Fp4.pow(n2, p1div4);
  if (!Fp4.eql(Fp4.sqr(root), n2))
    throw new Error("Cannot find square root");
  return root;
}
function sqrt5mod8(Fp4, n2) {
  const p5div8 = (Fp4.ORDER - _5n) / _8n;
  const n22 = Fp4.mul(n2, _2n);
  const v4 = Fp4.pow(n22, p5div8);
  const nv = Fp4.mul(n2, v4);
  const i3 = Fp4.mul(Fp4.mul(nv, _2n), v4);
  const root = Fp4.mul(nv, Fp4.sub(i3, Fp4.ONE));
  if (!Fp4.eql(Fp4.sqr(root), n2))
    throw new Error("Cannot find square root");
  return root;
}
function tonelliShanks(P4) {
  if (P4 < BigInt(3))
    throw new Error("sqrt is not defined for small field");
  let Q3 = P4 - _1n2;
  let S4 = 0;
  while (Q3 % _2n === _0n2) {
    Q3 /= _2n;
    S4++;
  }
  let Z2 = _2n;
  const _Fp = Field(P4);
  while (FpLegendre(_Fp, Z2) === 1) {
    if (Z2++ > 1e3)
      throw new Error("Cannot find square root: probably non-prime P");
  }
  if (S4 === 1)
    return sqrt3mod4;
  let cc2 = _Fp.pow(Z2, Q3);
  const Q1div2 = (Q3 + _1n2) / _2n;
  return function tonelliSlow(Fp4, n2) {
    if (Fp4.is0(n2))
      return n2;
    if (FpLegendre(Fp4, n2) !== 1)
      throw new Error("Cannot find square root");
    let M4 = S4;
    let c3 = Fp4.mul(Fp4.ONE, cc2);
    let t = Fp4.pow(n2, Q3);
    let R4 = Fp4.pow(n2, Q1div2);
    while (!Fp4.eql(t, Fp4.ONE)) {
      if (Fp4.is0(t))
        return Fp4.ZERO;
      let i3 = 1;
      let t_tmp = Fp4.sqr(t);
      while (!Fp4.eql(t_tmp, Fp4.ONE)) {
        i3++;
        t_tmp = Fp4.sqr(t_tmp);
        if (i3 === M4)
          throw new Error("Cannot find square root");
      }
      const exponent = _1n2 << BigInt(M4 - i3 - 1);
      const b3 = Fp4.pow(c3, exponent);
      M4 = i3;
      c3 = Fp4.sqr(b3);
      t = Fp4.mul(t, c3);
      R4 = Fp4.mul(R4, b3);
    }
    return R4;
  };
}
function FpSqrt(P4) {
  if (P4 % _4n === _3n)
    return sqrt3mod4;
  if (P4 % _8n === _5n)
    return sqrt5mod8;
  return tonelliShanks(P4);
}
var isNegativeLE = (num2, modulo) => (mod(num2, modulo) & _1n2) === _1n2;
var FIELD_FIELDS = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField(field) {
  const initial = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  };
  const opts = FIELD_FIELDS.reduce((map, val) => {
    map[val] = "function";
    return map;
  }, initial);
  return validateObject(field, opts);
}
function FpPow(Fp4, num2, power) {
  if (power < _0n2)
    throw new Error("invalid exponent, negatives unsupported");
  if (power === _0n2)
    return Fp4.ONE;
  if (power === _1n2)
    return num2;
  let p3 = Fp4.ONE;
  let d4 = num2;
  while (power > _0n2) {
    if (power & _1n2)
      p3 = Fp4.mul(p3, d4);
    d4 = Fp4.sqr(d4);
    power >>= _1n2;
  }
  return p3;
}
function FpInvertBatch(Fp4, nums, passZero = false) {
  const inverted = new Array(nums.length).fill(passZero ? Fp4.ZERO : void 0);
  const multipliedAcc = nums.reduce((acc, num2, i3) => {
    if (Fp4.is0(num2))
      return acc;
    inverted[i3] = acc;
    return Fp4.mul(acc, num2);
  }, Fp4.ONE);
  const invertedAcc = Fp4.inv(multipliedAcc);
  nums.reduceRight((acc, num2, i3) => {
    if (Fp4.is0(num2))
      return acc;
    inverted[i3] = Fp4.mul(acc, inverted[i3]);
    return Fp4.mul(acc, num2);
  }, invertedAcc);
  return inverted;
}
function FpLegendre(Fp4, n2) {
  const p1mod2 = (Fp4.ORDER - _1n2) / _2n;
  const powered = Fp4.pow(n2, p1mod2);
  const yes = Fp4.eql(powered, Fp4.ONE);
  const zero = Fp4.eql(powered, Fp4.ZERO);
  const no2 = Fp4.eql(powered, Fp4.neg(Fp4.ONE));
  if (!yes && !zero && !no2)
    throw new Error("invalid Legendre symbol result");
  return yes ? 1 : zero ? 0 : -1;
}
function nLength(n2, nBitLength) {
  if (nBitLength !== void 0)
    anumber(nBitLength);
  const _nBitLength = nBitLength !== void 0 ? nBitLength : n2.toString(2).length;
  const nByteLength = Math.ceil(_nBitLength / 8);
  return { nBitLength: _nBitLength, nByteLength };
}
function Field(ORDER, bitLen2, isLE2 = false, redef = {}) {
  if (ORDER <= _0n2)
    throw new Error("invalid field: expected ORDER > 0, got " + ORDER);
  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen2);
  if (BYTES > 2048)
    throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let sqrtP;
  const f6 = Object.freeze({
    ORDER,
    isLE: isLE2,
    BITS,
    BYTES,
    MASK: bitMask(BITS),
    ZERO: _0n2,
    ONE: _1n2,
    create: (num2) => mod(num2, ORDER),
    isValid: (num2) => {
      if (typeof num2 !== "bigint")
        throw new Error("invalid field element: expected bigint, got " + typeof num2);
      return _0n2 <= num2 && num2 < ORDER;
    },
    is0: (num2) => num2 === _0n2,
    isOdd: (num2) => (num2 & _1n2) === _1n2,
    neg: (num2) => mod(-num2, ORDER),
    eql: (lhs, rhs) => lhs === rhs,
    sqr: (num2) => mod(num2 * num2, ORDER),
    add: (lhs, rhs) => mod(lhs + rhs, ORDER),
    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
    pow: (num2, power) => FpPow(f6, num2, power),
    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
    // Same as above, but doesn't normalize
    sqrN: (num2) => num2 * num2,
    addN: (lhs, rhs) => lhs + rhs,
    subN: (lhs, rhs) => lhs - rhs,
    mulN: (lhs, rhs) => lhs * rhs,
    inv: (num2) => invert(num2, ORDER),
    sqrt: redef.sqrt || ((n2) => {
      if (!sqrtP)
        sqrtP = FpSqrt(ORDER);
      return sqrtP(f6, n2);
    }),
    toBytes: (num2) => isLE2 ? numberToBytesLE(num2, BYTES) : numberToBytesBE(num2, BYTES),
    fromBytes: (bytes) => {
      if (bytes.length !== BYTES)
        throw new Error("Field.fromBytes: expected " + BYTES + " bytes, got " + bytes.length);
      return isLE2 ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);
    },
    // TODO: we don't need it here, move out to separate fn
    invertBatch: (lst) => FpInvertBatch(f6, lst),
    // We can't move this out because Fp6, Fp12 implement it
    // and it's unclear what to return in there.
    cmov: (a2, b3, c3) => c3 ? b3 : a2
  });
  return Object.freeze(f6);
}
function FpSqrtEven(Fp4, elm) {
  if (!Fp4.isOdd)
    throw new Error("Field doesn't have isOdd");
  const root = Fp4.sqrt(elm);
  return Fp4.isOdd(root) ? Fp4.neg(root) : root;
}
function getFieldBytesLength(fieldOrder) {
  if (typeof fieldOrder !== "bigint")
    throw new Error("field order must be bigint");
  const bitLength = fieldOrder.toString(2).length;
  return Math.ceil(bitLength / 8);
}
function getMinHashLength(fieldOrder) {
  const length = getFieldBytesLength(fieldOrder);
  return length + Math.ceil(length / 2);
}
function mapHashToField(key, fieldOrder, isLE2 = false) {
  const len = key.length;
  const fieldLen = getFieldBytesLength(fieldOrder);
  const minLen = getMinHashLength(fieldOrder);
  if (len < 16 || len < minLen || len > 1024)
    throw new Error("expected " + minLen + "-1024 bytes of input, got " + len);
  const num2 = isLE2 ? bytesToNumberLE(key) : bytesToNumberBE(key);
  const reduced = mod(num2, fieldOrder - _1n2) + _1n2;
  return isLE2 ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
}

// node_modules/ox/node_modules/@noble/curves/esm/abstract/curve.js
var _0n3 = BigInt(0);
var _1n3 = BigInt(1);
function constTimeNegate(condition, item) {
  const neg = item.negate();
  return condition ? neg : item;
}
function validateW(W5, bits) {
  if (!Number.isSafeInteger(W5) || W5 <= 0 || W5 > bits)
    throw new Error("invalid window size, expected [1.." + bits + "], got W=" + W5);
}
function calcWOpts(W5, scalarBits) {
  validateW(W5, scalarBits);
  const windows = Math.ceil(scalarBits / W5) + 1;
  const windowSize = 2 ** (W5 - 1);
  const maxNumber = 2 ** W5;
  const mask = bitMask(W5);
  const shiftBy = BigInt(W5);
  return { windows, windowSize, mask, maxNumber, shiftBy };
}
function calcOffsets(n2, window2, wOpts) {
  const { windowSize, mask, maxNumber, shiftBy } = wOpts;
  let wbits = Number(n2 & mask);
  let nextN = n2 >> shiftBy;
  if (wbits > windowSize) {
    wbits -= maxNumber;
    nextN += _1n3;
  }
  const offsetStart = window2 * windowSize;
  const offset = offsetStart + Math.abs(wbits) - 1;
  const isZero = wbits === 0;
  const isNeg = wbits < 0;
  const isNegF = window2 % 2 !== 0;
  const offsetF = offsetStart;
  return { nextN, offset, isZero, isNeg, isNegF, offsetF };
}
function validateMSMPoints(points, c3) {
  if (!Array.isArray(points))
    throw new Error("array expected");
  points.forEach((p3, i3) => {
    if (!(p3 instanceof c3))
      throw new Error("invalid point at index " + i3);
  });
}
function validateMSMScalars(scalars, field) {
  if (!Array.isArray(scalars))
    throw new Error("array of scalars expected");
  scalars.forEach((s, i3) => {
    if (!field.isValid(s))
      throw new Error("invalid scalar at index " + i3);
  });
}
var pointPrecomputes = /* @__PURE__ */ new WeakMap();
var pointWindowSizes = /* @__PURE__ */ new WeakMap();
function getW(P4) {
  return pointWindowSizes.get(P4) || 1;
}
function wNAF(c3, bits) {
  return {
    constTimeNegate,
    hasPrecomputes(elm) {
      return getW(elm) !== 1;
    },
    // non-const time multiplication ladder
    unsafeLadder(elm, n2, p3 = c3.ZERO) {
      let d4 = elm;
      while (n2 > _0n3) {
        if (n2 & _1n3)
          p3 = p3.add(d4);
        d4 = d4.double();
        n2 >>= _1n3;
      }
      return p3;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @param elm Point instance
     * @param W window size
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(elm, W5) {
      const { windows, windowSize } = calcWOpts(W5, bits);
      const points = [];
      let p3 = elm;
      let base = p3;
      for (let window2 = 0; window2 < windows; window2++) {
        base = p3;
        points.push(base);
        for (let i3 = 1; i3 < windowSize; i3++) {
          base = base.add(p3);
          points.push(base);
        }
        p3 = base.double();
      }
      return points;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(W5, precomputes, n2) {
      let p3 = c3.ZERO;
      let f6 = c3.BASE;
      const wo3 = calcWOpts(W5, bits);
      for (let window2 = 0; window2 < wo3.windows; window2++) {
        const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n2, window2, wo3);
        n2 = nextN;
        if (isZero) {
          f6 = f6.add(constTimeNegate(isNegF, precomputes[offsetF]));
        } else {
          p3 = p3.add(constTimeNegate(isNeg, precomputes[offset]));
        }
      }
      return { p: p3, f: f6 };
    },
    /**
     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @param acc accumulator point to add result of multiplication
     * @returns point
     */
    wNAFUnsafe(W5, precomputes, n2, acc = c3.ZERO) {
      const wo3 = calcWOpts(W5, bits);
      for (let window2 = 0; window2 < wo3.windows; window2++) {
        if (n2 === _0n3)
          break;
        const { nextN, offset, isZero, isNeg } = calcOffsets(n2, window2, wo3);
        n2 = nextN;
        if (isZero) {
          continue;
        } else {
          const item = precomputes[offset];
          acc = acc.add(isNeg ? item.negate() : item);
        }
      }
      return acc;
    },
    getPrecomputes(W5, P4, transform) {
      let comp = pointPrecomputes.get(P4);
      if (!comp) {
        comp = this.precomputeWindow(P4, W5);
        if (W5 !== 1)
          pointPrecomputes.set(P4, transform(comp));
      }
      return comp;
    },
    wNAFCached(P4, n2, transform) {
      const W5 = getW(P4);
      return this.wNAF(W5, this.getPrecomputes(W5, P4, transform), n2);
    },
    wNAFCachedUnsafe(P4, n2, transform, prev) {
      const W5 = getW(P4);
      if (W5 === 1)
        return this.unsafeLadder(P4, n2, prev);
      return this.wNAFUnsafe(W5, this.getPrecomputes(W5, P4, transform), n2, prev);
    },
    // We calculate precomputes for elliptic curve point multiplication
    // using windowed method. This specifies window size and
    // stores precomputed values. Usually only base point would be precomputed.
    setWindowSize(P4, W5) {
      validateW(W5, bits);
      pointWindowSizes.set(P4, W5);
      pointPrecomputes.delete(P4);
    }
  };
}
function pippenger(c3, fieldN, points, scalars) {
  validateMSMPoints(points, c3);
  validateMSMScalars(scalars, fieldN);
  const plength = points.length;
  const slength = scalars.length;
  if (plength !== slength)
    throw new Error("arrays of points and scalars must have equal length");
  const zero = c3.ZERO;
  const wbits = bitLen(BigInt(plength));
  let windowSize = 1;
  if (wbits > 12)
    windowSize = wbits - 3;
  else if (wbits > 4)
    windowSize = wbits - 2;
  else if (wbits > 0)
    windowSize = 2;
  const MASK = bitMask(windowSize);
  const buckets = new Array(Number(MASK) + 1).fill(zero);
  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;
  let sum = zero;
  for (let i3 = lastBits; i3 >= 0; i3 -= windowSize) {
    buckets.fill(zero);
    for (let j3 = 0; j3 < slength; j3++) {
      const scalar = scalars[j3];
      const wbits2 = Number(scalar >> BigInt(i3) & MASK);
      buckets[wbits2] = buckets[wbits2].add(points[j3]);
    }
    let resI = zero;
    for (let j3 = buckets.length - 1, sumI = zero; j3 > 0; j3--) {
      sumI = sumI.add(buckets[j3]);
      resI = resI.add(sumI);
    }
    sum = sum.add(resI);
    if (i3 !== 0)
      for (let j3 = 0; j3 < windowSize; j3++)
        sum = sum.double();
  }
  return sum;
}
function validateBasic(curve) {
  validateField(curve.Fp);
  validateObject(curve, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  });
  return Object.freeze({
    ...nLength(curve.n, curve.nBitLength),
    ...curve,
    ...{ p: curve.Fp.ORDER }
  });
}

// node_modules/ox/node_modules/@noble/curves/esm/abstract/weierstrass.js
function validateSigVerOpts(opts) {
  if (opts.lowS !== void 0)
    abool("lowS", opts.lowS);
  if (opts.prehash !== void 0)
    abool("prehash", opts.prehash);
}
function validatePointOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    a: "field",
    b: "field"
  }, {
    allowInfinityPoint: "boolean",
    allowedPrivateKeyLengths: "array",
    clearCofactor: "function",
    fromBytes: "function",
    isTorsionFree: "function",
    toBytes: "function",
    wrapPrivateKey: "boolean"
  });
  const { endo, Fp: Fp4, a: a2 } = opts;
  if (endo) {
    if (!Fp4.eql(a2, Fp4.ZERO)) {
      throw new Error("invalid endo: CURVE.a must be 0");
    }
    if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
      throw new Error('invalid endo: expected "beta": bigint and "splitScalar": function');
    }
  }
  return Object.freeze({ ...opts });
}
var DERErr = class extends Error {
  constructor(m3 = "") {
    super(m3);
  }
};
var DER = {
  // asn.1 DER encoding utils
  Err: DERErr,
  // Basic building block is TLV (Tag-Length-Value)
  _tlv: {
    encode: (tag, data) => {
      const { Err: E2 } = DER;
      if (tag < 0 || tag > 256)
        throw new E2("tlv.encode: wrong tag");
      if (data.length & 1)
        throw new E2("tlv.encode: unpadded data");
      const dataLen = data.length / 2;
      const len = numberToHexUnpadded(dataLen);
      if (len.length / 2 & 128)
        throw new E2("tlv.encode: long form length too big");
      const lenLen = dataLen > 127 ? numberToHexUnpadded(len.length / 2 | 128) : "";
      const t = numberToHexUnpadded(tag);
      return t + lenLen + len + data;
    },
    // v - value, l - left bytes (unparsed)
    decode(tag, data) {
      const { Err: E2 } = DER;
      let pos = 0;
      if (tag < 0 || tag > 256)
        throw new E2("tlv.encode: wrong tag");
      if (data.length < 2 || data[pos++] !== tag)
        throw new E2("tlv.decode: wrong tlv");
      const first = data[pos++];
      const isLong = !!(first & 128);
      let length = 0;
      if (!isLong)
        length = first;
      else {
        const lenLen = first & 127;
        if (!lenLen)
          throw new E2("tlv.decode(long): indefinite length not supported");
        if (lenLen > 4)
          throw new E2("tlv.decode(long): byte length is too big");
        const lengthBytes = data.subarray(pos, pos + lenLen);
        if (lengthBytes.length !== lenLen)
          throw new E2("tlv.decode: length bytes not complete");
        if (lengthBytes[0] === 0)
          throw new E2("tlv.decode(long): zero leftmost byte");
        for (const b3 of lengthBytes)
          length = length << 8 | b3;
        pos += lenLen;
        if (length < 128)
          throw new E2("tlv.decode(long): not minimal encoding");
      }
      const v4 = data.subarray(pos, pos + length);
      if (v4.length !== length)
        throw new E2("tlv.decode: wrong value length");
      return { v: v4, l: data.subarray(pos + length) };
    }
  },
  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
  // since we always use positive integers here. It must always be empty:
  // - add zero byte if exists
  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
  _int: {
    encode(num2) {
      const { Err: E2 } = DER;
      if (num2 < _0n4)
        throw new E2("integer: negative integers are not allowed");
      let hex = numberToHexUnpadded(num2);
      if (Number.parseInt(hex[0], 16) & 8)
        hex = "00" + hex;
      if (hex.length & 1)
        throw new E2("unexpected DER parsing assertion: unpadded hex");
      return hex;
    },
    decode(data) {
      const { Err: E2 } = DER;
      if (data[0] & 128)
        throw new E2("invalid signature integer: negative");
      if (data[0] === 0 && !(data[1] & 128))
        throw new E2("invalid signature integer: unnecessary leading zero");
      return bytesToNumberBE(data);
    }
  },
  toSig(hex) {
    const { Err: E2, _int: int, _tlv: tlv } = DER;
    const data = ensureBytes("signature", hex);
    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(48, data);
    if (seqLeftBytes.length)
      throw new E2("invalid signature: left bytes after parsing");
    const { v: rBytes, l: rLeftBytes } = tlv.decode(2, seqBytes);
    const { v: sBytes, l: sLeftBytes } = tlv.decode(2, rLeftBytes);
    if (sLeftBytes.length)
      throw new E2("invalid signature: left bytes after parsing");
    return { r: int.decode(rBytes), s: int.decode(sBytes) };
  },
  hexFromSig(sig) {
    const { _tlv: tlv, _int: int } = DER;
    const rs2 = tlv.encode(2, int.encode(sig.r));
    const ss3 = tlv.encode(2, int.encode(sig.s));
    const seq = rs2 + ss3;
    return tlv.encode(48, seq);
  }
};
function numToSizedHex(num2, size3) {
  return bytesToHex(numberToBytesBE(num2, size3));
}
var _0n4 = BigInt(0);
var _1n4 = BigInt(1);
var _2n2 = BigInt(2);
var _3n2 = BigInt(3);
var _4n2 = BigInt(4);
function weierstrassPoints(opts) {
  const CURVE = validatePointOpts(opts);
  const { Fp: Fp4 } = CURVE;
  const Fn3 = Field(CURVE.n, CURVE.nBitLength);
  const toBytes7 = CURVE.toBytes || ((_c2, point, _isCompressed) => {
    const a2 = point.toAffine();
    return concatBytes2(Uint8Array.from([4]), Fp4.toBytes(a2.x), Fp4.toBytes(a2.y));
  });
  const fromBytes5 = CURVE.fromBytes || ((bytes) => {
    const tail = bytes.subarray(1);
    const x3 = Fp4.fromBytes(tail.subarray(0, Fp4.BYTES));
    const y3 = Fp4.fromBytes(tail.subarray(Fp4.BYTES, 2 * Fp4.BYTES));
    return { x: x3, y: y3 };
  });
  function weierstrassEquation(x3) {
    const { a: a2, b: b3 } = CURVE;
    const x22 = Fp4.sqr(x3);
    const x32 = Fp4.mul(x22, x3);
    return Fp4.add(Fp4.add(x32, Fp4.mul(x3, a2)), b3);
  }
  function isValidXY(x3, y3) {
    const left = Fp4.sqr(y3);
    const right = weierstrassEquation(x3);
    return Fp4.eql(left, right);
  }
  if (!isValidXY(CURVE.Gx, CURVE.Gy))
    throw new Error("bad curve params: generator point");
  const _4a3 = Fp4.mul(Fp4.pow(CURVE.a, _3n2), _4n2);
  const _27b2 = Fp4.mul(Fp4.sqr(CURVE.b), BigInt(27));
  if (Fp4.is0(Fp4.add(_4a3, _27b2)))
    throw new Error("bad curve params: a or b");
  function isWithinCurveOrder(num2) {
    return inRange(num2, _1n4, CURVE.n);
  }
  function normPrivateKeyToScalar(key) {
    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N3 } = CURVE;
    if (lengths && typeof key !== "bigint") {
      if (isBytes(key))
        key = bytesToHex(key);
      if (typeof key !== "string" || !lengths.includes(key.length))
        throw new Error("invalid private key");
      key = key.padStart(nByteLength * 2, "0");
    }
    let num2;
    try {
      num2 = typeof key === "bigint" ? key : bytesToNumberBE(ensureBytes("private key", key, nByteLength));
    } catch (error) {
      throw new Error("invalid private key, expected hex or " + nByteLength + " bytes, got " + typeof key);
    }
    if (wrapPrivateKey)
      num2 = mod(num2, N3);
    aInRange("private key", num2, _1n4, N3);
    return num2;
  }
  function aprjpoint(other) {
    if (!(other instanceof Point2))
      throw new Error("ProjectivePoint expected");
  }
  const toAffineMemo = memoized((p3, iz) => {
    const { px: x3, py: y3, pz: z4 } = p3;
    if (Fp4.eql(z4, Fp4.ONE))
      return { x: x3, y: y3 };
    const is0 = p3.is0();
    if (iz == null)
      iz = is0 ? Fp4.ONE : Fp4.inv(z4);
    const ax = Fp4.mul(x3, iz);
    const ay = Fp4.mul(y3, iz);
    const zz = Fp4.mul(z4, iz);
    if (is0)
      return { x: Fp4.ZERO, y: Fp4.ZERO };
    if (!Fp4.eql(zz, Fp4.ONE))
      throw new Error("invZ was invalid");
    return { x: ax, y: ay };
  });
  const assertValidMemo = memoized((p3) => {
    if (p3.is0()) {
      if (CURVE.allowInfinityPoint && !Fp4.is0(p3.py))
        return;
      throw new Error("bad point: ZERO");
    }
    const { x: x3, y: y3 } = p3.toAffine();
    if (!Fp4.isValid(x3) || !Fp4.isValid(y3))
      throw new Error("bad point: x or y not FE");
    if (!isValidXY(x3, y3))
      throw new Error("bad point: equation left != right");
    if (!p3.isTorsionFree())
      throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  class Point2 {
    constructor(px, py, pz) {
      if (px == null || !Fp4.isValid(px))
        throw new Error("x required");
      if (py == null || !Fp4.isValid(py) || Fp4.is0(py))
        throw new Error("y required");
      if (pz == null || !Fp4.isValid(pz))
        throw new Error("z required");
      this.px = px;
      this.py = py;
      this.pz = pz;
      Object.freeze(this);
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(p3) {
      const { x: x3, y: y3 } = p3 || {};
      if (!p3 || !Fp4.isValid(x3) || !Fp4.isValid(y3))
        throw new Error("invalid affine point");
      if (p3 instanceof Point2)
        throw new Error("projective point not allowed");
      const is0 = (i3) => Fp4.eql(i3, Fp4.ZERO);
      if (is0(x3) && is0(y3))
        return Point2.ZERO;
      return new Point2(x3, y3, Fp4.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(points) {
      const toInv = FpInvertBatch(Fp4, points.map((p3) => p3.pz));
      return points.map((p3, i3) => p3.toAffine(toInv[i3])).map(Point2.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(hex) {
      const P4 = Point2.fromAffine(fromBytes5(ensureBytes("pointHex", hex)));
      P4.assertValidity();
      return P4;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(privateKey) {
      return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));
    }
    // Multiscalar Multiplication
    static msm(points, scalars) {
      return pippenger(Point2, Fn3, points, scalars);
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      wnaf.setWindowSize(this, windowSize);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      assertValidMemo(this);
    }
    hasEvenY() {
      const { y: y3 } = this.toAffine();
      if (Fp4.isOdd)
        return !Fp4.isOdd(y3);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(other) {
      aprjpoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X22, py: Y22, pz: Z2 } = other;
      const U1 = Fp4.eql(Fp4.mul(X1, Z2), Fp4.mul(X22, Z1));
      const U22 = Fp4.eql(Fp4.mul(Y1, Z2), Fp4.mul(Y22, Z1));
      return U1 && U22;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new Point2(this.px, Fp4.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: a2, b: b3 } = CURVE;
      const b32 = Fp4.mul(b3, _3n2);
      const { px: X1, py: Y1, pz: Z1 } = this;
      let X32 = Fp4.ZERO, Y3 = Fp4.ZERO, Z3 = Fp4.ZERO;
      let t0 = Fp4.mul(X1, X1);
      let t1 = Fp4.mul(Y1, Y1);
      let t2 = Fp4.mul(Z1, Z1);
      let t3 = Fp4.mul(X1, Y1);
      t3 = Fp4.add(t3, t3);
      Z3 = Fp4.mul(X1, Z1);
      Z3 = Fp4.add(Z3, Z3);
      X32 = Fp4.mul(a2, Z3);
      Y3 = Fp4.mul(b32, t2);
      Y3 = Fp4.add(X32, Y3);
      X32 = Fp4.sub(t1, Y3);
      Y3 = Fp4.add(t1, Y3);
      Y3 = Fp4.mul(X32, Y3);
      X32 = Fp4.mul(t3, X32);
      Z3 = Fp4.mul(b32, Z3);
      t2 = Fp4.mul(a2, t2);
      t3 = Fp4.sub(t0, t2);
      t3 = Fp4.mul(a2, t3);
      t3 = Fp4.add(t3, Z3);
      Z3 = Fp4.add(t0, t0);
      t0 = Fp4.add(Z3, t0);
      t0 = Fp4.add(t0, t2);
      t0 = Fp4.mul(t0, t3);
      Y3 = Fp4.add(Y3, t0);
      t2 = Fp4.mul(Y1, Z1);
      t2 = Fp4.add(t2, t2);
      t0 = Fp4.mul(t2, t3);
      X32 = Fp4.sub(X32, t0);
      Z3 = Fp4.mul(t2, t1);
      Z3 = Fp4.add(Z3, Z3);
      Z3 = Fp4.add(Z3, Z3);
      return new Point2(X32, Y3, Z3);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(other) {
      aprjpoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X22, py: Y22, pz: Z2 } = other;
      let X32 = Fp4.ZERO, Y3 = Fp4.ZERO, Z3 = Fp4.ZERO;
      const a2 = CURVE.a;
      const b3 = Fp4.mul(CURVE.b, _3n2);
      let t0 = Fp4.mul(X1, X22);
      let t1 = Fp4.mul(Y1, Y22);
      let t2 = Fp4.mul(Z1, Z2);
      let t3 = Fp4.add(X1, Y1);
      let t4 = Fp4.add(X22, Y22);
      t3 = Fp4.mul(t3, t4);
      t4 = Fp4.add(t0, t1);
      t3 = Fp4.sub(t3, t4);
      t4 = Fp4.add(X1, Z1);
      let t5 = Fp4.add(X22, Z2);
      t4 = Fp4.mul(t4, t5);
      t5 = Fp4.add(t0, t2);
      t4 = Fp4.sub(t4, t5);
      t5 = Fp4.add(Y1, Z1);
      X32 = Fp4.add(Y22, Z2);
      t5 = Fp4.mul(t5, X32);
      X32 = Fp4.add(t1, t2);
      t5 = Fp4.sub(t5, X32);
      Z3 = Fp4.mul(a2, t4);
      X32 = Fp4.mul(b3, t2);
      Z3 = Fp4.add(X32, Z3);
      X32 = Fp4.sub(t1, Z3);
      Z3 = Fp4.add(t1, Z3);
      Y3 = Fp4.mul(X32, Z3);
      t1 = Fp4.add(t0, t0);
      t1 = Fp4.add(t1, t0);
      t2 = Fp4.mul(a2, t2);
      t4 = Fp4.mul(b3, t4);
      t1 = Fp4.add(t1, t2);
      t2 = Fp4.sub(t0, t2);
      t2 = Fp4.mul(a2, t2);
      t4 = Fp4.add(t4, t2);
      t0 = Fp4.mul(t1, t4);
      Y3 = Fp4.add(Y3, t0);
      t0 = Fp4.mul(t5, t4);
      X32 = Fp4.mul(t3, X32);
      X32 = Fp4.sub(X32, t0);
      t0 = Fp4.mul(t3, t1);
      Z3 = Fp4.mul(t5, Z3);
      Z3 = Fp4.add(Z3, t0);
      return new Point2(X32, Y3, Z3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    is0() {
      return this.equals(Point2.ZERO);
    }
    wNAF(n2) {
      return wnaf.wNAFCached(this, n2, Point2.normalizeZ);
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(sc2) {
      const { endo: endo2, n: N3 } = CURVE;
      aInRange("scalar", sc2, _0n4, N3);
      const I2 = Point2.ZERO;
      if (sc2 === _0n4)
        return I2;
      if (this.is0() || sc2 === _1n4)
        return this;
      if (!endo2 || wnaf.hasPrecomputes(this))
        return wnaf.wNAFCachedUnsafe(this, sc2, Point2.normalizeZ);
      let { k1neg, k1, k2neg, k2 } = endo2.splitScalar(sc2);
      let k1p = I2;
      let k2p = I2;
      let d4 = this;
      while (k1 > _0n4 || k2 > _0n4) {
        if (k1 & _1n4)
          k1p = k1p.add(d4);
        if (k2 & _1n4)
          k2p = k2p.add(d4);
        d4 = d4.double();
        k1 >>= _1n4;
        k2 >>= _1n4;
      }
      if (k1neg)
        k1p = k1p.negate();
      if (k2neg)
        k2p = k2p.negate();
      k2p = new Point2(Fp4.mul(k2p.px, endo2.beta), k2p.py, k2p.pz);
      return k1p.add(k2p);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(scalar) {
      const { endo: endo2, n: N3 } = CURVE;
      aInRange("scalar", scalar, _1n4, N3);
      let point, fake;
      if (endo2) {
        const { k1neg, k1, k2neg, k2 } = endo2.splitScalar(scalar);
        let { p: k1p, f: f1p } = this.wNAF(k1);
        let { p: k2p, f: f2p } = this.wNAF(k2);
        k1p = wnaf.constTimeNegate(k1neg, k1p);
        k2p = wnaf.constTimeNegate(k2neg, k2p);
        k2p = new Point2(Fp4.mul(k2p.px, endo2.beta), k2p.py, k2p.pz);
        point = k1p.add(k2p);
        fake = f1p.add(f2p);
      } else {
        const { p: p3, f: f6 } = this.wNAF(scalar);
        point = p3;
        fake = f6;
      }
      return Point2.normalizeZ([point, fake])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(Q3, a2, b3) {
      const G4 = Point2.BASE;
      const mul3 = (P4, a3) => a3 === _0n4 || a3 === _1n4 || !P4.equals(G4) ? P4.multiplyUnsafe(a3) : P4.multiply(a3);
      const sum = mul3(this, a2).add(mul3(Q3, b3));
      return sum.is0() ? void 0 : sum;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(iz) {
      return toAffineMemo(this, iz);
    }
    isTorsionFree() {
      const { h: cofactor, isTorsionFree } = CURVE;
      if (cofactor === _1n4)
        return true;
      if (isTorsionFree)
        return isTorsionFree(Point2, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: cofactor, clearCofactor } = CURVE;
      if (cofactor === _1n4)
        return this;
      if (clearCofactor)
        return clearCofactor(Point2, this);
      return this.multiplyUnsafe(CURVE.h);
    }
    toRawBytes(isCompressed = true) {
      abool("isCompressed", isCompressed);
      this.assertValidity();
      return toBytes7(Point2, this, isCompressed);
    }
    toHex(isCompressed = true) {
      abool("isCompressed", isCompressed);
      return bytesToHex(this.toRawBytes(isCompressed));
    }
  }
  Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp4.ONE);
  Point2.ZERO = new Point2(Fp4.ZERO, Fp4.ONE, Fp4.ZERO);
  const { endo, nBitLength } = CURVE;
  const wnaf = wNAF(Point2, endo ? Math.ceil(nBitLength / 2) : nBitLength);
  return {
    CURVE,
    ProjectivePoint: Point2,
    normPrivateKeyToScalar,
    weierstrassEquation,
    isWithinCurveOrder
  };
}
function validateOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  });
  return Object.freeze({ lowS: true, ...opts });
}
function weierstrass(curveDef) {
  const CURVE = validateOpts(curveDef);
  const { Fp: Fp4, n: CURVE_ORDER, nByteLength, nBitLength } = CURVE;
  const compressedLen = Fp4.BYTES + 1;
  const uncompressedLen = 2 * Fp4.BYTES + 1;
  function modN2(a2) {
    return mod(a2, CURVE_ORDER);
  }
  function invN(a2) {
    return invert(a2, CURVE_ORDER);
  }
  const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
    ...CURVE,
    toBytes(_c2, point, isCompressed) {
      const a2 = point.toAffine();
      const x3 = Fp4.toBytes(a2.x);
      const cat = concatBytes2;
      abool("isCompressed", isCompressed);
      if (isCompressed) {
        return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x3);
      } else {
        return cat(Uint8Array.from([4]), x3, Fp4.toBytes(a2.y));
      }
    },
    fromBytes(bytes) {
      const len = bytes.length;
      const head = bytes[0];
      const tail = bytes.subarray(1);
      if (len === compressedLen && (head === 2 || head === 3)) {
        const x3 = bytesToNumberBE(tail);
        if (!inRange(x3, _1n4, Fp4.ORDER))
          throw new Error("Point is not on curve");
        const y22 = weierstrassEquation(x3);
        let y3;
        try {
          y3 = Fp4.sqrt(y22);
        } catch (sqrtError) {
          const suffix = sqrtError instanceof Error ? ": " + sqrtError.message : "";
          throw new Error("Point is not on curve" + suffix);
        }
        const isYOdd = (y3 & _1n4) === _1n4;
        const isHeadOdd = (head & 1) === 1;
        if (isHeadOdd !== isYOdd)
          y3 = Fp4.neg(y3);
        return { x: x3, y: y3 };
      } else if (len === uncompressedLen && head === 4) {
        const x3 = Fp4.fromBytes(tail.subarray(0, Fp4.BYTES));
        const y3 = Fp4.fromBytes(tail.subarray(Fp4.BYTES, 2 * Fp4.BYTES));
        return { x: x3, y: y3 };
      } else {
        const cl = compressedLen;
        const ul = uncompressedLen;
        throw new Error("invalid Point, expected length of " + cl + ", or uncompressed " + ul + ", got " + len);
      }
    }
  });
  function isBiggerThanHalfOrder(number) {
    const HALF = CURVE_ORDER >> _1n4;
    return number > HALF;
  }
  function normalizeS(s) {
    return isBiggerThanHalfOrder(s) ? modN2(-s) : s;
  }
  const slcNum = (b3, from9, to3) => bytesToNumberBE(b3.slice(from9, to3));
  class Signature {
    constructor(r2, s, recovery) {
      aInRange("r", r2, _1n4, CURVE_ORDER);
      aInRange("s", s, _1n4, CURVE_ORDER);
      this.r = r2;
      this.s = s;
      if (recovery != null)
        this.recovery = recovery;
      Object.freeze(this);
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(hex) {
      const l2 = nByteLength;
      hex = ensureBytes("compactSignature", hex, l2 * 2);
      return new Signature(slcNum(hex, 0, l2), slcNum(hex, l2, 2 * l2));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(hex) {
      const { r: r2, s } = DER.toSig(ensureBytes("DER", hex));
      return new Signature(r2, s);
    }
    /**
     * @todo remove
     * @deprecated
     */
    assertValidity() {
    }
    addRecoveryBit(recovery) {
      return new Signature(this.r, this.s, recovery);
    }
    recoverPublicKey(msgHash) {
      const { r: r2, s, recovery: rec } = this;
      const h3 = bits2int_modN(ensureBytes("msgHash", msgHash));
      if (rec == null || ![0, 1, 2, 3].includes(rec))
        throw new Error("recovery id invalid");
      const radj = rec === 2 || rec === 3 ? r2 + CURVE.n : r2;
      if (radj >= Fp4.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const prefix = (rec & 1) === 0 ? "02" : "03";
      const R4 = Point2.fromHex(prefix + numToSizedHex(radj, Fp4.BYTES));
      const ir2 = invN(radj);
      const u1 = modN2(-h3 * ir2);
      const u2 = modN2(s * ir2);
      const Q3 = Point2.BASE.multiplyAndAddUnsafe(R4, u1, u2);
      if (!Q3)
        throw new Error("point at infinify");
      Q3.assertValidity();
      return Q3;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return isBiggerThanHalfOrder(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new Signature(this.r, modN2(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return hexToBytes(this.toDERHex());
    }
    toDERHex() {
      return DER.hexFromSig(this);
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return hexToBytes(this.toCompactHex());
    }
    toCompactHex() {
      const l2 = nByteLength;
      return numToSizedHex(this.r, l2) + numToSizedHex(this.s, l2);
    }
  }
  const utils = {
    isValidPrivateKey(privateKey) {
      try {
        normPrivateKeyToScalar(privateKey);
        return true;
      } catch (error) {
        return false;
      }
    },
    normPrivateKeyToScalar,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const length = getMinHashLength(CURVE.n);
      return mapHashToField(CURVE.randomBytes(length), CURVE.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(windowSize = 8, point = Point2.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  function getPublicKey2(privateKey, isCompressed = true) {
    return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  function isProbPub(item) {
    if (typeof item === "bigint")
      return false;
    if (item instanceof Point2)
      return true;
    const arr = ensureBytes("key", item);
    const len = arr.length;
    const fpl = Fp4.BYTES;
    const compLen = fpl + 1;
    const uncompLen = 2 * fpl + 1;
    if (CURVE.allowedPrivateKeyLengths || nByteLength === compLen) {
      return void 0;
    } else {
      return len === compLen || len === uncompLen;
    }
  }
  function getSharedSecret2(privateA, publicB, isCompressed = true) {
    if (isProbPub(privateA) === true)
      throw new Error("first arg must be private key");
    if (isProbPub(publicB) === false)
      throw new Error("second arg must be public key");
    const b3 = Point2.fromHex(publicB);
    return b3.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
  }
  const bits2int = CURVE.bits2int || function(bytes) {
    if (bytes.length > 8192)
      throw new Error("input is too large");
    const num2 = bytesToNumberBE(bytes);
    const delta = bytes.length * 8 - nBitLength;
    return delta > 0 ? num2 >> BigInt(delta) : num2;
  };
  const bits2int_modN = CURVE.bits2int_modN || function(bytes) {
    return modN2(bits2int(bytes));
  };
  const ORDER_MASK = bitMask(nBitLength);
  function int2octets(num2) {
    aInRange("num < 2^" + nBitLength, num2, _0n4, ORDER_MASK);
    return numberToBytesBE(num2, nByteLength);
  }
  function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
    if (["recovered", "canonical"].some((k2) => k2 in opts))
      throw new Error("sign() legacy options not supported");
    const { hash, randomBytes: randomBytes2 } = CURVE;
    let { lowS, prehash, extraEntropy: ent } = opts;
    if (lowS == null)
      lowS = true;
    msgHash = ensureBytes("msgHash", msgHash);
    validateSigVerOpts(opts);
    if (prehash)
      msgHash = ensureBytes("prehashed msgHash", hash(msgHash));
    const h1int = bits2int_modN(msgHash);
    const d4 = normPrivateKeyToScalar(privateKey);
    const seedArgs = [int2octets(d4), int2octets(h1int)];
    if (ent != null && ent !== false) {
      const e = ent === true ? randomBytes2(Fp4.BYTES) : ent;
      seedArgs.push(ensureBytes("extraEntropy", e));
    }
    const seed = concatBytes2(...seedArgs);
    const m3 = h1int;
    function k2sig(kBytes) {
      const k2 = bits2int(kBytes);
      if (!isWithinCurveOrder(k2))
        return;
      const ik = invN(k2);
      const q2 = Point2.BASE.multiply(k2).toAffine();
      const r2 = modN2(q2.x);
      if (r2 === _0n4)
        return;
      const s = modN2(ik * modN2(m3 + r2 * d4));
      if (s === _0n4)
        return;
      let recovery = (q2.x === r2 ? 0 : 2) | Number(q2.y & _1n4);
      let normS = s;
      if (lowS && isBiggerThanHalfOrder(s)) {
        normS = normalizeS(s);
        recovery ^= 1;
      }
      return new Signature(r2, normS, recovery);
    }
    return { seed, k2sig };
  }
  const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
  const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
  function sign2(msgHash, privKey, opts = defaultSigOpts) {
    const { seed, k2sig } = prepSig(msgHash, privKey, opts);
    const C5 = CURVE;
    const drbg = createHmacDrbg(C5.hash.outputLen, C5.nByteLength, C5.hmac);
    return drbg(seed, k2sig);
  }
  Point2.BASE._setWindowSize(8);
  function verify3(signature, msgHash, publicKey, opts = defaultVerOpts) {
    const sg = signature;
    msgHash = ensureBytes("msgHash", msgHash);
    publicKey = ensureBytes("publicKey", publicKey);
    const { lowS, prehash, format: format2 } = opts;
    validateSigVerOpts(opts);
    if ("strict" in opts)
      throw new Error("options.strict was renamed to lowS");
    if (format2 !== void 0 && format2 !== "compact" && format2 !== "der")
      throw new Error("format must be compact or der");
    const isHex = typeof sg === "string" || isBytes(sg);
    const isObj = !isHex && !format2 && typeof sg === "object" && sg !== null && typeof sg.r === "bigint" && typeof sg.s === "bigint";
    if (!isHex && !isObj)
      throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    let _sig = void 0;
    let P4;
    try {
      if (isObj)
        _sig = new Signature(sg.r, sg.s);
      if (isHex) {
        try {
          if (format2 !== "compact")
            _sig = Signature.fromDER(sg);
        } catch (derError) {
          if (!(derError instanceof DER.Err))
            throw derError;
        }
        if (!_sig && format2 !== "der")
          _sig = Signature.fromCompact(sg);
      }
      P4 = Point2.fromHex(publicKey);
    } catch (error) {
      return false;
    }
    if (!_sig)
      return false;
    if (lowS && _sig.hasHighS())
      return false;
    if (prehash)
      msgHash = CURVE.hash(msgHash);
    const { r: r2, s } = _sig;
    const h3 = bits2int_modN(msgHash);
    const is3 = invN(s);
    const u1 = modN2(h3 * is3);
    const u2 = modN2(r2 * is3);
    const R4 = Point2.BASE.multiplyAndAddUnsafe(P4, u1, u2)?.toAffine();
    if (!R4)
      return false;
    const v4 = modN2(R4.x);
    return v4 === r2;
  }
  return {
    CURVE,
    getPublicKey: getPublicKey2,
    getSharedSecret: getSharedSecret2,
    sign: sign2,
    verify: verify3,
    ProjectivePoint: Point2,
    Signature,
    utils
  };
}
function SWUFpSqrtRatio(Fp4, Z2) {
  const q2 = Fp4.ORDER;
  let l2 = _0n4;
  for (let o2 = q2 - _1n4; o2 % _2n2 === _0n4; o2 /= _2n2)
    l2 += _1n4;
  const c1 = l2;
  const _2n_pow_c1_1 = _2n2 << c1 - _1n4 - _1n4;
  const _2n_pow_c1 = _2n_pow_c1_1 * _2n2;
  const c22 = (q2 - _1n4) / _2n_pow_c1;
  const c3 = (c22 - _1n4) / _2n2;
  const c4 = _2n_pow_c1 - _1n4;
  const c5 = _2n_pow_c1_1;
  const c6 = Fp4.pow(Z2, c22);
  const c7 = Fp4.pow(Z2, (c22 + _1n4) / _2n2);
  let sqrtRatio = (u2, v4) => {
    let tv1 = c6;
    let tv2 = Fp4.pow(v4, c4);
    let tv3 = Fp4.sqr(tv2);
    tv3 = Fp4.mul(tv3, v4);
    let tv5 = Fp4.mul(u2, tv3);
    tv5 = Fp4.pow(tv5, c3);
    tv5 = Fp4.mul(tv5, tv2);
    tv2 = Fp4.mul(tv5, v4);
    tv3 = Fp4.mul(tv5, u2);
    let tv4 = Fp4.mul(tv3, tv2);
    tv5 = Fp4.pow(tv4, c5);
    let isQR = Fp4.eql(tv5, Fp4.ONE);
    tv2 = Fp4.mul(tv3, c7);
    tv5 = Fp4.mul(tv4, tv1);
    tv3 = Fp4.cmov(tv2, tv3, isQR);
    tv4 = Fp4.cmov(tv5, tv4, isQR);
    for (let i3 = c1; i3 > _1n4; i3--) {
      let tv52 = i3 - _2n2;
      tv52 = _2n2 << tv52 - _1n4;
      let tvv5 = Fp4.pow(tv4, tv52);
      const e1 = Fp4.eql(tvv5, Fp4.ONE);
      tv2 = Fp4.mul(tv3, tv1);
      tv1 = Fp4.mul(tv1, tv1);
      tvv5 = Fp4.mul(tv4, tv1);
      tv3 = Fp4.cmov(tv2, tv3, e1);
      tv4 = Fp4.cmov(tvv5, tv4, e1);
    }
    return { isValid: isQR, value: tv3 };
  };
  if (Fp4.ORDER % _4n2 === _3n2) {
    const c12 = (Fp4.ORDER - _3n2) / _4n2;
    const c23 = Fp4.sqrt(Fp4.neg(Z2));
    sqrtRatio = (u2, v4) => {
      let tv1 = Fp4.sqr(v4);
      const tv2 = Fp4.mul(u2, v4);
      tv1 = Fp4.mul(tv1, tv2);
      let y1 = Fp4.pow(tv1, c12);
      y1 = Fp4.mul(y1, tv2);
      const y22 = Fp4.mul(y1, c23);
      const tv3 = Fp4.mul(Fp4.sqr(y1), v4);
      const isQR = Fp4.eql(tv3, u2);
      let y3 = Fp4.cmov(y22, y1, isQR);
      return { isValid: isQR, value: y3 };
    };
  }
  return sqrtRatio;
}
function mapToCurveSimpleSWU(Fp4, opts) {
  validateField(Fp4);
  if (!Fp4.isValid(opts.A) || !Fp4.isValid(opts.B) || !Fp4.isValid(opts.Z))
    throw new Error("mapToCurveSimpleSWU: invalid opts");
  const sqrtRatio = SWUFpSqrtRatio(Fp4, opts.Z);
  if (!Fp4.isOdd)
    throw new Error("Fp.isOdd is not implemented!");
  return (u2) => {
    let tv1, tv2, tv3, tv4, tv5, tv6, x3, y3;
    tv1 = Fp4.sqr(u2);
    tv1 = Fp4.mul(tv1, opts.Z);
    tv2 = Fp4.sqr(tv1);
    tv2 = Fp4.add(tv2, tv1);
    tv3 = Fp4.add(tv2, Fp4.ONE);
    tv3 = Fp4.mul(tv3, opts.B);
    tv4 = Fp4.cmov(opts.Z, Fp4.neg(tv2), !Fp4.eql(tv2, Fp4.ZERO));
    tv4 = Fp4.mul(tv4, opts.A);
    tv2 = Fp4.sqr(tv3);
    tv6 = Fp4.sqr(tv4);
    tv5 = Fp4.mul(tv6, opts.A);
    tv2 = Fp4.add(tv2, tv5);
    tv2 = Fp4.mul(tv2, tv3);
    tv6 = Fp4.mul(tv6, tv4);
    tv5 = Fp4.mul(tv6, opts.B);
    tv2 = Fp4.add(tv2, tv5);
    x3 = Fp4.mul(tv1, tv3);
    const { isValid, value } = sqrtRatio(tv2, tv6);
    y3 = Fp4.mul(tv1, u2);
    y3 = Fp4.mul(y3, value);
    x3 = Fp4.cmov(x3, tv3, isValid);
    y3 = Fp4.cmov(y3, value, isValid);
    const e1 = Fp4.isOdd(u2) === Fp4.isOdd(y3);
    y3 = Fp4.cmov(Fp4.neg(y3), y3, e1);
    const tv4_inv = FpInvertBatch(Fp4, [tv4], true)[0];
    x3 = Fp4.mul(x3, tv4_inv);
    return { x: x3, y: y3 };
  };
}

// node_modules/ox/node_modules/@noble/curves/esm/_shortw_utils.js
function getHash(hash) {
  return {
    hash,
    hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),
    randomBytes
  };
}
function createCurve(curveDef, defHash) {
  const create3 = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });
  return { ...create3(defHash), create: create3 };
}

// node_modules/ox/node_modules/@noble/curves/esm/abstract/hash-to-curve.js
var os2ip = bytesToNumberBE;
function i2osp(value, length) {
  anum(value);
  anum(length);
  if (value < 0 || value >= 1 << 8 * length)
    throw new Error("invalid I2OSP input: " + value);
  const res = Array.from({ length }).fill(0);
  for (let i3 = length - 1; i3 >= 0; i3--) {
    res[i3] = value & 255;
    value >>>= 8;
  }
  return new Uint8Array(res);
}
function strxor(a2, b3) {
  const arr = new Uint8Array(a2.length);
  for (let i3 = 0; i3 < a2.length; i3++) {
    arr[i3] = a2[i3] ^ b3[i3];
  }
  return arr;
}
function anum(item) {
  if (!Number.isSafeInteger(item))
    throw new Error("number expected");
}
function expand_message_xmd(msg, DST, lenInBytes, H2) {
  abytes2(msg);
  abytes2(DST);
  anum(lenInBytes);
  if (DST.length > 255)
    DST = H2(concatBytes2(utf8ToBytes2("H2C-OVERSIZE-DST-"), DST));
  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H2;
  const ell = Math.ceil(lenInBytes / b_in_bytes);
  if (lenInBytes > 65535 || ell > 255)
    throw new Error("expand_message_xmd: invalid lenInBytes");
  const DST_prime = concatBytes2(DST, i2osp(DST.length, 1));
  const Z_pad = i2osp(0, r_in_bytes);
  const l_i_b_str = i2osp(lenInBytes, 2);
  const b3 = new Array(ell);
  const b_0 = H2(concatBytes2(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
  b3[0] = H2(concatBytes2(b_0, i2osp(1, 1), DST_prime));
  for (let i3 = 1; i3 <= ell; i3++) {
    const args = [strxor(b_0, b3[i3 - 1]), i2osp(i3 + 1, 1), DST_prime];
    b3[i3] = H2(concatBytes2(...args));
  }
  const pseudo_random_bytes = concatBytes2(...b3);
  return pseudo_random_bytes.slice(0, lenInBytes);
}
function expand_message_xof(msg, DST, lenInBytes, k2, H2) {
  abytes2(msg);
  abytes2(DST);
  anum(lenInBytes);
  if (DST.length > 255) {
    const dkLen = Math.ceil(2 * k2 / 8);
    DST = H2.create({ dkLen }).update(utf8ToBytes2("H2C-OVERSIZE-DST-")).update(DST).digest();
  }
  if (lenInBytes > 65535 || DST.length > 255)
    throw new Error("expand_message_xof: invalid lenInBytes");
  return H2.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
}
function hash_to_field(msg, count, options) {
  validateObject(options, {
    DST: "stringOrUint8Array",
    p: "bigint",
    m: "isSafeInteger",
    k: "isSafeInteger",
    hash: "hash"
  });
  const { p: p3, k: k2, m: m3, hash, expand, DST: _DST } = options;
  abytes2(msg);
  anum(count);
  const DST = typeof _DST === "string" ? utf8ToBytes2(_DST) : _DST;
  const log2p = p3.toString(2).length;
  const L2 = Math.ceil((log2p + k2) / 8);
  const len_in_bytes = count * m3 * L2;
  let prb;
  if (expand === "xmd") {
    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);
  } else if (expand === "xof") {
    prb = expand_message_xof(msg, DST, len_in_bytes, k2, hash);
  } else if (expand === "_internal_pass") {
    prb = msg;
  } else {
    throw new Error('expand must be "xmd" or "xof"');
  }
  const u2 = new Array(count);
  for (let i3 = 0; i3 < count; i3++) {
    const e = new Array(m3);
    for (let j3 = 0; j3 < m3; j3++) {
      const elm_offset = L2 * (j3 + i3 * m3);
      const tv = prb.subarray(elm_offset, elm_offset + L2);
      e[j3] = mod(os2ip(tv), p3);
    }
    u2[i3] = e;
  }
  return u2;
}
function isogenyMap(field, map) {
  const coeff = map.map((i3) => Array.from(i3).reverse());
  return (x3, y3) => {
    const [xn3, xd, yn3, yd] = coeff.map((val) => val.reduce((acc, i3) => field.add(field.mul(acc, x3), i3)));
    const [xd_inv, yd_inv] = FpInvertBatch(field, [xd, yd], true);
    x3 = field.mul(xn3, xd_inv);
    y3 = field.mul(y3, field.mul(yn3, yd_inv));
    return { x: x3, y: y3 };
  };
}
function createHasher(Point2, mapToCurve, defaults) {
  if (typeof mapToCurve !== "function")
    throw new Error("mapToCurve() must be defined");
  function map(num2) {
    return Point2.fromAffine(mapToCurve(num2));
  }
  function clear(initial) {
    const P4 = initial.clearCofactor();
    if (P4.equals(Point2.ZERO))
      return Point2.ZERO;
    P4.assertValidity();
    return P4;
  }
  return {
    defaults,
    // Encodes byte string to elliptic curve.
    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    hashToCurve(msg, options) {
      const u2 = hash_to_field(msg, 2, { ...defaults, DST: defaults.DST, ...options });
      const u0 = map(u2[0]);
      const u1 = map(u2[1]);
      return clear(u0.add(u1));
    },
    // Encodes byte string to elliptic curve.
    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    encodeToCurve(msg, options) {
      const u2 = hash_to_field(msg, 1, { ...defaults, DST: defaults.encodeDST, ...options });
      return clear(map(u2[0]));
    },
    // Same as encodeToCurve, but without hash
    mapToCurve(scalars) {
      if (!Array.isArray(scalars))
        throw new Error("expected array of bigints");
      for (const i3 of scalars)
        if (typeof i3 !== "bigint")
          throw new Error("expected array of bigints");
      return clear(map(scalars));
    }
  };
}

// node_modules/ox/node_modules/@noble/curves/esm/secp256k1.js
var secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
var secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
var _0n5 = BigInt(0);
var _1n5 = BigInt(1);
var _2n3 = BigInt(2);
var divNearest = (a2, b3) => (a2 + b3 / _2n3) / b3;
function sqrtMod(y3) {
  const P4 = secp256k1P;
  const _3n7 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
  const b22 = y3 * y3 * y3 % P4;
  const b3 = b22 * b22 * y3 % P4;
  const b6 = pow2(b3, _3n7, P4) * b3 % P4;
  const b9 = pow2(b6, _3n7, P4) * b3 % P4;
  const b11 = pow2(b9, _2n3, P4) * b22 % P4;
  const b222 = pow2(b11, _11n, P4) * b11 % P4;
  const b44 = pow2(b222, _22n, P4) * b222 % P4;
  const b88 = pow2(b44, _44n, P4) * b44 % P4;
  const b176 = pow2(b88, _88n, P4) * b88 % P4;
  const b220 = pow2(b176, _44n, P4) * b44 % P4;
  const b223 = pow2(b220, _3n7, P4) * b3 % P4;
  const t1 = pow2(b223, _23n, P4) * b222 % P4;
  const t2 = pow2(t1, _6n, P4) * b22 % P4;
  const root = pow2(t2, _2n3, P4);
  if (!Fpk1.eql(Fpk1.sqr(root), y3))
    throw new Error("Cannot find square root");
  return root;
}
var Fpk1 = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
var secp256k1 = createCurve({
  a: _0n5,
  b: BigInt(7),
  Fp: Fpk1,
  n: secp256k1N,
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: true,
  // Allow only low-S signatures by default in sign() and verify()
  endo: {
    // Endomorphism, see above
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (k2) => {
      const n2 = secp256k1N;
      const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
      const b1 = -_1n5 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
      const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
      const b22 = a1;
      const POW_2_128 = BigInt("0x100000000000000000000000000000000");
      const c1 = divNearest(b22 * k2, n2);
      const c22 = divNearest(-b1 * k2, n2);
      let k1 = mod(k2 - c1 * a1 - c22 * a2, n2);
      let k22 = mod(-c1 * b1 - c22 * b22, n2);
      const k1neg = k1 > POW_2_128;
      const k2neg = k22 > POW_2_128;
      if (k1neg)
        k1 = n2 - k1;
      if (k2neg)
        k22 = n2 - k22;
      if (k1 > POW_2_128 || k22 > POW_2_128) {
        throw new Error("splitScalar: Endomorphism failed, k=" + k2);
      }
      return { k1neg, k1, k2neg, k2: k22 };
    }
  }
}, sha256);
var TAGGED_HASH_PREFIXES = {};
function taggedHash(tag, ...messages) {
  let tagP = TAGGED_HASH_PREFIXES[tag];
  if (tagP === void 0) {
    const tagH = sha256(Uint8Array.from(tag, (c3) => c3.charCodeAt(0)));
    tagP = concatBytes2(tagH, tagH);
    TAGGED_HASH_PREFIXES[tag] = tagP;
  }
  return sha256(concatBytes2(tagP, ...messages));
}
var pointToBytes = (point) => point.toRawBytes(true).slice(1);
var numTo32b = (n2) => numberToBytesBE(n2, 32);
var modP = (x3) => mod(x3, secp256k1P);
var modN = (x3) => mod(x3, secp256k1N);
var Point = (() => secp256k1.ProjectivePoint)();
var GmulAdd = (Q3, a2, b3) => Point.BASE.multiplyAndAddUnsafe(Q3, a2, b3);
function schnorrGetExtPubKey(priv) {
  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv);
  let p3 = Point.fromPrivateKey(d_);
  const scalar = p3.hasEvenY() ? d_ : modN(-d_);
  return { scalar, bytes: pointToBytes(p3) };
}
function lift_x(x3) {
  aInRange("x", x3, _1n5, secp256k1P);
  const xx = modP(x3 * x3);
  const c3 = modP(xx * x3 + BigInt(7));
  let y3 = sqrtMod(c3);
  if (y3 % _2n3 !== _0n5)
    y3 = modP(-y3);
  const p3 = new Point(x3, y3, _1n5);
  p3.assertValidity();
  return p3;
}
var num = bytesToNumberBE;
function challenge(...args) {
  return modN(num(taggedHash("BIP0340/challenge", ...args)));
}
function schnorrGetPublicKey(privateKey) {
  return schnorrGetExtPubKey(privateKey).bytes;
}
function schnorrSign(message, privateKey, auxRand = randomBytes(32)) {
  const m3 = ensureBytes("message", message);
  const { bytes: px, scalar: d4 } = schnorrGetExtPubKey(privateKey);
  const a2 = ensureBytes("auxRand", auxRand, 32);
  const t = numTo32b(d4 ^ num(taggedHash("BIP0340/aux", a2)));
  const rand = taggedHash("BIP0340/nonce", t, px, m3);
  const k_ = modN(num(rand));
  if (k_ === _0n5)
    throw new Error("sign failed: k is zero");
  const { bytes: rx, scalar: k2 } = schnorrGetExtPubKey(k_);
  const e = challenge(rx, px, m3);
  const sig = new Uint8Array(64);
  sig.set(rx, 0);
  sig.set(numTo32b(modN(k2 + e * d4)), 32);
  if (!schnorrVerify(sig, m3, px))
    throw new Error("sign: Invalid signature produced");
  return sig;
}
function schnorrVerify(signature, message, publicKey) {
  const sig = ensureBytes("signature", signature, 64);
  const m3 = ensureBytes("message", message);
  const pub = ensureBytes("publicKey", publicKey, 32);
  try {
    const P4 = lift_x(num(pub));
    const r2 = num(sig.subarray(0, 32));
    if (!inRange(r2, _1n5, secp256k1P))
      return false;
    const s = num(sig.subarray(32, 64));
    if (!inRange(s, _1n5, secp256k1N))
      return false;
    const e = challenge(numTo32b(r2), pointToBytes(P4), m3);
    const R4 = GmulAdd(P4, s, modN(-e));
    if (!R4 || !R4.hasEvenY() || R4.toAffine().x !== r2)
      return false;
    return true;
  } catch (error) {
    return false;
  }
}
var schnorr = (() => ({
  getPublicKey: schnorrGetPublicKey,
  sign: schnorrSign,
  verify: schnorrVerify,
  utils: {
    randomPrivateKey: secp256k1.utils.randomPrivateKey,
    lift_x,
    pointToBytes,
    numberToBytesBE,
    bytesToNumberBE,
    taggedHash,
    mod
  }
}))();
var isoMap = (() => isogenyMap(Fpk1, [
  // xNum
  [
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
    "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
    "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
  ],
  // xDen
  [
    "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
    "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ],
  // yNum
  [
    "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
    "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
    "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
    "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
  ],
  // yDen
  [
    "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
    "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
    "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ]
].map((i3) => i3.map((j3) => BigInt(j3)))))();
var mapSWU = (() => mapToCurveSimpleSWU(Fpk1, {
  A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
  B: BigInt("1771"),
  Z: Fpk1.create(BigInt("-11"))
}))();
var secp256k1_hasher = (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {
  const { x: x3, y: y3 } = mapSWU(Fpk1.create(scalars[0]));
  return isoMap(x3, y3);
}, {
  DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
  encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
  p: Fpk1.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha256
}))();
var hashToCurve = (() => secp256k1_hasher.hashToCurve)();
var encodeToCurve = (() => secp256k1_hasher.encodeToCurve)();

// node_modules/ox/_esm/core/Signature.js
function assert5(signature, options = {}) {
  const { recovered } = options;
  if (typeof signature.r === "undefined")
    throw new MissingPropertiesError({ signature });
  if (typeof signature.s === "undefined")
    throw new MissingPropertiesError({ signature });
  if (recovered && typeof signature.yParity === "undefined")
    throw new MissingPropertiesError({ signature });
  if (signature.r < 0n || signature.r > maxUint256)
    throw new InvalidRError({ value: signature.r });
  if (signature.s < 0n || signature.s > maxUint256)
    throw new InvalidSError({ value: signature.s });
  if (typeof signature.yParity === "number" && signature.yParity !== 0 && signature.yParity !== 1)
    throw new InvalidYParityError({ value: signature.yParity });
}
function fromBytes3(signature) {
  return fromHex3(fromBytes(signature));
}
function fromHex3(signature) {
  if (signature.length !== 130 && signature.length !== 132)
    throw new InvalidSerializedSizeError2({ signature });
  const r2 = BigInt(slice(signature, 0, 32));
  const s = BigInt(slice(signature, 32, 64));
  const yParity = (() => {
    const yParity2 = Number(`0x${signature.slice(130)}`);
    if (Number.isNaN(yParity2))
      return void 0;
    try {
      return vToYParity(yParity2);
    } catch {
      throw new InvalidYParityError({ value: yParity2 });
    }
  })();
  if (typeof yParity === "undefined")
    return {
      r: r2,
      s
    };
  return {
    r: r2,
    s,
    yParity
  };
}
function extract(value) {
  if (typeof value.r === "undefined")
    return void 0;
  if (typeof value.s === "undefined")
    return void 0;
  return from7(value);
}
function from7(signature) {
  const signature_ = (() => {
    if (typeof signature === "string")
      return fromHex3(signature);
    if (signature instanceof Uint8Array)
      return fromBytes3(signature);
    if (typeof signature.r === "string")
      return fromRpc(signature);
    if (signature.v)
      return fromLegacy(signature);
    return {
      r: signature.r,
      s: signature.s,
      ...typeof signature.yParity !== "undefined" ? { yParity: signature.yParity } : {}
    };
  })();
  assert5(signature_);
  return signature_;
}
function fromDerBytes(signature) {
  return fromDerHex(fromBytes(signature));
}
function fromDerHex(signature) {
  const { r: r2, s } = secp256k1.Signature.fromDER(from(signature).slice(2));
  return { r: r2, s };
}
function fromLegacy(signature) {
  return {
    r: signature.r,
    s: signature.s,
    yParity: vToYParity(signature.v)
  };
}
function fromRpc(signature) {
  const yParity = (() => {
    const v4 = signature.v ? Number(signature.v) : void 0;
    let yParity2 = signature.yParity ? Number(signature.yParity) : void 0;
    if (typeof v4 === "number" && typeof yParity2 !== "number")
      yParity2 = vToYParity(v4);
    if (typeof yParity2 !== "number")
      throw new InvalidYParityError({ value: signature.yParity });
    return yParity2;
  })();
  return {
    r: BigInt(signature.r),
    s: BigInt(signature.s),
    yParity
  };
}
function fromTuple(tuple) {
  const [yParity, r2, s] = tuple;
  return from7({
    r: r2 === "0x" ? 0n : BigInt(r2),
    s: s === "0x" ? 0n : BigInt(s),
    yParity: yParity === "0x" ? 0 : Number(yParity)
  });
}
function toBytes3(signature) {
  return fromHex(toHex2(signature));
}
function toHex2(signature) {
  assert5(signature);
  const r2 = signature.r;
  const s = signature.s;
  const signature_ = concat(
    fromNumber(r2, { size: 32 }),
    fromNumber(s, { size: 32 }),
    // If the signature is recovered, add the recovery byte to the signature.
    typeof signature.yParity === "number" ? fromNumber(yParityToV(signature.yParity), { size: 1 }) : "0x"
  );
  return signature_;
}
function toDerBytes(signature) {
  const sig = new secp256k1.Signature(signature.r, signature.s);
  return sig.toDERRawBytes();
}
function toDerHex(signature) {
  const sig = new secp256k1.Signature(signature.r, signature.s);
  return `0x${sig.toDERHex()}`;
}
function toLegacy(signature) {
  return {
    r: signature.r,
    s: signature.s,
    v: yParityToV(signature.yParity)
  };
}
function toRpc(signature) {
  const { r: r2, s, yParity } = signature;
  return {
    r: fromNumber(r2, { size: 32 }),
    s: fromNumber(s, { size: 32 }),
    yParity: yParity === 0 ? "0x0" : "0x1"
  };
}
function toTuple(signature) {
  const { r: r2, s, yParity } = signature;
  return [
    yParity ? "0x01" : "0x",
    r2 === 0n ? "0x" : trimLeft(fromNumber(r2)),
    s === 0n ? "0x" : trimLeft(fromNumber(s))
  ];
}
function validate5(signature, options = {}) {
  try {
    assert5(signature, options);
    return true;
  } catch {
    return false;
  }
}
function vToYParity(v4) {
  if (v4 === 0 || v4 === 27)
    return 0;
  if (v4 === 1 || v4 === 28)
    return 1;
  if (v4 >= 35)
    return v4 % 2 === 0 ? 1 : 0;
  throw new InvalidVError({ value: v4 });
}
function yParityToV(yParity) {
  if (yParity === 0)
    return 27;
  if (yParity === 1)
    return 28;
  throw new InvalidYParityError({ value: yParity });
}
var InvalidSerializedSizeError2 = class extends BaseError {
  constructor({ signature }) {
    super(`Value \`${signature}\` is an invalid signature size.`, {
      metaMessages: [
        "Expected: 64 bytes or 65 bytes.",
        `Received ${size2(from(signature))} bytes.`
      ]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.InvalidSerializedSizeError"
    });
  }
};
var MissingPropertiesError = class extends BaseError {
  constructor({ signature }) {
    super(`Signature \`${stringify(signature)}\` is missing either an \`r\`, \`s\`, or \`yParity\` property.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.MissingPropertiesError"
    });
  }
};
var InvalidRError = class extends BaseError {
  constructor({ value }) {
    super(`Value \`${value}\` is an invalid r value. r must be a positive integer less than 2^256.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.InvalidRError"
    });
  }
};
var InvalidSError = class extends BaseError {
  constructor({ value }) {
    super(`Value \`${value}\` is an invalid s value. s must be a positive integer less than 2^256.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.InvalidSError"
    });
  }
};
var InvalidYParityError = class extends BaseError {
  constructor({ value }) {
    super(`Value \`${value}\` is an invalid y-parity value. Y-parity must be 0 or 1.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.InvalidYParityError"
    });
  }
};
var InvalidVError = class extends BaseError {
  constructor({ value }) {
    super(`Value \`${value}\` is an invalid v value. v must be 27, 28 or >=35.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.InvalidVError"
    });
  }
};

// node_modules/ox/_esm/core/internal/base58.js
var alphabetToInteger = (
  /* __PURE__ */
  Object.freeze({
    1: 0n,
    2: 1n,
    3: 2n,
    4: 3n,
    5: 4n,
    6: 5n,
    7: 6n,
    8: 7n,
    9: 8n,
    A: 9n,
    B: 10n,
    C: 11n,
    D: 12n,
    E: 13n,
    F: 14n,
    G: 15n,
    H: 16n,
    J: 17n,
    K: 18n,
    L: 19n,
    M: 20n,
    N: 21n,
    P: 22n,
    Q: 23n,
    R: 24n,
    S: 25n,
    T: 26n,
    U: 27n,
    V: 28n,
    W: 29n,
    X: 30n,
    Y: 31n,
    Z: 32n,
    a: 33n,
    b: 34n,
    c: 35n,
    d: 36n,
    e: 37n,
    f: 38n,
    g: 39n,
    h: 40n,
    i: 41n,
    j: 42n,
    k: 43n,
    m: 44n,
    n: 45n,
    o: 46n,
    p: 47n,
    q: 48n,
    r: 49n,
    s: 50n,
    t: 51n,
    u: 52n,
    v: 53n,
    w: 54n,
    x: 55n,
    y: 56n,
    z: 57n
  })
);

// node_modules/ox/_esm/core/Base64.js
var encoder3 = new TextEncoder();
var decoder2 = new TextDecoder();
var integerToCharacter = Object.fromEntries(Array.from("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").map((a2, i3) => [i3, a2.charCodeAt(0)]));
var characterToInteger = {
  ...Object.fromEntries(Array.from("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").map((a2, i3) => [a2.charCodeAt(0), i3])),
  ["=".charCodeAt(0)]: 0,
  ["-".charCodeAt(0)]: 62,
  ["_".charCodeAt(0)]: 63
};

// node_modules/@noble/hashes/esm/_blake.js
var BSIGMA = Uint8Array.from([
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3,
  11,
  8,
  12,
  0,
  5,
  2,
  15,
  13,
  10,
  14,
  3,
  6,
  7,
  1,
  9,
  4,
  7,
  9,
  3,
  1,
  13,
  12,
  11,
  14,
  2,
  6,
  5,
  10,
  4,
  0,
  15,
  8,
  9,
  0,
  5,
  7,
  2,
  4,
  10,
  15,
  14,
  1,
  11,
  12,
  6,
  8,
  3,
  13,
  2,
  12,
  6,
  10,
  0,
  11,
  8,
  3,
  4,
  13,
  7,
  5,
  15,
  14,
  1,
  9,
  12,
  5,
  1,
  15,
  14,
  13,
  4,
  10,
  0,
  7,
  6,
  3,
  9,
  2,
  8,
  11,
  13,
  11,
  7,
  14,
  12,
  1,
  3,
  9,
  5,
  0,
  15,
  4,
  8,
  6,
  2,
  10,
  6,
  15,
  14,
  9,
  11,
  3,
  0,
  8,
  12,
  2,
  13,
  7,
  1,
  4,
  10,
  5,
  10,
  2,
  8,
  4,
  7,
  6,
  1,
  5,
  15,
  11,
  9,
  14,
  3,
  12,
  13,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3,
  // Blake1, unused in others
  11,
  8,
  12,
  0,
  5,
  2,
  15,
  13,
  10,
  14,
  3,
  6,
  7,
  1,
  9,
  4,
  7,
  9,
  3,
  1,
  13,
  12,
  11,
  14,
  2,
  6,
  5,
  10,
  4,
  0,
  15,
  8,
  9,
  0,
  5,
  7,
  2,
  4,
  10,
  15,
  14,
  1,
  11,
  12,
  6,
  8,
  3,
  13,
  2,
  12,
  6,
  10,
  0,
  11,
  8,
  3,
  4,
  13,
  7,
  5,
  15,
  14,
  1,
  9
]);
function G1s(a2, b3, c3, d4, x3) {
  a2 = a2 + b3 + x3 | 0;
  d4 = rotr(d4 ^ a2, 16);
  c3 = c3 + d4 | 0;
  b3 = rotr(b3 ^ c3, 12);
  return { a: a2, b: b3, c: c3, d: d4 };
}
function G2s(a2, b3, c3, d4, x3) {
  a2 = a2 + b3 + x3 | 0;
  d4 = rotr(d4 ^ a2, 8);
  c3 = c3 + d4 | 0;
  b3 = rotr(b3 ^ c3, 7);
  return { a: a2, b: b3, c: c3, d: d4 };
}

// node_modules/@noble/hashes/esm/blake2.js
var B2B_IV = Uint32Array.from([
  4089235720,
  1779033703,
  2227873595,
  3144134277,
  4271175723,
  1013904242,
  1595750129,
  2773480762,
  2917565137,
  1359893119,
  725511199,
  2600822924,
  4215389547,
  528734635,
  327033209,
  1541459225
]);
var BBUF = new Uint32Array(32);
function G1b(a2, b3, c3, d4, msg, x3) {
  const Xl = msg[x3], Xh = msg[x3 + 1];
  let Al = BBUF[2 * a2], Ah = BBUF[2 * a2 + 1];
  let Bl = BBUF[2 * b3], Bh = BBUF[2 * b3 + 1];
  let Cl = BBUF[2 * c3], Ch = BBUF[2 * c3 + 1];
  let Dl = BBUF[2 * d4], Dh = BBUF[2 * d4 + 1];
  let ll = add3L(Al, Bl, Xl);
  Ah = add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: rotr32H(Dh, Dl), Dl: rotr32L(Dh, Dl) });
  ({ h: Ch, l: Cl } = add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: rotrSH(Bh, Bl, 24), Bl: rotrSL(Bh, Bl, 24) });
  BBUF[2 * a2] = Al, BBUF[2 * a2 + 1] = Ah;
  BBUF[2 * b3] = Bl, BBUF[2 * b3 + 1] = Bh;
  BBUF[2 * c3] = Cl, BBUF[2 * c3 + 1] = Ch;
  BBUF[2 * d4] = Dl, BBUF[2 * d4 + 1] = Dh;
}
function G2b(a2, b3, c3, d4, msg, x3) {
  const Xl = msg[x3], Xh = msg[x3 + 1];
  let Al = BBUF[2 * a2], Ah = BBUF[2 * a2 + 1];
  let Bl = BBUF[2 * b3], Bh = BBUF[2 * b3 + 1];
  let Cl = BBUF[2 * c3], Ch = BBUF[2 * c3 + 1];
  let Dl = BBUF[2 * d4], Dh = BBUF[2 * d4 + 1];
  let ll = add3L(Al, Bl, Xl);
  Ah = add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: rotrSH(Dh, Dl, 16), Dl: rotrSL(Dh, Dl, 16) });
  ({ h: Ch, l: Cl } = add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: rotrBH(Bh, Bl, 63), Bl: rotrBL(Bh, Bl, 63) });
  BBUF[2 * a2] = Al, BBUF[2 * a2 + 1] = Ah;
  BBUF[2 * b3] = Bl, BBUF[2 * b3 + 1] = Bh;
  BBUF[2 * c3] = Cl, BBUF[2 * c3 + 1] = Ch;
  BBUF[2 * d4] = Dl, BBUF[2 * d4 + 1] = Dh;
}
function checkBlake2Opts(outputLen, opts = {}, keyLen, saltLen, persLen) {
  anumber(keyLen);
  if (outputLen < 0 || outputLen > keyLen)
    throw new Error("outputLen bigger than keyLen");
  const { key, salt, personalization } = opts;
  if (key !== void 0 && (key.length < 1 || key.length > keyLen))
    throw new Error("key length must be undefined or 1.." + keyLen);
  if (salt !== void 0 && salt.length !== saltLen)
    throw new Error("salt must be undefined or " + saltLen);
  if (personalization !== void 0 && personalization.length !== persLen)
    throw new Error("personalization must be undefined or " + persLen);
}
var BLAKE2 = class extends Hash {
  constructor(blockLen, outputLen) {
    super();
    this.finished = false;
    this.destroyed = false;
    this.length = 0;
    this.pos = 0;
    anumber(blockLen);
    anumber(outputLen);
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.buffer = new Uint8Array(blockLen);
    this.buffer32 = u32(this.buffer);
  }
  update(data) {
    aexists(this);
    data = toBytes(data);
    abytes(data);
    const { blockLen, buffer, buffer32 } = this;
    const len = data.length;
    const offset = data.byteOffset;
    const buf = data.buffer;
    for (let pos = 0; pos < len; ) {
      if (this.pos === blockLen) {
        swap32IfBE(buffer32);
        this.compress(buffer32, 0, false);
        swap32IfBE(buffer32);
        this.pos = 0;
      }
      const take = Math.min(blockLen - this.pos, len - pos);
      const dataOffset = offset + pos;
      if (take === blockLen && !(dataOffset % 4) && pos + take < len) {
        const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
        swap32IfBE(data32);
        for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
          this.length += blockLen;
          this.compress(data32, pos32, false);
        }
        swap32IfBE(data32);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take), this.pos);
      this.pos += take;
      this.length += take;
      pos += take;
    }
    return this;
  }
  digestInto(out) {
    aexists(this);
    aoutput(out, this);
    const { pos, buffer32 } = this;
    this.finished = true;
    clean(this.buffer.subarray(pos));
    swap32IfBE(buffer32);
    this.compress(buffer32, 0, true);
    swap32IfBE(buffer32);
    const out32 = u32(out);
    this.get().forEach((v4, i3) => out32[i3] = swap8IfBE(v4));
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to3) {
    const { buffer, length, finished, destroyed, outputLen, pos } = this;
    to3 || (to3 = new this.constructor({ dkLen: outputLen }));
    to3.set(...this.get());
    to3.buffer.set(buffer);
    to3.destroyed = destroyed;
    to3.finished = finished;
    to3.length = length;
    to3.pos = pos;
    to3.outputLen = outputLen;
    return to3;
  }
  clone() {
    return this._cloneInto();
  }
};
var BLAKE2b = class extends BLAKE2 {
  constructor(opts = {}) {
    const olen = opts.dkLen === void 0 ? 64 : opts.dkLen;
    super(128, olen);
    this.v0l = B2B_IV[0] | 0;
    this.v0h = B2B_IV[1] | 0;
    this.v1l = B2B_IV[2] | 0;
    this.v1h = B2B_IV[3] | 0;
    this.v2l = B2B_IV[4] | 0;
    this.v2h = B2B_IV[5] | 0;
    this.v3l = B2B_IV[6] | 0;
    this.v3h = B2B_IV[7] | 0;
    this.v4l = B2B_IV[8] | 0;
    this.v4h = B2B_IV[9] | 0;
    this.v5l = B2B_IV[10] | 0;
    this.v5h = B2B_IV[11] | 0;
    this.v6l = B2B_IV[12] | 0;
    this.v6h = B2B_IV[13] | 0;
    this.v7l = B2B_IV[14] | 0;
    this.v7h = B2B_IV[15] | 0;
    checkBlake2Opts(olen, opts, 64, 16, 16);
    let { key, personalization, salt } = opts;
    let keyLength = 0;
    if (key !== void 0) {
      key = toBytes(key);
      keyLength = key.length;
    }
    this.v0l ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
    if (salt !== void 0) {
      salt = toBytes(salt);
      const slt = u32(salt);
      this.v4l ^= swap8IfBE(slt[0]);
      this.v4h ^= swap8IfBE(slt[1]);
      this.v5l ^= swap8IfBE(slt[2]);
      this.v5h ^= swap8IfBE(slt[3]);
    }
    if (personalization !== void 0) {
      personalization = toBytes(personalization);
      const pers = u32(personalization);
      this.v6l ^= swap8IfBE(pers[0]);
      this.v6h ^= swap8IfBE(pers[1]);
      this.v7l ^= swap8IfBE(pers[2]);
      this.v7h ^= swap8IfBE(pers[3]);
    }
    if (key !== void 0) {
      const tmp = new Uint8Array(this.blockLen);
      tmp.set(key);
      this.update(tmp);
    }
  }
  // prettier-ignore
  get() {
    let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
    return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
  }
  // prettier-ignore
  set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
    this.v0l = v0l | 0;
    this.v0h = v0h | 0;
    this.v1l = v1l | 0;
    this.v1h = v1h | 0;
    this.v2l = v2l | 0;
    this.v2h = v2h | 0;
    this.v3l = v3l | 0;
    this.v3h = v3h | 0;
    this.v4l = v4l | 0;
    this.v4h = v4h | 0;
    this.v5l = v5l | 0;
    this.v5h = v5h | 0;
    this.v6l = v6l | 0;
    this.v6h = v6h | 0;
    this.v7l = v7l | 0;
    this.v7h = v7h | 0;
  }
  compress(msg, offset, isLast) {
    this.get().forEach((v4, i3) => BBUF[i3] = v4);
    BBUF.set(B2B_IV, 16);
    let { h: h3, l: l2 } = fromBig(BigInt(this.length));
    BBUF[24] = B2B_IV[8] ^ l2;
    BBUF[25] = B2B_IV[9] ^ h3;
    if (isLast) {
      BBUF[28] = ~BBUF[28];
      BBUF[29] = ~BBUF[29];
    }
    let j3 = 0;
    const s = BSIGMA;
    for (let i3 = 0; i3 < 12; i3++) {
      G1b(0, 4, 8, 12, msg, offset + 2 * s[j3++]);
      G2b(0, 4, 8, 12, msg, offset + 2 * s[j3++]);
      G1b(1, 5, 9, 13, msg, offset + 2 * s[j3++]);
      G2b(1, 5, 9, 13, msg, offset + 2 * s[j3++]);
      G1b(2, 6, 10, 14, msg, offset + 2 * s[j3++]);
      G2b(2, 6, 10, 14, msg, offset + 2 * s[j3++]);
      G1b(3, 7, 11, 15, msg, offset + 2 * s[j3++]);
      G2b(3, 7, 11, 15, msg, offset + 2 * s[j3++]);
      G1b(0, 5, 10, 15, msg, offset + 2 * s[j3++]);
      G2b(0, 5, 10, 15, msg, offset + 2 * s[j3++]);
      G1b(1, 6, 11, 12, msg, offset + 2 * s[j3++]);
      G2b(1, 6, 11, 12, msg, offset + 2 * s[j3++]);
      G1b(2, 7, 8, 13, msg, offset + 2 * s[j3++]);
      G2b(2, 7, 8, 13, msg, offset + 2 * s[j3++]);
      G1b(3, 4, 9, 14, msg, offset + 2 * s[j3++]);
      G2b(3, 4, 9, 14, msg, offset + 2 * s[j3++]);
    }
    this.v0l ^= BBUF[0] ^ BBUF[16];
    this.v0h ^= BBUF[1] ^ BBUF[17];
    this.v1l ^= BBUF[2] ^ BBUF[18];
    this.v1h ^= BBUF[3] ^ BBUF[19];
    this.v2l ^= BBUF[4] ^ BBUF[20];
    this.v2h ^= BBUF[5] ^ BBUF[21];
    this.v3l ^= BBUF[6] ^ BBUF[22];
    this.v3h ^= BBUF[7] ^ BBUF[23];
    this.v4l ^= BBUF[8] ^ BBUF[24];
    this.v4h ^= BBUF[9] ^ BBUF[25];
    this.v5l ^= BBUF[10] ^ BBUF[26];
    this.v5h ^= BBUF[11] ^ BBUF[27];
    this.v6l ^= BBUF[12] ^ BBUF[28];
    this.v6h ^= BBUF[13] ^ BBUF[29];
    this.v7l ^= BBUF[14] ^ BBUF[30];
    this.v7h ^= BBUF[15] ^ BBUF[31];
    clean(BBUF);
  }
  destroy() {
    this.destroyed = true;
    clean(this.buffer32);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var blake2b = createOptHasher((opts) => new BLAKE2b(opts));
function compress(s, offset, msg, rounds, v0, v1, v22, v32, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {
  let j3 = 0;
  for (let i3 = 0; i3 < rounds; i3++) {
    ({ a: v0, b: v4, c: v8, d: v12 } = G1s(v0, v4, v8, v12, msg[offset + s[j3++]]));
    ({ a: v0, b: v4, c: v8, d: v12 } = G2s(v0, v4, v8, v12, msg[offset + s[j3++]]));
    ({ a: v1, b: v5, c: v9, d: v13 } = G1s(v1, v5, v9, v13, msg[offset + s[j3++]]));
    ({ a: v1, b: v5, c: v9, d: v13 } = G2s(v1, v5, v9, v13, msg[offset + s[j3++]]));
    ({ a: v22, b: v6, c: v10, d: v14 } = G1s(v22, v6, v10, v14, msg[offset + s[j3++]]));
    ({ a: v22, b: v6, c: v10, d: v14 } = G2s(v22, v6, v10, v14, msg[offset + s[j3++]]));
    ({ a: v32, b: v7, c: v11, d: v15 } = G1s(v32, v7, v11, v15, msg[offset + s[j3++]]));
    ({ a: v32, b: v7, c: v11, d: v15 } = G2s(v32, v7, v11, v15, msg[offset + s[j3++]]));
    ({ a: v0, b: v5, c: v10, d: v15 } = G1s(v0, v5, v10, v15, msg[offset + s[j3++]]));
    ({ a: v0, b: v5, c: v10, d: v15 } = G2s(v0, v5, v10, v15, msg[offset + s[j3++]]));
    ({ a: v1, b: v6, c: v11, d: v12 } = G1s(v1, v6, v11, v12, msg[offset + s[j3++]]));
    ({ a: v1, b: v6, c: v11, d: v12 } = G2s(v1, v6, v11, v12, msg[offset + s[j3++]]));
    ({ a: v22, b: v7, c: v8, d: v13 } = G1s(v22, v7, v8, v13, msg[offset + s[j3++]]));
    ({ a: v22, b: v7, c: v8, d: v13 } = G2s(v22, v7, v8, v13, msg[offset + s[j3++]]));
    ({ a: v32, b: v4, c: v9, d: v14 } = G1s(v32, v4, v9, v14, msg[offset + s[j3++]]));
    ({ a: v32, b: v4, c: v9, d: v14 } = G2s(v32, v4, v9, v14, msg[offset + s[j3++]]));
  }
  return { v0, v1, v2: v22, v3: v32, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 };
}
var B2S_IV = SHA256_IV;
var BLAKE2s = class extends BLAKE2 {
  constructor(opts = {}) {
    const olen = opts.dkLen === void 0 ? 32 : opts.dkLen;
    super(64, olen);
    this.v0 = B2S_IV[0] | 0;
    this.v1 = B2S_IV[1] | 0;
    this.v2 = B2S_IV[2] | 0;
    this.v3 = B2S_IV[3] | 0;
    this.v4 = B2S_IV[4] | 0;
    this.v5 = B2S_IV[5] | 0;
    this.v6 = B2S_IV[6] | 0;
    this.v7 = B2S_IV[7] | 0;
    checkBlake2Opts(olen, opts, 32, 8, 8);
    let { key, personalization, salt } = opts;
    let keyLength = 0;
    if (key !== void 0) {
      key = toBytes(key);
      keyLength = key.length;
    }
    this.v0 ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
    if (salt !== void 0) {
      salt = toBytes(salt);
      const slt = u32(salt);
      this.v4 ^= swap8IfBE(slt[0]);
      this.v5 ^= swap8IfBE(slt[1]);
    }
    if (personalization !== void 0) {
      personalization = toBytes(personalization);
      const pers = u32(personalization);
      this.v6 ^= swap8IfBE(pers[0]);
      this.v7 ^= swap8IfBE(pers[1]);
    }
    if (key !== void 0) {
      abytes(key);
      const tmp = new Uint8Array(this.blockLen);
      tmp.set(key);
      this.update(tmp);
    }
  }
  get() {
    const { v0, v1, v2: v22, v3: v32, v4, v5, v6, v7 } = this;
    return [v0, v1, v22, v32, v4, v5, v6, v7];
  }
  // prettier-ignore
  set(v0, v1, v22, v32, v4, v5, v6, v7) {
    this.v0 = v0 | 0;
    this.v1 = v1 | 0;
    this.v2 = v22 | 0;
    this.v3 = v32 | 0;
    this.v4 = v4 | 0;
    this.v5 = v5 | 0;
    this.v6 = v6 | 0;
    this.v7 = v7 | 0;
  }
  compress(msg, offset, isLast) {
    const { h: h3, l: l2 } = fromBig(BigInt(this.length));
    const { v0, v1, v2: v22, v3: v32, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } = compress(BSIGMA, offset, msg, 10, this.v0, this.v1, this.v2, this.v3, this.v4, this.v5, this.v6, this.v7, B2S_IV[0], B2S_IV[1], B2S_IV[2], B2S_IV[3], l2 ^ B2S_IV[4], h3 ^ B2S_IV[5], isLast ? ~B2S_IV[6] : B2S_IV[6], B2S_IV[7]);
    this.v0 ^= v0 ^ v8;
    this.v1 ^= v1 ^ v9;
    this.v2 ^= v22 ^ v10;
    this.v3 ^= v32 ^ v11;
    this.v4 ^= v4 ^ v12;
    this.v5 ^= v5 ^ v13;
    this.v6 ^= v6 ^ v14;
    this.v7 ^= v7 ^ v15;
  }
  destroy() {
    this.destroyed = true;
    clean(this.buffer32);
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var blake2s = createOptHasher((opts) => new BLAKE2s(opts));

// node_modules/@noble/hashes/esm/blake3.js
var B3_Flags = {
  CHUNK_START: 1,
  CHUNK_END: 2,
  PARENT: 4,
  ROOT: 8,
  KEYED_HASH: 16,
  DERIVE_KEY_CONTEXT: 32,
  DERIVE_KEY_MATERIAL: 64
};
var B3_IV = SHA256_IV.slice();
var B3_SIGMA = (() => {
  const Id = Array.from({ length: 16 }, (_2, i3) => i3);
  const permute = (arr) => [2, 6, 3, 10, 7, 0, 4, 13, 1, 11, 12, 5, 9, 14, 15, 8].map((i3) => arr[i3]);
  const res = [];
  for (let i3 = 0, v4 = Id; i3 < 7; i3++, v4 = permute(v4))
    res.push(...v4);
  return Uint8Array.from(res);
})();
var BLAKE3 = class _BLAKE3 extends BLAKE2 {
  constructor(opts = {}, flags = 0) {
    super(64, opts.dkLen === void 0 ? 32 : opts.dkLen);
    this.chunkPos = 0;
    this.chunksDone = 0;
    this.flags = 0 | 0;
    this.stack = [];
    this.posOut = 0;
    this.bufferOut32 = new Uint32Array(16);
    this.chunkOut = 0;
    this.enableXOF = true;
    const { key, context } = opts;
    const hasContext = context !== void 0;
    if (key !== void 0) {
      if (hasContext)
        throw new Error('Only "key" or "context" can be specified at same time');
      const k2 = toBytes(key).slice();
      abytes(k2, 32);
      this.IV = u32(k2);
      swap32IfBE(this.IV);
      this.flags = flags | B3_Flags.KEYED_HASH;
    } else if (hasContext) {
      const ctx = toBytes(context);
      const contextKey = new _BLAKE3({ dkLen: 32 }, B3_Flags.DERIVE_KEY_CONTEXT).update(ctx).digest();
      this.IV = u32(contextKey);
      swap32IfBE(this.IV);
      this.flags = flags | B3_Flags.DERIVE_KEY_MATERIAL;
    } else {
      this.IV = B3_IV.slice();
      this.flags = flags;
    }
    this.state = this.IV.slice();
    this.bufferOut = u8(this.bufferOut32);
  }
  // Unused
  get() {
    return [];
  }
  set() {
  }
  b2Compress(counter, flags, buf, bufPos = 0) {
    const { state: s, pos } = this;
    const { h: h3, l: l2 } = fromBig(BigInt(counter), true);
    const { v0, v1, v2: v22, v3: v32, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } = compress(B3_SIGMA, bufPos, buf, 7, s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7], B3_IV[0], B3_IV[1], B3_IV[2], B3_IV[3], h3, l2, pos, flags);
    s[0] = v0 ^ v8;
    s[1] = v1 ^ v9;
    s[2] = v22 ^ v10;
    s[3] = v32 ^ v11;
    s[4] = v4 ^ v12;
    s[5] = v5 ^ v13;
    s[6] = v6 ^ v14;
    s[7] = v7 ^ v15;
  }
  compress(buf, bufPos = 0, isLast = false) {
    let flags = this.flags;
    if (!this.chunkPos)
      flags |= B3_Flags.CHUNK_START;
    if (this.chunkPos === 15 || isLast)
      flags |= B3_Flags.CHUNK_END;
    if (!isLast)
      this.pos = this.blockLen;
    this.b2Compress(this.chunksDone, flags, buf, bufPos);
    this.chunkPos += 1;
    if (this.chunkPos === 16 || isLast) {
      let chunk = this.state;
      this.state = this.IV.slice();
      for (let last, chunks = this.chunksDone + 1; isLast || !(chunks & 1); chunks >>= 1) {
        if (!(last = this.stack.pop()))
          break;
        this.buffer32.set(last, 0);
        this.buffer32.set(chunk, 8);
        this.pos = this.blockLen;
        this.b2Compress(0, this.flags | B3_Flags.PARENT, this.buffer32, 0);
        chunk = this.state;
        this.state = this.IV.slice();
      }
      this.chunksDone++;
      this.chunkPos = 0;
      this.stack.push(chunk);
    }
    this.pos = 0;
  }
  _cloneInto(to3) {
    to3 = super._cloneInto(to3);
    const { IV, flags, state: state8, chunkPos, posOut, chunkOut, stack, chunksDone } = this;
    to3.state.set(state8.slice());
    to3.stack = stack.map((i3) => Uint32Array.from(i3));
    to3.IV.set(IV);
    to3.flags = flags;
    to3.chunkPos = chunkPos;
    to3.chunksDone = chunksDone;
    to3.posOut = posOut;
    to3.chunkOut = chunkOut;
    to3.enableXOF = this.enableXOF;
    to3.bufferOut32.set(this.bufferOut32);
    return to3;
  }
  destroy() {
    this.destroyed = true;
    clean(this.state, this.buffer32, this.IV, this.bufferOut32);
    clean(...this.stack);
  }
  // Same as b2Compress, but doesn't modify state and returns 16 u32 array (instead of 8)
  b2CompressOut() {
    const { state: s, pos, flags, buffer32, bufferOut32: out32 } = this;
    const { h: h3, l: l2 } = fromBig(BigInt(this.chunkOut++));
    swap32IfBE(buffer32);
    const { v0, v1, v2: v22, v3: v32, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } = compress(B3_SIGMA, 0, buffer32, 7, s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7], B3_IV[0], B3_IV[1], B3_IV[2], B3_IV[3], l2, h3, pos, flags);
    out32[0] = v0 ^ v8;
    out32[1] = v1 ^ v9;
    out32[2] = v22 ^ v10;
    out32[3] = v32 ^ v11;
    out32[4] = v4 ^ v12;
    out32[5] = v5 ^ v13;
    out32[6] = v6 ^ v14;
    out32[7] = v7 ^ v15;
    out32[8] = s[0] ^ v8;
    out32[9] = s[1] ^ v9;
    out32[10] = s[2] ^ v10;
    out32[11] = s[3] ^ v11;
    out32[12] = s[4] ^ v12;
    out32[13] = s[5] ^ v13;
    out32[14] = s[6] ^ v14;
    out32[15] = s[7] ^ v15;
    swap32IfBE(buffer32);
    swap32IfBE(out32);
    this.posOut = 0;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    clean(this.buffer.subarray(this.pos));
    let flags = this.flags | B3_Flags.ROOT;
    if (this.stack.length) {
      flags |= B3_Flags.PARENT;
      swap32IfBE(this.buffer32);
      this.compress(this.buffer32, 0, true);
      swap32IfBE(this.buffer32);
      this.chunksDone = 0;
      this.pos = this.blockLen;
    } else {
      flags |= (!this.chunkPos ? B3_Flags.CHUNK_START : 0) | B3_Flags.CHUNK_END;
    }
    this.flags = flags;
    this.b2CompressOut();
  }
  writeInto(out) {
    aexists(this, false);
    abytes(out);
    this.finish();
    const { blockLen, bufferOut } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.b2CompressOut();
      const take = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
      this.posOut += take;
      pos += take;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible after digest call");
    return this.writeInto(out);
  }
  xof(bytes) {
    anumber(bytes);
    return this.xofInto(new Uint8Array(bytes));
  }
  digestInto(out) {
    aoutput(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.enableXOF = false;
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
};
var blake3 = createXOFer((opts) => new BLAKE3(opts));

// node_modules/ox/_esm/core/Blobs.js
var blobsPerTransaction = 6;
var bytesPerFieldElement = 32;
var fieldElementsPerBlob = 4096;
var bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;
var maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * fieldElementsPerBlob * blobsPerTransaction;

// node_modules/ox/node_modules/@noble/curves/esm/abstract/bls.js
var _0n6 = BigInt(0);
var _1n6 = BigInt(1);
var _2n4 = BigInt(2);
var _3n3 = BigInt(3);
function NAfDecomposition(a2) {
  const res = [];
  for (; a2 > _1n6; a2 >>= _1n6) {
    if ((a2 & _1n6) === _0n6)
      res.unshift(0);
    else if ((a2 & _3n3) === _3n3) {
      res.unshift(-1);
      a2 += _1n6;
    } else
      res.unshift(1);
  }
  return res;
}
function bls(CURVE) {
  const { Fp: Fp4, Fr: Fr4, Fp2: Fp22, Fp6: Fp62, Fp12: Fp122 } = CURVE.fields;
  const BLS_X_IS_NEGATIVE = CURVE.params.xNegative;
  const TWIST = CURVE.params.twistType;
  const G1_ = weierstrassPoints({ n: Fr4.ORDER, ...CURVE.G1 });
  const G1 = Object.assign(G1_, createHasher(G1_.ProjectivePoint, CURVE.G1.mapToCurve, {
    ...CURVE.htfDefaults,
    ...CURVE.G1.htfDefaults
  }));
  const G2_ = weierstrassPoints({ n: Fr4.ORDER, ...CURVE.G2 });
  const G22 = Object.assign(G2_, createHasher(G2_.ProjectivePoint, CURVE.G2.mapToCurve, {
    ...CURVE.htfDefaults,
    ...CURVE.G2.htfDefaults
  }));
  let lineFunction;
  if (TWIST === "multiplicative") {
    lineFunction = (c0, c1, c22, f6, Px, Py) => Fp122.mul014(f6, c0, Fp22.mul(c1, Px), Fp22.mul(c22, Py));
  } else if (TWIST === "divisive") {
    lineFunction = (c0, c1, c22, f6, Px, Py) => Fp122.mul034(f6, Fp22.mul(c22, Py), Fp22.mul(c1, Px), c0);
  } else
    throw new Error("bls: unknown twist type");
  const Fp2div2 = Fp22.div(Fp22.ONE, Fp22.mul(Fp22.ONE, _2n4));
  function pointDouble(ell, Rx, Ry, Rz) {
    const t0 = Fp22.sqr(Ry);
    const t1 = Fp22.sqr(Rz);
    const t2 = Fp22.mulByB(Fp22.mul(t1, _3n3));
    const t3 = Fp22.mul(t2, _3n3);
    const t4 = Fp22.sub(Fp22.sub(Fp22.sqr(Fp22.add(Ry, Rz)), t1), t0);
    const c0 = Fp22.sub(t2, t0);
    const c1 = Fp22.mul(Fp22.sqr(Rx), _3n3);
    const c22 = Fp22.neg(t4);
    ell.push([c0, c1, c22]);
    Rx = Fp22.mul(Fp22.mul(Fp22.mul(Fp22.sub(t0, t3), Rx), Ry), Fp2div2);
    Ry = Fp22.sub(Fp22.sqr(Fp22.mul(Fp22.add(t0, t3), Fp2div2)), Fp22.mul(Fp22.sqr(t2), _3n3));
    Rz = Fp22.mul(t0, t4);
    return { Rx, Ry, Rz };
  }
  function pointAdd(ell, Rx, Ry, Rz, Qx, Qy) {
    const t0 = Fp22.sub(Ry, Fp22.mul(Qy, Rz));
    const t1 = Fp22.sub(Rx, Fp22.mul(Qx, Rz));
    const c0 = Fp22.sub(Fp22.mul(t0, Qx), Fp22.mul(t1, Qy));
    const c1 = Fp22.neg(t0);
    const c22 = t1;
    ell.push([c0, c1, c22]);
    const t2 = Fp22.sqr(t1);
    const t3 = Fp22.mul(t2, t1);
    const t4 = Fp22.mul(t2, Rx);
    const t5 = Fp22.add(Fp22.sub(t3, Fp22.mul(t4, _2n4)), Fp22.mul(Fp22.sqr(t0), Rz));
    Rx = Fp22.mul(t1, t5);
    Ry = Fp22.sub(Fp22.mul(Fp22.sub(t4, t5), t0), Fp22.mul(t3, Ry));
    Rz = Fp22.mul(Rz, t3);
    return { Rx, Ry, Rz };
  }
  const ATE_NAF = NAfDecomposition(CURVE.params.ateLoopSize);
  const calcPairingPrecomputes = memoized((point) => {
    const p3 = point;
    const { x: x3, y: y3 } = p3.toAffine();
    const Qx = x3, Qy = y3, negQy = Fp22.neg(y3);
    let Rx = Qx, Ry = Qy, Rz = Fp22.ONE;
    const ell = [];
    for (const bit of ATE_NAF) {
      const cur = [];
      ({ Rx, Ry, Rz } = pointDouble(cur, Rx, Ry, Rz));
      if (bit)
        ({ Rx, Ry, Rz } = pointAdd(cur, Rx, Ry, Rz, Qx, bit === -1 ? negQy : Qy));
      ell.push(cur);
    }
    if (CURVE.postPrecompute) {
      const last = ell[ell.length - 1];
      CURVE.postPrecompute(Rx, Ry, Rz, Qx, Qy, pointAdd.bind(null, last));
    }
    return ell;
  });
  function millerLoopBatch(pairs, withFinalExponent = false) {
    let f12 = Fp122.ONE;
    if (pairs.length) {
      const ellLen = pairs[0][0].length;
      for (let i3 = 0; i3 < ellLen; i3++) {
        f12 = Fp122.sqr(f12);
        for (const [ell, Px, Py] of pairs) {
          for (const [c0, c1, c22] of ell[i3])
            f12 = lineFunction(c0, c1, c22, f12, Px, Py);
        }
      }
    }
    if (BLS_X_IS_NEGATIVE)
      f12 = Fp122.conjugate(f12);
    return withFinalExponent ? Fp122.finalExponentiate(f12) : f12;
  }
  function pairingBatch(pairs, withFinalExponent = true) {
    const res = [];
    G1.ProjectivePoint.normalizeZ(pairs.map(({ g1 }) => g1));
    G22.ProjectivePoint.normalizeZ(pairs.map(({ g2 }) => g2));
    for (const { g1, g2 } of pairs) {
      if (g1.equals(G1.ProjectivePoint.ZERO) || g2.equals(G22.ProjectivePoint.ZERO))
        throw new Error("pairing is not available for ZERO point");
      g1.assertValidity();
      g2.assertValidity();
      const Qa2 = g1.toAffine();
      res.push([calcPairingPrecomputes(g2), Qa2.x, Qa2.y]);
    }
    return millerLoopBatch(res, withFinalExponent);
  }
  function pairing(Q3, P4, withFinalExponent = true) {
    return pairingBatch([{ g1: Q3, g2: P4 }], withFinalExponent);
  }
  const utils = {
    randomPrivateKey: () => {
      const length = getMinHashLength(Fr4.ORDER);
      return mapHashToField(CURVE.randomBytes(length), Fr4.ORDER);
    },
    calcPairingPrecomputes
  };
  const { ShortSignature } = CURVE.G1;
  const { Signature } = CURVE.G2;
  function normP1(point) {
    return point instanceof G1.ProjectivePoint ? point : G1.ProjectivePoint.fromHex(point);
  }
  function normP1Hash(point, htfOpts) {
    return point instanceof G1.ProjectivePoint ? point : G1.hashToCurve(ensureBytes("point", point), htfOpts);
  }
  function normP2(point) {
    return point instanceof G22.ProjectivePoint ? point : Signature.fromHex(point);
  }
  function normP2Hash(point, htfOpts) {
    return point instanceof G22.ProjectivePoint ? point : G22.hashToCurve(ensureBytes("point", point), htfOpts);
  }
  function getPublicKey2(privateKey) {
    return G1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);
  }
  function getPublicKeyForShortSignatures(privateKey) {
    return G22.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);
  }
  function sign2(message, privateKey, htfOpts) {
    const msgPoint = normP2Hash(message, htfOpts);
    msgPoint.assertValidity();
    const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));
    if (message instanceof G22.ProjectivePoint)
      return sigPoint;
    return Signature.toRawBytes(sigPoint);
  }
  function signShortSignature(message, privateKey, htfOpts) {
    const msgPoint = normP1Hash(message, htfOpts);
    msgPoint.assertValidity();
    const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));
    if (message instanceof G1.ProjectivePoint)
      return sigPoint;
    return ShortSignature.toRawBytes(sigPoint);
  }
  function verify3(signature, message, publicKey, htfOpts) {
    const P4 = normP1(publicKey);
    const Hm = normP2Hash(message, htfOpts);
    const G4 = G1.ProjectivePoint.BASE;
    const S4 = normP2(signature);
    const exp = pairingBatch([
      { g1: P4.negate(), g2: Hm },
      // ePHM = pairing(P.negate(), Hm, false);
      { g1: G4, g2: S4 }
      // eGS = pairing(G, S, false);
    ]);
    return Fp122.eql(exp, Fp122.ONE);
  }
  function verifyShortSignature(signature, message, publicKey, htfOpts) {
    const P4 = normP2(publicKey);
    const Hm = normP1Hash(message, htfOpts);
    const G4 = G22.ProjectivePoint.BASE;
    const S4 = normP1(signature);
    const exp = pairingBatch([
      { g1: Hm, g2: P4 },
      // eHmP = pairing(Hm, P, false);
      { g1: S4, g2: G4.negate() }
      // eSG = pairing(S, G.negate(), false);
    ]);
    return Fp122.eql(exp, Fp122.ONE);
  }
  function aNonEmpty(arr) {
    if (!Array.isArray(arr) || arr.length === 0)
      throw new Error("expected non-empty array");
  }
  function aggregatePublicKeys(publicKeys) {
    aNonEmpty(publicKeys);
    const agg = publicKeys.map(normP1).reduce((sum, p3) => sum.add(p3), G1.ProjectivePoint.ZERO);
    const aggAffine = agg;
    if (publicKeys[0] instanceof G1.ProjectivePoint) {
      aggAffine.assertValidity();
      return aggAffine;
    }
    return aggAffine.toRawBytes(true);
  }
  function aggregateSignatures(signatures) {
    aNonEmpty(signatures);
    const agg = signatures.map(normP2).reduce((sum, s) => sum.add(s), G22.ProjectivePoint.ZERO);
    const aggAffine = agg;
    if (signatures[0] instanceof G22.ProjectivePoint) {
      aggAffine.assertValidity();
      return aggAffine;
    }
    return Signature.toRawBytes(aggAffine);
  }
  function aggregateShortSignatures(signatures) {
    aNonEmpty(signatures);
    const agg = signatures.map(normP1).reduce((sum, s) => sum.add(s), G1.ProjectivePoint.ZERO);
    const aggAffine = agg;
    if (signatures[0] instanceof G1.ProjectivePoint) {
      aggAffine.assertValidity();
      return aggAffine;
    }
    return ShortSignature.toRawBytes(aggAffine);
  }
  function verifyBatch(signature, messages, publicKeys, htfOpts) {
    aNonEmpty(messages);
    if (publicKeys.length !== messages.length)
      throw new Error("amount of public keys and messages should be equal");
    const sig = normP2(signature);
    const nMessages = messages.map((i3) => normP2Hash(i3, htfOpts));
    const nPublicKeys = publicKeys.map(normP1);
    const messagePubKeyMap = /* @__PURE__ */ new Map();
    for (let i3 = 0; i3 < nPublicKeys.length; i3++) {
      const pub = nPublicKeys[i3];
      const msg = nMessages[i3];
      let keys = messagePubKeyMap.get(msg);
      if (keys === void 0) {
        keys = [];
        messagePubKeyMap.set(msg, keys);
      }
      keys.push(pub);
    }
    const paired = [];
    try {
      for (const [msg, keys] of messagePubKeyMap) {
        const groupPublicKey = keys.reduce((acc, msg2) => acc.add(msg2));
        paired.push({ g1: groupPublicKey, g2: msg });
      }
      paired.push({ g1: G1.ProjectivePoint.BASE.negate(), g2: sig });
      return Fp122.eql(pairingBatch(paired), Fp122.ONE);
    } catch {
      return false;
    }
  }
  G1.ProjectivePoint.BASE._setWindowSize(4);
  return {
    getPublicKey: getPublicKey2,
    getPublicKeyForShortSignatures,
    sign: sign2,
    signShortSignature,
    verify: verify3,
    verifyBatch,
    verifyShortSignature,
    aggregatePublicKeys,
    aggregateSignatures,
    aggregateShortSignatures,
    millerLoopBatch,
    pairing,
    pairingBatch,
    G1,
    G2: G22,
    Signature,
    ShortSignature,
    fields: {
      Fr: Fr4,
      Fp: Fp4,
      Fp2: Fp22,
      Fp6: Fp62,
      Fp12: Fp122
    },
    params: {
      ateLoopSize: CURVE.params.ateLoopSize,
      r: CURVE.params.r,
      G1b: CURVE.G1.b,
      G2b: CURVE.G2.b
    },
    utils
  };
}

// node_modules/ox/node_modules/@noble/curves/esm/abstract/tower.js
var _0n7 = BigInt(0);
var _1n7 = BigInt(1);
var _2n5 = BigInt(2);
var _3n4 = BigInt(3);
function calcFrobeniusCoefficients(Fp4, nonResidue, modulus, degree, num2 = 1, divisor) {
  const _divisor = BigInt(divisor === void 0 ? degree : divisor);
  const towerModulus = modulus ** BigInt(degree);
  const res = [];
  for (let i3 = 0; i3 < num2; i3++) {
    const a2 = BigInt(i3 + 1);
    const powers = [];
    for (let j3 = 0, qPower = _1n7; j3 < degree; j3++) {
      const power = (a2 * qPower - a2) / _divisor % towerModulus;
      powers.push(Fp4.pow(nonResidue, power));
      qPower *= modulus;
    }
    res.push(powers);
  }
  return res;
}
function psiFrobenius(Fp4, Fp22, base) {
  const PSI_X = Fp22.pow(base, (Fp4.ORDER - _1n7) / _3n4);
  const PSI_Y = Fp22.pow(base, (Fp4.ORDER - _1n7) / _2n5);
  function psi(x3, y3) {
    const x22 = Fp22.mul(Fp22.frobeniusMap(x3, 1), PSI_X);
    const y22 = Fp22.mul(Fp22.frobeniusMap(y3, 1), PSI_Y);
    return [x22, y22];
  }
  const PSI2_X = Fp22.pow(base, (Fp4.ORDER ** _2n5 - _1n7) / _3n4);
  const PSI2_Y = Fp22.pow(base, (Fp4.ORDER ** _2n5 - _1n7) / _2n5);
  if (!Fp22.eql(PSI2_Y, Fp22.neg(Fp22.ONE)))
    throw new Error("psiFrobenius: PSI2_Y!==-1");
  function psi2(x3, y3) {
    return [Fp22.mul(x3, PSI2_X), Fp22.neg(y3)];
  }
  const mapAffine = (fn3) => (c3, P4) => {
    const affine = P4.toAffine();
    const p3 = fn3(affine.x, affine.y);
    return c3.fromAffine({ x: p3[0], y: p3[1] });
  };
  const G2psi3 = mapAffine(psi);
  const G2psi22 = mapAffine(psi2);
  return { psi, psi2, G2psi: G2psi3, G2psi2: G2psi22, PSI_X, PSI_Y, PSI2_X, PSI2_Y };
}
function tower12(opts) {
  const { ORDER } = opts;
  const Fp4 = Field(ORDER);
  const FpNONRESIDUE = Fp4.create(opts.NONRESIDUE || BigInt(-1));
  const Fpdiv2 = Fp4.div(Fp4.ONE, _2n5);
  const FP2_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp4, FpNONRESIDUE, Fp4.ORDER, 2)[0];
  const Fp2Add = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({
    c0: Fp4.add(c0, r0),
    c1: Fp4.add(c1, r1)
  });
  const Fp2Subtract = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({
    c0: Fp4.sub(c0, r0),
    c1: Fp4.sub(c1, r1)
  });
  const Fp2Multiply = ({ c0, c1 }, rhs) => {
    if (typeof rhs === "bigint")
      return { c0: Fp4.mul(c0, rhs), c1: Fp4.mul(c1, rhs) };
    const { c0: r0, c1: r1 } = rhs;
    let t1 = Fp4.mul(c0, r0);
    let t2 = Fp4.mul(c1, r1);
    const o0 = Fp4.sub(t1, t2);
    const o1 = Fp4.sub(Fp4.mul(Fp4.add(c0, c1), Fp4.add(r0, r1)), Fp4.add(t1, t2));
    return { c0: o0, c1: o1 };
  };
  const Fp2Square = ({ c0, c1 }) => {
    const a2 = Fp4.add(c0, c1);
    const b3 = Fp4.sub(c0, c1);
    const c3 = Fp4.add(c0, c0);
    return { c0: Fp4.mul(a2, b3), c1: Fp4.mul(c3, c1) };
  };
  const Fp2fromBigTuple = (tuple) => {
    if (tuple.length !== 2)
      throw new Error("invalid tuple");
    const fps = tuple.map((n2) => Fp4.create(n2));
    return { c0: fps[0], c1: fps[1] };
  };
  const FP2_ORDER = ORDER * ORDER;
  const Fp2Nonresidue = Fp2fromBigTuple(opts.FP2_NONRESIDUE);
  const Fp22 = {
    ORDER: FP2_ORDER,
    isLE: Fp4.isLE,
    NONRESIDUE: Fp2Nonresidue,
    BITS: bitLen(FP2_ORDER),
    BYTES: Math.ceil(bitLen(FP2_ORDER) / 8),
    MASK: bitMask(bitLen(FP2_ORDER)),
    ZERO: { c0: Fp4.ZERO, c1: Fp4.ZERO },
    ONE: { c0: Fp4.ONE, c1: Fp4.ZERO },
    create: (num2) => num2,
    isValid: ({ c0, c1 }) => typeof c0 === "bigint" && typeof c1 === "bigint",
    is0: ({ c0, c1 }) => Fp4.is0(c0) && Fp4.is0(c1),
    eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp4.eql(c0, r0) && Fp4.eql(c1, r1),
    neg: ({ c0, c1 }) => ({ c0: Fp4.neg(c0), c1: Fp4.neg(c1) }),
    pow: (num2, power) => FpPow(Fp22, num2, power),
    invertBatch: (nums) => FpInvertBatch(Fp22, nums),
    // Normalized
    add: Fp2Add,
    sub: Fp2Subtract,
    mul: Fp2Multiply,
    sqr: Fp2Square,
    // NonNormalized stuff
    addN: Fp2Add,
    subN: Fp2Subtract,
    mulN: Fp2Multiply,
    sqrN: Fp2Square,
    // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?
    div: (lhs, rhs) => Fp22.mul(lhs, typeof rhs === "bigint" ? Fp4.inv(Fp4.create(rhs)) : Fp22.inv(rhs)),
    inv: ({ c0: a2, c1: b3 }) => {
      const factor = Fp4.inv(Fp4.create(a2 * a2 + b3 * b3));
      return { c0: Fp4.mul(factor, Fp4.create(a2)), c1: Fp4.mul(factor, Fp4.create(-b3)) };
    },
    sqrt: (num2) => {
      if (opts.Fp2sqrt)
        return opts.Fp2sqrt(num2);
      const { c0, c1 } = num2;
      if (Fp4.is0(c1)) {
        if (FpLegendre(Fp4, c0) === 1)
          return Fp22.create({ c0: Fp4.sqrt(c0), c1: Fp4.ZERO });
        else
          return Fp22.create({ c0: Fp4.ZERO, c1: Fp4.sqrt(Fp4.div(c0, FpNONRESIDUE)) });
      }
      const a2 = Fp4.sqrt(Fp4.sub(Fp4.sqr(c0), Fp4.mul(Fp4.sqr(c1), FpNONRESIDUE)));
      let d4 = Fp4.mul(Fp4.add(a2, c0), Fpdiv2);
      const legendre = FpLegendre(Fp4, d4);
      if (legendre === -1)
        d4 = Fp4.sub(d4, a2);
      const a0 = Fp4.sqrt(d4);
      const candidateSqrt = Fp22.create({ c0: a0, c1: Fp4.div(Fp4.mul(c1, Fpdiv2), a0) });
      if (!Fp22.eql(Fp22.sqr(candidateSqrt), num2))
        throw new Error("Cannot find square root");
      const x1 = candidateSqrt;
      const x22 = Fp22.neg(x1);
      const { re: re1, im: im1 } = Fp22.reim(x1);
      const { re: re22, im: im2 } = Fp22.reim(x22);
      if (im1 > im2 || im1 === im2 && re1 > re22)
        return x1;
      return x22;
    },
    // Same as sgn0_m_eq_2 in RFC 9380
    isOdd: (x3) => {
      const { re: x0, im: x1 } = Fp22.reim(x3);
      const sign_0 = x0 % _2n5;
      const zero_0 = x0 === _0n7;
      const sign_1 = x1 % _2n5;
      return BigInt(sign_0 || zero_0 && sign_1) == _1n7;
    },
    // Bytes util
    fromBytes(b3) {
      if (b3.length !== Fp22.BYTES)
        throw new Error("fromBytes invalid length=" + b3.length);
      return { c0: Fp4.fromBytes(b3.subarray(0, Fp4.BYTES)), c1: Fp4.fromBytes(b3.subarray(Fp4.BYTES)) };
    },
    toBytes: ({ c0, c1 }) => concatBytes2(Fp4.toBytes(c0), Fp4.toBytes(c1)),
    cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c3) => ({
      c0: Fp4.cmov(c0, r0, c3),
      c1: Fp4.cmov(c1, r1, c3)
    }),
    reim: ({ c0, c1 }) => ({ re: c0, im: c1 }),
    // multiply by u + 1
    mulByNonresidue: ({ c0, c1 }) => Fp22.mul({ c0, c1 }, Fp2Nonresidue),
    mulByB: opts.Fp2mulByB,
    fromBigTuple: Fp2fromBigTuple,
    frobeniusMap: ({ c0, c1 }, power) => ({
      c0,
      c1: Fp4.mul(c1, FP2_FROBENIUS_COEFFICIENTS[power % 2])
    })
  };
  const Fp6Add = ({ c0, c1, c2: c22 }, { c0: r0, c1: r1, c2: r2 }) => ({
    c0: Fp22.add(c0, r0),
    c1: Fp22.add(c1, r1),
    c2: Fp22.add(c22, r2)
  });
  const Fp6Subtract = ({ c0, c1, c2: c22 }, { c0: r0, c1: r1, c2: r2 }) => ({
    c0: Fp22.sub(c0, r0),
    c1: Fp22.sub(c1, r1),
    c2: Fp22.sub(c22, r2)
  });
  const Fp6Multiply = ({ c0, c1, c2: c22 }, rhs) => {
    if (typeof rhs === "bigint") {
      return {
        c0: Fp22.mul(c0, rhs),
        c1: Fp22.mul(c1, rhs),
        c2: Fp22.mul(c22, rhs)
      };
    }
    const { c0: r0, c1: r1, c2: r2 } = rhs;
    const t0 = Fp22.mul(c0, r0);
    const t1 = Fp22.mul(c1, r1);
    const t2 = Fp22.mul(c22, r2);
    return {
      // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)
      c0: Fp22.add(t0, Fp22.mulByNonresidue(Fp22.sub(Fp22.mul(Fp22.add(c1, c22), Fp22.add(r1, r2)), Fp22.add(t1, t2)))),
      // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)
      c1: Fp22.add(Fp22.sub(Fp22.mul(Fp22.add(c0, c1), Fp22.add(r0, r1)), Fp22.add(t0, t1)), Fp22.mulByNonresidue(t2)),
      // T1 + (c0 + c2) * (r0 + r2) - T0 + T2
      c2: Fp22.sub(Fp22.add(t1, Fp22.mul(Fp22.add(c0, c22), Fp22.add(r0, r2))), Fp22.add(t0, t2))
    };
  };
  const Fp6Square = ({ c0, c1, c2: c22 }) => {
    let t0 = Fp22.sqr(c0);
    let t1 = Fp22.mul(Fp22.mul(c0, c1), _2n5);
    let t3 = Fp22.mul(Fp22.mul(c1, c22), _2n5);
    let t4 = Fp22.sqr(c22);
    return {
      c0: Fp22.add(Fp22.mulByNonresidue(t3), t0),
      // T3 * (u + 1) + T0
      c1: Fp22.add(Fp22.mulByNonresidue(t4), t1),
      // T4 * (u + 1) + T1
      // T1 + (c0 - c1 + c2)² + T3 - T0 - T4
      c2: Fp22.sub(Fp22.sub(Fp22.add(Fp22.add(t1, Fp22.sqr(Fp22.add(Fp22.sub(c0, c1), c22))), t3), t0), t4)
    };
  };
  const [FP6_FROBENIUS_COEFFICIENTS_1, FP6_FROBENIUS_COEFFICIENTS_2] = calcFrobeniusCoefficients(Fp22, Fp2Nonresidue, Fp4.ORDER, 6, 2, 3);
  const Fp62 = {
    ORDER: Fp22.ORDER,
    // TODO: unused, but need to verify
    isLE: Fp22.isLE,
    BITS: 3 * Fp22.BITS,
    BYTES: 3 * Fp22.BYTES,
    MASK: bitMask(3 * Fp22.BITS),
    ZERO: { c0: Fp22.ZERO, c1: Fp22.ZERO, c2: Fp22.ZERO },
    ONE: { c0: Fp22.ONE, c1: Fp22.ZERO, c2: Fp22.ZERO },
    create: (num2) => num2,
    isValid: ({ c0, c1, c2: c22 }) => Fp22.isValid(c0) && Fp22.isValid(c1) && Fp22.isValid(c22),
    is0: ({ c0, c1, c2: c22 }) => Fp22.is0(c0) && Fp22.is0(c1) && Fp22.is0(c22),
    neg: ({ c0, c1, c2: c22 }) => ({ c0: Fp22.neg(c0), c1: Fp22.neg(c1), c2: Fp22.neg(c22) }),
    eql: ({ c0, c1, c2: c22 }, { c0: r0, c1: r1, c2: r2 }) => Fp22.eql(c0, r0) && Fp22.eql(c1, r1) && Fp22.eql(c22, r2),
    sqrt: notImplemented,
    // Do we need division by bigint at all? Should be done via order:
    div: (lhs, rhs) => Fp62.mul(lhs, typeof rhs === "bigint" ? Fp4.inv(Fp4.create(rhs)) : Fp62.inv(rhs)),
    pow: (num2, power) => FpPow(Fp62, num2, power),
    invertBatch: (nums) => FpInvertBatch(Fp62, nums),
    // Normalized
    add: Fp6Add,
    sub: Fp6Subtract,
    mul: Fp6Multiply,
    sqr: Fp6Square,
    // NonNormalized stuff
    addN: Fp6Add,
    subN: Fp6Subtract,
    mulN: Fp6Multiply,
    sqrN: Fp6Square,
    inv: ({ c0, c1, c2: c22 }) => {
      let t0 = Fp22.sub(Fp22.sqr(c0), Fp22.mulByNonresidue(Fp22.mul(c22, c1)));
      let t1 = Fp22.sub(Fp22.mulByNonresidue(Fp22.sqr(c22)), Fp22.mul(c0, c1));
      let t2 = Fp22.sub(Fp22.sqr(c1), Fp22.mul(c0, c22));
      let t4 = Fp22.inv(Fp22.add(Fp22.mulByNonresidue(Fp22.add(Fp22.mul(c22, t1), Fp22.mul(c1, t2))), Fp22.mul(c0, t0)));
      return { c0: Fp22.mul(t4, t0), c1: Fp22.mul(t4, t1), c2: Fp22.mul(t4, t2) };
    },
    // Bytes utils
    fromBytes: (b3) => {
      if (b3.length !== Fp62.BYTES)
        throw new Error("fromBytes invalid length=" + b3.length);
      return {
        c0: Fp22.fromBytes(b3.subarray(0, Fp22.BYTES)),
        c1: Fp22.fromBytes(b3.subarray(Fp22.BYTES, 2 * Fp22.BYTES)),
        c2: Fp22.fromBytes(b3.subarray(2 * Fp22.BYTES))
      };
    },
    toBytes: ({ c0, c1, c2: c22 }) => concatBytes2(Fp22.toBytes(c0), Fp22.toBytes(c1), Fp22.toBytes(c22)),
    cmov: ({ c0, c1, c2: c22 }, { c0: r0, c1: r1, c2: r2 }, c3) => ({
      c0: Fp22.cmov(c0, r0, c3),
      c1: Fp22.cmov(c1, r1, c3),
      c2: Fp22.cmov(c22, r2, c3)
    }),
    fromBigSix: (t) => {
      if (!Array.isArray(t) || t.length !== 6)
        throw new Error("invalid Fp6 usage");
      return {
        c0: Fp22.fromBigTuple(t.slice(0, 2)),
        c1: Fp22.fromBigTuple(t.slice(2, 4)),
        c2: Fp22.fromBigTuple(t.slice(4, 6))
      };
    },
    frobeniusMap: ({ c0, c1, c2: c22 }, power) => ({
      c0: Fp22.frobeniusMap(c0, power),
      c1: Fp22.mul(Fp22.frobeniusMap(c1, power), FP6_FROBENIUS_COEFFICIENTS_1[power % 6]),
      c2: Fp22.mul(Fp22.frobeniusMap(c22, power), FP6_FROBENIUS_COEFFICIENTS_2[power % 6])
    }),
    mulByFp2: ({ c0, c1, c2: c22 }, rhs) => ({
      c0: Fp22.mul(c0, rhs),
      c1: Fp22.mul(c1, rhs),
      c2: Fp22.mul(c22, rhs)
    }),
    mulByNonresidue: ({ c0, c1, c2: c22 }) => ({ c0: Fp22.mulByNonresidue(c22), c1: c0, c2: c1 }),
    // Sparse multiplication
    mul1: ({ c0, c1, c2: c22 }, b1) => ({
      c0: Fp22.mulByNonresidue(Fp22.mul(c22, b1)),
      c1: Fp22.mul(c0, b1),
      c2: Fp22.mul(c1, b1)
    }),
    // Sparse multiplication
    mul01({ c0, c1, c2: c22 }, b0, b1) {
      let t0 = Fp22.mul(c0, b0);
      let t1 = Fp22.mul(c1, b1);
      return {
        // ((c1 + c2) * b1 - T1) * (u + 1) + T0
        c0: Fp22.add(Fp22.mulByNonresidue(Fp22.sub(Fp22.mul(Fp22.add(c1, c22), b1), t1)), t0),
        // (b0 + b1) * (c0 + c1) - T0 - T1
        c1: Fp22.sub(Fp22.sub(Fp22.mul(Fp22.add(b0, b1), Fp22.add(c0, c1)), t0), t1),
        // (c0 + c2) * b0 - T0 + T1
        c2: Fp22.add(Fp22.sub(Fp22.mul(Fp22.add(c0, c22), b0), t0), t1)
      };
    }
  };
  const FP12_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp22, Fp2Nonresidue, Fp4.ORDER, 12, 1, 6)[0];
  const Fp12Add = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({
    c0: Fp62.add(c0, r0),
    c1: Fp62.add(c1, r1)
  });
  const Fp12Subtract = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({
    c0: Fp62.sub(c0, r0),
    c1: Fp62.sub(c1, r1)
  });
  const Fp12Multiply = ({ c0, c1 }, rhs) => {
    if (typeof rhs === "bigint")
      return { c0: Fp62.mul(c0, rhs), c1: Fp62.mul(c1, rhs) };
    let { c0: r0, c1: r1 } = rhs;
    let t1 = Fp62.mul(c0, r0);
    let t2 = Fp62.mul(c1, r1);
    return {
      c0: Fp62.add(t1, Fp62.mulByNonresidue(t2)),
      // T1 + T2 * v
      // (c0 + c1) * (r0 + r1) - (T1 + T2)
      c1: Fp62.sub(Fp62.mul(Fp62.add(c0, c1), Fp62.add(r0, r1)), Fp62.add(t1, t2))
    };
  };
  const Fp12Square = ({ c0, c1 }) => {
    let ab = Fp62.mul(c0, c1);
    return {
      // (c1 * v + c0) * (c0 + c1) - AB - AB * v
      c0: Fp62.sub(Fp62.sub(Fp62.mul(Fp62.add(Fp62.mulByNonresidue(c1), c0), Fp62.add(c0, c1)), ab), Fp62.mulByNonresidue(ab)),
      c1: Fp62.add(ab, ab)
    };
  };
  function Fp4Square2(a2, b3) {
    const a22 = Fp22.sqr(a2);
    const b22 = Fp22.sqr(b3);
    return {
      first: Fp22.add(Fp22.mulByNonresidue(b22), a22),
      // b² * Nonresidue + a²
      second: Fp22.sub(Fp22.sub(Fp22.sqr(Fp22.add(a2, b3)), a22), b22)
      // (a + b)² - a² - b²
    };
  }
  const Fp122 = {
    ORDER: Fp22.ORDER,
    // TODO: unused, but need to verify
    isLE: Fp62.isLE,
    BITS: 2 * Fp62.BITS,
    BYTES: 2 * Fp62.BYTES,
    MASK: bitMask(2 * Fp62.BITS),
    ZERO: { c0: Fp62.ZERO, c1: Fp62.ZERO },
    ONE: { c0: Fp62.ONE, c1: Fp62.ZERO },
    create: (num2) => num2,
    isValid: ({ c0, c1 }) => Fp62.isValid(c0) && Fp62.isValid(c1),
    is0: ({ c0, c1 }) => Fp62.is0(c0) && Fp62.is0(c1),
    neg: ({ c0, c1 }) => ({ c0: Fp62.neg(c0), c1: Fp62.neg(c1) }),
    eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp62.eql(c0, r0) && Fp62.eql(c1, r1),
    sqrt: notImplemented,
    inv: ({ c0, c1 }) => {
      let t = Fp62.inv(Fp62.sub(Fp62.sqr(c0), Fp62.mulByNonresidue(Fp62.sqr(c1))));
      return { c0: Fp62.mul(c0, t), c1: Fp62.neg(Fp62.mul(c1, t)) };
    },
    div: (lhs, rhs) => Fp122.mul(lhs, typeof rhs === "bigint" ? Fp4.inv(Fp4.create(rhs)) : Fp122.inv(rhs)),
    pow: (num2, power) => FpPow(Fp122, num2, power),
    invertBatch: (nums) => FpInvertBatch(Fp122, nums),
    // Normalized
    add: Fp12Add,
    sub: Fp12Subtract,
    mul: Fp12Multiply,
    sqr: Fp12Square,
    // NonNormalized stuff
    addN: Fp12Add,
    subN: Fp12Subtract,
    mulN: Fp12Multiply,
    sqrN: Fp12Square,
    // Bytes utils
    fromBytes: (b3) => {
      if (b3.length !== Fp122.BYTES)
        throw new Error("fromBytes invalid length=" + b3.length);
      return {
        c0: Fp62.fromBytes(b3.subarray(0, Fp62.BYTES)),
        c1: Fp62.fromBytes(b3.subarray(Fp62.BYTES))
      };
    },
    toBytes: ({ c0, c1 }) => concatBytes2(Fp62.toBytes(c0), Fp62.toBytes(c1)),
    cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c3) => ({
      c0: Fp62.cmov(c0, r0, c3),
      c1: Fp62.cmov(c1, r1, c3)
    }),
    // Utils
    // toString() {
    //   return '' + 'Fp12(' + this.c0 + this.c1 + '* w');
    // },
    // fromTuple(c: [Fp6, Fp6]) {
    //   return new Fp12(...c);
    // }
    fromBigTwelve: (t) => ({
      c0: Fp62.fromBigSix(t.slice(0, 6)),
      c1: Fp62.fromBigSix(t.slice(6, 12))
    }),
    // Raises to q**i -th power
    frobeniusMap(lhs, power) {
      const { c0, c1, c2: c22 } = Fp62.frobeniusMap(lhs.c1, power);
      const coeff = FP12_FROBENIUS_COEFFICIENTS[power % 12];
      return {
        c0: Fp62.frobeniusMap(lhs.c0, power),
        c1: Fp62.create({
          c0: Fp22.mul(c0, coeff),
          c1: Fp22.mul(c1, coeff),
          c2: Fp22.mul(c22, coeff)
        })
      };
    },
    mulByFp2: ({ c0, c1 }, rhs) => ({
      c0: Fp62.mulByFp2(c0, rhs),
      c1: Fp62.mulByFp2(c1, rhs)
    }),
    conjugate: ({ c0, c1 }) => ({ c0, c1: Fp62.neg(c1) }),
    // Sparse multiplication
    mul014: ({ c0, c1 }, o0, o1, o4) => {
      let t0 = Fp62.mul01(c0, o0, o1);
      let t1 = Fp62.mul1(c1, o4);
      return {
        c0: Fp62.add(Fp62.mulByNonresidue(t1), t0),
        // T1 * v + T0
        // (c1 + c0) * [o0, o1+o4] - T0 - T1
        c1: Fp62.sub(Fp62.sub(Fp62.mul01(Fp62.add(c1, c0), o0, Fp22.add(o1, o4)), t0), t1)
      };
    },
    mul034: ({ c0, c1 }, o0, o3, o4) => {
      const a2 = Fp62.create({
        c0: Fp22.mul(c0.c0, o0),
        c1: Fp22.mul(c0.c1, o0),
        c2: Fp22.mul(c0.c2, o0)
      });
      const b3 = Fp62.mul01(c1, o3, o4);
      const e = Fp62.mul01(Fp62.add(c0, c1), Fp22.add(o0, o3), o4);
      return {
        c0: Fp62.add(Fp62.mulByNonresidue(b3), a2),
        c1: Fp62.sub(e, Fp62.add(a2, b3))
      };
    },
    // A cyclotomic group is a subgroup of Fp^n defined by
    //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}
    // The result of any pairing is in a cyclotomic subgroup
    // https://eprint.iacr.org/2009/565.pdf
    _cyclotomicSquare: opts.Fp12cyclotomicSquare,
    _cyclotomicExp: opts.Fp12cyclotomicExp,
    // https://eprint.iacr.org/2010/354.pdf
    // https://eprint.iacr.org/2009/565.pdf
    finalExponentiate: opts.Fp12finalExponentiate
  };
  return { Fp: Fp4, Fp2: Fp22, Fp6: Fp62, Fp4Square: Fp4Square2, Fp12: Fp122 };
}

// node_modules/ox/node_modules/@noble/curves/esm/bls12-381.js
var _0n8 = BigInt(0);
var _1n8 = BigInt(1);
var _2n6 = BigInt(2);
var _3n5 = BigInt(3);
var _4n3 = BigInt(4);
var BLS_X = BigInt("0xd201000000010000");
var BLS_X_LEN = bitLen(BLS_X);
var { Fp, Fp2, Fp6, Fp4Square, Fp12 } = tower12({
  // Order of Fp
  ORDER: BigInt("0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab"),
  // Finite extension field over irreducible polynominal.
  // Fp(u) / (u² - β) where β = -1
  FP2_NONRESIDUE: [_1n8, _1n8],
  Fp2mulByB: ({ c0, c1 }) => {
    const t0 = Fp.mul(c0, _4n3);
    const t1 = Fp.mul(c1, _4n3);
    return { c0: Fp.sub(t0, t1), c1: Fp.add(t0, t1) };
  },
  // Fp12
  // A cyclotomic group is a subgroup of Fp^n defined by
  //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}
  // The result of any pairing is in a cyclotomic subgroup
  // https://eprint.iacr.org/2009/565.pdf
  Fp12cyclotomicSquare: ({ c0, c1 }) => {
    const { c0: c0c0, c1: c0c1, c2: c0c2 } = c0;
    const { c0: c1c0, c1: c1c1, c2: c1c2 } = c1;
    const { first: t3, second: t4 } = Fp4Square(c0c0, c1c1);
    const { first: t5, second: t6 } = Fp4Square(c1c0, c0c2);
    const { first: t7, second: t8 } = Fp4Square(c0c1, c1c2);
    const t9 = Fp2.mulByNonresidue(t8);
    return {
      c0: Fp6.create({
        c0: Fp2.add(Fp2.mul(Fp2.sub(t3, c0c0), _2n6), t3),
        // 2 * (T3 - c0c0)  + T3
        c1: Fp2.add(Fp2.mul(Fp2.sub(t5, c0c1), _2n6), t5),
        // 2 * (T5 - c0c1)  + T5
        c2: Fp2.add(Fp2.mul(Fp2.sub(t7, c0c2), _2n6), t7)
      }),
      // 2 * (T7 - c0c2)  + T7
      c1: Fp6.create({
        c0: Fp2.add(Fp2.mul(Fp2.add(t9, c1c0), _2n6), t9),
        // 2 * (T9 + c1c0) + T9
        c1: Fp2.add(Fp2.mul(Fp2.add(t4, c1c1), _2n6), t4),
        // 2 * (T4 + c1c1) + T4
        c2: Fp2.add(Fp2.mul(Fp2.add(t6, c1c2), _2n6), t6)
      })
    };
  },
  Fp12cyclotomicExp(num2, n2) {
    let z4 = Fp12.ONE;
    for (let i3 = BLS_X_LEN - 1; i3 >= 0; i3--) {
      z4 = Fp12._cyclotomicSquare(z4);
      if (bitGet(n2, i3))
        z4 = Fp12.mul(z4, num2);
    }
    return z4;
  },
  // https://eprint.iacr.org/2010/354.pdf
  // https://eprint.iacr.org/2009/565.pdf
  Fp12finalExponentiate: (num2) => {
    const x3 = BLS_X;
    const t0 = Fp12.div(Fp12.frobeniusMap(num2, 6), num2);
    const t1 = Fp12.mul(Fp12.frobeniusMap(t0, 2), t0);
    const t2 = Fp12.conjugate(Fp12._cyclotomicExp(t1, x3));
    const t3 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicSquare(t1)), t2);
    const t4 = Fp12.conjugate(Fp12._cyclotomicExp(t3, x3));
    const t5 = Fp12.conjugate(Fp12._cyclotomicExp(t4, x3));
    const t6 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicExp(t5, x3)), Fp12._cyclotomicSquare(t2));
    const t7 = Fp12.conjugate(Fp12._cyclotomicExp(t6, x3));
    const t2_t5_pow_q2 = Fp12.frobeniusMap(Fp12.mul(t2, t5), 2);
    const t4_t1_pow_q3 = Fp12.frobeniusMap(Fp12.mul(t4, t1), 3);
    const t6_t1c_pow_q1 = Fp12.frobeniusMap(Fp12.mul(t6, Fp12.conjugate(t1)), 1);
    const t7_t3c_t1 = Fp12.mul(Fp12.mul(t7, Fp12.conjugate(t3)), t1);
    return Fp12.mul(Fp12.mul(Fp12.mul(t2_t5_pow_q2, t4_t1_pow_q3), t6_t1c_pow_q1), t7_t3c_t1);
  }
});
var Fr = Field(BigInt("0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001"));
var isogenyMapG2 = isogenyMap(Fp2, [
  // xNum
  [
    [
      "0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6",
      "0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6"
    ],
    [
      "0x0",
      "0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71a"
    ],
    [
      "0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71e",
      "0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38d"
    ],
    [
      "0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1",
      "0x0"
    ]
  ],
  // xDen
  [
    [
      "0x0",
      "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63"
    ],
    [
      "0xc",
      "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f"
    ],
    ["0x1", "0x0"]
    // LAST 1
  ],
  // yNum
  [
    [
      "0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706",
      "0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706"
    ],
    [
      "0x0",
      "0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97be"
    ],
    [
      "0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71c",
      "0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38f"
    ],
    [
      "0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10",
      "0x0"
    ]
  ],
  // yDen
  [
    [
      "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb",
      "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb"
    ],
    [
      "0x0",
      "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3"
    ],
    [
      "0x12",
      "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99"
    ],
    ["0x1", "0x0"]
    // LAST 1
  ]
].map((i3) => i3.map((pair) => Fp2.fromBigTuple(pair.map(BigInt)))));
var isogenyMapG1 = isogenyMap(Fp, [
  // xNum
  [
    "0x11a05f2b1e833340b809101dd99815856b303e88a2d7005ff2627b56cdb4e2c85610c2d5f2e62d6eaeac1662734649b7",
    "0x17294ed3e943ab2f0588bab22147a81c7c17e75b2f6a8417f565e33c70d1e86b4838f2a6f318c356e834eef1b3cb83bb",
    "0xd54005db97678ec1d1048c5d10a9a1bce032473295983e56878e501ec68e25c958c3e3d2a09729fe0179f9dac9edcb0",
    "0x1778e7166fcc6db74e0609d307e55412d7f5e4656a8dbf25f1b33289f1b330835336e25ce3107193c5b388641d9b6861",
    "0xe99726a3199f4436642b4b3e4118e5499db995a1257fb3f086eeb65982fac18985a286f301e77c451154ce9ac8895d9",
    "0x1630c3250d7313ff01d1201bf7a74ab5db3cb17dd952799b9ed3ab9097e68f90a0870d2dcae73d19cd13c1c66f652983",
    "0xd6ed6553fe44d296a3726c38ae652bfb11586264f0f8ce19008e218f9c86b2a8da25128c1052ecaddd7f225a139ed84",
    "0x17b81e7701abdbe2e8743884d1117e53356de5ab275b4db1a682c62ef0f2753339b7c8f8c8f475af9ccb5618e3f0c88e",
    "0x80d3cf1f9a78fc47b90b33563be990dc43b756ce79f5574a2c596c928c5d1de4fa295f296b74e956d71986a8497e317",
    "0x169b1f8e1bcfa7c42e0c37515d138f22dd2ecb803a0c5c99676314baf4bb1b7fa3190b2edc0327797f241067be390c9e",
    "0x10321da079ce07e272d8ec09d2565b0dfa7dccdde6787f96d50af36003b14866f69b771f8c285decca67df3f1605fb7b",
    "0x6e08c248e260e70bd1e962381edee3d31d79d7e22c837bc23c0bf1bc24c6b68c24b1b80b64d391fa9c8ba2e8ba2d229"
  ],
  // xDen
  [
    "0x8ca8d548cff19ae18b2e62f4bd3fa6f01d5ef4ba35b48ba9c9588617fc8ac62b558d681be343df8993cf9fa40d21b1c",
    "0x12561a5deb559c4348b4711298e536367041e8ca0cf0800c0126c2588c48bf5713daa8846cb026e9e5c8276ec82b3bff",
    "0xb2962fe57a3225e8137e629bff2991f6f89416f5a718cd1fca64e00b11aceacd6a3d0967c94fedcfcc239ba5cb83e19",
    "0x3425581a58ae2fec83aafef7c40eb545b08243f16b1655154cca8abc28d6fd04976d5243eecf5c4130de8938dc62cd8",
    "0x13a8e162022914a80a6f1d5f43e7a07dffdfc759a12062bb8d6b44e833b306da9bd29ba81f35781d539d395b3532a21e",
    "0xe7355f8e4e667b955390f7f0506c6e9395735e9ce9cad4d0a43bcef24b8982f7400d24bc4228f11c02df9a29f6304a5",
    "0x772caacf16936190f3e0c63e0596721570f5799af53a1894e2e073062aede9cea73b3538f0de06cec2574496ee84a3a",
    "0x14a7ac2a9d64a8b230b3f5b074cf01996e7f63c21bca68a81996e1cdf9822c580fa5b9489d11e2d311f7d99bbdcc5a5e",
    "0xa10ecf6ada54f825e920b3dafc7a3cce07f8d1d7161366b74100da67f39883503826692abba43704776ec3a79a1d641",
    "0x95fc13ab9e92ad4476d6e3eb3a56680f682b4ee96f7d03776df533978f31c1593174e4b4b7865002d6384d168ecdd0a",
    "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ],
  // yNum
  [
    "0x90d97c81ba24ee0259d1f094980dcfa11ad138e48a869522b52af6c956543d3cd0c7aee9b3ba3c2be9845719707bb33",
    "0x134996a104ee5811d51036d776fb46831223e96c254f383d0f906343eb67ad34d6c56711962fa8bfe097e75a2e41c696",
    "0xcc786baa966e66f4a384c86a3b49942552e2d658a31ce2c344be4b91400da7d26d521628b00523b8dfe240c72de1f6",
    "0x1f86376e8981c217898751ad8746757d42aa7b90eeb791c09e4a3ec03251cf9de405aba9ec61deca6355c77b0e5f4cb",
    "0x8cc03fdefe0ff135caf4fe2a21529c4195536fbe3ce50b879833fd221351adc2ee7f8dc099040a841b6daecf2e8fedb",
    "0x16603fca40634b6a2211e11db8f0a6a074a7d0d4afadb7bd76505c3d3ad5544e203f6326c95a807299b23ab13633a5f0",
    "0x4ab0b9bcfac1bbcb2c977d027796b3ce75bb8ca2be184cb5231413c4d634f3747a87ac2460f415ec961f8855fe9d6f2",
    "0x987c8d5333ab86fde9926bd2ca6c674170a05bfe3bdd81ffd038da6c26c842642f64550fedfe935a15e4ca31870fb29",
    "0x9fc4018bd96684be88c9e221e4da1bb8f3abd16679dc26c1e8b6e6a1f20cabe69d65201c78607a360370e577bdba587",
    "0xe1bba7a1186bdb5223abde7ada14a23c42a0ca7915af6fe06985e7ed1e4d43b9b3f7055dd4eba6f2bafaaebca731c30",
    "0x19713e47937cd1be0dfd0b8f1d43fb93cd2fcbcb6caf493fd1183e416389e61031bf3a5cce3fbafce813711ad011c132",
    "0x18b46a908f36f6deb918c143fed2edcc523559b8aaf0c2462e6bfe7f911f643249d9cdf41b44d606ce07c8a4d0074d8e",
    "0xb182cac101b9399d155096004f53f447aa7b12a3426b08ec02710e807b4633f06c851c1919211f20d4c04f00b971ef8",
    "0x245a394ad1eca9b72fc00ae7be315dc757b3b080d4c158013e6632d3c40659cc6cf90ad1c232a6442d9d3f5db980133",
    "0x5c129645e44cf1102a159f748c4a3fc5e673d81d7e86568d9ab0f5d396a7ce46ba1049b6579afb7866b1e715475224b",
    "0x15e6be4e990f03ce4ea50b3b42df2eb5cb181d8f84965a3957add4fa95af01b2b665027efec01c7704b456be69c8b604"
  ],
  // yDen
  [
    "0x16112c4c3a9c98b252181140fad0eae9601a6de578980be6eec3232b5be72e7a07f3688ef60c206d01479253b03663c1",
    "0x1962d75c2381201e1a0cbd6c43c348b885c84ff731c4d59ca4a10356f453e01f78a4260763529e3532f6102c2e49a03d",
    "0x58df3306640da276faaae7d6e8eb15778c4855551ae7f310c35a5dd279cd2eca6757cd636f96f891e2538b53dbf67f2",
    "0x16b7d288798e5395f20d23bf89edb4d1d115c5dbddbcd30e123da489e726af41727364f2c28297ada8d26d98445f5416",
    "0xbe0e079545f43e4b00cc912f8228ddcc6d19c9f0f69bbb0542eda0fc9dec916a20b15dc0fd2ededda39142311a5001d",
    "0x8d9e5297186db2d9fb266eaac783182b70152c65550d881c5ecd87b6f0f5a6449f38db9dfa9cce202c6477faaf9b7ac",
    "0x166007c08a99db2fc3ba8734ace9824b5eecfdfa8d0cf8ef5dd365bc400a0051d5fa9c01a58b1fb93d1a1399126a775c",
    "0x16a3ef08be3ea7ea03bcddfabba6ff6ee5a4375efa1f4fd7feb34fd206357132b920f5b00801dee460ee415a15812ed9",
    "0x1866c8ed336c61231a1be54fd1d74cc4f9fb0ce4c6af5920abc5750c4bf39b4852cfe2f7bb9248836b233d9d55535d4a",
    "0x167a55cda70a6e1cea820597d94a84903216f763e13d87bb5308592e7ea7d4fbc7385ea3d529b35e346ef48bb8913f55",
    "0x4d2f259eea405bd48f010a01ad2911d9c6dd039bb61a6290e591b36e636a5c871a5c29f4f83060400f8b49cba8f6aa8",
    "0xaccbb67481d033ff5852c1e48c50c477f94ff8aefce42d28c0f9a88cea7913516f968986f7ebbea9684b529e2561092",
    "0xad6b9514c767fe3c3613144b45f1496543346d98adf02267d5ceef9a00d9b8693000763e3b90ac11e99b138573345cc",
    "0x2660400eb2e4f3b628bdd0d53cd76f2bf565b94e72927c1cb748df27942480e420517bd8714cc80d1fadc1326ed06f7",
    "0xe0fa1d816ddc03e6b24255e0d7819c171c40f65e273b853324efcd6356caa205ca2f570f13497804415473a1d634b8f",
    "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ]
].map((i3) => i3.map((j3) => BigInt(j3))));
var G2_SWU = mapToCurveSimpleSWU(Fp2, {
  A: Fp2.create({ c0: Fp.create(_0n8), c1: Fp.create(BigInt(240)) }),
  // A' = 240 * I
  B: Fp2.create({ c0: Fp.create(BigInt(1012)), c1: Fp.create(BigInt(1012)) }),
  // B' = 1012 * (1 + I)
  Z: Fp2.create({ c0: Fp.create(BigInt(-2)), c1: Fp.create(BigInt(-1)) })
  // Z: -(2 + I)
});
var G1_SWU = mapToCurveSimpleSWU(Fp, {
  A: Fp.create(BigInt("0x144698a3b8e9433d693a02c96d4982b0ea985383ee66a8d8e8981aefd881ac98936f8da0e0f97f5cf428082d584c1d")),
  B: Fp.create(BigInt("0x12e2908d11688030018b12e8753eee3b2016c1f0f24f4070a0b9c14fcef35ef55a23215a316ceaa5d1cc48e98e172be0")),
  Z: Fp.create(BigInt(11))
});
var { G2psi, G2psi2 } = psiFrobenius(Fp, Fp2, Fp2.div(Fp2.ONE, Fp2.NONRESIDUE));
var htfDefaults = Object.freeze({
  // DST: a domain separation tag
  // defined in section 2.2.5
  // Use utils.getDSTLabel(), utils.setDSTLabel(value)
  DST: "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_",
  encodeDST: "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_",
  // p: the characteristic of F
  //    where F is a finite field of characteristic p and order q = p^m
  p: Fp.ORDER,
  // m: the extension degree of F, m >= 1
  //     where F is a finite field of characteristic p and order q = p^m
  m: 2,
  // k: the target security level for the suite in bits
  // defined in section 5.1
  k: 128,
  // option to use a message that has already been processed by
  // expand_message_xmd
  expand: "xmd",
  // Hash functions for: expand_message_xmd is appropriate for use with a
  // wide range of hash functions, including SHA-2, SHA-3, BLAKE2, and others.
  // BBS+ uses blake2: https://github.com/hyperledger/aries-framework-go/issues/2247
  hash: sha256
});
var COMPRESSED_ZERO = setMask(Fp.toBytes(_0n8), { infinity: true, compressed: true });
function parseMask(bytes) {
  bytes = bytes.slice();
  const mask = bytes[0] & 224;
  const compressed = !!(mask >> 7 & 1);
  const infinity = !!(mask >> 6 & 1);
  const sort = !!(mask >> 5 & 1);
  bytes[0] &= 31;
  return { compressed, infinity, sort, value: bytes };
}
function setMask(bytes, mask) {
  if (bytes[0] & 224)
    throw new Error("setMask: non-empty mask");
  if (mask.compressed)
    bytes[0] |= 128;
  if (mask.infinity)
    bytes[0] |= 64;
  if (mask.sort)
    bytes[0] |= 32;
  return bytes;
}
function signatureG1ToRawBytes(point) {
  point.assertValidity();
  const isZero = point.equals(bls12_381.G1.ProjectivePoint.ZERO);
  const { x: x3, y: y3 } = point.toAffine();
  if (isZero)
    return COMPRESSED_ZERO.slice();
  const P4 = Fp.ORDER;
  const sort = Boolean(y3 * _2n6 / P4);
  return setMask(numberToBytesBE(x3, Fp.BYTES), { compressed: true, sort });
}
function signatureG2ToRawBytes(point) {
  point.assertValidity();
  const len = Fp.BYTES;
  if (point.equals(bls12_381.G2.ProjectivePoint.ZERO))
    return concatBytes2(COMPRESSED_ZERO, numberToBytesBE(_0n8, len));
  const { x: x3, y: y3 } = point.toAffine();
  const { re: x0, im: x1 } = Fp2.reim(x3);
  const { re: y0, im: y1 } = Fp2.reim(y3);
  const tmp = y1 > _0n8 ? y1 * _2n6 : y0 * _2n6;
  const sort = Boolean(tmp / Fp.ORDER & _1n8);
  const z22 = x0;
  return concatBytes2(setMask(numberToBytesBE(x1, len), { sort, compressed: true }), numberToBytesBE(z22, len));
}
var bls12_381 = bls({
  // Fields
  fields: {
    Fp,
    Fp2,
    Fp6,
    Fp12,
    Fr
  },
  // G1 is the order-q subgroup of E1(Fp) : y² = x³ + 4, #E1(Fp) = h1q, where
  // characteristic; z + (z⁴ - z² + 1)(z - 1)²/3
  G1: {
    Fp,
    // cofactor; (z - 1)²/3
    h: BigInt("0x396c8c005555e1568c00aaab0000aaab"),
    // generator's coordinates
    // x = 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507
    // y = 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569
    Gx: BigInt("0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb"),
    Gy: BigInt("0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1"),
    a: Fp.ZERO,
    b: _4n3,
    htfDefaults: { ...htfDefaults, m: 1, DST: "BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_NUL_" },
    wrapPrivateKey: true,
    allowInfinityPoint: true,
    // Checks is the point resides in prime-order subgroup.
    // point.isTorsionFree() should return true for valid points
    // It returns false for shitty points.
    // https://eprint.iacr.org/2021/1130.pdf
    isTorsionFree: (c3, point) => {
      const beta = BigInt("0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe");
      const phi = new c3(Fp.mul(point.px, beta), point.py, point.pz);
      const xP = point.multiplyUnsafe(BLS_X).negate();
      const u2P = xP.multiplyUnsafe(BLS_X);
      return u2P.equals(phi);
    },
    // Clear cofactor of G1
    // https://eprint.iacr.org/2019/403
    clearCofactor: (_c2, point) => {
      return point.multiplyUnsafe(BLS_X).add(point);
    },
    mapToCurve: (scalars) => {
      const { x: x3, y: y3 } = G1_SWU(Fp.create(scalars[0]));
      return isogenyMapG1(x3, y3);
    },
    fromBytes: (bytes) => {
      const { compressed, infinity, sort, value } = parseMask(bytes);
      if (value.length === 48 && compressed) {
        const P4 = Fp.ORDER;
        const compressedValue = bytesToNumberBE(value);
        const x3 = Fp.create(compressedValue & Fp.MASK);
        if (infinity) {
          if (x3 !== _0n8)
            throw new Error("G1: non-empty compressed point at infinity");
          return { x: _0n8, y: _0n8 };
        }
        const right = Fp.add(Fp.pow(x3, _3n5), Fp.create(bls12_381.params.G1b));
        let y3 = Fp.sqrt(right);
        if (!y3)
          throw new Error("invalid compressed G1 point");
        if (y3 * _2n6 / P4 !== BigInt(sort))
          y3 = Fp.neg(y3);
        return { x: Fp.create(x3), y: Fp.create(y3) };
      } else if (value.length === 96 && !compressed) {
        const x3 = bytesToNumberBE(value.subarray(0, Fp.BYTES));
        const y3 = bytesToNumberBE(value.subarray(Fp.BYTES));
        if (infinity) {
          if (x3 !== _0n8 || y3 !== _0n8)
            throw new Error("G1: non-empty point at infinity");
          return bls12_381.G1.ProjectivePoint.ZERO.toAffine();
        }
        return { x: Fp.create(x3), y: Fp.create(y3) };
      } else {
        throw new Error("invalid point G1, expected 48/96 bytes");
      }
    },
    toBytes: (c3, point, isCompressed) => {
      const isZero = point.equals(c3.ZERO);
      const { x: x3, y: y3 } = point.toAffine();
      if (isCompressed) {
        if (isZero)
          return COMPRESSED_ZERO.slice();
        const P4 = Fp.ORDER;
        const sort = Boolean(y3 * _2n6 / P4);
        return setMask(numberToBytesBE(x3, Fp.BYTES), { compressed: true, sort });
      } else {
        if (isZero) {
          const x4 = concatBytes2(new Uint8Array([64]), new Uint8Array(2 * Fp.BYTES - 1));
          return x4;
        } else {
          return concatBytes2(numberToBytesBE(x3, Fp.BYTES), numberToBytesBE(y3, Fp.BYTES));
        }
      }
    },
    ShortSignature: {
      fromHex(hex) {
        const { infinity, sort, value } = parseMask(ensureBytes("signatureHex", hex, 48));
        const P4 = Fp.ORDER;
        const compressedValue = bytesToNumberBE(value);
        if (infinity)
          return bls12_381.G1.ProjectivePoint.ZERO;
        const x3 = Fp.create(compressedValue & Fp.MASK);
        const right = Fp.add(Fp.pow(x3, _3n5), Fp.create(bls12_381.params.G1b));
        let y3 = Fp.sqrt(right);
        if (!y3)
          throw new Error("invalid compressed G1 point");
        const aflag = BigInt(sort);
        if (y3 * _2n6 / P4 !== aflag)
          y3 = Fp.neg(y3);
        const point = bls12_381.G1.ProjectivePoint.fromAffine({ x: x3, y: y3 });
        point.assertValidity();
        return point;
      },
      toRawBytes(point) {
        return signatureG1ToRawBytes(point);
      },
      toHex(point) {
        return bytesToHex(signatureG1ToRawBytes(point));
      }
    }
  },
  // G2 is the order-q subgroup of E2(Fp²) : y² = x³+4(1+√−1),
  // where Fp2 is Fp[√−1]/(x2+1). #E2(Fp2 ) = h2q, where
  // G² - 1
  // h2q
  G2: {
    Fp: Fp2,
    // cofactor
    h: BigInt("0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5"),
    Gx: Fp2.fromBigTuple([
      BigInt("0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8"),
      BigInt("0x13e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e")
    ]),
    // y =
    // 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582,
    // 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905
    Gy: Fp2.fromBigTuple([
      BigInt("0x0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801"),
      BigInt("0x0606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be")
    ]),
    a: Fp2.ZERO,
    b: Fp2.fromBigTuple([_4n3, _4n3]),
    hEff: BigInt("0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551"),
    htfDefaults: { ...htfDefaults },
    wrapPrivateKey: true,
    allowInfinityPoint: true,
    mapToCurve: (scalars) => {
      const { x: x3, y: y3 } = G2_SWU(Fp2.fromBigTuple(scalars));
      return isogenyMapG2(x3, y3);
    },
    // Checks is the point resides in prime-order subgroup.
    // point.isTorsionFree() should return true for valid points
    // It returns false for shitty points.
    // https://eprint.iacr.org/2021/1130.pdf
    // Older version: https://eprint.iacr.org/2019/814.pdf
    isTorsionFree: (c3, P4) => {
      return P4.multiplyUnsafe(BLS_X).negate().equals(G2psi(c3, P4));
    },
    // Maps the point into the prime-order subgroup G2.
    // clear_cofactor_bls12381_g2 from RFC 9380.
    // https://eprint.iacr.org/2017/419.pdf
    // prettier-ignore
    clearCofactor: (c3, P4) => {
      const x3 = BLS_X;
      let t1 = P4.multiplyUnsafe(x3).negate();
      let t2 = G2psi(c3, P4);
      let t3 = P4.double();
      t3 = G2psi2(c3, t3);
      t3 = t3.subtract(t2);
      t2 = t1.add(t2);
      t2 = t2.multiplyUnsafe(x3).negate();
      t3 = t3.add(t2);
      t3 = t3.subtract(t1);
      const Q3 = t3.subtract(P4);
      return Q3;
    },
    fromBytes: (bytes) => {
      const { compressed, infinity, sort, value } = parseMask(bytes);
      if (!compressed && !infinity && sort || // 00100000
      !compressed && infinity && sort || // 01100000
      sort && infinity && compressed) {
        throw new Error("invalid encoding flag: " + (bytes[0] & 224));
      }
      const L2 = Fp.BYTES;
      const slc = (b3, from9, to3) => bytesToNumberBE(b3.slice(from9, to3));
      if (value.length === 96 && compressed) {
        const b3 = bls12_381.params.G2b;
        const P4 = Fp.ORDER;
        if (infinity) {
          if (value.reduce((p3, c3) => p3 !== 0 ? c3 + 1 : c3, 0) > 0) {
            throw new Error("invalid compressed G2 point");
          }
          return { x: Fp2.ZERO, y: Fp2.ZERO };
        }
        const x_1 = slc(value, 0, L2);
        const x_0 = slc(value, L2, 2 * L2);
        const x3 = Fp2.create({ c0: Fp.create(x_0), c1: Fp.create(x_1) });
        const right = Fp2.add(Fp2.pow(x3, _3n5), b3);
        let y3 = Fp2.sqrt(right);
        const Y_bit = y3.c1 === _0n8 ? y3.c0 * _2n6 / P4 : y3.c1 * _2n6 / P4 ? _1n8 : _0n8;
        y3 = sort && Y_bit > 0 ? y3 : Fp2.neg(y3);
        return { x: x3, y: y3 };
      } else if (value.length === 192 && !compressed) {
        if (infinity) {
          if (value.reduce((p3, c3) => p3 !== 0 ? c3 + 1 : c3, 0) > 0) {
            throw new Error("invalid uncompressed G2 point");
          }
          return { x: Fp2.ZERO, y: Fp2.ZERO };
        }
        const x1 = slc(value, 0, L2);
        const x0 = slc(value, L2, 2 * L2);
        const y1 = slc(value, 2 * L2, 3 * L2);
        const y0 = slc(value, 3 * L2, 4 * L2);
        return { x: Fp2.fromBigTuple([x0, x1]), y: Fp2.fromBigTuple([y0, y1]) };
      } else {
        throw new Error("invalid point G2, expected 96/192 bytes");
      }
    },
    toBytes: (c3, point, isCompressed) => {
      const { BYTES: len, ORDER: P4 } = Fp;
      const isZero = point.equals(c3.ZERO);
      const { x: x3, y: y3 } = point.toAffine();
      if (isCompressed) {
        if (isZero)
          return concatBytes2(COMPRESSED_ZERO, numberToBytesBE(_0n8, len));
        const flag = Boolean(y3.c1 === _0n8 ? y3.c0 * _2n6 / P4 : y3.c1 * _2n6 / P4);
        return concatBytes2(setMask(numberToBytesBE(x3.c1, len), { compressed: true, sort: flag }), numberToBytesBE(x3.c0, len));
      } else {
        if (isZero)
          return concatBytes2(new Uint8Array([64]), new Uint8Array(4 * len - 1));
        const { re: x0, im: x1 } = Fp2.reim(x3);
        const { re: y0, im: y1 } = Fp2.reim(y3);
        return concatBytes2(numberToBytesBE(x1, len), numberToBytesBE(x0, len), numberToBytesBE(y1, len), numberToBytesBE(y0, len));
      }
    },
    Signature: {
      // TODO: Optimize, it's very slow because of sqrt.
      fromHex(hex) {
        const { infinity, sort, value } = parseMask(ensureBytes("signatureHex", hex));
        const P4 = Fp.ORDER;
        const half = value.length / 2;
        if (half !== 48 && half !== 96)
          throw new Error("invalid compressed signature length, must be 96 or 192");
        const z1 = bytesToNumberBE(value.slice(0, half));
        const z22 = bytesToNumberBE(value.slice(half));
        if (infinity)
          return bls12_381.G2.ProjectivePoint.ZERO;
        const x1 = Fp.create(z1 & Fp.MASK);
        const x22 = Fp.create(z22);
        const x3 = Fp2.create({ c0: x22, c1: x1 });
        const y22 = Fp2.add(Fp2.pow(x3, _3n5), bls12_381.params.G2b);
        let y3 = Fp2.sqrt(y22);
        if (!y3)
          throw new Error("Failed to find a square root");
        const { re: y0, im: y1 } = Fp2.reim(y3);
        const aflag1 = BigInt(sort);
        const isGreater = y1 > _0n8 && y1 * _2n6 / P4 !== aflag1;
        const isZero = y1 === _0n8 && y0 * _2n6 / P4 !== aflag1;
        if (isGreater || isZero)
          y3 = Fp2.neg(y3);
        const point = bls12_381.G2.ProjectivePoint.fromAffine({ x: x3, y: y3 });
        point.assertValidity();
        return point;
      },
      toRawBytes(point) {
        return signatureG2ToRawBytes(point);
      },
      toHex(point) {
        return bytesToHex(signatureG2ToRawBytes(point));
      }
    }
  },
  params: {
    ateLoopSize: BLS_X,
    // The BLS parameter x for BLS12-381
    r: Fr.ORDER,
    // order; z⁴ − z² + 1; CURVE.n from other curves
    xNegative: true,
    twistType: "multiplicative"
  },
  htfDefaults,
  hash: sha256,
  randomBytes
});

// node_modules/ox/node_modules/@noble/curves/esm/abstract/edwards.js
var _0n9 = BigInt(0);
var _1n9 = BigInt(1);
var _2n7 = BigInt(2);
var _8n2 = BigInt(8);
var VERIFY_DEFAULT = { zip215: true };
function validateOpts2(curve) {
  const opts = validateBasic(curve);
  validateObject(curve, {
    hash: "function",
    a: "bigint",
    d: "bigint",
    randomBytes: "function"
  }, {
    adjustScalarBytes: "function",
    domain: "function",
    uvRatio: "function",
    mapToCurve: "function"
  });
  return Object.freeze({ ...opts });
}
function twistedEdwards(curveDef) {
  const CURVE = validateOpts2(curveDef);
  const { Fp: Fp4, n: CURVE_ORDER, prehash, hash: cHash, randomBytes: randomBytes2, nByteLength, h: cofactor } = CURVE;
  const MASK = _2n7 << BigInt(nByteLength * 8) - _1n9;
  const modP2 = Fp4.create;
  const Fn3 = Field(CURVE.n, CURVE.nBitLength);
  function isEdValidXY(x3, y3) {
    const x22 = Fp4.sqr(x3);
    const y22 = Fp4.sqr(y3);
    const left = Fp4.add(Fp4.mul(CURVE.a, x22), y22);
    const right = Fp4.add(Fp4.ONE, Fp4.mul(CURVE.d, Fp4.mul(x22, y22)));
    return Fp4.eql(left, right);
  }
  if (!isEdValidXY(CURVE.Gx, CURVE.Gy))
    throw new Error("bad curve params: generator point");
  const uvRatio2 = CURVE.uvRatio || ((u2, v4) => {
    try {
      return { isValid: true, value: Fp4.sqrt(u2 * Fp4.inv(v4)) };
    } catch (e) {
      return { isValid: false, value: _0n9 };
    }
  });
  const adjustScalarBytes2 = CURVE.adjustScalarBytes || ((bytes) => bytes);
  const domain = CURVE.domain || ((data, ctx, phflag) => {
    abool("phflag", phflag);
    if (ctx.length || phflag)
      throw new Error("Contexts/pre-hash are not supported");
    return data;
  });
  function aCoordinate(title, n2, banZero = false) {
    const min = banZero ? _1n9 : _0n9;
    aInRange("coordinate " + title, n2, min, MASK);
  }
  function aextpoint(other) {
    if (!(other instanceof Point2))
      throw new Error("ExtendedPoint expected");
  }
  const toAffineMemo = memoized((p3, iz) => {
    const { ex: x3, ey: y3, ez: z4 } = p3;
    const is0 = p3.is0();
    if (iz == null)
      iz = is0 ? _8n2 : Fp4.inv(z4);
    const ax = modP2(x3 * iz);
    const ay = modP2(y3 * iz);
    const zz = modP2(z4 * iz);
    if (is0)
      return { x: _0n9, y: _1n9 };
    if (zz !== _1n9)
      throw new Error("invZ was invalid");
    return { x: ax, y: ay };
  });
  const assertValidMemo = memoized((p3) => {
    const { a: a2, d: d4 } = CURVE;
    if (p3.is0())
      throw new Error("bad point: ZERO");
    const { ex: X4, ey: Y3, ez: Z2, et: T3 } = p3;
    const X22 = modP2(X4 * X4);
    const Y22 = modP2(Y3 * Y3);
    const Z22 = modP2(Z2 * Z2);
    const Z4 = modP2(Z22 * Z22);
    const aX2 = modP2(X22 * a2);
    const left = modP2(Z22 * modP2(aX2 + Y22));
    const right = modP2(Z4 + modP2(d4 * modP2(X22 * Y22)));
    if (left !== right)
      throw new Error("bad point: equation left != right (1)");
    const XY = modP2(X4 * Y3);
    const ZT = modP2(Z2 * T3);
    if (XY !== ZT)
      throw new Error("bad point: equation left != right (2)");
    return true;
  });
  class Point2 {
    constructor(ex, ey, ez, et4) {
      aCoordinate("x", ex);
      aCoordinate("y", ey);
      aCoordinate("z", ez, true);
      aCoordinate("t", et4);
      this.ex = ex;
      this.ey = ey;
      this.ez = ez;
      this.et = et4;
      Object.freeze(this);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(p3) {
      if (p3 instanceof Point2)
        throw new Error("extended point not allowed");
      const { x: x3, y: y3 } = p3 || {};
      aCoordinate("x", x3);
      aCoordinate("y", y3);
      return new Point2(x3, y3, _1n9, modP2(x3 * y3));
    }
    static normalizeZ(points) {
      const toInv = FpInvertBatch(Fp4, points.map((p3) => p3.ez));
      return points.map((p3, i3) => p3.toAffine(toInv[i3])).map(Point2.fromAffine);
    }
    // Multiscalar Multiplication
    static msm(points, scalars) {
      return pippenger(Point2, Fn3, points, scalars);
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      wnaf.setWindowSize(this, windowSize);
    }
    // Not required for fromHex(), which always creates valid points.
    // Could be useful for fromAffine().
    assertValidity() {
      assertValidMemo(this);
    }
    // Compare one point to another.
    equals(other) {
      aextpoint(other);
      const { ex: X1, ey: Y1, ez: Z1 } = this;
      const { ex: X22, ey: Y22, ez: Z2 } = other;
      const X1Z2 = modP2(X1 * Z2);
      const X2Z1 = modP2(X22 * Z1);
      const Y1Z2 = modP2(Y1 * Z2);
      const Y2Z1 = modP2(Y22 * Z1);
      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
    }
    is0() {
      return this.equals(Point2.ZERO);
    }
    negate() {
      return new Point2(modP2(-this.ex), this.ey, this.ez, modP2(-this.et));
    }
    // Fast algo for doubling Extended Point.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
    // Cost: 4M + 4S + 1*a + 6add + 1*2.
    double() {
      const { a: a2 } = CURVE;
      const { ex: X1, ey: Y1, ez: Z1 } = this;
      const A3 = modP2(X1 * X1);
      const B2 = modP2(Y1 * Y1);
      const C5 = modP2(_2n7 * modP2(Z1 * Z1));
      const D2 = modP2(a2 * A3);
      const x1y1 = X1 + Y1;
      const E2 = modP2(modP2(x1y1 * x1y1) - A3 - B2);
      const G5 = D2 + B2;
      const F2 = G5 - C5;
      const H2 = D2 - B2;
      const X32 = modP2(E2 * F2);
      const Y3 = modP2(G5 * H2);
      const T3 = modP2(E2 * H2);
      const Z3 = modP2(F2 * G5);
      return new Point2(X32, Y3, Z3, T3);
    }
    // Fast algo for adding 2 Extended Points.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
    // Cost: 9M + 1*a + 1*d + 7add.
    add(other) {
      aextpoint(other);
      const { a: a2, d: d4 } = CURVE;
      const { ex: X1, ey: Y1, ez: Z1, et: T12 } = this;
      const { ex: X22, ey: Y22, ez: Z2, et: T22 } = other;
      const A3 = modP2(X1 * X22);
      const B2 = modP2(Y1 * Y22);
      const C5 = modP2(T12 * d4 * T22);
      const D2 = modP2(Z1 * Z2);
      const E2 = modP2((X1 + Y1) * (X22 + Y22) - A3 - B2);
      const F2 = D2 - C5;
      const G5 = D2 + C5;
      const H2 = modP2(B2 - a2 * A3);
      const X32 = modP2(E2 * F2);
      const Y3 = modP2(G5 * H2);
      const T3 = modP2(E2 * H2);
      const Z3 = modP2(F2 * G5);
      return new Point2(X32, Y3, Z3, T3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    wNAF(n2) {
      return wnaf.wNAFCached(this, n2, Point2.normalizeZ);
    }
    // Constant-time multiplication.
    multiply(scalar) {
      const n2 = scalar;
      aInRange("scalar", n2, _1n9, CURVE_ORDER);
      const { p: p3, f: f6 } = this.wNAF(n2);
      return Point2.normalizeZ([p3, f6])[0];
    }
    // Non-constant-time multiplication. Uses double-and-add algorithm.
    // It's faster, but should only be used when you don't care about
    // an exposed private key e.g. sig verification.
    // Does NOT allow scalars higher than CURVE.n.
    // Accepts optional accumulator to merge with multiply (important for sparse scalars)
    multiplyUnsafe(scalar, acc = Point2.ZERO) {
      const n2 = scalar;
      aInRange("scalar", n2, _0n9, CURVE_ORDER);
      if (n2 === _0n9)
        return I2;
      if (this.is0() || n2 === _1n9)
        return this;
      return wnaf.wNAFCachedUnsafe(this, n2, Point2.normalizeZ, acc);
    }
    // Checks if point is of small order.
    // If you add something to small order point, you will have "dirty"
    // point with torsion component.
    // Multiplies point by cofactor and checks if the result is 0.
    isSmallOrder() {
      return this.multiplyUnsafe(cofactor).is0();
    }
    // Multiplies point by curve order and checks if the result is 0.
    // Returns `false` is the point is dirty.
    isTorsionFree() {
      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();
    }
    // Converts Extended point to default (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    toAffine(iz) {
      return toAffineMemo(this, iz);
    }
    clearCofactor() {
      const { h: cofactor2 } = CURVE;
      if (cofactor2 === _1n9)
        return this;
      return this.multiplyUnsafe(cofactor2);
    }
    // Converts hash string or Uint8Array to Point.
    // Uses algo from RFC8032 5.1.3.
    static fromHex(hex, zip215 = false) {
      const { d: d4, a: a2 } = CURVE;
      const len = Fp4.BYTES;
      hex = ensureBytes("pointHex", hex, len);
      abool("zip215", zip215);
      const normed = hex.slice();
      const lastByte = hex[len - 1];
      normed[len - 1] = lastByte & ~128;
      const y3 = bytesToNumberLE(normed);
      const max = zip215 ? MASK : Fp4.ORDER;
      aInRange("pointHex.y", y3, _0n9, max);
      const y22 = modP2(y3 * y3);
      const u2 = modP2(y22 - _1n9);
      const v4 = modP2(d4 * y22 - a2);
      let { isValid, value: x3 } = uvRatio2(u2, v4);
      if (!isValid)
        throw new Error("Point.fromHex: invalid y coordinate");
      const isXOdd = (x3 & _1n9) === _1n9;
      const isLastByteOdd = (lastByte & 128) !== 0;
      if (!zip215 && x3 === _0n9 && isLastByteOdd)
        throw new Error("Point.fromHex: x=0 and x_0=1");
      if (isLastByteOdd !== isXOdd)
        x3 = modP2(-x3);
      return Point2.fromAffine({ x: x3, y: y3 });
    }
    static fromPrivateKey(privKey) {
      const { scalar } = getPrivateScalar(privKey);
      return G4.multiply(scalar);
    }
    toRawBytes() {
      const { x: x3, y: y3 } = this.toAffine();
      const bytes = numberToBytesLE(y3, Fp4.BYTES);
      bytes[bytes.length - 1] |= x3 & _1n9 ? 128 : 0;
      return bytes;
    }
    toHex() {
      return bytesToHex(this.toRawBytes());
    }
  }
  Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, _1n9, modP2(CURVE.Gx * CURVE.Gy));
  Point2.ZERO = new Point2(_0n9, _1n9, _1n9, _0n9);
  const { BASE: G4, ZERO: I2 } = Point2;
  const wnaf = wNAF(Point2, nByteLength * 8);
  function modN2(a2) {
    return mod(a2, CURVE_ORDER);
  }
  function modN_LE(hash) {
    return modN2(bytesToNumberLE(hash));
  }
  function getPrivateScalar(key) {
    const len = Fp4.BYTES;
    key = ensureBytes("private key", key, len);
    const hashed = ensureBytes("hashed private key", cHash(key), 2 * len);
    const head = adjustScalarBytes2(hashed.slice(0, len));
    const prefix = hashed.slice(len, 2 * len);
    const scalar = modN_LE(head);
    return { head, prefix, scalar };
  }
  function getExtendedPublicKey(key) {
    const { head, prefix, scalar } = getPrivateScalar(key);
    const point = G4.multiply(scalar);
    const pointBytes = point.toRawBytes();
    return { head, prefix, scalar, point, pointBytes };
  }
  function getPublicKey2(privKey) {
    return getExtendedPublicKey(privKey).pointBytes;
  }
  function hashDomainToScalar(context = Uint8Array.of(), ...msgs) {
    const msg = concatBytes2(...msgs);
    return modN_LE(cHash(domain(msg, ensureBytes("context", context), !!prehash)));
  }
  function sign2(msg, privKey, options = {}) {
    msg = ensureBytes("message", msg);
    if (prehash)
      msg = prehash(msg);
    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);
    const r2 = hashDomainToScalar(options.context, prefix, msg);
    const R4 = G4.multiply(r2).toRawBytes();
    const k2 = hashDomainToScalar(options.context, R4, pointBytes, msg);
    const s = modN2(r2 + k2 * scalar);
    aInRange("signature.s", s, _0n9, CURVE_ORDER);
    const res = concatBytes2(R4, numberToBytesLE(s, Fp4.BYTES));
    return ensureBytes("result", res, Fp4.BYTES * 2);
  }
  const verifyOpts = VERIFY_DEFAULT;
  function verify3(sig, msg, publicKey, options = verifyOpts) {
    const { context, zip215 } = options;
    const len = Fp4.BYTES;
    sig = ensureBytes("signature", sig, 2 * len);
    msg = ensureBytes("message", msg);
    publicKey = ensureBytes("publicKey", publicKey, len);
    if (zip215 !== void 0)
      abool("zip215", zip215);
    if (prehash)
      msg = prehash(msg);
    const s = bytesToNumberLE(sig.slice(len, 2 * len));
    let A3, R4, SB;
    try {
      A3 = Point2.fromHex(publicKey, zip215);
      R4 = Point2.fromHex(sig.slice(0, len), zip215);
      SB = G4.multiplyUnsafe(s);
    } catch (error) {
      return false;
    }
    if (!zip215 && A3.isSmallOrder())
      return false;
    const k2 = hashDomainToScalar(context, R4.toRawBytes(), A3.toRawBytes(), msg);
    const RkA = R4.add(A3.multiplyUnsafe(k2));
    return RkA.subtract(SB).clearCofactor().equals(Point2.ZERO);
  }
  G4._setWindowSize(8);
  const utils = {
    getExtendedPublicKey,
    /** ed25519 priv keys are uniform 32b. No need to check for modulo bias, like in secp256k1. */
    randomPrivateKey: () => randomBytes2(Fp4.BYTES),
    /**
     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
     * values. This slows down first getPublicKey() by milliseconds (see Speed section),
     * but allows to speed-up subsequent getPublicKey() calls up to 20x.
     * @param windowSize 2, 4, 8, 16
     */
    precompute(windowSize = 8, point = Point2.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  return {
    CURVE,
    getPublicKey: getPublicKey2,
    sign: sign2,
    verify: verify3,
    ExtendedPoint: Point2,
    utils
  };
}

// node_modules/ox/node_modules/@noble/curves/esm/abstract/montgomery.js
var _0n10 = BigInt(0);
var _1n10 = BigInt(1);
var _2n8 = BigInt(2);
function validateOpts3(curve) {
  validateObject(curve, {
    adjustScalarBytes: "function",
    powPminus2: "function"
  });
  return Object.freeze({ ...curve });
}
function montgomery(curveDef) {
  const CURVE = validateOpts3(curveDef);
  const { P: P4, type, adjustScalarBytes: adjustScalarBytes2, powPminus2 } = CURVE;
  const is25519 = type === "x25519";
  if (!is25519 && type !== "x448")
    throw new Error("invalid type");
  const montgomeryBits = is25519 ? 255 : 448;
  const fieldLen = is25519 ? 32 : 56;
  const Gu = is25519 ? BigInt(9) : BigInt(5);
  const a24 = is25519 ? BigInt(121665) : BigInt(39081);
  const minScalar = is25519 ? _2n8 ** BigInt(254) : _2n8 ** BigInt(447);
  const maxAdded = is25519 ? BigInt(8) * _2n8 ** BigInt(251) - _1n10 : BigInt(4) * _2n8 ** BigInt(445) - _1n10;
  const maxScalar = minScalar + maxAdded + _1n10;
  const modP2 = (n2) => mod(n2, P4);
  const GuBytes = encodeU(Gu);
  function encodeU(u2) {
    return numberToBytesLE(modP2(u2), fieldLen);
  }
  function decodeU(u2) {
    const _u = ensureBytes("u coordinate", u2, fieldLen);
    if (is25519)
      _u[31] &= 127;
    return modP2(bytesToNumberLE(_u));
  }
  function decodeScalar(scalar) {
    return bytesToNumberLE(adjustScalarBytes2(ensureBytes("scalar", scalar, fieldLen)));
  }
  function scalarMult(scalar, u2) {
    const pu2 = montgomeryLadder(decodeU(u2), decodeScalar(scalar));
    if (pu2 === _0n10)
      throw new Error("invalid private or public key received");
    return encodeU(pu2);
  }
  function scalarMultBase(scalar) {
    return scalarMult(scalar, GuBytes);
  }
  function cswap(swap, x_2, x_3) {
    const dummy = modP2(swap * (x_2 - x_3));
    x_2 = modP2(x_2 - dummy);
    x_3 = modP2(x_3 + dummy);
    return { x_2, x_3 };
  }
  function montgomeryLadder(u2, scalar) {
    aInRange("u", u2, _0n10, P4);
    aInRange("scalar", scalar, minScalar, maxScalar);
    const k2 = scalar;
    const x_1 = u2;
    let x_2 = _1n10;
    let z_2 = _0n10;
    let x_3 = u2;
    let z_3 = _1n10;
    let swap = _0n10;
    for (let t = BigInt(montgomeryBits - 1); t >= _0n10; t--) {
      const k_t = k2 >> t & _1n10;
      swap ^= k_t;
      ({ x_2, x_3 } = cswap(swap, x_2, x_3));
      ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));
      swap = k_t;
      const A3 = x_2 + z_2;
      const AA = modP2(A3 * A3);
      const B2 = x_2 - z_2;
      const BB = modP2(B2 * B2);
      const E2 = AA - BB;
      const C5 = x_3 + z_3;
      const D2 = x_3 - z_3;
      const DA = modP2(D2 * A3);
      const CB = modP2(C5 * B2);
      const dacb = DA + CB;
      const da_cb = DA - CB;
      x_3 = modP2(dacb * dacb);
      z_3 = modP2(x_1 * modP2(da_cb * da_cb));
      x_2 = modP2(AA * BB);
      z_2 = modP2(E2 * (AA + modP2(a24 * E2)));
    }
    ({ x_2, x_3 } = cswap(swap, x_2, x_3));
    ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));
    const z22 = powPminus2(z_2);
    return modP2(x_2 * z22);
  }
  return {
    scalarMult,
    scalarMultBase,
    getSharedSecret: (privateKey, publicKey) => scalarMult(privateKey, publicKey),
    getPublicKey: (privateKey) => scalarMultBase(privateKey),
    utils: { randomPrivateKey: () => CURVE.randomBytes(fieldLen) },
    GuBytes: GuBytes.slice()
  };
}

// node_modules/ox/node_modules/@noble/curves/esm/ed25519.js
var ED25519_P = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
var ED25519_SQRT_M1 = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
var _0n11 = BigInt(0);
var _1n11 = BigInt(1);
var _2n9 = BigInt(2);
var _3n6 = BigInt(3);
var _5n2 = BigInt(5);
var _8n3 = BigInt(8);
function ed25519_pow_2_252_3(x3) {
  const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);
  const P4 = ED25519_P;
  const x22 = x3 * x3 % P4;
  const b22 = x22 * x3 % P4;
  const b4 = pow2(b22, _2n9, P4) * b22 % P4;
  const b5 = pow2(b4, _1n11, P4) * x3 % P4;
  const b10 = pow2(b5, _5n2, P4) * b5 % P4;
  const b20 = pow2(b10, _10n, P4) * b10 % P4;
  const b40 = pow2(b20, _20n, P4) * b20 % P4;
  const b80 = pow2(b40, _40n, P4) * b40 % P4;
  const b160 = pow2(b80, _80n, P4) * b80 % P4;
  const b240 = pow2(b160, _80n, P4) * b80 % P4;
  const b250 = pow2(b240, _10n, P4) * b10 % P4;
  const pow_p_5_8 = pow2(b250, _2n9, P4) * x3 % P4;
  return { pow_p_5_8, b2: b22 };
}
function adjustScalarBytes(bytes) {
  bytes[0] &= 248;
  bytes[31] &= 127;
  bytes[31] |= 64;
  return bytes;
}
function uvRatio(u2, v4) {
  const P4 = ED25519_P;
  const v32 = mod(v4 * v4 * v4, P4);
  const v7 = mod(v32 * v32 * v4, P4);
  const pow = ed25519_pow_2_252_3(u2 * v7).pow_p_5_8;
  let x3 = mod(u2 * v32 * pow, P4);
  const vx2 = mod(v4 * x3 * x3, P4);
  const root1 = x3;
  const root2 = mod(x3 * ED25519_SQRT_M1, P4);
  const useRoot1 = vx2 === u2;
  const useRoot2 = vx2 === mod(-u2, P4);
  const noRoot = vx2 === mod(-u2 * ED25519_SQRT_M1, P4);
  if (useRoot1)
    x3 = root1;
  if (useRoot2 || noRoot)
    x3 = root2;
  if (isNegativeLE(x3, P4))
    x3 = mod(-x3, P4);
  return { isValid: useRoot1 || useRoot2, value: x3 };
}
var Fp3 = (() => Field(ED25519_P, void 0, true))();
var ed25519Defaults = (() => ({
  // Removing Fp.create() will still work, and is 10% faster on sign
  a: Fp3.create(BigInt(-1)),
  // d is -121665/121666 a.k.a. Fp.neg(121665 * Fp.inv(121666))
  d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),
  // Finite field 2n**255n - 19n
  Fp: Fp3,
  // Subgroup order 2n**252n + 27742317777372353535851937790883648493n;
  n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"),
  h: _8n3,
  Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),
  Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"),
  hash: sha512,
  randomBytes,
  adjustScalarBytes,
  // dom2
  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
  // Constant-time, u/√v
  uvRatio
}))();
var ed25519 = (() => twistedEdwards(ed25519Defaults))();
function ed25519_domain(data, ctx, phflag) {
  if (ctx.length > 255)
    throw new Error("Context is too big");
  return concatBytes(utf8ToBytes("SigEd25519 no Ed25519 collisions"), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);
}
var ed25519ctx = (() => twistedEdwards({
  ...ed25519Defaults,
  domain: ed25519_domain
}))();
var ed25519ph = (() => twistedEdwards(Object.assign({}, ed25519Defaults, {
  domain: ed25519_domain,
  prehash: sha512
})))();
var x25519 = (() => montgomery({
  P: ED25519_P,
  type: "x25519",
  powPminus2: (x3) => {
    const P4 = ED25519_P;
    const { pow_p_5_8, b2: b22 } = ed25519_pow_2_252_3(x3);
    return mod(pow2(pow_p_5_8, _3n6, P4) * b22, P4);
  },
  adjustScalarBytes,
  randomBytes
}))();
var ELL2_C1 = (() => (Fp3.ORDER + _3n6) / _8n3)();
var ELL2_C2 = (() => Fp3.pow(_2n9, ELL2_C1))();
var ELL2_C3 = (() => Fp3.sqrt(Fp3.neg(Fp3.ONE)))();
function map_to_curve_elligator2_curve25519(u2) {
  const ELL2_C4 = (Fp3.ORDER - _5n2) / _8n3;
  const ELL2_J = BigInt(486662);
  let tv1 = Fp3.sqr(u2);
  tv1 = Fp3.mul(tv1, _2n9);
  let xd = Fp3.add(tv1, Fp3.ONE);
  let x1n = Fp3.neg(ELL2_J);
  let tv2 = Fp3.sqr(xd);
  let gxd = Fp3.mul(tv2, xd);
  let gx1 = Fp3.mul(tv1, ELL2_J);
  gx1 = Fp3.mul(gx1, x1n);
  gx1 = Fp3.add(gx1, tv2);
  gx1 = Fp3.mul(gx1, x1n);
  let tv3 = Fp3.sqr(gxd);
  tv2 = Fp3.sqr(tv3);
  tv3 = Fp3.mul(tv3, gxd);
  tv3 = Fp3.mul(tv3, gx1);
  tv2 = Fp3.mul(tv2, tv3);
  let y11 = Fp3.pow(tv2, ELL2_C4);
  y11 = Fp3.mul(y11, tv3);
  let y12 = Fp3.mul(y11, ELL2_C3);
  tv2 = Fp3.sqr(y11);
  tv2 = Fp3.mul(tv2, gxd);
  let e1 = Fp3.eql(tv2, gx1);
  let y1 = Fp3.cmov(y12, y11, e1);
  let x2n = Fp3.mul(x1n, tv1);
  let y21 = Fp3.mul(y11, u2);
  y21 = Fp3.mul(y21, ELL2_C2);
  let y22 = Fp3.mul(y21, ELL2_C3);
  let gx2 = Fp3.mul(gx1, tv1);
  tv2 = Fp3.sqr(y21);
  tv2 = Fp3.mul(tv2, gxd);
  let e2 = Fp3.eql(tv2, gx2);
  let y23 = Fp3.cmov(y22, y21, e2);
  tv2 = Fp3.sqr(y1);
  tv2 = Fp3.mul(tv2, gxd);
  let e3 = Fp3.eql(tv2, gx1);
  let xn3 = Fp3.cmov(x2n, x1n, e3);
  let y3 = Fp3.cmov(y23, y1, e3);
  let e4 = Fp3.isOdd(y3);
  y3 = Fp3.cmov(y3, Fp3.neg(y3), e3 !== e4);
  return { xMn: xn3, xMd: xd, yMn: y3, yMd: _1n11 };
}
var ELL2_C1_EDWARDS = (() => FpSqrtEven(Fp3, Fp3.neg(BigInt(486664))))();
function map_to_curve_elligator2_edwards25519(u2) {
  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u2);
  let xn3 = Fp3.mul(xMn, yMd);
  xn3 = Fp3.mul(xn3, ELL2_C1_EDWARDS);
  let xd = Fp3.mul(xMd, yMn);
  let yn3 = Fp3.sub(xMn, xMd);
  let yd = Fp3.add(xMn, xMd);
  let tv1 = Fp3.mul(xd, yd);
  let e = Fp3.eql(tv1, Fp3.ZERO);
  xn3 = Fp3.cmov(xn3, Fp3.ZERO, e);
  xd = Fp3.cmov(xd, Fp3.ONE, e);
  yn3 = Fp3.cmov(yn3, Fp3.ONE, e);
  yd = Fp3.cmov(yd, Fp3.ONE, e);
  const [xd_inv, yd_inv] = FpInvertBatch(Fp3, [xd, yd], true);
  return { x: Fp3.mul(xn3, xd_inv), y: Fp3.mul(yn3, yd_inv) };
}
var ed25519_hasher = (() => createHasher(ed25519.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {
  DST: "edwards25519_XMD:SHA-512_ELL2_RO_",
  encodeDST: "edwards25519_XMD:SHA-512_ELL2_NU_",
  p: Fp3.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha512
}))();
var hashToCurve2 = (() => ed25519_hasher.hashToCurve)();
var encodeToCurve2 = (() => ed25519_hasher.encodeToCurve)();
function aristp(other) {
  if (!(other instanceof RistPoint))
    throw new Error("RistrettoPoint expected");
}
var SQRT_M1 = ED25519_SQRT_M1;
var SQRT_AD_MINUS_ONE = BigInt("25063068953384623474111414158702152701244531502492656460079210482610430750235");
var INVSQRT_A_MINUS_D = BigInt("54469307008909316920995813868745141605393597292927456921205312896311721017578");
var ONE_MINUS_D_SQ = BigInt("1159843021668779879193775521855586647937357759715417654439879720876111806838");
var D_MINUS_ONE_SQ = BigInt("40440834346308536858101042469323190826248399146238708352240133220865137265952");
var invertSqrt = (number) => uvRatio(_1n11, number);
var MAX_255B = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var bytes255ToNumberLE = (bytes) => ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);
function calcElligatorRistrettoMap(r0) {
  const { d: d4 } = ed25519.CURVE;
  const P4 = ed25519.CURVE.Fp.ORDER;
  const mod2 = ed25519.CURVE.Fp.create;
  const r2 = mod2(SQRT_M1 * r0 * r0);
  const Ns3 = mod2((r2 + _1n11) * ONE_MINUS_D_SQ);
  let c3 = BigInt(-1);
  const D2 = mod2((c3 - d4 * r2) * mod2(r2 + d4));
  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns3, D2);
  let s_ = mod2(s * r0);
  if (!isNegativeLE(s_, P4))
    s_ = mod2(-s_);
  if (!Ns_D_is_sq)
    s = s_;
  if (!Ns_D_is_sq)
    c3 = r2;
  const Nt5 = mod2(c3 * (r2 - _1n11) * D_MINUS_ONE_SQ - D2);
  const s2 = s * s;
  const W0 = mod2((s + s) * D2);
  const W1 = mod2(Nt5 * SQRT_AD_MINUS_ONE);
  const W22 = mod2(_1n11 - s2);
  const W32 = mod2(_1n11 + s2);
  return new ed25519.ExtendedPoint(mod2(W0 * W32), mod2(W22 * W1), mod2(W1 * W32), mod2(W0 * W22));
}
var RistPoint = class _RistPoint {
  // Private property to discourage combining ExtendedPoint + RistrettoPoint
  // Always use Ristretto encoding/decoding instead.
  constructor(ep) {
    this.ep = ep;
  }
  static fromAffine(ap) {
    return new _RistPoint(ed25519.ExtendedPoint.fromAffine(ap));
  }
  /**
   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.
   * The hash-to-group operation applies Elligator twice and adds the results.
   * **Note:** this is one-way map, there is no conversion from point to hash.
   * Described in [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#appendix-B) and on
   * the [website](https://ristretto.group/formulas/elligator.html).
   * @param hex 64-byte output of a hash function
   */
  static hashToCurve(hex) {
    hex = ensureBytes("ristrettoHash", hex, 64);
    const r1 = bytes255ToNumberLE(hex.slice(0, 32));
    const R1 = calcElligatorRistrettoMap(r1);
    const r2 = bytes255ToNumberLE(hex.slice(32, 64));
    const R22 = calcElligatorRistrettoMap(r2);
    return new _RistPoint(R1.add(R22));
  }
  /**
   * Converts ristretto-encoded string to ristretto point.
   * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-decode).
   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding
   */
  static fromHex(hex) {
    hex = ensureBytes("ristrettoHex", hex, 32);
    const { a: a2, d: d4 } = ed25519.CURVE;
    const P4 = ed25519.CURVE.Fp.ORDER;
    const mod2 = ed25519.CURVE.Fp.create;
    const emsg = "RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint";
    const s = bytes255ToNumberLE(hex);
    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P4))
      throw new Error(emsg);
    const s2 = mod2(s * s);
    const u1 = mod2(_1n11 + a2 * s2);
    const u2 = mod2(_1n11 - a2 * s2);
    const u1_2 = mod2(u1 * u1);
    const u2_2 = mod2(u2 * u2);
    const v4 = mod2(a2 * d4 * u1_2 - u2_2);
    const { isValid, value: I2 } = invertSqrt(mod2(v4 * u2_2));
    const Dx = mod2(I2 * u2);
    const Dy = mod2(I2 * Dx * v4);
    let x3 = mod2((s + s) * Dx);
    if (isNegativeLE(x3, P4))
      x3 = mod2(-x3);
    const y3 = mod2(u1 * Dy);
    const t = mod2(x3 * y3);
    if (!isValid || isNegativeLE(t, P4) || y3 === _0n11)
      throw new Error(emsg);
    return new _RistPoint(new ed25519.ExtendedPoint(x3, y3, _1n11, t));
  }
  static msm(points, scalars) {
    const Fn3 = Field(ed25519.CURVE.n, ed25519.CURVE.nBitLength);
    return pippenger(_RistPoint, Fn3, points, scalars);
  }
  /**
   * Encodes ristretto point to Uint8Array.
   * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-encode).
   */
  toRawBytes() {
    let { ex: x3, ey: y3, ez: z4, et: t } = this.ep;
    const P4 = ed25519.CURVE.Fp.ORDER;
    const mod2 = ed25519.CURVE.Fp.create;
    const u1 = mod2(mod2(z4 + y3) * mod2(z4 - y3));
    const u2 = mod2(x3 * y3);
    const u2sq = mod2(u2 * u2);
    const { value: invsqrt } = invertSqrt(mod2(u1 * u2sq));
    const D1 = mod2(invsqrt * u1);
    const D2 = mod2(invsqrt * u2);
    const zInv = mod2(D1 * D2 * t);
    let D3;
    if (isNegativeLE(t * zInv, P4)) {
      let _x = mod2(y3 * SQRT_M1);
      let _y = mod2(x3 * SQRT_M1);
      x3 = _x;
      y3 = _y;
      D3 = mod2(D1 * INVSQRT_A_MINUS_D);
    } else {
      D3 = D2;
    }
    if (isNegativeLE(x3 * zInv, P4))
      y3 = mod2(-y3);
    let s = mod2((z4 - y3) * D3);
    if (isNegativeLE(s, P4))
      s = mod2(-s);
    return numberToBytesLE(s, 32);
  }
  toHex() {
    return bytesToHex(this.toRawBytes());
  }
  toString() {
    return this.toHex();
  }
  /**
   * Compares two Ristretto points.
   * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-equals).
   */
  equals(other) {
    aristp(other);
    const { ex: X1, ey: Y1 } = this.ep;
    const { ex: X22, ey: Y22 } = other.ep;
    const mod2 = ed25519.CURVE.Fp.create;
    const one = mod2(X1 * Y22) === mod2(Y1 * X22);
    const two = mod2(Y1 * Y22) === mod2(X1 * X22);
    return one || two;
  }
  add(other) {
    aristp(other);
    return new _RistPoint(this.ep.add(other.ep));
  }
  subtract(other) {
    aristp(other);
    return new _RistPoint(this.ep.subtract(other.ep));
  }
  multiply(scalar) {
    return new _RistPoint(this.ep.multiply(scalar));
  }
  multiplyUnsafe(scalar) {
    return new _RistPoint(this.ep.multiplyUnsafe(scalar));
  }
  double() {
    return new _RistPoint(this.ep.double());
  }
  negate() {
    return new _RistPoint(this.ep.negate());
  }
};
var RistrettoPoint = (() => {
  if (!RistPoint.BASE)
    RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);
  if (!RistPoint.ZERO)
    RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);
  return RistPoint;
})();

// node_modules/ox/node_modules/@adraffy/ens-normalize/dist/index.mjs
var S0 = 44032;
var L0 = 4352;
var V0 = 4449;
var T0 = 4519;
var L_COUNT = 19;
var V_COUNT = 21;
var T_COUNT = 28;
var N_COUNT = V_COUNT * T_COUNT;
var S_COUNT = L_COUNT * N_COUNT;
var S1 = S0 + S_COUNT;
var L1 = L0 + L_COUNT;
var V1 = V0 + V_COUNT;
var T1 = T0 + T_COUNT;

// node_modules/ox/_esm/core/Secp256k1.js
var Secp256k1_exports = {};
__export(Secp256k1_exports, {
  createKeyPair: () => createKeyPair,
  getPublicKey: () => getPublicKey,
  getSharedSecret: () => getSharedSecret,
  noble: () => noble,
  randomPrivateKey: () => randomPrivateKey,
  recoverAddress: () => recoverAddress,
  recoverPublicKey: () => recoverPublicKey,
  sign: () => sign,
  verify: () => verify
});

// node_modules/ox/_esm/core/internal/entropy.js
var extraEntropy = false;

// node_modules/ox/_esm/core/Secp256k1.js
var noble = secp256k1;
function createKeyPair(options = {}) {
  const { as: as2 = "Hex" } = options;
  const privateKey = randomPrivateKey({ as: as2 });
  const publicKey = getPublicKey({ privateKey });
  return {
    privateKey,
    publicKey
  };
}
function getPublicKey(options) {
  const { privateKey } = options;
  const point = secp256k1.ProjectivePoint.fromPrivateKey(from(privateKey).slice(2));
  return from3(point);
}
function getSharedSecret(options) {
  const { as: as2 = "Hex", privateKey, publicKey } = options;
  const point = secp256k1.ProjectivePoint.fromHex(toHex(publicKey).slice(2));
  const sharedPoint = point.multiply(secp256k1.utils.normPrivateKeyToScalar(from(privateKey).slice(2)));
  const sharedSecret = sharedPoint.toRawBytes(true);
  if (as2 === "Hex")
    return fromBytes(sharedSecret);
  return sharedSecret;
}
function randomPrivateKey(options = {}) {
  const { as: as2 = "Hex" } = options;
  const bytes = secp256k1.utils.randomPrivateKey();
  if (as2 === "Hex")
    return fromBytes(bytes);
  return bytes;
}
function recoverAddress(options) {
  return fromPublicKey(recoverPublicKey(options));
}
function recoverPublicKey(options) {
  const { payload, signature } = options;
  const { r: r2, s, yParity } = signature;
  const signature_ = new secp256k1.Signature(BigInt(r2), BigInt(s)).addRecoveryBit(yParity);
  const point = signature_.recoverPublicKey(from(payload).substring(2));
  return from3(point);
}
function sign(options) {
  const { extraEntropy: extraEntropy2 = extraEntropy, hash, payload, privateKey } = options;
  const { r: r2, s, recovery } = secp256k1.sign(from2(payload), from2(privateKey), {
    extraEntropy: typeof extraEntropy2 === "boolean" ? extraEntropy2 : from(extraEntropy2).slice(2),
    lowS: true,
    ...hash ? { prehash: true } : {}
  });
  return {
    r: r2,
    s,
    yParity: recovery
  };
}
function verify(options) {
  const { address, hash, payload, publicKey, signature } = options;
  if (address)
    return isEqual(address, recoverAddress({ payload, signature }));
  return secp256k1.verify(signature, from2(payload), toBytes2(publicKey), ...hash ? [{ prehash: true, lowS: true }] : []);
}

// node_modules/@noble/ciphers/esm/utils.js
function isBytes2(a2) {
  return a2 instanceof Uint8Array || ArrayBuffer.isView(a2) && a2.constructor.name === "Uint8Array";
}
function abool2(b3) {
  if (typeof b3 !== "boolean")
    throw new Error(`boolean expected, not ${b3}`);
}
function abytes3(b3, ...lengths) {
  if (!isBytes2(b3))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b3.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b3.length);
}
function aexists2(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function aoutput2(out, instance) {
  abytes3(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error("digestInto() expects output buffer of length at least " + min);
  }
}
function u82(arr) {
  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
}
function u322(arr) {
  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
}
function clean2(...arrays) {
  for (let i3 = 0; i3 < arrays.length; i3++) {
    arrays[i3].fill(0);
  }
}
function createView(arr) {
  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
var isLE = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
var hasHexBuiltin2 = (() => (
  // @ts-ignore
  typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
))();
var hexes3 = Array.from({ length: 256 }, (_2, i3) => i3.toString(16).padStart(2, "0"));
function utf8ToBytes3(str) {
  if (typeof str !== "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes5(data) {
  if (typeof data === "string")
    data = utf8ToBytes3(data);
  else if (isBytes2(data))
    data = copyBytes(data);
  else
    throw new Error("Uint8Array expected, got " + typeof data);
  return data;
}
function overlapBytes(a2, b3) {
  return a2.buffer === b3.buffer && // best we can do, may fail with an obscure Proxy
  a2.byteOffset < b3.byteOffset + b3.byteLength && // a starts before b end
  b3.byteOffset < a2.byteOffset + a2.byteLength;
}
function complexOverlapBytes(input, output) {
  if (overlapBytes(input, output) && input.byteOffset < output.byteOffset)
    throw new Error("complex overlap of input and output is not supported");
}
function concatBytes3(...arrays) {
  let sum = 0;
  for (let i3 = 0; i3 < arrays.length; i3++) {
    const a2 = arrays[i3];
    abytes3(a2);
    sum += a2.length;
  }
  const res = new Uint8Array(sum);
  for (let i3 = 0, pad3 = 0; i3 < arrays.length; i3++) {
    const a2 = arrays[i3];
    res.set(a2, pad3);
    pad3 += a2.length;
  }
  return res;
}
function equalBytes2(a2, b3) {
  if (a2.length !== b3.length)
    return false;
  let diff = 0;
  for (let i3 = 0; i3 < a2.length; i3++)
    diff |= a2[i3] ^ b3[i3];
  return diff === 0;
}
var wrapCipher = (params, constructor) => {
  function wrappedCipher(key, ...args) {
    abytes3(key);
    if (!isLE)
      throw new Error("Non little-endian hardware is not yet supported");
    if (params.nonceLength !== void 0) {
      const nonce = args[0];
      if (!nonce)
        throw new Error("nonce / iv required");
      if (params.varSizeNonce)
        abytes3(nonce);
      else
        abytes3(nonce, params.nonceLength);
    }
    const tagl = params.tagLength;
    if (tagl && args[1] !== void 0) {
      abytes3(args[1]);
    }
    const cipher = constructor(key, ...args);
    const checkOutput = (fnLength, output) => {
      if (output !== void 0) {
        if (fnLength !== 2)
          throw new Error("cipher output not supported");
        abytes3(output);
      }
    };
    let called = false;
    const wrCipher = {
      encrypt(data, output) {
        if (called)
          throw new Error("cannot encrypt() twice with same key + nonce");
        called = true;
        abytes3(data);
        checkOutput(cipher.encrypt.length, output);
        return cipher.encrypt(data, output);
      },
      decrypt(data, output) {
        abytes3(data);
        if (tagl && data.length < tagl)
          throw new Error("invalid ciphertext length: smaller than tagLength=" + tagl);
        checkOutput(cipher.decrypt.length, output);
        return cipher.decrypt(data, output);
      }
    };
    return wrCipher;
  }
  Object.assign(wrappedCipher, params);
  return wrappedCipher;
};
function getOutput(expectedLength, out, onlyAligned = true) {
  if (out === void 0)
    return new Uint8Array(expectedLength);
  if (out.length !== expectedLength)
    throw new Error("invalid output length, expected " + expectedLength + ", got: " + out.length);
  if (onlyAligned && !isAligned32(out))
    throw new Error("invalid output, must be aligned");
  return out;
}
function setBigUint64(view, byteOffset, value, isLE2) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE2);
  const _32n = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n & _u32_max);
  const wl = Number(value & _u32_max);
  const h3 = isLE2 ? 4 : 0;
  const l2 = isLE2 ? 0 : 4;
  view.setUint32(byteOffset + h3, wh, isLE2);
  view.setUint32(byteOffset + l2, wl, isLE2);
}
function u64Lengths(dataLength, aadLength, isLE2) {
  abool2(isLE2);
  const num2 = new Uint8Array(16);
  const view = createView(num2);
  setBigUint64(view, 0, BigInt(aadLength), isLE2);
  setBigUint64(view, 8, BigInt(dataLength), isLE2);
  return num2;
}
function isAligned32(bytes) {
  return bytes.byteOffset % 4 === 0;
}
function copyBytes(bytes) {
  return Uint8Array.from(bytes);
}

// node_modules/@noble/ciphers/esm/_polyval.js
var BLOCK_SIZE = 16;
var ZEROS16 = new Uint8Array(16);
var ZEROS32 = u322(ZEROS16);
var POLY = 225;
var mul2 = (s0, s1, s2, s3) => {
  const hiBit = s3 & 1;
  return {
    s3: s2 << 31 | s3 >>> 1,
    s2: s1 << 31 | s2 >>> 1,
    s1: s0 << 31 | s1 >>> 1,
    s0: s0 >>> 1 ^ POLY << 24 & -(hiBit & 1)
    // reduce % poly
  };
};
var swapLE = (n2) => (n2 >>> 0 & 255) << 24 | (n2 >>> 8 & 255) << 16 | (n2 >>> 16 & 255) << 8 | n2 >>> 24 & 255 | 0;
function _toGHASHKey(k2) {
  k2.reverse();
  const hiBit = k2[15] & 1;
  let carry = 0;
  for (let i3 = 0; i3 < k2.length; i3++) {
    const t = k2[i3];
    k2[i3] = t >>> 1 | carry;
    carry = (t & 1) << 7;
  }
  k2[0] ^= -hiBit & 225;
  return k2;
}
var estimateWindow = (bytes) => {
  if (bytes > 64 * 1024)
    return 8;
  if (bytes > 1024)
    return 4;
  return 2;
};
var GHASH = class {
  // We select bits per window adaptively based on expectedLength
  constructor(key, expectedLength) {
    this.blockLen = BLOCK_SIZE;
    this.outputLen = BLOCK_SIZE;
    this.s0 = 0;
    this.s1 = 0;
    this.s2 = 0;
    this.s3 = 0;
    this.finished = false;
    key = toBytes5(key);
    abytes3(key, 16);
    const kView = createView(key);
    let k0 = kView.getUint32(0, false);
    let k1 = kView.getUint32(4, false);
    let k2 = kView.getUint32(8, false);
    let k3 = kView.getUint32(12, false);
    const doubles = [];
    for (let i3 = 0; i3 < 128; i3++) {
      doubles.push({ s0: swapLE(k0), s1: swapLE(k1), s2: swapLE(k2), s3: swapLE(k3) });
      ({ s0: k0, s1: k1, s2: k2, s3: k3 } = mul2(k0, k1, k2, k3));
    }
    const W5 = estimateWindow(expectedLength || 1024);
    if (![1, 2, 4, 8].includes(W5))
      throw new Error("ghash: invalid window size, expected 2, 4 or 8");
    this.W = W5;
    const bits = 128;
    const windows = bits / W5;
    const windowSize = this.windowSize = 2 ** W5;
    const items = [];
    for (let w3 = 0; w3 < windows; w3++) {
      for (let byte = 0; byte < windowSize; byte++) {
        let s0 = 0, s1 = 0, s2 = 0, s3 = 0;
        for (let j3 = 0; j3 < W5; j3++) {
          const bit = byte >>> W5 - j3 - 1 & 1;
          if (!bit)
            continue;
          const { s0: d0, s1: d1, s2: d22, s3: d32 } = doubles[W5 * w3 + j3];
          s0 ^= d0, s1 ^= d1, s2 ^= d22, s3 ^= d32;
        }
        items.push({ s0, s1, s2, s3 });
      }
    }
    this.t = items;
  }
  _updateBlock(s0, s1, s2, s3) {
    s0 ^= this.s0, s1 ^= this.s1, s2 ^= this.s2, s3 ^= this.s3;
    const { W: W5, t, windowSize } = this;
    let o0 = 0, o1 = 0, o2 = 0, o3 = 0;
    const mask = (1 << W5) - 1;
    let w3 = 0;
    for (const num2 of [s0, s1, s2, s3]) {
      for (let bytePos = 0; bytePos < 4; bytePos++) {
        const byte = num2 >>> 8 * bytePos & 255;
        for (let bitPos = 8 / W5 - 1; bitPos >= 0; bitPos--) {
          const bit = byte >>> W5 * bitPos & mask;
          const { s0: e0, s1: e1, s2: e2, s3: e3 } = t[w3 * windowSize + bit];
          o0 ^= e0, o1 ^= e1, o2 ^= e2, o3 ^= e3;
          w3 += 1;
        }
      }
    }
    this.s0 = o0;
    this.s1 = o1;
    this.s2 = o2;
    this.s3 = o3;
  }
  update(data) {
    aexists2(this);
    data = toBytes5(data);
    abytes3(data);
    const b32 = u322(data);
    const blocks = Math.floor(data.length / BLOCK_SIZE);
    const left = data.length % BLOCK_SIZE;
    for (let i3 = 0; i3 < blocks; i3++) {
      this._updateBlock(b32[i3 * 4 + 0], b32[i3 * 4 + 1], b32[i3 * 4 + 2], b32[i3 * 4 + 3]);
    }
    if (left) {
      ZEROS16.set(data.subarray(blocks * BLOCK_SIZE));
      this._updateBlock(ZEROS32[0], ZEROS32[1], ZEROS32[2], ZEROS32[3]);
      clean2(ZEROS32);
    }
    return this;
  }
  destroy() {
    const { t } = this;
    for (const elm of t) {
      elm.s0 = 0, elm.s1 = 0, elm.s2 = 0, elm.s3 = 0;
    }
  }
  digestInto(out) {
    aexists2(this);
    aoutput2(out, this);
    this.finished = true;
    const { s0, s1, s2, s3 } = this;
    const o32 = u322(out);
    o32[0] = s0;
    o32[1] = s1;
    o32[2] = s2;
    o32[3] = s3;
    return out;
  }
  digest() {
    const res = new Uint8Array(BLOCK_SIZE);
    this.digestInto(res);
    this.destroy();
    return res;
  }
};
var Polyval = class extends GHASH {
  constructor(key, expectedLength) {
    key = toBytes5(key);
    abytes3(key);
    const ghKey = _toGHASHKey(copyBytes(key));
    super(ghKey, expectedLength);
    clean2(ghKey);
  }
  update(data) {
    data = toBytes5(data);
    aexists2(this);
    const b32 = u322(data);
    const left = data.length % BLOCK_SIZE;
    const blocks = Math.floor(data.length / BLOCK_SIZE);
    for (let i3 = 0; i3 < blocks; i3++) {
      this._updateBlock(swapLE(b32[i3 * 4 + 3]), swapLE(b32[i3 * 4 + 2]), swapLE(b32[i3 * 4 + 1]), swapLE(b32[i3 * 4 + 0]));
    }
    if (left) {
      ZEROS16.set(data.subarray(blocks * BLOCK_SIZE));
      this._updateBlock(swapLE(ZEROS32[3]), swapLE(ZEROS32[2]), swapLE(ZEROS32[1]), swapLE(ZEROS32[0]));
      clean2(ZEROS32);
    }
    return this;
  }
  digestInto(out) {
    aexists2(this);
    aoutput2(out, this);
    this.finished = true;
    const { s0, s1, s2, s3 } = this;
    const o32 = u322(out);
    o32[0] = s0;
    o32[1] = s1;
    o32[2] = s2;
    o32[3] = s3;
    return out.reverse();
  }
};
function wrapConstructorWithKey(hashCons) {
  const hashC = (msg, key) => hashCons(key, msg.length).update(toBytes5(msg)).digest();
  const tmp = hashCons(new Uint8Array(16), 0);
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (key, expectedLength) => hashCons(key, expectedLength);
  return hashC;
}
var ghash = wrapConstructorWithKey((key, expectedLength) => new GHASH(key, expectedLength));
var polyval = wrapConstructorWithKey((key, expectedLength) => new Polyval(key, expectedLength));

// node_modules/@noble/ciphers/esm/aes.js
var BLOCK_SIZE2 = 16;
var BLOCK_SIZE32 = 4;
var EMPTY_BLOCK = new Uint8Array(BLOCK_SIZE2);
var POLY2 = 283;
function mul22(n2) {
  return n2 << 1 ^ POLY2 & -(n2 >> 7);
}
function mul(a2, b3) {
  let res = 0;
  for (; b3 > 0; b3 >>= 1) {
    res ^= a2 & -(b3 & 1);
    a2 = mul22(a2);
  }
  return res;
}
var sbox = (() => {
  const t = new Uint8Array(256);
  for (let i3 = 0, x3 = 1; i3 < 256; i3++, x3 ^= mul22(x3))
    t[i3] = x3;
  const box = new Uint8Array(256);
  box[0] = 99;
  for (let i3 = 0; i3 < 255; i3++) {
    let x3 = t[255 - i3];
    x3 |= x3 << 8;
    box[t[i3]] = (x3 ^ x3 >> 4 ^ x3 >> 5 ^ x3 >> 6 ^ x3 >> 7 ^ 99) & 255;
  }
  clean2(t);
  return box;
})();
var invSbox = sbox.map((_2, j3) => sbox.indexOf(j3));
var rotr32_8 = (n2) => n2 << 24 | n2 >>> 8;
var rotl32_8 = (n2) => n2 << 8 | n2 >>> 24;
var byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
function genTtable(sbox2, fn3) {
  if (sbox2.length !== 256)
    throw new Error("Wrong sbox length");
  const T02 = new Uint32Array(256).map((_2, j3) => fn3(sbox2[j3]));
  const T12 = T02.map(rotl32_8);
  const T22 = T12.map(rotl32_8);
  const T3 = T22.map(rotl32_8);
  const T01 = new Uint32Array(256 * 256);
  const T23 = new Uint32Array(256 * 256);
  const sbox22 = new Uint16Array(256 * 256);
  for (let i3 = 0; i3 < 256; i3++) {
    for (let j3 = 0; j3 < 256; j3++) {
      const idx = i3 * 256 + j3;
      T01[idx] = T02[i3] ^ T12[j3];
      T23[idx] = T22[i3] ^ T3[j3];
      sbox22[idx] = sbox2[i3] << 8 | sbox2[j3];
    }
  }
  return { sbox: sbox2, sbox2: sbox22, T0: T02, T1: T12, T2: T22, T3, T01, T23 };
}
var tableEncoding = genTtable(sbox, (s) => mul(s, 3) << 24 | s << 16 | s << 8 | mul(s, 2));
var tableDecoding = genTtable(invSbox, (s) => mul(s, 11) << 24 | mul(s, 13) << 16 | mul(s, 9) << 8 | mul(s, 14));
var xPowers = (() => {
  const p3 = new Uint8Array(16);
  for (let i3 = 0, x3 = 1; i3 < 16; i3++, x3 = mul22(x3))
    p3[i3] = x3;
  return p3;
})();
function expandKeyLE(key) {
  abytes3(key);
  const len = key.length;
  if (![16, 24, 32].includes(len))
    throw new Error("aes: invalid key size, should be 16, 24 or 32, got " + len);
  const { sbox2 } = tableEncoding;
  const toClean = [];
  if (!isAligned32(key))
    toClean.push(key = copyBytes(key));
  const k32 = u322(key);
  const Nk = k32.length;
  const subByte = (n2) => applySbox(sbox2, n2, n2, n2, n2);
  const xk = new Uint32Array(len + 28);
  xk.set(k32);
  for (let i3 = Nk; i3 < xk.length; i3++) {
    let t = xk[i3 - 1];
    if (i3 % Nk === 0)
      t = subByte(rotr32_8(t)) ^ xPowers[i3 / Nk - 1];
    else if (Nk > 6 && i3 % Nk === 4)
      t = subByte(t);
    xk[i3] = xk[i3 - Nk] ^ t;
  }
  clean2(...toClean);
  return xk;
}
function expandKeyDecLE(key) {
  const encKey = expandKeyLE(key);
  const xk = encKey.slice();
  const Nk = encKey.length;
  const { sbox2 } = tableEncoding;
  const { T0: T02, T1: T12, T2: T22, T3 } = tableDecoding;
  for (let i3 = 0; i3 < Nk; i3 += 4) {
    for (let j3 = 0; j3 < 4; j3++)
      xk[i3 + j3] = encKey[Nk - i3 - 4 + j3];
  }
  clean2(encKey);
  for (let i3 = 4; i3 < Nk - 4; i3++) {
    const x3 = xk[i3];
    const w3 = applySbox(sbox2, x3, x3, x3, x3);
    xk[i3] = T02[w3 & 255] ^ T12[w3 >>> 8 & 255] ^ T22[w3 >>> 16 & 255] ^ T3[w3 >>> 24];
  }
  return xk;
}
function apply0123(T01, T23, s0, s1, s2, s3) {
  return T01[s0 << 8 & 65280 | s1 >>> 8 & 255] ^ T23[s2 >>> 8 & 65280 | s3 >>> 24 & 255];
}
function applySbox(sbox2, s0, s1, s2, s3) {
  return sbox2[s0 & 255 | s1 & 65280] | sbox2[s2 >>> 16 & 255 | s3 >>> 16 & 65280] << 16;
}
function encrypt(xk, s0, s1, s2, s3) {
  const { sbox2, T01, T23 } = tableEncoding;
  let k2 = 0;
  s0 ^= xk[k2++], s1 ^= xk[k2++], s2 ^= xk[k2++], s3 ^= xk[k2++];
  const rounds = xk.length / 4 - 2;
  for (let i3 = 0; i3 < rounds; i3++) {
    const t02 = xk[k2++] ^ apply0123(T01, T23, s0, s1, s2, s3);
    const t12 = xk[k2++] ^ apply0123(T01, T23, s1, s2, s3, s0);
    const t22 = xk[k2++] ^ apply0123(T01, T23, s2, s3, s0, s1);
    const t32 = xk[k2++] ^ apply0123(T01, T23, s3, s0, s1, s2);
    s0 = t02, s1 = t12, s2 = t22, s3 = t32;
  }
  const t0 = xk[k2++] ^ applySbox(sbox2, s0, s1, s2, s3);
  const t1 = xk[k2++] ^ applySbox(sbox2, s1, s2, s3, s0);
  const t2 = xk[k2++] ^ applySbox(sbox2, s2, s3, s0, s1);
  const t3 = xk[k2++] ^ applySbox(sbox2, s3, s0, s1, s2);
  return { s0: t0, s1: t1, s2: t2, s3: t3 };
}
function decrypt(xk, s0, s1, s2, s3) {
  const { sbox2, T01, T23 } = tableDecoding;
  let k2 = 0;
  s0 ^= xk[k2++], s1 ^= xk[k2++], s2 ^= xk[k2++], s3 ^= xk[k2++];
  const rounds = xk.length / 4 - 2;
  for (let i3 = 0; i3 < rounds; i3++) {
    const t02 = xk[k2++] ^ apply0123(T01, T23, s0, s3, s2, s1);
    const t12 = xk[k2++] ^ apply0123(T01, T23, s1, s0, s3, s2);
    const t22 = xk[k2++] ^ apply0123(T01, T23, s2, s1, s0, s3);
    const t32 = xk[k2++] ^ apply0123(T01, T23, s3, s2, s1, s0);
    s0 = t02, s1 = t12, s2 = t22, s3 = t32;
  }
  const t0 = xk[k2++] ^ applySbox(sbox2, s0, s3, s2, s1);
  const t1 = xk[k2++] ^ applySbox(sbox2, s1, s0, s3, s2);
  const t2 = xk[k2++] ^ applySbox(sbox2, s2, s1, s0, s3);
  const t3 = xk[k2++] ^ applySbox(sbox2, s3, s2, s1, s0);
  return { s0: t0, s1: t1, s2: t2, s3: t3 };
}
function ctrCounter(xk, nonce, src, dst) {
  abytes3(nonce, BLOCK_SIZE2);
  abytes3(src);
  const srcLen = src.length;
  dst = getOutput(srcLen, dst);
  complexOverlapBytes(src, dst);
  const ctr2 = nonce;
  const c32 = u322(ctr2);
  let { s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]);
  const src32 = u322(src);
  const dst32 = u322(dst);
  for (let i3 = 0; i3 + 4 <= src32.length; i3 += 4) {
    dst32[i3 + 0] = src32[i3 + 0] ^ s0;
    dst32[i3 + 1] = src32[i3 + 1] ^ s1;
    dst32[i3 + 2] = src32[i3 + 2] ^ s2;
    dst32[i3 + 3] = src32[i3 + 3] ^ s3;
    let carry = 1;
    for (let i4 = ctr2.length - 1; i4 >= 0; i4--) {
      carry = carry + (ctr2[i4] & 255) | 0;
      ctr2[i4] = carry & 255;
      carry >>>= 8;
    }
    ({ s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]));
  }
  const start = BLOCK_SIZE2 * Math.floor(src32.length / BLOCK_SIZE32);
  if (start < srcLen) {
    const b32 = new Uint32Array([s0, s1, s2, s3]);
    const buf = u82(b32);
    for (let i3 = start, pos = 0; i3 < srcLen; i3++, pos++)
      dst[i3] = src[i3] ^ buf[pos];
    clean2(b32);
  }
  return dst;
}
function ctr32(xk, isLE2, nonce, src, dst) {
  abytes3(nonce, BLOCK_SIZE2);
  abytes3(src);
  dst = getOutput(src.length, dst);
  const ctr2 = nonce;
  const c32 = u322(ctr2);
  const view = createView(ctr2);
  const src32 = u322(src);
  const dst32 = u322(dst);
  const ctrPos = isLE2 ? 0 : 12;
  const srcLen = src.length;
  let ctrNum = view.getUint32(ctrPos, isLE2);
  let { s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]);
  for (let i3 = 0; i3 + 4 <= src32.length; i3 += 4) {
    dst32[i3 + 0] = src32[i3 + 0] ^ s0;
    dst32[i3 + 1] = src32[i3 + 1] ^ s1;
    dst32[i3 + 2] = src32[i3 + 2] ^ s2;
    dst32[i3 + 3] = src32[i3 + 3] ^ s3;
    ctrNum = ctrNum + 1 >>> 0;
    view.setUint32(ctrPos, ctrNum, isLE2);
    ({ s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]));
  }
  const start = BLOCK_SIZE2 * Math.floor(src32.length / BLOCK_SIZE32);
  if (start < srcLen) {
    const b32 = new Uint32Array([s0, s1, s2, s3]);
    const buf = u82(b32);
    for (let i3 = start, pos = 0; i3 < srcLen; i3++, pos++)
      dst[i3] = src[i3] ^ buf[pos];
    clean2(b32);
  }
  return dst;
}
var ctr = wrapCipher({ blockSize: 16, nonceLength: 16 }, function aesctr(key, nonce) {
  function processCtr(buf, dst) {
    abytes3(buf);
    if (dst !== void 0) {
      abytes3(dst);
      if (!isAligned32(dst))
        throw new Error("unaligned destination");
    }
    const xk = expandKeyLE(key);
    const n2 = copyBytes(nonce);
    const toClean = [xk, n2];
    if (!isAligned32(buf))
      toClean.push(buf = copyBytes(buf));
    const out = ctrCounter(xk, n2, buf, dst);
    clean2(...toClean);
    return out;
  }
  return {
    encrypt: (plaintext, dst) => processCtr(plaintext, dst),
    decrypt: (ciphertext, dst) => processCtr(ciphertext, dst)
  };
});
function validateBlockDecrypt(data) {
  abytes3(data);
  if (data.length % BLOCK_SIZE2 !== 0) {
    throw new Error("aes-(cbc/ecb).decrypt ciphertext should consist of blocks with size " + BLOCK_SIZE2);
  }
}
function validateBlockEncrypt(plaintext, pcks5, dst) {
  abytes3(plaintext);
  let outLen = plaintext.length;
  const remaining = outLen % BLOCK_SIZE2;
  if (!pcks5 && remaining !== 0)
    throw new Error("aec/(cbc-ecb): unpadded plaintext with disabled padding");
  if (!isAligned32(plaintext))
    plaintext = copyBytes(plaintext);
  const b3 = u322(plaintext);
  if (pcks5) {
    let left = BLOCK_SIZE2 - remaining;
    if (!left)
      left = BLOCK_SIZE2;
    outLen = outLen + left;
  }
  dst = getOutput(outLen, dst);
  complexOverlapBytes(plaintext, dst);
  const o2 = u322(dst);
  return { b: b3, o: o2, out: dst };
}
function validatePCKS(data, pcks5) {
  if (!pcks5)
    return data;
  const len = data.length;
  if (!len)
    throw new Error("aes/pcks5: empty ciphertext not allowed");
  const lastByte = data[len - 1];
  if (lastByte <= 0 || lastByte > 16)
    throw new Error("aes/pcks5: wrong padding");
  const out = data.subarray(0, -lastByte);
  for (let i3 = 0; i3 < lastByte; i3++)
    if (data[len - i3 - 1] !== lastByte)
      throw new Error("aes/pcks5: wrong padding");
  return out;
}
function padPCKS(left) {
  const tmp = new Uint8Array(16);
  const tmp32 = u322(tmp);
  tmp.set(left);
  const paddingByte = BLOCK_SIZE2 - left.length;
  for (let i3 = BLOCK_SIZE2 - paddingByte; i3 < BLOCK_SIZE2; i3++)
    tmp[i3] = paddingByte;
  return tmp32;
}
var ecb = wrapCipher({ blockSize: 16 }, function aesecb(key, opts = {}) {
  const pcks5 = !opts.disablePadding;
  return {
    encrypt(plaintext, dst) {
      const { b: b3, o: o2, out: _out } = validateBlockEncrypt(plaintext, pcks5, dst);
      const xk = expandKeyLE(key);
      let i3 = 0;
      for (; i3 + 4 <= b3.length; ) {
        const { s0, s1, s2, s3 } = encrypt(xk, b3[i3 + 0], b3[i3 + 1], b3[i3 + 2], b3[i3 + 3]);
        o2[i3++] = s0, o2[i3++] = s1, o2[i3++] = s2, o2[i3++] = s3;
      }
      if (pcks5) {
        const tmp32 = padPCKS(plaintext.subarray(i3 * 4));
        const { s0, s1, s2, s3 } = encrypt(xk, tmp32[0], tmp32[1], tmp32[2], tmp32[3]);
        o2[i3++] = s0, o2[i3++] = s1, o2[i3++] = s2, o2[i3++] = s3;
      }
      clean2(xk);
      return _out;
    },
    decrypt(ciphertext, dst) {
      validateBlockDecrypt(ciphertext);
      const xk = expandKeyDecLE(key);
      dst = getOutput(ciphertext.length, dst);
      const toClean = [xk];
      if (!isAligned32(ciphertext))
        toClean.push(ciphertext = copyBytes(ciphertext));
      complexOverlapBytes(ciphertext, dst);
      const b3 = u322(ciphertext);
      const o2 = u322(dst);
      for (let i3 = 0; i3 + 4 <= b3.length; ) {
        const { s0, s1, s2, s3 } = decrypt(xk, b3[i3 + 0], b3[i3 + 1], b3[i3 + 2], b3[i3 + 3]);
        o2[i3++] = s0, o2[i3++] = s1, o2[i3++] = s2, o2[i3++] = s3;
      }
      clean2(...toClean);
      return validatePCKS(dst, pcks5);
    }
  };
});
var cbc = wrapCipher({ blockSize: 16, nonceLength: 16 }, function aescbc(key, iv, opts = {}) {
  const pcks5 = !opts.disablePadding;
  return {
    encrypt(plaintext, dst) {
      const xk = expandKeyLE(key);
      const { b: b3, o: o2, out: _out } = validateBlockEncrypt(plaintext, pcks5, dst);
      let _iv = iv;
      const toClean = [xk];
      if (!isAligned32(_iv))
        toClean.push(_iv = copyBytes(_iv));
      const n32 = u322(_iv);
      let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];
      let i3 = 0;
      for (; i3 + 4 <= b3.length; ) {
        s0 ^= b3[i3 + 0], s1 ^= b3[i3 + 1], s2 ^= b3[i3 + 2], s3 ^= b3[i3 + 3];
        ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));
        o2[i3++] = s0, o2[i3++] = s1, o2[i3++] = s2, o2[i3++] = s3;
      }
      if (pcks5) {
        const tmp32 = padPCKS(plaintext.subarray(i3 * 4));
        s0 ^= tmp32[0], s1 ^= tmp32[1], s2 ^= tmp32[2], s3 ^= tmp32[3];
        ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));
        o2[i3++] = s0, o2[i3++] = s1, o2[i3++] = s2, o2[i3++] = s3;
      }
      clean2(...toClean);
      return _out;
    },
    decrypt(ciphertext, dst) {
      validateBlockDecrypt(ciphertext);
      const xk = expandKeyDecLE(key);
      let _iv = iv;
      const toClean = [xk];
      if (!isAligned32(_iv))
        toClean.push(_iv = copyBytes(_iv));
      const n32 = u322(_iv);
      dst = getOutput(ciphertext.length, dst);
      if (!isAligned32(ciphertext))
        toClean.push(ciphertext = copyBytes(ciphertext));
      complexOverlapBytes(ciphertext, dst);
      const b3 = u322(ciphertext);
      const o2 = u322(dst);
      let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];
      for (let i3 = 0; i3 + 4 <= b3.length; ) {
        const ps0 = s0, ps1 = s1, ps2 = s2, ps3 = s3;
        s0 = b3[i3 + 0], s1 = b3[i3 + 1], s2 = b3[i3 + 2], s3 = b3[i3 + 3];
        const { s0: o0, s1: o1, s2: o22, s3: o3 } = decrypt(xk, s0, s1, s2, s3);
        o2[i3++] = o0 ^ ps0, o2[i3++] = o1 ^ ps1, o2[i3++] = o22 ^ ps2, o2[i3++] = o3 ^ ps3;
      }
      clean2(...toClean);
      return validatePCKS(dst, pcks5);
    }
  };
});
var cfb = wrapCipher({ blockSize: 16, nonceLength: 16 }, function aescfb(key, iv) {
  function processCfb(src, isEncrypt, dst) {
    abytes3(src);
    const srcLen = src.length;
    dst = getOutput(srcLen, dst);
    if (overlapBytes(src, dst))
      throw new Error("overlapping src and dst not supported.");
    const xk = expandKeyLE(key);
    let _iv = iv;
    const toClean = [xk];
    if (!isAligned32(_iv))
      toClean.push(_iv = copyBytes(_iv));
    if (!isAligned32(src))
      toClean.push(src = copyBytes(src));
    const src32 = u322(src);
    const dst32 = u322(dst);
    const next32 = isEncrypt ? dst32 : src32;
    const n32 = u322(_iv);
    let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];
    for (let i3 = 0; i3 + 4 <= src32.length; ) {
      const { s0: e0, s1: e1, s2: e2, s3: e3 } = encrypt(xk, s0, s1, s2, s3);
      dst32[i3 + 0] = src32[i3 + 0] ^ e0;
      dst32[i3 + 1] = src32[i3 + 1] ^ e1;
      dst32[i3 + 2] = src32[i3 + 2] ^ e2;
      dst32[i3 + 3] = src32[i3 + 3] ^ e3;
      s0 = next32[i3++], s1 = next32[i3++], s2 = next32[i3++], s3 = next32[i3++];
    }
    const start = BLOCK_SIZE2 * Math.floor(src32.length / BLOCK_SIZE32);
    if (start < srcLen) {
      ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));
      const buf = u82(new Uint32Array([s0, s1, s2, s3]));
      for (let i3 = start, pos = 0; i3 < srcLen; i3++, pos++)
        dst[i3] = src[i3] ^ buf[pos];
      clean2(buf);
    }
    clean2(...toClean);
    return dst;
  }
  return {
    encrypt: (plaintext, dst) => processCfb(plaintext, true, dst),
    decrypt: (ciphertext, dst) => processCfb(ciphertext, false, dst)
  };
});
function computeTag(fn3, isLE2, key, data, AAD) {
  const aadLength = AAD ? AAD.length : 0;
  const h3 = fn3.create(key, data.length + aadLength);
  if (AAD)
    h3.update(AAD);
  const num2 = u64Lengths(8 * data.length, 8 * aadLength, isLE2);
  h3.update(data);
  h3.update(num2);
  const res = h3.digest();
  clean2(num2);
  return res;
}
var gcm = wrapCipher({ blockSize: 16, nonceLength: 12, tagLength: 16, varSizeNonce: true }, function aesgcm(key, nonce, AAD) {
  if (nonce.length < 8)
    throw new Error("aes/gcm: invalid nonce length");
  const tagLength = 16;
  function _computeTag(authKey, tagMask, data) {
    const tag = computeTag(ghash, false, authKey, data, AAD);
    for (let i3 = 0; i3 < tagMask.length; i3++)
      tag[i3] ^= tagMask[i3];
    return tag;
  }
  function deriveKeys() {
    const xk = expandKeyLE(key);
    const authKey = EMPTY_BLOCK.slice();
    const counter = EMPTY_BLOCK.slice();
    ctr32(xk, false, counter, counter, authKey);
    if (nonce.length === 12) {
      counter.set(nonce);
    } else {
      const nonceLen = EMPTY_BLOCK.slice();
      const view = createView(nonceLen);
      setBigUint64(view, 8, BigInt(nonce.length * 8), false);
      const g2 = ghash.create(authKey).update(nonce).update(nonceLen);
      g2.digestInto(counter);
      g2.destroy();
    }
    const tagMask = ctr32(xk, false, counter, EMPTY_BLOCK);
    return { xk, authKey, counter, tagMask };
  }
  return {
    encrypt(plaintext) {
      const { xk, authKey, counter, tagMask } = deriveKeys();
      const out = new Uint8Array(plaintext.length + tagLength);
      const toClean = [xk, authKey, counter, tagMask];
      if (!isAligned32(plaintext))
        toClean.push(plaintext = copyBytes(plaintext));
      ctr32(xk, false, counter, plaintext, out.subarray(0, plaintext.length));
      const tag = _computeTag(authKey, tagMask, out.subarray(0, out.length - tagLength));
      toClean.push(tag);
      out.set(tag, plaintext.length);
      clean2(...toClean);
      return out;
    },
    decrypt(ciphertext) {
      const { xk, authKey, counter, tagMask } = deriveKeys();
      const toClean = [xk, authKey, tagMask, counter];
      if (!isAligned32(ciphertext))
        toClean.push(ciphertext = copyBytes(ciphertext));
      const data = ciphertext.subarray(0, -tagLength);
      const passedTag = ciphertext.subarray(-tagLength);
      const tag = _computeTag(authKey, tagMask, data);
      toClean.push(tag);
      if (!equalBytes2(tag, passedTag))
        throw new Error("aes/gcm: invalid ghash tag");
      const out = ctr32(xk, false, counter, data);
      clean2(...toClean);
      return out;
    }
  };
});
var limit = (name, min, max) => (value) => {
  if (!Number.isSafeInteger(value) || min > value || value > max) {
    const minmax = "[" + min + ".." + max + "]";
    throw new Error("" + name + ": expected value in range " + minmax + ", got " + value);
  }
};
var gcmsiv = wrapCipher({ blockSize: 16, nonceLength: 12, tagLength: 16, varSizeNonce: true }, function aessiv(key, nonce, AAD) {
  const tagLength = 16;
  const AAD_LIMIT = limit("AAD", 0, 2 ** 36);
  const PLAIN_LIMIT = limit("plaintext", 0, 2 ** 36);
  const NONCE_LIMIT = limit("nonce", 12, 12);
  const CIPHER_LIMIT = limit("ciphertext", 16, 2 ** 36 + 16);
  abytes3(key, 16, 24, 32);
  NONCE_LIMIT(nonce.length);
  if (AAD !== void 0)
    AAD_LIMIT(AAD.length);
  function deriveKeys() {
    const xk = expandKeyLE(key);
    const encKey = new Uint8Array(key.length);
    const authKey = new Uint8Array(16);
    const toClean = [xk, encKey];
    let _nonce = nonce;
    if (!isAligned32(_nonce))
      toClean.push(_nonce = copyBytes(_nonce));
    const n32 = u322(_nonce);
    let s0 = 0, s1 = n32[0], s2 = n32[1], s3 = n32[2];
    let counter = 0;
    for (const derivedKey of [authKey, encKey].map(u322)) {
      const d32 = u322(derivedKey);
      for (let i3 = 0; i3 < d32.length; i3 += 2) {
        const { s0: o0, s1: o1 } = encrypt(xk, s0, s1, s2, s3);
        d32[i3 + 0] = o0;
        d32[i3 + 1] = o1;
        s0 = ++counter;
      }
    }
    const res = { authKey, encKey: expandKeyLE(encKey) };
    clean2(...toClean);
    return res;
  }
  function _computeTag(encKey, authKey, data) {
    const tag = computeTag(polyval, true, authKey, data, AAD);
    for (let i3 = 0; i3 < 12; i3++)
      tag[i3] ^= nonce[i3];
    tag[15] &= 127;
    const t32 = u322(tag);
    let s0 = t32[0], s1 = t32[1], s2 = t32[2], s3 = t32[3];
    ({ s0, s1, s2, s3 } = encrypt(encKey, s0, s1, s2, s3));
    t32[0] = s0, t32[1] = s1, t32[2] = s2, t32[3] = s3;
    return tag;
  }
  function processSiv(encKey, tag, input) {
    let block = copyBytes(tag);
    block[15] |= 128;
    const res = ctr32(encKey, true, block, input);
    clean2(block);
    return res;
  }
  return {
    encrypt(plaintext) {
      PLAIN_LIMIT(plaintext.length);
      const { encKey, authKey } = deriveKeys();
      const tag = _computeTag(encKey, authKey, plaintext);
      const toClean = [encKey, authKey, tag];
      if (!isAligned32(plaintext))
        toClean.push(plaintext = copyBytes(plaintext));
      const out = new Uint8Array(plaintext.length + tagLength);
      out.set(tag, plaintext.length);
      out.set(processSiv(encKey, tag, plaintext));
      clean2(...toClean);
      return out;
    },
    decrypt(ciphertext) {
      CIPHER_LIMIT(ciphertext.length);
      const tag = ciphertext.subarray(-tagLength);
      const { encKey, authKey } = deriveKeys();
      const toClean = [encKey, authKey];
      if (!isAligned32(ciphertext))
        toClean.push(ciphertext = copyBytes(ciphertext));
      const plaintext = processSiv(encKey, tag, ciphertext.subarray(0, -tagLength));
      const expectedTag = _computeTag(encKey, authKey, plaintext);
      toClean.push(expectedTag);
      if (!equalBytes2(tag, expectedTag)) {
        clean2(...toClean);
        throw new Error("invalid polyval tag");
      }
      clean2(...toClean);
      return plaintext;
    }
  };
});
function isBytes32(a2) {
  return a2 instanceof Uint32Array || ArrayBuffer.isView(a2) && a2.constructor.name === "Uint32Array";
}
function encryptBlock(xk, block) {
  abytes3(block, 16);
  if (!isBytes32(xk))
    throw new Error("_encryptBlock accepts result of expandKeyLE");
  const b32 = u322(block);
  let { s0, s1, s2, s3 } = encrypt(xk, b32[0], b32[1], b32[2], b32[3]);
  b32[0] = s0, b32[1] = s1, b32[2] = s2, b32[3] = s3;
  return block;
}
function decryptBlock(xk, block) {
  abytes3(block, 16);
  if (!isBytes32(xk))
    throw new Error("_decryptBlock accepts result of expandKeyLE");
  const b32 = u322(block);
  let { s0, s1, s2, s3 } = decrypt(xk, b32[0], b32[1], b32[2], b32[3]);
  b32[0] = s0, b32[1] = s1, b32[2] = s2, b32[3] = s3;
  return block;
}
var AESW = {
  /*
  High-level pseudocode:
  ```
  A: u64 = IV
  out = []
  for (let i=0, ctr = 0; i<6; i++) {
    for (const chunk of chunks(plaintext, 8)) {
      A ^= swapEndianess(ctr++)
      [A, res] = chunks(encrypt(A || chunk), 8);
      out ||= res
    }
  }
  out = A || out
  ```
  Decrypt is the same, but reversed.
  */
  encrypt(kek, out) {
    if (out.length >= 2 ** 32)
      throw new Error("plaintext should be less than 4gb");
    const xk = expandKeyLE(kek);
    if (out.length === 16)
      encryptBlock(xk, out);
    else {
      const o32 = u322(out);
      let a0 = o32[0], a1 = o32[1];
      for (let j3 = 0, ctr2 = 1; j3 < 6; j3++) {
        for (let pos = 2; pos < o32.length; pos += 2, ctr2++) {
          const { s0, s1, s2, s3 } = encrypt(xk, a0, a1, o32[pos], o32[pos + 1]);
          a0 = s0, a1 = s1 ^ byteSwap(ctr2), o32[pos] = s2, o32[pos + 1] = s3;
        }
      }
      o32[0] = a0, o32[1] = a1;
    }
    xk.fill(0);
  },
  decrypt(kek, out) {
    if (out.length - 8 >= 2 ** 32)
      throw new Error("ciphertext should be less than 4gb");
    const xk = expandKeyDecLE(kek);
    const chunks = out.length / 8 - 1;
    if (chunks === 1)
      decryptBlock(xk, out);
    else {
      const o32 = u322(out);
      let a0 = o32[0], a1 = o32[1];
      for (let j3 = 0, ctr2 = chunks * 6; j3 < 6; j3++) {
        for (let pos = chunks * 2; pos >= 1; pos -= 2, ctr2--) {
          a1 ^= byteSwap(ctr2);
          const { s0, s1, s2, s3 } = decrypt(xk, a0, a1, o32[pos], o32[pos + 1]);
          a0 = s0, a1 = s1, o32[pos] = s2, o32[pos + 1] = s3;
        }
      }
      o32[0] = a0, o32[1] = a1;
    }
    xk.fill(0);
  }
};
var AESKW_IV = new Uint8Array(8).fill(166);
var aeskw = wrapCipher({ blockSize: 8 }, (kek) => ({
  encrypt(plaintext) {
    if (!plaintext.length || plaintext.length % 8 !== 0)
      throw new Error("invalid plaintext length");
    if (plaintext.length === 8)
      throw new Error("8-byte keys not allowed in AESKW, use AESKWP instead");
    const out = concatBytes3(AESKW_IV, plaintext);
    AESW.encrypt(kek, out);
    return out;
  },
  decrypt(ciphertext) {
    if (ciphertext.length % 8 !== 0 || ciphertext.length < 3 * 8)
      throw new Error("invalid ciphertext length");
    const out = copyBytes(ciphertext);
    AESW.decrypt(kek, out);
    if (!equalBytes2(out.subarray(0, 8), AESKW_IV))
      throw new Error("integrity check failed");
    out.subarray(0, 8).fill(0);
    return out.subarray(8);
  }
}));
var AESKWP_IV = 2790873510;
var aeskwp = wrapCipher({ blockSize: 8 }, (kek) => ({
  encrypt(plaintext) {
    if (!plaintext.length)
      throw new Error("invalid plaintext length");
    const padded = Math.ceil(plaintext.length / 8) * 8;
    const out = new Uint8Array(8 + padded);
    out.set(plaintext, 8);
    const out32 = u322(out);
    out32[0] = AESKWP_IV;
    out32[1] = byteSwap(plaintext.length);
    AESW.encrypt(kek, out);
    return out;
  },
  decrypt(ciphertext) {
    if (ciphertext.length < 16)
      throw new Error("invalid ciphertext length");
    const out = copyBytes(ciphertext);
    const o32 = u322(out);
    AESW.decrypt(kek, out);
    const len = byteSwap(o32[1]) >>> 0;
    const padded = Math.ceil(len / 8) * 8;
    if (o32[0] !== AESKWP_IV || out.length - 8 !== padded)
      throw new Error("integrity check failed");
    for (let i3 = len; i3 < padded; i3++)
      if (out[8 + i3] !== 0)
        throw new Error("integrity check failed");
    out.subarray(0, 8).fill(0);
    return out.subarray(8, 8 + len);
  }
}));

// node_modules/ox/node_modules/@noble/curves/esm/nist.js
var Fp256 = Field(BigInt("0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff"));
var p256_a = Fp256.create(BigInt("-3"));
var p256_b = BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b");
var p256 = createCurve({
  a: p256_a,
  b: p256_b,
  Fp: Fp256,
  n: BigInt("0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551"),
  Gx: BigInt("0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"),
  Gy: BigInt("0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"),
  h: BigInt(1),
  lowS: false
}, sha256);
var secp256r1 = p256;
var p256_mapSWU = (() => mapToCurveSimpleSWU(Fp256, {
  A: p256_a,
  B: p256_b,
  Z: Fp256.create(BigInt("-10"))
}))();
var p256_hasher = (() => createHasher(secp256r1.ProjectivePoint, (scalars) => p256_mapSWU(scalars[0]), {
  DST: "P256_XMD:SHA-256_SSWU_RO_",
  encodeDST: "P256_XMD:SHA-256_SSWU_NU_",
  p: Fp256.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha256
}))();
var Fp384 = Field(BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff"));
var p384_a = Fp384.create(BigInt("-3"));
var p384_b = BigInt("0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef");
var p384 = createCurve({
  a: p384_a,
  b: p384_b,
  Fp: Fp384,
  n: BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973"),
  Gx: BigInt("0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7"),
  Gy: BigInt("0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f"),
  h: BigInt(1),
  lowS: false
}, sha384);
var secp384r1 = p384;
var p384_mapSWU = (() => mapToCurveSimpleSWU(Fp384, {
  A: p384_a,
  B: p384_b,
  Z: Fp384.create(BigInt("-12"))
}))();
var p384_hasher = (() => createHasher(secp384r1.ProjectivePoint, (scalars) => p384_mapSWU(scalars[0]), {
  DST: "P384_XMD:SHA-384_SSWU_RO_",
  encodeDST: "P384_XMD:SHA-384_SSWU_NU_",
  p: Fp384.ORDER,
  m: 1,
  k: 192,
  expand: "xmd",
  hash: sha384
}))();
var Fp521 = Field(BigInt("0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
var p521_a = Fp521.create(BigInt("-3"));
var p521_b = BigInt("0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00");
var p521 = createCurve({
  a: p521_a,
  b: p521_b,
  Fp: Fp521,
  n: BigInt("0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409"),
  Gx: BigInt("0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66"),
  Gy: BigInt("0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650"),
  h: BigInt(1),
  lowS: false,
  allowedPrivateKeyLengths: [130, 131, 132]
  // P521 keys are variable-length. Normalize to 132b
}, sha512);
var secp521r1 = p521;
var p521_mapSWU = (() => mapToCurveSimpleSWU(Fp521, {
  A: p521_a,
  B: p521_b,
  Z: Fp521.create(BigInt("-4"))
}))();
var p521_hasher = (() => createHasher(secp521r1.ProjectivePoint, (scalars) => p521_mapSWU(scalars[0]), {
  DST: "P521_XMD:SHA-512_SSWU_RO_",
  encodeDST: "P521_XMD:SHA-512_SSWU_NU_",
  p: Fp521.ORDER,
  m: 1,
  k: 256,
  expand: "xmd",
  hash: sha512
}))();

// node_modules/ox/node_modules/@noble/curves/esm/p256.js
var hashToCurve3 = (() => p256_hasher.hashToCurve)();
var encodeToCurve3 = (() => p256_hasher.encodeToCurve)();

// node_modules/ox/_esm/core/RpcResponse.js
var BaseError2 = class extends Error {
  constructor(errorObject) {
    const { cause, code, message, data, stack } = errorObject;
    super(message, { cause });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.BaseError"
    });
    Object.defineProperty(this, "cause", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "stack", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "data", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.cause = cause;
    this.code = code;
    this.data = data;
    this.stack = stack ?? "";
  }
};
var InvalidInputError2 = class _InvalidInputError extends BaseError2 {
  constructor(parameters = {}) {
    super({
      code: _InvalidInputError.code,
      data: parameters.data,
      message: parameters.message ?? "Missing or invalid parameters."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32e3
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.InvalidInputError"
    });
  }
};
Object.defineProperty(InvalidInputError2, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32e3
});
var ResourceNotFoundError = class _ResourceNotFoundError extends BaseError2 {
  constructor(parameters = {}) {
    super({
      code: _ResourceNotFoundError.code,
      data: parameters.data,
      message: parameters.message ?? "Requested resource not found."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32001
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.ResourceNotFoundError"
    });
  }
};
Object.defineProperty(ResourceNotFoundError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32001
});
var ResourceUnavailableError = class _ResourceUnavailableError extends BaseError2 {
  constructor(parameters = {}) {
    super({
      code: _ResourceUnavailableError.code,
      data: parameters.data,
      message: parameters.message ?? "Requested resource not available."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32002
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.ResourceUnavailableError"
    });
  }
};
Object.defineProperty(ResourceUnavailableError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32002
});
var TransactionRejectedError = class _TransactionRejectedError extends BaseError2 {
  constructor(parameters = {}) {
    super({
      code: _TransactionRejectedError.code,
      data: parameters.data,
      message: parameters.message ?? "Transaction creation failed."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32003
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.TransactionRejectedError"
    });
  }
};
Object.defineProperty(TransactionRejectedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32003
});
var MethodNotSupportedError = class _MethodNotSupportedError extends BaseError2 {
  constructor(parameters = {}) {
    super({
      code: _MethodNotSupportedError.code,
      data: parameters.data,
      message: parameters.message ?? "Method is not implemented."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32004
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.MethodNotSupportedError"
    });
  }
};
Object.defineProperty(MethodNotSupportedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32004
});
var LimitExceededError = class _LimitExceededError extends BaseError2 {
  constructor(parameters = {}) {
    super({
      code: _LimitExceededError.code,
      data: parameters.data,
      message: parameters.message ?? "Rate limit exceeded."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32005
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.LimitExceededError"
    });
  }
};
Object.defineProperty(LimitExceededError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32005
});
var VersionNotSupportedError = class _VersionNotSupportedError extends BaseError2 {
  constructor(parameters = {}) {
    super({
      code: _VersionNotSupportedError.code,
      data: parameters.data,
      message: parameters.message ?? "JSON-RPC version not supported."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32006
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.VersionNotSupportedError"
    });
  }
};
Object.defineProperty(VersionNotSupportedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32006
});
var InvalidRequestError = class _InvalidRequestError extends BaseError2 {
  constructor(parameters = {}) {
    super({
      code: _InvalidRequestError.code,
      data: parameters.data,
      message: parameters.message ?? "Input is not a valid JSON-RPC request."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32600
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.InvalidRequestError"
    });
  }
};
Object.defineProperty(InvalidRequestError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32600
});
var MethodNotFoundError = class _MethodNotFoundError extends BaseError2 {
  constructor(parameters = {}) {
    super({
      code: _MethodNotFoundError.code,
      data: parameters.data,
      message: parameters.message ?? "Method does not exist."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32601
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.MethodNotFoundError"
    });
  }
};
Object.defineProperty(MethodNotFoundError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32601
});
var InvalidParamsError = class _InvalidParamsError extends BaseError2 {
  constructor(parameters = {}) {
    super({
      code: _InvalidParamsError.code,
      data: parameters.data,
      message: parameters.message ?? "Invalid method parameters."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32602
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.InvalidParamsError"
    });
  }
};
Object.defineProperty(InvalidParamsError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32602
});
var InternalError = class _InternalError extends BaseError2 {
  constructor(parameters = {}) {
    super({
      cause: parameters.cause,
      code: _InternalError.code,
      data: parameters.data,
      message: parameters.message ?? "Internal JSON-RPC error.",
      stack: parameters.stack
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32603
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.InternalError"
    });
  }
};
Object.defineProperty(InternalError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32603
});
var ParseError = class _ParseError extends BaseError2 {
  constructor(parameters = {}) {
    super({
      code: _ParseError.code,
      data: parameters.data,
      message: parameters.message ?? "Failed to parse JSON-RPC response."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32700
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.ParseError"
    });
  }
};
Object.defineProperty(ParseError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32700
});

// node_modules/ox/_esm/core/Provider.js
var ProviderRpcError = class extends Error {
  constructor(code, message) {
    super(message);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "ProviderRpcError"
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "details", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.code = code;
    this.details = message;
  }
};
var UserRejectedRequestError2 = class extends ProviderRpcError {
  constructor({ message = "The user rejected the request." } = {}) {
    super(4001, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4001
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.UserRejectedRequestError"
    });
  }
};
Object.defineProperty(UserRejectedRequestError2, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 4001
});
var UnauthorizedError = class extends ProviderRpcError {
  constructor({ message = "The requested method and/or account has not been authorized by the user." } = {}) {
    super(4100, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4100
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.UnauthorizedError"
    });
  }
};
Object.defineProperty(UnauthorizedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 4100
});
var UnsupportedMethodError = class extends ProviderRpcError {
  constructor({ message = "The provider does not support the requested method." } = {}) {
    super(4200, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4200
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.UnsupportedMethodError"
    });
  }
};
Object.defineProperty(UnsupportedMethodError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 4200
});
var DisconnectedError = class extends ProviderRpcError {
  constructor({ message = "The provider is disconnected from all chains." } = {}) {
    super(4900, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4900
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.DisconnectedError"
    });
  }
};
Object.defineProperty(DisconnectedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 4900
});
var ChainDisconnectedError = class extends ProviderRpcError {
  constructor({ message = "The provider is not connected to the requested chain." } = {}) {
    super(4901, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4901
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.ChainDisconnectedError"
    });
  }
};
Object.defineProperty(ChainDisconnectedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 4901
});
var SwitchChainError = class extends ProviderRpcError {
  constructor({ message = "An error occurred when attempting to switch chain." } = {}) {
    super(4902, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4902
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.SwitchChainError"
    });
  }
};
Object.defineProperty(SwitchChainError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 4902
});
var UnsupportedNonOptionalCapabilityError = class extends ProviderRpcError {
  constructor({ message = "This Wallet does not support a capability that was not marked as optional." } = {}) {
    super(5700, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 5700
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.UnsupportedNonOptionalCapabilityError"
    });
  }
};
Object.defineProperty(UnsupportedNonOptionalCapabilityError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 5700
});
var UnsupportedChainIdError = class extends ProviderRpcError {
  constructor({ message = "This Wallet does not support the requested chain ID." } = {}) {
    super(5710, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 5710
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.UnsupportedChainIdError"
    });
  }
};
Object.defineProperty(UnsupportedChainIdError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 5710
});
var DuplicateIdError = class extends ProviderRpcError {
  constructor({ message = "There is already a bundle submitted with this ID." } = {}) {
    super(5720, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 5720
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.DuplicateIdError"
    });
  }
};
Object.defineProperty(DuplicateIdError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 5720
});
var UnknownBundleIdError = class extends ProviderRpcError {
  constructor({ message = "This bundle id is unknown / has not been submitted." } = {}) {
    super(5730, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 5730
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.UnknownBundleIdError"
    });
  }
};
Object.defineProperty(UnknownBundleIdError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 5730
});
var BundleTooLargeError = class extends ProviderRpcError {
  constructor({ message = "The call bundle is too large for the Wallet to process." } = {}) {
    super(5740, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 5740
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.BundleTooLargeError"
    });
  }
};
Object.defineProperty(BundleTooLargeError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 5740
});
var AtomicReadyWalletRejectedUpgradeError = class extends ProviderRpcError {
  constructor({ message = "The Wallet can support atomicity after an upgrade, but the user rejected the upgrade." } = {}) {
    super(5750, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 5750
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.AtomicReadyWalletRejectedUpgradeError"
    });
  }
};
Object.defineProperty(AtomicReadyWalletRejectedUpgradeError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 5750
});
var AtomicityNotSupportedError = class extends ProviderRpcError {
  constructor({ message = "The wallet does not support atomic execution but the request requires it." } = {}) {
    super(5760, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 5760
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.AtomicityNotSupportedError"
    });
  }
};
Object.defineProperty(AtomicityNotSupportedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 5760
});

// node_modules/ox/_esm/core/WebAuthnP256.js
var createChallenge = Uint8Array.from([
  105,
  171,
  180,
  181,
  160,
  222,
  75,
  198,
  42,
  42,
  32,
  31,
  141,
  37,
  186,
  233
]);

// node_modules/@msgpack/msgpack/dist.esm/utils/utf8.mjs
function utf8Count(str) {
  const strLength = str.length;
  let byteLength = 0;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      byteLength++;
      continue;
    } else if ((value & 4294965248) === 0) {
      byteLength += 2;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        byteLength += 3;
      } else {
        byteLength += 4;
      }
    }
  }
  return byteLength;
}
function utf8EncodeJs(str, output, outputOffset) {
  const strLength = str.length;
  let offset = outputOffset;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      output[offset++] = value;
      continue;
    } else if ((value & 4294965248) === 0) {
      output[offset++] = value >> 6 & 31 | 192;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        output[offset++] = value >> 12 & 15 | 224;
        output[offset++] = value >> 6 & 63 | 128;
      } else {
        output[offset++] = value >> 18 & 7 | 240;
        output[offset++] = value >> 12 & 63 | 128;
        output[offset++] = value >> 6 & 63 | 128;
      }
    }
    output[offset++] = value & 63 | 128;
  }
}
var sharedTextEncoder = new TextEncoder();
var TEXT_ENCODER_THRESHOLD = 50;
function utf8EncodeTE(str, output, outputOffset) {
  sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));
}
function utf8Encode(str, output, outputOffset) {
  if (str.length > TEXT_ENCODER_THRESHOLD) {
    utf8EncodeTE(str, output, outputOffset);
  } else {
    utf8EncodeJs(str, output, outputOffset);
  }
}
var CHUNK_SIZE = 4096;
function utf8DecodeJs(bytes, inputOffset, byteLength) {
  let offset = inputOffset;
  const end = offset + byteLength;
  const units = [];
  let result = "";
  while (offset < end) {
    const byte1 = bytes[offset++];
    if ((byte1 & 128) === 0) {
      units.push(byte1);
    } else if ((byte1 & 224) === 192) {
      const byte2 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 6 | byte2);
    } else if ((byte1 & 240) === 224) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 12 | byte2 << 6 | byte3);
    } else if ((byte1 & 248) === 240) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      const byte4 = bytes[offset++] & 63;
      let unit = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
      if (unit > 65535) {
        unit -= 65536;
        units.push(unit >>> 10 & 1023 | 55296);
        unit = 56320 | unit & 1023;
      }
      units.push(unit);
    } else {
      units.push(byte1);
    }
    if (units.length >= CHUNK_SIZE) {
      result += String.fromCharCode(...units);
      units.length = 0;
    }
  }
  if (units.length > 0) {
    result += String.fromCharCode(...units);
  }
  return result;
}
var sharedTextDecoder = new TextDecoder();
var TEXT_DECODER_THRESHOLD = 200;
function utf8DecodeTD(bytes, inputOffset, byteLength) {
  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);
  return sharedTextDecoder.decode(stringBytes);
}
function utf8Decode(bytes, inputOffset, byteLength) {
  if (byteLength > TEXT_DECODER_THRESHOLD) {
    return utf8DecodeTD(bytes, inputOffset, byteLength);
  } else {
    return utf8DecodeJs(bytes, inputOffset, byteLength);
  }
}

// node_modules/@msgpack/msgpack/dist.esm/ExtData.mjs
var ExtData = class {
  constructor(type, data) {
    this.type = type;
    this.data = data;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/DecodeError.mjs
var DecodeError = class _DecodeError extends Error {
  constructor(message) {
    super(message);
    const proto = Object.create(_DecodeError.prototype);
    Object.setPrototypeOf(this, proto);
    Object.defineProperty(this, "name", {
      configurable: true,
      enumerable: false,
      value: _DecodeError.name
    });
  }
};

// node_modules/@msgpack/msgpack/dist.esm/utils/int.mjs
var UINT32_MAX = 4294967295;
function setUint64(view, offset, value) {
  const high = value / 4294967296;
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function setInt64(view, offset, value) {
  const high = Math.floor(value / 4294967296);
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function getInt64(view, offset) {
  const high = view.getInt32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}
function getUint64(view, offset) {
  const high = view.getUint32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}

// node_modules/@msgpack/msgpack/dist.esm/timestamp.mjs
var EXT_TIMESTAMP = -1;
var TIMESTAMP32_MAX_SEC = 4294967296 - 1;
var TIMESTAMP64_MAX_SEC = 17179869184 - 1;
function encodeTimeSpecToTimestamp({ sec, nsec }) {
  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {
    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {
      const rv = new Uint8Array(4);
      const view = new DataView(rv.buffer);
      view.setUint32(0, sec);
      return rv;
    } else {
      const secHigh = sec / 4294967296;
      const secLow = sec & 4294967295;
      const rv = new Uint8Array(8);
      const view = new DataView(rv.buffer);
      view.setUint32(0, nsec << 2 | secHigh & 3);
      view.setUint32(4, secLow);
      return rv;
    }
  } else {
    const rv = new Uint8Array(12);
    const view = new DataView(rv.buffer);
    view.setUint32(0, nsec);
    setInt64(view, 4, sec);
    return rv;
  }
}
function encodeDateToTimeSpec(date) {
  const msec = date.getTime();
  const sec = Math.floor(msec / 1e3);
  const nsec = (msec - sec * 1e3) * 1e6;
  const nsecInSec = Math.floor(nsec / 1e9);
  return {
    sec: sec + nsecInSec,
    nsec: nsec - nsecInSec * 1e9
  };
}
function encodeTimestampExtension(object) {
  if (object instanceof Date) {
    const timeSpec = encodeDateToTimeSpec(object);
    return encodeTimeSpecToTimestamp(timeSpec);
  } else {
    return null;
  }
}
function decodeTimestampToTimeSpec(data) {
  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);
  switch (data.byteLength) {
    case 4: {
      const sec = view.getUint32(0);
      const nsec = 0;
      return { sec, nsec };
    }
    case 8: {
      const nsec30AndSecHigh2 = view.getUint32(0);
      const secLow32 = view.getUint32(4);
      const sec = (nsec30AndSecHigh2 & 3) * 4294967296 + secLow32;
      const nsec = nsec30AndSecHigh2 >>> 2;
      return { sec, nsec };
    }
    case 12: {
      const sec = getInt64(view, 4);
      const nsec = view.getUint32(0);
      return { sec, nsec };
    }
    default:
      throw new DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.length}`);
  }
}
function decodeTimestampExtension(data) {
  const timeSpec = decodeTimestampToTimeSpec(data);
  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);
}
var timestampExtension = {
  type: EXT_TIMESTAMP,
  encode: encodeTimestampExtension,
  decode: decodeTimestampExtension
};

// node_modules/@msgpack/msgpack/dist.esm/ExtensionCodec.mjs
var ExtensionCodec = class {
  constructor() {
    this.builtInEncoders = [];
    this.builtInDecoders = [];
    this.encoders = [];
    this.decoders = [];
    this.register(timestampExtension);
  }
  register({ type, encode: encode4, decode: decode3 }) {
    if (type >= 0) {
      this.encoders[type] = encode4;
      this.decoders[type] = decode3;
    } else {
      const index = -1 - type;
      this.builtInEncoders[index] = encode4;
      this.builtInDecoders[index] = decode3;
    }
  }
  tryToEncode(object, context) {
    for (let i3 = 0; i3 < this.builtInEncoders.length; i3++) {
      const encodeExt = this.builtInEncoders[i3];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = -1 - i3;
          return new ExtData(type, data);
        }
      }
    }
    for (let i3 = 0; i3 < this.encoders.length; i3++) {
      const encodeExt = this.encoders[i3];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = i3;
          return new ExtData(type, data);
        }
      }
    }
    if (object instanceof ExtData) {
      return object;
    }
    return null;
  }
  decode(data, type, context) {
    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];
    if (decodeExt) {
      return decodeExt(data, type, context);
    } else {
      return new ExtData(type, data);
    }
  }
};
ExtensionCodec.defaultCodec = new ExtensionCodec();

// node_modules/@msgpack/msgpack/dist.esm/utils/typedArrays.mjs
function isArrayBufferLike(buffer) {
  return buffer instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && buffer instanceof SharedArrayBuffer;
}
function ensureUint8Array(buffer) {
  if (buffer instanceof Uint8Array) {
    return buffer;
  } else if (ArrayBuffer.isView(buffer)) {
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
  } else if (isArrayBufferLike(buffer)) {
    return new Uint8Array(buffer);
  } else {
    return Uint8Array.from(buffer);
  }
}

// node_modules/@msgpack/msgpack/dist.esm/Encoder.mjs
var DEFAULT_MAX_DEPTH = 100;
var DEFAULT_INITIAL_BUFFER_SIZE = 2048;
var Encoder = class _Encoder {
  constructor(options) {
    this.entered = false;
    this.extensionCodec = options?.extensionCodec ?? ExtensionCodec.defaultCodec;
    this.context = options?.context;
    this.useBigInt64 = options?.useBigInt64 ?? false;
    this.maxDepth = options?.maxDepth ?? DEFAULT_MAX_DEPTH;
    this.initialBufferSize = options?.initialBufferSize ?? DEFAULT_INITIAL_BUFFER_SIZE;
    this.sortKeys = options?.sortKeys ?? false;
    this.forceFloat32 = options?.forceFloat32 ?? false;
    this.ignoreUndefined = options?.ignoreUndefined ?? false;
    this.forceIntegerToFloat = options?.forceIntegerToFloat ?? false;
    this.pos = 0;
    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));
    this.bytes = new Uint8Array(this.view.buffer);
  }
  clone() {
    return new _Encoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      maxDepth: this.maxDepth,
      initialBufferSize: this.initialBufferSize,
      sortKeys: this.sortKeys,
      forceFloat32: this.forceFloat32,
      ignoreUndefined: this.ignoreUndefined,
      forceIntegerToFloat: this.forceIntegerToFloat
    });
  }
  reinitializeState() {
    this.pos = 0;
  }
  /**
   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.
   *
   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.
   */
  encodeSharedRef(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encodeSharedRef(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.subarray(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  /**
   * @returns Encodes the object and returns a copy of the encoder's internal buffer.
   */
  encode(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encode(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.slice(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  doEncode(object, depth) {
    if (depth > this.maxDepth) {
      throw new Error(`Too deep objects in depth ${depth}`);
    }
    if (object == null) {
      this.encodeNil();
    } else if (typeof object === "boolean") {
      this.encodeBoolean(object);
    } else if (typeof object === "number") {
      if (!this.forceIntegerToFloat) {
        this.encodeNumber(object);
      } else {
        this.encodeNumberAsFloat(object);
      }
    } else if (typeof object === "string") {
      this.encodeString(object);
    } else if (this.useBigInt64 && typeof object === "bigint") {
      this.encodeBigInt64(object);
    } else {
      this.encodeObject(object, depth);
    }
  }
  ensureBufferSizeToWrite(sizeToWrite) {
    const requiredSize = this.pos + sizeToWrite;
    if (this.view.byteLength < requiredSize) {
      this.resizeBuffer(requiredSize * 2);
    }
  }
  resizeBuffer(newSize) {
    const newBuffer = new ArrayBuffer(newSize);
    const newBytes = new Uint8Array(newBuffer);
    const newView = new DataView(newBuffer);
    newBytes.set(this.bytes);
    this.view = newView;
    this.bytes = newBytes;
  }
  encodeNil() {
    this.writeU8(192);
  }
  encodeBoolean(object) {
    if (object === false) {
      this.writeU8(194);
    } else {
      this.writeU8(195);
    }
  }
  encodeNumber(object) {
    if (!this.forceIntegerToFloat && Number.isSafeInteger(object)) {
      if (object >= 0) {
        if (object < 128) {
          this.writeU8(object);
        } else if (object < 256) {
          this.writeU8(204);
          this.writeU8(object);
        } else if (object < 65536) {
          this.writeU8(205);
          this.writeU16(object);
        } else if (object < 4294967296) {
          this.writeU8(206);
          this.writeU32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(207);
          this.writeU64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      } else {
        if (object >= -32) {
          this.writeU8(224 | object + 32);
        } else if (object >= -128) {
          this.writeU8(208);
          this.writeI8(object);
        } else if (object >= -32768) {
          this.writeU8(209);
          this.writeI16(object);
        } else if (object >= -2147483648) {
          this.writeU8(210);
          this.writeI32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(211);
          this.writeI64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      }
    } else {
      this.encodeNumberAsFloat(object);
    }
  }
  encodeNumberAsFloat(object) {
    if (this.forceFloat32) {
      this.writeU8(202);
      this.writeF32(object);
    } else {
      this.writeU8(203);
      this.writeF64(object);
    }
  }
  encodeBigInt64(object) {
    if (object >= BigInt(0)) {
      this.writeU8(207);
      this.writeBigUint64(object);
    } else {
      this.writeU8(211);
      this.writeBigInt64(object);
    }
  }
  writeStringHeader(byteLength) {
    if (byteLength < 32) {
      this.writeU8(160 + byteLength);
    } else if (byteLength < 256) {
      this.writeU8(217);
      this.writeU8(byteLength);
    } else if (byteLength < 65536) {
      this.writeU8(218);
      this.writeU16(byteLength);
    } else if (byteLength < 4294967296) {
      this.writeU8(219);
      this.writeU32(byteLength);
    } else {
      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);
    }
  }
  encodeString(object) {
    const maxHeaderSize = 1 + 4;
    const byteLength = utf8Count(object);
    this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);
    this.writeStringHeader(byteLength);
    utf8Encode(object, this.bytes, this.pos);
    this.pos += byteLength;
  }
  encodeObject(object, depth) {
    const ext = this.extensionCodec.tryToEncode(object, this.context);
    if (ext != null) {
      this.encodeExtension(ext);
    } else if (Array.isArray(object)) {
      this.encodeArray(object, depth);
    } else if (ArrayBuffer.isView(object)) {
      this.encodeBinary(object);
    } else if (typeof object === "object") {
      this.encodeMap(object, depth);
    } else {
      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);
    }
  }
  encodeBinary(object) {
    const size3 = object.byteLength;
    if (size3 < 256) {
      this.writeU8(196);
      this.writeU8(size3);
    } else if (size3 < 65536) {
      this.writeU8(197);
      this.writeU16(size3);
    } else if (size3 < 4294967296) {
      this.writeU8(198);
      this.writeU32(size3);
    } else {
      throw new Error(`Too large binary: ${size3}`);
    }
    const bytes = ensureUint8Array(object);
    this.writeU8a(bytes);
  }
  encodeArray(object, depth) {
    const size3 = object.length;
    if (size3 < 16) {
      this.writeU8(144 + size3);
    } else if (size3 < 65536) {
      this.writeU8(220);
      this.writeU16(size3);
    } else if (size3 < 4294967296) {
      this.writeU8(221);
      this.writeU32(size3);
    } else {
      throw new Error(`Too large array: ${size3}`);
    }
    for (const item of object) {
      this.doEncode(item, depth + 1);
    }
  }
  countWithoutUndefined(object, keys) {
    let count = 0;
    for (const key of keys) {
      if (object[key] !== void 0) {
        count++;
      }
    }
    return count;
  }
  encodeMap(object, depth) {
    const keys = Object.keys(object);
    if (this.sortKeys) {
      keys.sort();
    }
    const size3 = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;
    if (size3 < 16) {
      this.writeU8(128 + size3);
    } else if (size3 < 65536) {
      this.writeU8(222);
      this.writeU16(size3);
    } else if (size3 < 4294967296) {
      this.writeU8(223);
      this.writeU32(size3);
    } else {
      throw new Error(`Too large map object: ${size3}`);
    }
    for (const key of keys) {
      const value = object[key];
      if (!(this.ignoreUndefined && value === void 0)) {
        this.encodeString(key);
        this.doEncode(value, depth + 1);
      }
    }
  }
  encodeExtension(ext) {
    if (typeof ext.data === "function") {
      const data = ext.data(this.pos + 6);
      const size4 = data.length;
      if (size4 >= 4294967296) {
        throw new Error(`Too large extension object: ${size4}`);
      }
      this.writeU8(201);
      this.writeU32(size4);
      this.writeI8(ext.type);
      this.writeU8a(data);
      return;
    }
    const size3 = ext.data.length;
    if (size3 === 1) {
      this.writeU8(212);
    } else if (size3 === 2) {
      this.writeU8(213);
    } else if (size3 === 4) {
      this.writeU8(214);
    } else if (size3 === 8) {
      this.writeU8(215);
    } else if (size3 === 16) {
      this.writeU8(216);
    } else if (size3 < 256) {
      this.writeU8(199);
      this.writeU8(size3);
    } else if (size3 < 65536) {
      this.writeU8(200);
      this.writeU16(size3);
    } else if (size3 < 4294967296) {
      this.writeU8(201);
      this.writeU32(size3);
    } else {
      throw new Error(`Too large extension object: ${size3}`);
    }
    this.writeI8(ext.type);
    this.writeU8a(ext.data);
  }
  writeU8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setUint8(this.pos, value);
    this.pos++;
  }
  writeU8a(values) {
    const size3 = values.length;
    this.ensureBufferSizeToWrite(size3);
    this.bytes.set(values, this.pos);
    this.pos += size3;
  }
  writeI8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setInt8(this.pos, value);
    this.pos++;
  }
  writeU16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setUint16(this.pos, value);
    this.pos += 2;
  }
  writeI16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setInt16(this.pos, value);
    this.pos += 2;
  }
  writeU32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setUint32(this.pos, value);
    this.pos += 4;
  }
  writeI32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setInt32(this.pos, value);
    this.pos += 4;
  }
  writeF32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setFloat32(this.pos, value);
    this.pos += 4;
  }
  writeF64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setFloat64(this.pos, value);
    this.pos += 8;
  }
  writeU64(value) {
    this.ensureBufferSizeToWrite(8);
    setUint64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeI64(value) {
    this.ensureBufferSizeToWrite(8);
    setInt64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeBigUint64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigUint64(this.pos, value);
    this.pos += 8;
  }
  writeBigInt64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigInt64(this.pos, value);
    this.pos += 8;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/encode.mjs
function encode3(value, options) {
  const encoder4 = new Encoder(options);
  return encoder4.encodeSharedRef(value);
}

// node_modules/@msgpack/msgpack/dist.esm/utils/prettyByte.mjs
function prettyByte(byte) {
  return `${byte < 0 ? "-" : ""}0x${Math.abs(byte).toString(16).padStart(2, "0")}`;
}

// node_modules/@msgpack/msgpack/dist.esm/CachedKeyDecoder.mjs
var DEFAULT_MAX_KEY_LENGTH = 16;
var DEFAULT_MAX_LENGTH_PER_KEY = 16;
var CachedKeyDecoder = class {
  constructor(maxKeyLength = DEFAULT_MAX_KEY_LENGTH, maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY) {
    this.hit = 0;
    this.miss = 0;
    this.maxKeyLength = maxKeyLength;
    this.maxLengthPerKey = maxLengthPerKey;
    this.caches = [];
    for (let i3 = 0; i3 < this.maxKeyLength; i3++) {
      this.caches.push([]);
    }
  }
  canBeCached(byteLength) {
    return byteLength > 0 && byteLength <= this.maxKeyLength;
  }
  find(bytes, inputOffset, byteLength) {
    const records = this.caches[byteLength - 1];
    FIND_CHUNK: for (const record of records) {
      const recordBytes = record.bytes;
      for (let j3 = 0; j3 < byteLength; j3++) {
        if (recordBytes[j3] !== bytes[inputOffset + j3]) {
          continue FIND_CHUNK;
        }
      }
      return record.str;
    }
    return null;
  }
  store(bytes, value) {
    const records = this.caches[bytes.length - 1];
    const record = { bytes, str: value };
    if (records.length >= this.maxLengthPerKey) {
      records[Math.random() * records.length | 0] = record;
    } else {
      records.push(record);
    }
  }
  decode(bytes, inputOffset, byteLength) {
    const cachedValue = this.find(bytes, inputOffset, byteLength);
    if (cachedValue != null) {
      this.hit++;
      return cachedValue;
    }
    this.miss++;
    const str = utf8DecodeJs(bytes, inputOffset, byteLength);
    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);
    this.store(slicedCopyOfBytes, str);
    return str;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/Decoder.mjs
var STATE_ARRAY = "array";
var STATE_MAP_KEY = "map_key";
var STATE_MAP_VALUE = "map_value";
var mapKeyConverter = (key) => {
  if (typeof key === "string" || typeof key === "number") {
    return key;
  }
  throw new DecodeError("The type of key must be string or number but " + typeof key);
};
var StackPool = class {
  constructor() {
    this.stack = [];
    this.stackHeadPosition = -1;
  }
  get length() {
    return this.stackHeadPosition + 1;
  }
  top() {
    return this.stack[this.stackHeadPosition];
  }
  pushArrayState(size3) {
    const state8 = this.getUninitializedStateFromPool();
    state8.type = STATE_ARRAY;
    state8.position = 0;
    state8.size = size3;
    state8.array = new Array(size3);
  }
  pushMapState(size3) {
    const state8 = this.getUninitializedStateFromPool();
    state8.type = STATE_MAP_KEY;
    state8.readCount = 0;
    state8.size = size3;
    state8.map = {};
  }
  getUninitializedStateFromPool() {
    this.stackHeadPosition++;
    if (this.stackHeadPosition === this.stack.length) {
      const partialState = {
        type: void 0,
        size: 0,
        array: void 0,
        position: 0,
        readCount: 0,
        map: void 0,
        key: null
      };
      this.stack.push(partialState);
    }
    return this.stack[this.stackHeadPosition];
  }
  release(state8) {
    const topStackState = this.stack[this.stackHeadPosition];
    if (topStackState !== state8) {
      throw new Error("Invalid stack state. Released state is not on top of the stack.");
    }
    if (state8.type === STATE_ARRAY) {
      const partialState = state8;
      partialState.size = 0;
      partialState.array = void 0;
      partialState.position = 0;
      partialState.type = void 0;
    }
    if (state8.type === STATE_MAP_KEY || state8.type === STATE_MAP_VALUE) {
      const partialState = state8;
      partialState.size = 0;
      partialState.map = void 0;
      partialState.readCount = 0;
      partialState.type = void 0;
    }
    this.stackHeadPosition--;
  }
  reset() {
    this.stack.length = 0;
    this.stackHeadPosition = -1;
  }
};
var HEAD_BYTE_REQUIRED = -1;
var EMPTY_VIEW = new DataView(new ArrayBuffer(0));
var EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);
try {
  EMPTY_VIEW.getInt8(0);
} catch (e) {
  if (!(e instanceof RangeError)) {
    throw new Error("This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access");
  }
}
var MORE_DATA = new RangeError("Insufficient data");
var sharedCachedKeyDecoder = new CachedKeyDecoder();
var Decoder = class _Decoder {
  constructor(options) {
    this.totalPos = 0;
    this.pos = 0;
    this.view = EMPTY_VIEW;
    this.bytes = EMPTY_BYTES;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack = new StackPool();
    this.entered = false;
    this.extensionCodec = options?.extensionCodec ?? ExtensionCodec.defaultCodec;
    this.context = options?.context;
    this.useBigInt64 = options?.useBigInt64 ?? false;
    this.rawStrings = options?.rawStrings ?? false;
    this.maxStrLength = options?.maxStrLength ?? UINT32_MAX;
    this.maxBinLength = options?.maxBinLength ?? UINT32_MAX;
    this.maxArrayLength = options?.maxArrayLength ?? UINT32_MAX;
    this.maxMapLength = options?.maxMapLength ?? UINT32_MAX;
    this.maxExtLength = options?.maxExtLength ?? UINT32_MAX;
    this.keyDecoder = options?.keyDecoder !== void 0 ? options.keyDecoder : sharedCachedKeyDecoder;
    this.mapKeyConverter = options?.mapKeyConverter ?? mapKeyConverter;
  }
  clone() {
    return new _Decoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      rawStrings: this.rawStrings,
      maxStrLength: this.maxStrLength,
      maxBinLength: this.maxBinLength,
      maxArrayLength: this.maxArrayLength,
      maxMapLength: this.maxMapLength,
      maxExtLength: this.maxExtLength,
      keyDecoder: this.keyDecoder
    });
  }
  reinitializeState() {
    this.totalPos = 0;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack.reset();
  }
  setBuffer(buffer) {
    const bytes = ensureUint8Array(buffer);
    this.bytes = bytes;
    this.view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    this.pos = 0;
  }
  appendBuffer(buffer) {
    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {
      this.setBuffer(buffer);
    } else {
      const remainingData = this.bytes.subarray(this.pos);
      const newData = ensureUint8Array(buffer);
      const newBuffer = new Uint8Array(remainingData.length + newData.length);
      newBuffer.set(remainingData);
      newBuffer.set(newData, remainingData.length);
      this.setBuffer(newBuffer);
    }
  }
  hasRemaining(size3) {
    return this.view.byteLength - this.pos >= size3;
  }
  createExtraByteError(posToShow) {
    const { view, pos } = this;
    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);
  }
  /**
   * @throws {@link DecodeError}
   * @throws {@link RangeError}
   */
  decode(buffer) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decode(buffer);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer);
      const object = this.doDecodeSync();
      if (this.hasRemaining(1)) {
        throw this.createExtraByteError(this.pos);
      }
      return object;
    } finally {
      this.entered = false;
    }
  }
  *decodeMulti(buffer) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMulti(buffer);
      return;
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer);
      while (this.hasRemaining(1)) {
        yield this.doDecodeSync();
      }
    } finally {
      this.entered = false;
    }
  }
  async decodeAsync(stream) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decodeAsync(stream);
    }
    try {
      this.entered = true;
      let decoded = false;
      let object;
      for await (const buffer of stream) {
        if (decoded) {
          this.entered = false;
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer);
        try {
          object = this.doDecodeSync();
          decoded = true;
        } catch (e) {
          if (!(e instanceof RangeError)) {
            throw e;
          }
        }
        this.totalPos += this.pos;
      }
      if (decoded) {
        if (this.hasRemaining(1)) {
          throw this.createExtraByteError(this.totalPos);
        }
        return object;
      }
      const { headByte, pos, totalPos } = this;
      throw new RangeError(`Insufficient data in parsing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`);
    } finally {
      this.entered = false;
    }
  }
  decodeArrayStream(stream) {
    return this.decodeMultiAsync(stream, true);
  }
  decodeStream(stream) {
    return this.decodeMultiAsync(stream, false);
  }
  async *decodeMultiAsync(stream, isArray) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMultiAsync(stream, isArray);
      return;
    }
    try {
      this.entered = true;
      let isArrayHeaderRequired = isArray;
      let arrayItemsLeft = -1;
      for await (const buffer of stream) {
        if (isArray && arrayItemsLeft === 0) {
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer);
        if (isArrayHeaderRequired) {
          arrayItemsLeft = this.readArraySize();
          isArrayHeaderRequired = false;
          this.complete();
        }
        try {
          while (true) {
            yield this.doDecodeSync();
            if (--arrayItemsLeft === 0) {
              break;
            }
          }
        } catch (e) {
          if (!(e instanceof RangeError)) {
            throw e;
          }
        }
        this.totalPos += this.pos;
      }
    } finally {
      this.entered = false;
    }
  }
  doDecodeSync() {
    DECODE: while (true) {
      const headByte = this.readHeadByte();
      let object;
      if (headByte >= 224) {
        object = headByte - 256;
      } else if (headByte < 192) {
        if (headByte < 128) {
          object = headByte;
        } else if (headByte < 144) {
          const size3 = headByte - 128;
          if (size3 !== 0) {
            this.pushMapState(size3);
            this.complete();
            continue DECODE;
          } else {
            object = {};
          }
        } else if (headByte < 160) {
          const size3 = headByte - 144;
          if (size3 !== 0) {
            this.pushArrayState(size3);
            this.complete();
            continue DECODE;
          } else {
            object = [];
          }
        } else {
          const byteLength = headByte - 160;
          object = this.decodeString(byteLength, 0);
        }
      } else if (headByte === 192) {
        object = null;
      } else if (headByte === 194) {
        object = false;
      } else if (headByte === 195) {
        object = true;
      } else if (headByte === 202) {
        object = this.readF32();
      } else if (headByte === 203) {
        object = this.readF64();
      } else if (headByte === 204) {
        object = this.readU8();
      } else if (headByte === 205) {
        object = this.readU16();
      } else if (headByte === 206) {
        object = this.readU32();
      } else if (headByte === 207) {
        if (this.useBigInt64) {
          object = this.readU64AsBigInt();
        } else {
          object = this.readU64();
        }
      } else if (headByte === 208) {
        object = this.readI8();
      } else if (headByte === 209) {
        object = this.readI16();
      } else if (headByte === 210) {
        object = this.readI32();
      } else if (headByte === 211) {
        if (this.useBigInt64) {
          object = this.readI64AsBigInt();
        } else {
          object = this.readI64();
        }
      } else if (headByte === 217) {
        const byteLength = this.lookU8();
        object = this.decodeString(byteLength, 1);
      } else if (headByte === 218) {
        const byteLength = this.lookU16();
        object = this.decodeString(byteLength, 2);
      } else if (headByte === 219) {
        const byteLength = this.lookU32();
        object = this.decodeString(byteLength, 4);
      } else if (headByte === 220) {
        const size3 = this.readU16();
        if (size3 !== 0) {
          this.pushArrayState(size3);
          this.complete();
          continue DECODE;
        } else {
          object = [];
        }
      } else if (headByte === 221) {
        const size3 = this.readU32();
        if (size3 !== 0) {
          this.pushArrayState(size3);
          this.complete();
          continue DECODE;
        } else {
          object = [];
        }
      } else if (headByte === 222) {
        const size3 = this.readU16();
        if (size3 !== 0) {
          this.pushMapState(size3);
          this.complete();
          continue DECODE;
        } else {
          object = {};
        }
      } else if (headByte === 223) {
        const size3 = this.readU32();
        if (size3 !== 0) {
          this.pushMapState(size3);
          this.complete();
          continue DECODE;
        } else {
          object = {};
        }
      } else if (headByte === 196) {
        const size3 = this.lookU8();
        object = this.decodeBinary(size3, 1);
      } else if (headByte === 197) {
        const size3 = this.lookU16();
        object = this.decodeBinary(size3, 2);
      } else if (headByte === 198) {
        const size3 = this.lookU32();
        object = this.decodeBinary(size3, 4);
      } else if (headByte === 212) {
        object = this.decodeExtension(1, 0);
      } else if (headByte === 213) {
        object = this.decodeExtension(2, 0);
      } else if (headByte === 214) {
        object = this.decodeExtension(4, 0);
      } else if (headByte === 215) {
        object = this.decodeExtension(8, 0);
      } else if (headByte === 216) {
        object = this.decodeExtension(16, 0);
      } else if (headByte === 199) {
        const size3 = this.lookU8();
        object = this.decodeExtension(size3, 1);
      } else if (headByte === 200) {
        const size3 = this.lookU16();
        object = this.decodeExtension(size3, 2);
      } else if (headByte === 201) {
        const size3 = this.lookU32();
        object = this.decodeExtension(size3, 4);
      } else {
        throw new DecodeError(`Unrecognized type byte: ${prettyByte(headByte)}`);
      }
      this.complete();
      const stack = this.stack;
      while (stack.length > 0) {
        const state8 = stack.top();
        if (state8.type === STATE_ARRAY) {
          state8.array[state8.position] = object;
          state8.position++;
          if (state8.position === state8.size) {
            object = state8.array;
            stack.release(state8);
          } else {
            continue DECODE;
          }
        } else if (state8.type === STATE_MAP_KEY) {
          if (object === "__proto__") {
            throw new DecodeError("The key __proto__ is not allowed");
          }
          state8.key = this.mapKeyConverter(object);
          state8.type = STATE_MAP_VALUE;
          continue DECODE;
        } else {
          state8.map[state8.key] = object;
          state8.readCount++;
          if (state8.readCount === state8.size) {
            object = state8.map;
            stack.release(state8);
          } else {
            state8.key = null;
            state8.type = STATE_MAP_KEY;
            continue DECODE;
          }
        }
      }
      return object;
    }
  }
  readHeadByte() {
    if (this.headByte === HEAD_BYTE_REQUIRED) {
      this.headByte = this.readU8();
    }
    return this.headByte;
  }
  complete() {
    this.headByte = HEAD_BYTE_REQUIRED;
  }
  readArraySize() {
    const headByte = this.readHeadByte();
    switch (headByte) {
      case 220:
        return this.readU16();
      case 221:
        return this.readU32();
      default: {
        if (headByte < 160) {
          return headByte - 144;
        } else {
          throw new DecodeError(`Unrecognized array type byte: ${prettyByte(headByte)}`);
        }
      }
    }
  }
  pushMapState(size3) {
    if (size3 > this.maxMapLength) {
      throw new DecodeError(`Max length exceeded: map length (${size3}) > maxMapLengthLength (${this.maxMapLength})`);
    }
    this.stack.pushMapState(size3);
  }
  pushArrayState(size3) {
    if (size3 > this.maxArrayLength) {
      throw new DecodeError(`Max length exceeded: array length (${size3}) > maxArrayLength (${this.maxArrayLength})`);
    }
    this.stack.pushArrayState(size3);
  }
  decodeString(byteLength, headerOffset) {
    if (!this.rawStrings || this.stateIsMapKey()) {
      return this.decodeUtf8String(byteLength, headerOffset);
    }
    return this.decodeBinary(byteLength, headerOffset);
  }
  /**
   * @throws {@link RangeError}
   */
  decodeUtf8String(byteLength, headerOffset) {
    if (byteLength > this.maxStrLength) {
      throw new DecodeError(`Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`);
    }
    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {
      throw MORE_DATA;
    }
    const offset = this.pos + headerOffset;
    let object;
    if (this.stateIsMapKey() && this.keyDecoder?.canBeCached(byteLength)) {
      object = this.keyDecoder.decode(this.bytes, offset, byteLength);
    } else {
      object = utf8Decode(this.bytes, offset, byteLength);
    }
    this.pos += headerOffset + byteLength;
    return object;
  }
  stateIsMapKey() {
    if (this.stack.length > 0) {
      const state8 = this.stack.top();
      return state8.type === STATE_MAP_KEY;
    }
    return false;
  }
  /**
   * @throws {@link RangeError}
   */
  decodeBinary(byteLength, headOffset) {
    if (byteLength > this.maxBinLength) {
      throw new DecodeError(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);
    }
    if (!this.hasRemaining(byteLength + headOffset)) {
      throw MORE_DATA;
    }
    const offset = this.pos + headOffset;
    const object = this.bytes.subarray(offset, offset + byteLength);
    this.pos += headOffset + byteLength;
    return object;
  }
  decodeExtension(size3, headOffset) {
    if (size3 > this.maxExtLength) {
      throw new DecodeError(`Max length exceeded: ext length (${size3}) > maxExtLength (${this.maxExtLength})`);
    }
    const extType = this.view.getInt8(this.pos + headOffset);
    const data = this.decodeBinary(
      size3,
      headOffset + 1
      /* extType */
    );
    return this.extensionCodec.decode(data, extType, this.context);
  }
  lookU8() {
    return this.view.getUint8(this.pos);
  }
  lookU16() {
    return this.view.getUint16(this.pos);
  }
  lookU32() {
    return this.view.getUint32(this.pos);
  }
  readU8() {
    const value = this.view.getUint8(this.pos);
    this.pos++;
    return value;
  }
  readI8() {
    const value = this.view.getInt8(this.pos);
    this.pos++;
    return value;
  }
  readU16() {
    const value = this.view.getUint16(this.pos);
    this.pos += 2;
    return value;
  }
  readI16() {
    const value = this.view.getInt16(this.pos);
    this.pos += 2;
    return value;
  }
  readU32() {
    const value = this.view.getUint32(this.pos);
    this.pos += 4;
    return value;
  }
  readI32() {
    const value = this.view.getInt32(this.pos);
    this.pos += 4;
    return value;
  }
  readU64() {
    const value = getUint64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readI64() {
    const value = getInt64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readU64AsBigInt() {
    const value = this.view.getBigUint64(this.pos);
    this.pos += 8;
    return value;
  }
  readI64AsBigInt() {
    const value = this.view.getBigInt64(this.pos);
    this.pos += 8;
    return value;
  }
  readF32() {
    const value = this.view.getFloat32(this.pos);
    this.pos += 4;
    return value;
  }
  readF64() {
    const value = this.view.getFloat64(this.pos);
    this.pos += 8;
    return value;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/decode.mjs
function decode2(buffer, options) {
  const decoder3 = new Decoder(options);
  return decoder3.decode(buffer);
}

// node_modules/uint8arrays/esm/src/util/as-uint8array.js
function asUint8Array(buf) {
  if (globalThis.Buffer != null) {
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }
  return buf;
}

// node_modules/uint8arrays/esm/src/alloc.js
function allocUnsafe(size3 = 0) {
  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
    return asUint8Array(globalThis.Buffer.allocUnsafe(size3));
  }
  return new Uint8Array(size3);
}

// node_modules/uint8arrays/esm/src/concat.js
function concat3(arrays, length) {
  if (!length) {
    length = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = allocUnsafe(length);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return asUint8Array(output);
}

// node_modules/uint8arrays/esm/src/util/bases.js
function createCodec(name, prefix, encode4, decode3) {
  return {
    name,
    prefix,
    encoder: {
      name,
      prefix,
      encode: encode4
    },
    decoder: { decode: decode3 }
  };
}
var string = createCodec("utf8", "u", (buf) => {
  const decoder3 = new TextDecoder("utf8");
  return "u" + decoder3.decode(buf);
}, (str) => {
  const encoder4 = new TextEncoder();
  return encoder4.encode(str.substring(1));
});
var ascii = createCodec("ascii", "a", (buf) => {
  let string2 = "a";
  for (let i3 = 0; i3 < buf.length; i3++) {
    string2 += String.fromCharCode(buf[i3]);
  }
  return string2;
}, (str) => {
  str = str.substring(1);
  const buf = allocUnsafe(str.length);
  for (let i3 = 0; i3 < str.length; i3++) {
    buf[i3] = str.charCodeAt(i3);
  }
  return buf;
});
var BASES = {
  utf8: string,
  "utf-8": string,
  hex: bases.base16,
  latin1: ascii,
  ascii,
  binary: ascii,
  ...bases
};
var bases_default = BASES;

// node_modules/uint8arrays/esm/src/from-string.js
function fromString3(string2, encoding = "utf8") {
  const base = bases_default[encoding];
  if (!base) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return asUint8Array(globalThis.Buffer.from(string2, "utf-8"));
  }
  return base.decoder.decode(`${base.prefix}${string2}`);
}

// node_modules/uint8arrays/esm/src/to-string.js
function toString3(array, encoding = "utf8") {
  const base = bases_default[encoding];
  if (!base) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
  }
  return base.encoder.encode(array).substring(1);
}

// node_modules/@walletconnect/utils/dist/index.js
var import_blakejs = __toESM(require_blakejs());
var Ae = ":";
function Je(t) {
  const [e, n2] = t.split(Ae);
  return { namespace: e, reference: n2 };
}
function Ie(t, e) {
  return t.includes(":") ? [t] : e.chains || [];
}
var ei = Object.defineProperty;
var ni = Object.defineProperties;
var ri = Object.getOwnPropertyDescriptors;
var ar = Object.getOwnPropertySymbols;
var oi = Object.prototype.hasOwnProperty;
var si = Object.prototype.propertyIsEnumerable;
var en = (t, e, n2) => e in t ? ei(t, e, { enumerable: true, configurable: true, writable: true, value: n2 }) : t[e] = n2;
var ur = (t, e) => {
  for (var n2 in e || (e = {})) oi.call(e, n2) && en(t, n2, e[n2]);
  if (ar) for (var n2 of ar(e)) si.call(e, n2) && en(t, n2, e[n2]);
  return t;
};
var ii = (t, e) => ni(t, ri(e));
var lr = (t, e, n2) => en(t, typeof e != "symbol" ? e + "" : e, n2);
var dr = "ReactNative";
var et = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
var pr = "js";
function rn() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function At() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === dr;
}
function ai() {
  return At() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "android";
}
function ui() {
  return At() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "ios";
}
function Wt() {
  return !rn() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function Vt() {
  return At() ? et.reactNative : rn() ? et.node : Wt() ? et.browser : et.unknown;
}
function li() {
  var t;
  try {
    return At() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u" ? (t = global.Application) == null ? void 0 : t.applicationId : void 0;
  } catch {
    return;
  }
}
function gr(t, e) {
  const n2 = new URLSearchParams(t);
  return Object.entries(e).sort(([r2], [o2]) => r2.localeCompare(o2)).forEach(([r2, o2]) => {
    o2 != null && n2.set(r2, String(o2));
  }), n2.toString();
}
function di(t) {
  var e, n2;
  const r2 = br();
  try {
    return t != null && t.url && r2.url && new URL(t.url).host !== new URL(r2.url).host && (console.warn(`The configured WalletConnect 'metadata.url':${t.url} differs from the actual page url:${r2.url}. This is probably unintended and can lead to issues.`), t.url = r2.url), (e = t?.icons) != null && e.length && t.icons.length > 0 && (t.icons = t.icons.filter((o2) => o2 !== "")), ii(ur(ur({}, r2), t), { url: t?.url || r2.url, name: t?.name || r2.name, description: t?.description || r2.description, icons: (n2 = t?.icons) != null && n2.length && t.icons.length > 0 ? t.icons : r2.icons });
  } catch (o2) {
    return console.warn("Error populating app metadata", o2), t || r2;
  }
}
function br() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function yr() {
  if (Vt() === et.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: n2, Version: r2 } = global.Platform;
    return [n2, r2].join("-");
  }
  const t = detect();
  if (t === null) return "unknown";
  const e = t.os ? t.os.replace(" ", "").toLowerCase() : "unknown";
  return t.type === "browser" ? [e, t.name, t.version].join("-") : [e, t.version].join("-");
}
function mr() {
  var t;
  const e = Vt();
  return e === et.browser ? [e, ((t = (0, import_window_getters.getLocation)()) == null ? void 0 : t.host) || "unknown"].join(":") : e;
}
function wr(t, e, n2) {
  const r2 = yr(), o2 = mr();
  return [[t, e].join("-"), [pr, n2].join("-"), r2, o2].join("/");
}
function pi({ protocol: t, version: e, relayUrl: n2, sdkVersion: r2, auth: o2, projectId: s, useOnCloseEvent: i3, bundleId: c3, packageName: f6 }) {
  const u2 = n2.split("?"), a2 = wr(t, e, r2), l2 = { auth: o2, ua: a2, projectId: s, useOnCloseEvent: i3 || void 0, packageName: f6 || void 0, bundleId: c3 || void 0 }, d4 = gr(u2[1] || "", l2);
  return u2[0] + "?" + d4;
}
function It(t, e) {
  return t.filter((n2) => e.includes(n2)).length === t.length;
}
function mi(t) {
  return Object.fromEntries(t.entries());
}
function wi(t) {
  return new Map(Object.entries(t));
}
function Bi(t = import_time.FIVE_MINUTES, e) {
  const n2 = (0, import_time.toMiliseconds)(t || import_time.FIVE_MINUTES);
  let r2, o2, s, i3;
  return { resolve: (c3) => {
    s && r2 && (clearTimeout(s), r2(c3), i3 = Promise.resolve(c3));
  }, reject: (c3) => {
    s && o2 && (clearTimeout(s), o2(c3));
  }, done: () => new Promise((c3, f6) => {
    if (i3) return c3(i3);
    s = setTimeout(() => {
      const u2 = new Error(e);
      i3 = Promise.reject(u2), f6(u2);
    }, n2), r2 = c3, o2 = f6;
  }) };
}
function Ai(t, e, n2) {
  return new Promise(async (r2, o2) => {
    const s = setTimeout(() => o2(new Error(n2)), e);
    try {
      const i3 = await t;
      r2(i3);
    } catch (i3) {
      o2(i3);
    }
    clearTimeout(s);
  });
}
function on(t, e) {
  if (typeof e == "string" && e.startsWith(`${t}:`)) return e;
  if (t.toLowerCase() === "topic") {
    if (typeof e != "string") throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${e}`;
  } else if (t.toLowerCase() === "id") {
    if (typeof e != "number") throw new Error('Value must be "number" for expirer target type: id');
    return `id:${e}`;
  }
  throw new Error(`Unknown expirer target type: ${t}`);
}
function Ii(t) {
  return on("topic", t);
}
function Si(t) {
  return on("id", t);
}
function Oi(t) {
  const [e, n2] = t.split(":"), r2 = { id: void 0, topic: void 0 };
  if (e === "topic" && typeof n2 == "string") r2.topic = n2;
  else if (e === "id" && Number.isInteger(Number(n2))) r2.id = Number(n2);
  else throw new Error(`Invalid target, expected id:number or topic:string, got ${e}:${n2}`);
  return r2;
}
function Ni(t, e) {
  return (0, import_time.fromMiliseconds)((e || Date.now()) + (0, import_time.toMiliseconds)(t));
}
function Ui(t) {
  return Date.now() >= (0, import_time.toMiliseconds)(t);
}
function _i(t, e) {
  return `${t}${e ? `:${e}` : ""}`;
}
function ut(t = [], e = []) {
  return [.../* @__PURE__ */ new Set([...t, ...e])];
}
async function Ri({ id: t, topic: e, wcDeepLink: n2 }) {
  var r2;
  try {
    if (!n2) return;
    const o2 = typeof n2 == "string" ? JSON.parse(n2) : n2, s = o2?.href;
    if (typeof s != "string") return;
    const i3 = Br(s, t, e), c3 = Vt();
    if (c3 === et.browser) {
      if (!((r2 = (0, import_window_getters.getDocument)()) != null && r2.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      Ar(i3);
    } else c3 === et.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(i3);
  } catch (o2) {
    console.error(o2);
  }
}
function Br(t, e, n2) {
  const r2 = `requestId=${e}&sessionTopic=${n2}`;
  t.endsWith("/") && (t = t.slice(0, -1));
  let o2 = `${t}`;
  if (t.startsWith("https://t.me")) {
    const s = t.includes("?") ? "&startapp=" : "?startapp=";
    o2 = `${o2}${s}${Or(r2, true)}`;
  } else o2 = `${o2}/wc?${r2}`;
  return o2;
}
function Ar(t) {
  let e = "_self";
  Sr() ? e = "_top" : (Ir() || t.startsWith("https://") || t.startsWith("http://")) && (e = "_blank"), window.open(t, e, "noreferrer noopener");
}
async function $i(t, e) {
  let n2 = "";
  try {
    if (Wt() && (n2 = localStorage.getItem(e), n2)) return n2;
    n2 = await t.getItem(e);
  } catch (r2) {
    console.error(r2);
  }
  return n2;
}
function Ti(t, e) {
  if (!t.includes(e)) return null;
  const n2 = t.split(/([&,?,=])/), r2 = n2.indexOf(e);
  return n2[r2 + 2];
}
function Ci() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (t) => {
    const e = Math.random() * 16 | 0;
    return (t === "x" ? e : e & 3 | 8).toString(16);
  });
}
function ji() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function Ir() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function Sr() {
  try {
    return window.self !== window.top;
  } catch {
    return false;
  }
}
function Or(t, e = false) {
  const n2 = Buffer.from(t).toString("base64");
  return e ? n2.replace(/[=]/g, "") : n2;
}
function cn(t) {
  return Buffer.from(t, "base64").toString("utf-8");
}
function Li(t) {
  return new Promise((e) => setTimeout(e, t));
}
var ki = class {
  constructor({ limit: e }) {
    lr(this, "limit"), lr(this, "set"), this.limit = e, this.set = /* @__PURE__ */ new Set();
  }
  add(e) {
    if (!this.set.has(e)) {
      if (this.set.size >= this.limit) {
        const n2 = this.set.values().next().value;
        n2 && this.set.delete(n2);
      }
      this.set.add(e);
    }
  }
  has(e) {
    return this.set.has(e);
  }
};
var Oe = BigInt(2 ** 32 - 1);
var Nr = BigInt(32);
function Ur(t, e = false) {
  return e ? { h: Number(t & Oe), l: Number(t >> Nr & Oe) } : { h: Number(t >> Nr & Oe) | 0, l: Number(t & Oe) | 0 };
}
function _r(t, e = false) {
  const n2 = t.length;
  let r2 = new Uint32Array(n2), o2 = new Uint32Array(n2);
  for (let s = 0; s < n2; s++) {
    const { h: i3, l: c3 } = Ur(t[s], e);
    [r2[s], o2[s]] = [i3, c3];
  }
  return [r2, o2];
}
var Rr = (t, e, n2) => t >>> n2;
var $r = (t, e, n2) => t << 32 - n2 | e >>> n2;
var St = (t, e, n2) => t >>> n2 | e << 32 - n2;
var Ot = (t, e, n2) => t << 32 - n2 | e >>> n2;
var de = (t, e, n2) => t << 64 - n2 | e >>> n2 - 32;
var he = (t, e, n2) => t >>> n2 - 32 | e << 64 - n2;
var Pi = (t, e) => e;
var Hi = (t, e) => t;
var Di = (t, e, n2) => t << n2 | e >>> 32 - n2;
var Vi = (t, e, n2) => e << n2 | t >>> 32 - n2;
var Mi = (t, e, n2) => e << n2 - 32 | t >>> 64 - n2;
var Ki = (t, e, n2) => t << n2 - 32 | e >>> 64 - n2;
function dt(t, e, n2, r2) {
  const o2 = (e >>> 0) + (r2 >>> 0);
  return { h: t + n2 + (o2 / 2 ** 32 | 0) | 0, l: o2 | 0 };
}
var fn = (t, e, n2) => (t >>> 0) + (e >>> 0) + (n2 >>> 0);
var an = (t, e, n2, r2) => e + n2 + r2 + (t / 2 ** 32 | 0) | 0;
var qi = (t, e, n2, r2) => (t >>> 0) + (e >>> 0) + (n2 >>> 0) + (r2 >>> 0);
var Fi = (t, e, n2, r2, o2) => e + n2 + r2 + o2 + (t / 2 ** 32 | 0) | 0;
var Zi = (t, e, n2, r2, o2) => (t >>> 0) + (e >>> 0) + (n2 >>> 0) + (r2 >>> 0) + (o2 >>> 0);
var Gi = (t, e, n2, r2, o2, s) => e + n2 + r2 + o2 + s + (t / 2 ** 32 | 0) | 0;
var Xt = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function Ne(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function mt(t) {
  if (!Number.isSafeInteger(t) || t < 0) throw new Error("positive integer expected, got " + t);
}
function ht(t, ...e) {
  if (!Ne(t)) throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(t.length)) throw new Error("Uint8Array expected of length " + e + ", got length=" + t.length);
}
function Ue(t) {
  if (typeof t != "function" || typeof t.create != "function") throw new Error("Hash should be wrapped by utils.createHasher");
  mt(t.outputLen), mt(t.blockLen);
}
function Nt(t, e = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e && t.finished) throw new Error("Hash#digest() has already been called");
}
function un(t, e) {
  ht(t);
  const n2 = e.outputLen;
  if (t.length < n2) throw new Error("digestInto() expects output buffer of length at least " + n2);
}
function pe(t) {
  return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
}
function lt(...t) {
  for (let e = 0; e < t.length; e++) t[e].fill(0);
}
function ln(t) {
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
function bt(t, e) {
  return t << 32 - e | t >>> e;
}
var Tr = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Cr(t) {
  return t << 24 & 4278190080 | t << 8 & 16711680 | t >>> 8 & 65280 | t >>> 24 & 255;
}
var wt = Tr ? (t) => t : (t) => Cr(t);
function zi(t) {
  for (let e = 0; e < t.length; e++) t[e] = Cr(t[e]);
  return t;
}
var Ut = Tr ? (t) => t : zi;
var jr = typeof Uint8Array.from([]).toHex == "function" && typeof Uint8Array.fromHex == "function";
var Yi = Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function Jt(t) {
  if (ht(t), jr) return t.toHex();
  let e = "";
  for (let n2 = 0; n2 < t.length; n2++) e += Yi[t[n2]];
  return e;
}
var vt = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function Lr(t) {
  if (t >= vt._0 && t <= vt._9) return t - vt._0;
  if (t >= vt.A && t <= vt.F) return t - (vt.A - 10);
  if (t >= vt.a && t <= vt.f) return t - (vt.a - 10);
}
function _e(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  if (jr) return Uint8Array.fromHex(t);
  const e = t.length, n2 = e / 2;
  if (e % 2) throw new Error("hex string expected, got unpadded hex of length " + e);
  const r2 = new Uint8Array(n2);
  for (let o2 = 0, s = 0; o2 < n2; o2++, s += 2) {
    const i3 = Lr(t.charCodeAt(s)), c3 = Lr(t.charCodeAt(s + 1));
    if (i3 === void 0 || c3 === void 0) {
      const f6 = t[s] + t[s + 1];
      throw new Error('hex string expected, got non-hex character "' + f6 + '" at index ' + s);
    }
    r2[o2] = i3 * 16 + c3;
  }
  return r2;
}
function kr(t) {
  if (typeof t != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
function pt(t) {
  return typeof t == "string" && (t = kr(t)), ht(t), t;
}
function _t(...t) {
  let e = 0;
  for (let r2 = 0; r2 < t.length; r2++) {
    const o2 = t[r2];
    ht(o2), e += o2.length;
  }
  const n2 = new Uint8Array(e);
  for (let r2 = 0, o2 = 0; r2 < t.length; r2++) {
    const s = t[r2];
    n2.set(s, o2), o2 += s.length;
  }
  return n2;
}
var Re = class {
};
function ge(t) {
  const e = (r2) => t().update(pt(r2)).digest(), n2 = t();
  return e.outputLen = n2.outputLen, e.blockLen = n2.blockLen, e.create = () => t(), e;
}
function Wi(t) {
  const e = (r2, o2) => t(o2).update(pt(r2)).digest(), n2 = t({});
  return e.outputLen = n2.outputLen, e.blockLen = n2.blockLen, e.create = (r2) => t(r2), e;
}
function Mt(t = 32) {
  if (Xt && typeof Xt.getRandomValues == "function") return Xt.getRandomValues(new Uint8Array(t));
  if (Xt && typeof Xt.randomBytes == "function") return Uint8Array.from(Xt.randomBytes(t));
  throw new Error("crypto.getRandomValues must be defined");
}
var Xi = BigInt(0);
var be = BigInt(1);
var Ji = BigInt(2);
var Qi = BigInt(7);
var tc = BigInt(256);
var ec = BigInt(113);
var Pr = [];
var Hr = [];
var Dr = [];
for (let t = 0, e = be, n2 = 1, r2 = 0; t < 24; t++) {
  [n2, r2] = [r2, (2 * n2 + 3 * r2) % 5], Pr.push(2 * (5 * r2 + n2)), Hr.push((t + 1) * (t + 2) / 2 % 64);
  let o2 = Xi;
  for (let s = 0; s < 7; s++) e = (e << be ^ (e >> Qi) * ec) % tc, e & Ji && (o2 ^= be << (be << BigInt(s)) - be);
  Dr.push(o2);
}
var Vr = _r(Dr, true);
var nc = Vr[0];
var rc = Vr[1];
var Mr = (t, e, n2) => n2 > 32 ? Mi(t, e, n2) : Di(t, e, n2);
var Kr = (t, e, n2) => n2 > 32 ? Ki(t, e, n2) : Vi(t, e, n2);
function oc(t, e = 24) {
  const n2 = new Uint32Array(10);
  for (let r2 = 24 - e; r2 < 24; r2++) {
    for (let i3 = 0; i3 < 10; i3++) n2[i3] = t[i3] ^ t[i3 + 10] ^ t[i3 + 20] ^ t[i3 + 30] ^ t[i3 + 40];
    for (let i3 = 0; i3 < 10; i3 += 2) {
      const c3 = (i3 + 8) % 10, f6 = (i3 + 2) % 10, u2 = n2[f6], a2 = n2[f6 + 1], l2 = Mr(u2, a2, 1) ^ n2[c3], d4 = Kr(u2, a2, 1) ^ n2[c3 + 1];
      for (let h3 = 0; h3 < 50; h3 += 10) t[i3 + h3] ^= l2, t[i3 + h3 + 1] ^= d4;
    }
    let o2 = t[2], s = t[3];
    for (let i3 = 0; i3 < 24; i3++) {
      const c3 = Hr[i3], f6 = Mr(o2, s, c3), u2 = Kr(o2, s, c3), a2 = Pr[i3];
      o2 = t[a2], s = t[a2 + 1], t[a2] = f6, t[a2 + 1] = u2;
    }
    for (let i3 = 0; i3 < 50; i3 += 10) {
      for (let c3 = 0; c3 < 10; c3++) n2[c3] = t[i3 + c3];
      for (let c3 = 0; c3 < 10; c3++) t[i3 + c3] ^= ~n2[(c3 + 2) % 10] & n2[(c3 + 4) % 10];
    }
    t[0] ^= nc[r2], t[1] ^= rc[r2];
  }
  lt(n2);
}
var Jn = class _Jn extends Re {
  constructor(e, n2, r2, o2 = false, s = 24) {
    if (super(), this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, this.enableXOF = false, this.blockLen = e, this.suffix = n2, this.outputLen = r2, this.enableXOF = o2, this.rounds = s, mt(r2), !(0 < e && e < 200)) throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200), this.state32 = pe(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    Ut(this.state32), oc(this.state32, this.rounds), Ut(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(e) {
    Nt(this), e = pt(e), ht(e);
    const { blockLen: n2, state: r2 } = this, o2 = e.length;
    for (let s = 0; s < o2; ) {
      const i3 = Math.min(n2 - this.pos, o2 - s);
      for (let c3 = 0; c3 < i3; c3++) r2[this.pos++] ^= e[s++];
      this.pos === n2 && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished) return;
    this.finished = true;
    const { state: e, suffix: n2, pos: r2, blockLen: o2 } = this;
    e[r2] ^= n2, (n2 & 128) !== 0 && r2 === o2 - 1 && this.keccak(), e[o2 - 1] ^= 128, this.keccak();
  }
  writeInto(e) {
    Nt(this, false), ht(e), this.finish();
    const n2 = this.state, { blockLen: r2 } = this;
    for (let o2 = 0, s = e.length; o2 < s; ) {
      this.posOut >= r2 && this.keccak();
      const i3 = Math.min(r2 - this.posOut, s - o2);
      e.set(n2.subarray(this.posOut, this.posOut + i3), o2), this.posOut += i3, o2 += i3;
    }
    return e;
  }
  xofInto(e) {
    if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
    return this.writeInto(e);
  }
  xof(e) {
    return mt(e), this.xofInto(new Uint8Array(e));
  }
  digestInto(e) {
    if (un(e, this), this.finished) throw new Error("digest() was already called");
    return this.writeInto(e), this.destroy(), e;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, lt(this.state);
  }
  _cloneInto(e) {
    const { blockLen: n2, suffix: r2, outputLen: o2, rounds: s, enableXOF: i3 } = this;
    return e || (e = new _Jn(n2, r2, o2, i3, s)), e.state32.set(this.state32), e.pos = this.pos, e.posOut = this.posOut, e.finished = this.finished, e.rounds = s, e.suffix = r2, e.outputLen = o2, e.enableXOF = i3, e.destroyed = this.destroyed, e;
  }
};
var sc = (t, e, n2) => ge(() => new Jn(e, t, n2));
var ic = sc(1, 136, 256 / 8);
function cc(t, e, n2, r2) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e, n2, r2);
  const o2 = BigInt(32), s = BigInt(4294967295), i3 = Number(n2 >> o2 & s), c3 = Number(n2 & s), f6 = r2 ? 4 : 0, u2 = r2 ? 0 : 4;
  t.setUint32(e + f6, i3, r2), t.setUint32(e + u2, c3, r2);
}
function fc(t, e, n2) {
  return t & e ^ ~t & n2;
}
function ac(t, e, n2) {
  return t & e ^ t & n2 ^ e & n2;
}
var qr = class extends Re {
  constructor(e, n2, r2, o2) {
    super(), this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.blockLen = e, this.outputLen = n2, this.padOffset = r2, this.isLE = o2, this.buffer = new Uint8Array(e), this.view = ln(this.buffer);
  }
  update(e) {
    Nt(this), e = pt(e), ht(e);
    const { view: n2, buffer: r2, blockLen: o2 } = this, s = e.length;
    for (let i3 = 0; i3 < s; ) {
      const c3 = Math.min(o2 - this.pos, s - i3);
      if (c3 === o2) {
        const f6 = ln(e);
        for (; o2 <= s - i3; i3 += o2) this.process(f6, i3);
        continue;
      }
      r2.set(e.subarray(i3, i3 + c3), this.pos), this.pos += c3, i3 += c3, this.pos === o2 && (this.process(n2, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    Nt(this), un(e, this), this.finished = true;
    const { buffer: n2, view: r2, blockLen: o2, isLE: s } = this;
    let { pos: i3 } = this;
    n2[i3++] = 128, lt(this.buffer.subarray(i3)), this.padOffset > o2 - i3 && (this.process(r2, 0), i3 = 0);
    for (let l2 = i3; l2 < o2; l2++) n2[l2] = 0;
    cc(r2, o2 - 8, BigInt(this.length * 8), s), this.process(r2, 0);
    const c3 = ln(e), f6 = this.outputLen;
    if (f6 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u2 = f6 / 4, a2 = this.get();
    if (u2 > a2.length) throw new Error("_sha2: outputLen bigger than state");
    for (let l2 = 0; l2 < u2; l2++) c3.setUint32(4 * l2, a2[l2], s);
  }
  digest() {
    const { buffer: e, outputLen: n2 } = this;
    this.digestInto(e);
    const r2 = e.slice(0, n2);
    return this.destroy(), r2;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n2, buffer: r2, length: o2, finished: s, destroyed: i3, pos: c3 } = this;
    return e.destroyed = i3, e.finished = s, e.length = o2, e.pos = c3, o2 % n2 && e.buffer.set(r2), e;
  }
  clone() {
    return this._cloneInto();
  }
};
var Rt = Uint32Array.from([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
var X2 = Uint32Array.from([3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428]);
var J2 = Uint32Array.from([1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209]);
var uc = Uint32Array.from([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
var $t = new Uint32Array(64);
var lc = class extends qr {
  constructor(e = 32) {
    super(64, e, 8, false), this.A = Rt[0] | 0, this.B = Rt[1] | 0, this.C = Rt[2] | 0, this.D = Rt[3] | 0, this.E = Rt[4] | 0, this.F = Rt[5] | 0, this.G = Rt[6] | 0, this.H = Rt[7] | 0;
  }
  get() {
    const { A: e, B: n2, C: r2, D: o2, E: s, F: i3, G: c3, H: f6 } = this;
    return [e, n2, r2, o2, s, i3, c3, f6];
  }
  set(e, n2, r2, o2, s, i3, c3, f6) {
    this.A = e | 0, this.B = n2 | 0, this.C = r2 | 0, this.D = o2 | 0, this.E = s | 0, this.F = i3 | 0, this.G = c3 | 0, this.H = f6 | 0;
  }
  process(e, n2) {
    for (let l2 = 0; l2 < 16; l2++, n2 += 4) $t[l2] = e.getUint32(n2, false);
    for (let l2 = 16; l2 < 64; l2++) {
      const d4 = $t[l2 - 15], h3 = $t[l2 - 2], y3 = bt(d4, 7) ^ bt(d4, 18) ^ d4 >>> 3, m3 = bt(h3, 17) ^ bt(h3, 19) ^ h3 >>> 10;
      $t[l2] = m3 + $t[l2 - 7] + y3 + $t[l2 - 16] | 0;
    }
    let { A: r2, B: o2, C: s, D: i3, E: c3, F: f6, G: u2, H: a2 } = this;
    for (let l2 = 0; l2 < 64; l2++) {
      const d4 = bt(c3, 6) ^ bt(c3, 11) ^ bt(c3, 25), h3 = a2 + d4 + fc(c3, f6, u2) + uc[l2] + $t[l2] | 0, m3 = (bt(r2, 2) ^ bt(r2, 13) ^ bt(r2, 22)) + ac(r2, o2, s) | 0;
      a2 = u2, u2 = f6, f6 = c3, c3 = i3 + h3 | 0, i3 = s, s = o2, o2 = r2, r2 = h3 + m3 | 0;
    }
    r2 = r2 + this.A | 0, o2 = o2 + this.B | 0, s = s + this.C | 0, i3 = i3 + this.D | 0, c3 = c3 + this.E | 0, f6 = f6 + this.F | 0, u2 = u2 + this.G | 0, a2 = a2 + this.H | 0, this.set(r2, o2, s, i3, c3, f6, u2, a2);
  }
  roundClean() {
    lt($t);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), lt(this.buffer);
  }
};
var Fr2 = _r(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t) => BigInt(t)));
var dc = Fr2[0];
var hc = Fr2[1];
var Tt = new Uint32Array(80);
var Ct = new Uint32Array(80);
var dn = class extends qr {
  constructor(e = 64) {
    super(128, e, 16, false), this.Ah = J2[0] | 0, this.Al = J2[1] | 0, this.Bh = J2[2] | 0, this.Bl = J2[3] | 0, this.Ch = J2[4] | 0, this.Cl = J2[5] | 0, this.Dh = J2[6] | 0, this.Dl = J2[7] | 0, this.Eh = J2[8] | 0, this.El = J2[9] | 0, this.Fh = J2[10] | 0, this.Fl = J2[11] | 0, this.Gh = J2[12] | 0, this.Gl = J2[13] | 0, this.Hh = J2[14] | 0, this.Hl = J2[15] | 0;
  }
  get() {
    const { Ah: e, Al: n2, Bh: r2, Bl: o2, Ch: s, Cl: i3, Dh: c3, Dl: f6, Eh: u2, El: a2, Fh: l2, Fl: d4, Gh: h3, Gl: y3, Hh: m3, Hl: v4 } = this;
    return [e, n2, r2, o2, s, i3, c3, f6, u2, a2, l2, d4, h3, y3, m3, v4];
  }
  set(e, n2, r2, o2, s, i3, c3, f6, u2, a2, l2, d4, h3, y3, m3, v4) {
    this.Ah = e | 0, this.Al = n2 | 0, this.Bh = r2 | 0, this.Bl = o2 | 0, this.Ch = s | 0, this.Cl = i3 | 0, this.Dh = c3 | 0, this.Dl = f6 | 0, this.Eh = u2 | 0, this.El = a2 | 0, this.Fh = l2 | 0, this.Fl = d4 | 0, this.Gh = h3 | 0, this.Gl = y3 | 0, this.Hh = m3 | 0, this.Hl = v4 | 0;
  }
  process(e, n2) {
    for (let R4 = 0; R4 < 16; R4++, n2 += 4) Tt[R4] = e.getUint32(n2), Ct[R4] = e.getUint32(n2 += 4);
    for (let R4 = 16; R4 < 80; R4++) {
      const Z2 = Tt[R4 - 15] | 0, H2 = Ct[R4 - 15] | 0, j3 = St(Z2, H2, 1) ^ St(Z2, H2, 8) ^ Rr(Z2, H2, 7), L2 = Ot(Z2, H2, 1) ^ Ot(Z2, H2, 8) ^ $r(Z2, H2, 7), k2 = Tt[R4 - 2] | 0, O3 = Ct[R4 - 2] | 0, T3 = St(k2, O3, 19) ^ de(k2, O3, 61) ^ Rr(k2, O3, 6), C5 = Ot(k2, O3, 19) ^ he(k2, O3, 61) ^ $r(k2, O3, 6), _2 = qi(L2, C5, Ct[R4 - 7], Ct[R4 - 16]), p3 = Fi(_2, j3, T3, Tt[R4 - 7], Tt[R4 - 16]);
      Tt[R4] = p3 | 0, Ct[R4] = _2 | 0;
    }
    let { Ah: r2, Al: o2, Bh: s, Bl: i3, Ch: c3, Cl: f6, Dh: u2, Dl: a2, Eh: l2, El: d4, Fh: h3, Fl: y3, Gh: m3, Gl: v4, Hh: U3, Hl: F2 } = this;
    for (let R4 = 0; R4 < 80; R4++) {
      const Z2 = St(l2, d4, 14) ^ St(l2, d4, 18) ^ de(l2, d4, 41), H2 = Ot(l2, d4, 14) ^ Ot(l2, d4, 18) ^ he(l2, d4, 41), j3 = l2 & h3 ^ ~l2 & m3, L2 = d4 & y3 ^ ~d4 & v4, k2 = Zi(F2, H2, L2, hc[R4], Ct[R4]), O3 = Gi(k2, U3, Z2, j3, dc[R4], Tt[R4]), T3 = k2 | 0, C5 = St(r2, o2, 28) ^ de(r2, o2, 34) ^ de(r2, o2, 39), _2 = Ot(r2, o2, 28) ^ he(r2, o2, 34) ^ he(r2, o2, 39), p3 = r2 & s ^ r2 & c3 ^ s & c3, b3 = o2 & i3 ^ o2 & f6 ^ i3 & f6;
      U3 = m3 | 0, F2 = v4 | 0, m3 = h3 | 0, v4 = y3 | 0, h3 = l2 | 0, y3 = d4 | 0, { h: l2, l: d4 } = dt(u2 | 0, a2 | 0, O3 | 0, T3 | 0), u2 = c3 | 0, a2 = f6 | 0, c3 = s | 0, f6 = i3 | 0, s = r2 | 0, i3 = o2 | 0;
      const g2 = fn(T3, _2, b3);
      r2 = an(g2, O3, C5, p3), o2 = g2 | 0;
    }
    ({ h: r2, l: o2 } = dt(this.Ah | 0, this.Al | 0, r2 | 0, o2 | 0)), { h: s, l: i3 } = dt(this.Bh | 0, this.Bl | 0, s | 0, i3 | 0), { h: c3, l: f6 } = dt(this.Ch | 0, this.Cl | 0, c3 | 0, f6 | 0), { h: u2, l: a2 } = dt(this.Dh | 0, this.Dl | 0, u2 | 0, a2 | 0), { h: l2, l: d4 } = dt(this.Eh | 0, this.El | 0, l2 | 0, d4 | 0), { h: h3, l: y3 } = dt(this.Fh | 0, this.Fl | 0, h3 | 0, y3 | 0), { h: m3, l: v4 } = dt(this.Gh | 0, this.Gl | 0, m3 | 0, v4 | 0), { h: U3, l: F2 } = dt(this.Hh | 0, this.Hl | 0, U3 | 0, F2 | 0), this.set(r2, o2, s, i3, c3, f6, u2, a2, l2, d4, h3, y3, m3, v4, U3, F2);
  }
  roundClean() {
    lt(Tt, Ct);
  }
  destroy() {
    lt(this.buffer), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var pc = class extends dn {
  constructor() {
    super(48), this.Ah = X2[0] | 0, this.Al = X2[1] | 0, this.Bh = X2[2] | 0, this.Bl = X2[3] | 0, this.Ch = X2[4] | 0, this.Cl = X2[5] | 0, this.Dh = X2[6] | 0, this.Dl = X2[7] | 0, this.Eh = X2[8] | 0, this.El = X2[9] | 0, this.Fh = X2[10] | 0, this.Fl = X2[11] | 0, this.Gh = X2[12] | 0, this.Gl = X2[13] | 0, this.Hh = X2[14] | 0, this.Hl = X2[15] | 0;
  }
};
var Q = Uint32Array.from([573645204, 4230739756, 2673172387, 3360449730, 596883563, 1867755857, 2520282905, 1497426621, 2519219938, 2827943907, 3193839141, 1401305490, 721525244, 746961066, 246885852, 2177182882]);
var gc = class extends dn {
  constructor() {
    super(32), this.Ah = Q[0] | 0, this.Al = Q[1] | 0, this.Bh = Q[2] | 0, this.Bl = Q[3] | 0, this.Ch = Q[4] | 0, this.Cl = Q[5] | 0, this.Dh = Q[6] | 0, this.Dl = Q[7] | 0, this.Eh = Q[8] | 0, this.El = Q[9] | 0, this.Fh = Q[10] | 0, this.Fl = Q[11] | 0, this.Gh = Q[12] | 0, this.Gl = Q[13] | 0, this.Hh = Q[14] | 0, this.Hl = Q[15] | 0;
  }
};
var $e = ge(() => new lc());
var bc = ge(() => new dn());
var yc = ge(() => new pc());
var mc = ge(() => new gc());
var wc = Uint8Array.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9]);
var z = Uint32Array.from([4089235720, 1779033703, 2227873595, 3144134277, 4271175723, 1013904242, 1595750129, 2773480762, 2917565137, 1359893119, 725511199, 2600822924, 4215389547, 528734635, 327033209, 1541459225]);
var S2 = new Uint32Array(32);
function jt(t, e, n2, r2, o2, s) {
  const i3 = o2[s], c3 = o2[s + 1];
  let f6 = S2[2 * t], u2 = S2[2 * t + 1], a2 = S2[2 * e], l2 = S2[2 * e + 1], d4 = S2[2 * n2], h3 = S2[2 * n2 + 1], y3 = S2[2 * r2], m3 = S2[2 * r2 + 1], v4 = fn(f6, a2, i3);
  u2 = an(v4, u2, l2, c3), f6 = v4 | 0, { Dh: m3, Dl: y3 } = { Dh: m3 ^ u2, Dl: y3 ^ f6 }, { Dh: m3, Dl: y3 } = { Dh: Pi(m3, y3), Dl: Hi(m3) }, { h: h3, l: d4 } = dt(h3, d4, m3, y3), { Bh: l2, Bl: a2 } = { Bh: l2 ^ h3, Bl: a2 ^ d4 }, { Bh: l2, Bl: a2 } = { Bh: St(l2, a2, 24), Bl: Ot(l2, a2, 24) }, S2[2 * t] = f6, S2[2 * t + 1] = u2, S2[2 * e] = a2, S2[2 * e + 1] = l2, S2[2 * n2] = d4, S2[2 * n2 + 1] = h3, S2[2 * r2] = y3, S2[2 * r2 + 1] = m3;
}
function Lt(t, e, n2, r2, o2, s) {
  const i3 = o2[s], c3 = o2[s + 1];
  let f6 = S2[2 * t], u2 = S2[2 * t + 1], a2 = S2[2 * e], l2 = S2[2 * e + 1], d4 = S2[2 * n2], h3 = S2[2 * n2 + 1], y3 = S2[2 * r2], m3 = S2[2 * r2 + 1], v4 = fn(f6, a2, i3);
  u2 = an(v4, u2, l2, c3), f6 = v4 | 0, { Dh: m3, Dl: y3 } = { Dh: m3 ^ u2, Dl: y3 ^ f6 }, { Dh: m3, Dl: y3 } = { Dh: St(m3, y3, 16), Dl: Ot(m3, y3, 16) }, { h: h3, l: d4 } = dt(h3, d4, m3, y3), { Bh: l2, Bl: a2 } = { Bh: l2 ^ h3, Bl: a2 ^ d4 }, { Bh: l2, Bl: a2 } = { Bh: de(l2, a2, 63), Bl: he(l2, a2, 63) }, S2[2 * t] = f6, S2[2 * t + 1] = u2, S2[2 * e] = a2, S2[2 * e + 1] = l2, S2[2 * n2] = d4, S2[2 * n2 + 1] = h3, S2[2 * r2] = y3, S2[2 * r2 + 1] = m3;
}
function vc(t, e = {}, n2, r2, o2) {
  if (mt(n2), t < 0 || t > n2) throw new Error("outputLen bigger than keyLen");
  const { key: s, salt: i3, personalization: c3 } = e;
  if (s !== void 0 && (s.length < 1 || s.length > n2)) throw new Error("key length must be undefined or 1.." + n2);
  if (i3 !== void 0 && i3.length !== r2) throw new Error("salt must be undefined or " + r2);
  if (c3 !== void 0 && c3.length !== o2) throw new Error("personalization must be undefined or " + o2);
}
var xc = class extends Re {
  constructor(e, n2) {
    super(), this.finished = false, this.destroyed = false, this.length = 0, this.pos = 0, mt(e), mt(n2), this.blockLen = e, this.outputLen = n2, this.buffer = new Uint8Array(e), this.buffer32 = pe(this.buffer);
  }
  update(e) {
    Nt(this), e = pt(e), ht(e);
    const { blockLen: n2, buffer: r2, buffer32: o2 } = this, s = e.length, i3 = e.byteOffset, c3 = e.buffer;
    for (let f6 = 0; f6 < s; ) {
      this.pos === n2 && (Ut(o2), this.compress(o2, 0, false), Ut(o2), this.pos = 0);
      const u2 = Math.min(n2 - this.pos, s - f6), a2 = i3 + f6;
      if (u2 === n2 && !(a2 % 4) && f6 + u2 < s) {
        const l2 = new Uint32Array(c3, a2, Math.floor((s - f6) / 4));
        Ut(l2);
        for (let d4 = 0; f6 + n2 < s; d4 += o2.length, f6 += n2) this.length += n2, this.compress(l2, d4, false);
        Ut(l2);
        continue;
      }
      r2.set(e.subarray(f6, f6 + u2), this.pos), this.pos += u2, this.length += u2, f6 += u2;
    }
    return this;
  }
  digestInto(e) {
    Nt(this), un(e, this);
    const { pos: n2, buffer32: r2 } = this;
    this.finished = true, lt(this.buffer.subarray(n2)), Ut(r2), this.compress(r2, 0, true), Ut(r2);
    const o2 = pe(e);
    this.get().forEach((s, i3) => o2[i3] = wt(s));
  }
  digest() {
    const { buffer: e, outputLen: n2 } = this;
    this.digestInto(e);
    const r2 = e.slice(0, n2);
    return this.destroy(), r2;
  }
  _cloneInto(e) {
    const { buffer: n2, length: r2, finished: o2, destroyed: s, outputLen: i3, pos: c3 } = this;
    return e || (e = new this.constructor({ dkLen: i3 })), e.set(...this.get()), e.buffer.set(n2), e.destroyed = s, e.finished = o2, e.length = r2, e.pos = c3, e.outputLen = i3, e;
  }
  clone() {
    return this._cloneInto();
  }
};
var Ec = class extends xc {
  constructor(e = {}) {
    const n2 = e.dkLen === void 0 ? 64 : e.dkLen;
    super(128, n2), this.v0l = z[0] | 0, this.v0h = z[1] | 0, this.v1l = z[2] | 0, this.v1h = z[3] | 0, this.v2l = z[4] | 0, this.v2h = z[5] | 0, this.v3l = z[6] | 0, this.v3h = z[7] | 0, this.v4l = z[8] | 0, this.v4h = z[9] | 0, this.v5l = z[10] | 0, this.v5h = z[11] | 0, this.v6l = z[12] | 0, this.v6h = z[13] | 0, this.v7l = z[14] | 0, this.v7h = z[15] | 0, vc(n2, e, 64, 16, 16);
    let { key: r2, personalization: o2, salt: s } = e, i3 = 0;
    if (r2 !== void 0 && (r2 = pt(r2), i3 = r2.length), this.v0l ^= this.outputLen | i3 << 8 | 65536 | 1 << 24, s !== void 0) {
      s = pt(s);
      const c3 = pe(s);
      this.v4l ^= wt(c3[0]), this.v4h ^= wt(c3[1]), this.v5l ^= wt(c3[2]), this.v5h ^= wt(c3[3]);
    }
    if (o2 !== void 0) {
      o2 = pt(o2);
      const c3 = pe(o2);
      this.v6l ^= wt(c3[0]), this.v6h ^= wt(c3[1]), this.v7l ^= wt(c3[2]), this.v7h ^= wt(c3[3]);
    }
    if (r2 !== void 0) {
      const c3 = new Uint8Array(this.blockLen);
      c3.set(r2), this.update(c3);
    }
  }
  get() {
    let { v0l: e, v0h: n2, v1l: r2, v1h: o2, v2l: s, v2h: i3, v3l: c3, v3h: f6, v4l: u2, v4h: a2, v5l: l2, v5h: d4, v6l: h3, v6h: y3, v7l: m3, v7h: v4 } = this;
    return [e, n2, r2, o2, s, i3, c3, f6, u2, a2, l2, d4, h3, y3, m3, v4];
  }
  set(e, n2, r2, o2, s, i3, c3, f6, u2, a2, l2, d4, h3, y3, m3, v4) {
    this.v0l = e | 0, this.v0h = n2 | 0, this.v1l = r2 | 0, this.v1h = o2 | 0, this.v2l = s | 0, this.v2h = i3 | 0, this.v3l = c3 | 0, this.v3h = f6 | 0, this.v4l = u2 | 0, this.v4h = a2 | 0, this.v5l = l2 | 0, this.v5h = d4 | 0, this.v6l = h3 | 0, this.v6h = y3 | 0, this.v7l = m3 | 0, this.v7h = v4 | 0;
  }
  compress(e, n2, r2) {
    this.get().forEach((f6, u2) => S2[u2] = f6), S2.set(z, 16);
    let { h: o2, l: s } = Ur(BigInt(this.length));
    S2[24] = z[8] ^ s, S2[25] = z[9] ^ o2, r2 && (S2[28] = ~S2[28], S2[29] = ~S2[29]);
    let i3 = 0;
    const c3 = wc;
    for (let f6 = 0; f6 < 12; f6++) jt(0, 4, 8, 12, e, n2 + 2 * c3[i3++]), Lt(0, 4, 8, 12, e, n2 + 2 * c3[i3++]), jt(1, 5, 9, 13, e, n2 + 2 * c3[i3++]), Lt(1, 5, 9, 13, e, n2 + 2 * c3[i3++]), jt(2, 6, 10, 14, e, n2 + 2 * c3[i3++]), Lt(2, 6, 10, 14, e, n2 + 2 * c3[i3++]), jt(3, 7, 11, 15, e, n2 + 2 * c3[i3++]), Lt(3, 7, 11, 15, e, n2 + 2 * c3[i3++]), jt(0, 5, 10, 15, e, n2 + 2 * c3[i3++]), Lt(0, 5, 10, 15, e, n2 + 2 * c3[i3++]), jt(1, 6, 11, 12, e, n2 + 2 * c3[i3++]), Lt(1, 6, 11, 12, e, n2 + 2 * c3[i3++]), jt(2, 7, 8, 13, e, n2 + 2 * c3[i3++]), Lt(2, 7, 8, 13, e, n2 + 2 * c3[i3++]), jt(3, 4, 9, 14, e, n2 + 2 * c3[i3++]), Lt(3, 4, 9, 14, e, n2 + 2 * c3[i3++]);
    this.v0l ^= S2[0] ^ S2[16], this.v0h ^= S2[1] ^ S2[17], this.v1l ^= S2[2] ^ S2[18], this.v1h ^= S2[3] ^ S2[19], this.v2l ^= S2[4] ^ S2[20], this.v2h ^= S2[5] ^ S2[21], this.v3l ^= S2[6] ^ S2[22], this.v3h ^= S2[7] ^ S2[23], this.v4l ^= S2[8] ^ S2[24], this.v4h ^= S2[9] ^ S2[25], this.v5l ^= S2[10] ^ S2[26], this.v5h ^= S2[11] ^ S2[27], this.v6l ^= S2[12] ^ S2[28], this.v6h ^= S2[13] ^ S2[29], this.v7l ^= S2[14] ^ S2[30], this.v7h ^= S2[15] ^ S2[31], lt(S2);
  }
  destroy() {
    this.destroyed = true, lt(this.buffer32), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Bc = Wi((t) => new Ec(t));
var Ac = "https://rpc.walletconnect.org/v1";
function hn(t) {
  const e = `Ethereum Signed Message:
${t.length}`, n2 = new TextEncoder().encode(e + t);
  return "0x" + Buffer.from(ic(n2)).toString("hex");
}
async function Zr(t, e, n2, r2, o2, s) {
  switch (n2.t) {
    case "eip191":
      return await Gr(t, e, n2.s);
    case "eip1271":
      return await zr(t, e, n2.s, r2, o2, s);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${n2.t}`);
  }
}
function Gr(t, e, n2) {
  const r2 = Signature_exports.fromHex(n2);
  return Secp256k1_exports.recoverAddress({ payload: hn(e), signature: r2 }).toLowerCase() === t.toLowerCase();
}
async function zr(t, e, n2, r2, o2, s) {
  const i3 = Je(r2);
  if (!i3.namespace || !i3.reference) throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r2}`);
  try {
    const c3 = "0x1626ba7e", f6 = "0000000000000000000000000000000000000000000000000000000000000040", u2 = n2.substring(2), a2 = (u2.length / 2).toString(16).padStart(64, "0"), l2 = (e.startsWith("0x") ? e : hn(e)).substring(2), d4 = c3 + l2 + f6 + a2 + u2, h3 = await fetch(`${s || Ac}/?chainId=${r2}&projectId=${o2}`, { headers: { "Content-Type": "application/json" }, method: "POST", body: JSON.stringify({ id: Ic(), jsonrpc: "2.0", method: "eth_call", params: [{ to: t, data: d4 }, "latest"] }) }), { result: y3 } = await h3.json();
    return y3 ? y3.slice(0, c3.length).toLowerCase() === c3.toLowerCase() : false;
  } catch (c3) {
    return console.error("isValidEip1271Signature: ", c3), false;
  }
}
function Ic() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
function Sc(t) {
  const e = atob(t), n2 = new Uint8Array(e.length);
  for (let i3 = 0; i3 < e.length; i3++) n2[i3] = e.charCodeAt(i3);
  const r2 = n2[0];
  if (r2 === 0) throw new Error("No signatures found");
  const o2 = 1 + r2 * 64;
  if (n2.length < o2) throw new Error("Transaction data too short for claimed signature count");
  if (n2.length < 100) throw new Error("Transaction too short");
  const s = Buffer.from(t, "base64").slice(1, 65);
  return esm_default.encode(s);
}
function Oc(t) {
  const e = new Uint8Array(Buffer.from(t, "base64")), n2 = Array.from("TransactionData::").map((s) => s.charCodeAt(0)), r2 = new Uint8Array(n2.length + e.length);
  r2.set(n2), r2.set(e, n2.length);
  const o2 = Bc(r2, { dkLen: 32 });
  return esm_default.encode(o2);
}
function Nc(t) {
  const e = new Uint8Array($e(Yr(t)));
  return esm_default.encode(e);
}
function Yr(t) {
  if (t instanceof Uint8Array) return t;
  if (Array.isArray(t)) return new Uint8Array(t);
  if (typeof t == "object" && t != null && t.data) return new Uint8Array(Object.values(t.data));
  if (typeof t == "object" && t) return new Uint8Array(Object.values(t));
  throw new Error("getNearUint8ArrayFromBytes: Unexpected result type from bytes array");
}
function Uc(t) {
  const e = Buffer.from(t, "base64"), n2 = decode2(e).txn;
  if (!n2) throw new Error("Invalid signed transaction: missing 'txn' field");
  const r2 = encode3(n2), o2 = Buffer.from("TX"), s = Buffer.concat([o2, Buffer.from(r2)]), i3 = mc(s);
  return base32.encode(i3).replace(/=+$/, "");
}
function pn(t) {
  const e = [];
  let n2 = BigInt(t);
  for (; n2 >= BigInt(128); ) e.push(Number(n2 & BigInt(127) | BigInt(128))), n2 >>= BigInt(7);
  return e.push(Number(n2)), Buffer.from(e);
}
function _c(t) {
  const e = Buffer.from(t.signed.bodyBytes, "base64"), n2 = Buffer.from(t.signed.authInfoBytes, "base64"), r2 = Buffer.from(t.signature.signature, "base64"), o2 = [];
  o2.push(Buffer.from([10])), o2.push(pn(e.length)), o2.push(e), o2.push(Buffer.from([18])), o2.push(pn(n2.length)), o2.push(n2), o2.push(Buffer.from([26])), o2.push(pn(r2.length)), o2.push(r2);
  const s = Buffer.concat(o2), i3 = $e(s);
  return Buffer.from(i3).toString("hex").toUpperCase();
}
function Rc(t) {
  var e, n2;
  const r2 = [];
  try {
    if (typeof t == "string") return r2.push(t), r2;
    if (typeof t != "object") return r2;
    t != null && t.id && r2.push(t.id);
    const o2 = (n2 = (e = t?.capabilities) == null ? void 0 : e.caip345) == null ? void 0 : n2.transactionHashes;
    o2 && r2.push(...o2);
  } catch (o2) {
    console.warn("getWalletSendCallsHashes failed: ", o2);
  }
  return r2;
}
var $c = Object.defineProperty;
var Tc = Object.defineProperties;
var Cc = Object.getOwnPropertyDescriptors;
var Wr = Object.getOwnPropertySymbols;
var jc = Object.prototype.hasOwnProperty;
var Lc = Object.prototype.propertyIsEnumerable;
var Xr = (t, e, n2) => e in t ? $c(t, e, { enumerable: true, configurable: true, writable: true, value: n2 }) : t[e] = n2;
var gn = (t, e) => {
  for (var n2 in e || (e = {})) jc.call(e, n2) && Xr(t, n2, e[n2]);
  if (Wr) for (var n2 of Wr(e)) Lc.call(e, n2) && Xr(t, n2, e[n2]);
  return t;
};
var Jr = (t, e) => Tc(t, Cc(e));
var kc = "did:pkh:";
var Te = (t) => t?.split(":");
var Qr = (t) => {
  const e = t && Te(t);
  if (e) return t.includes(kc) ? e[3] : e[1];
};
var to = (t) => {
  const e = t && Te(t);
  if (e) return e[2] + ":" + e[3];
};
var bn = (t) => {
  const e = t && Te(t);
  if (e) return e.pop();
};
async function Pc(t) {
  const { cacao: e, projectId: n2 } = t, { s: r2, p: o2 } = e, s = eo(o2, o2.iss), i3 = bn(o2.iss);
  return await Zr(i3, s, r2, to(o2.iss), n2);
}
var eo = (t, e) => {
  const n2 = `${t.domain} wants you to sign in with your Ethereum account:`, r2 = bn(e);
  if (!t.aud && !t.uri) throw new Error("Either `aud` or `uri` is required to construct the message");
  let o2 = t.statement || void 0;
  const s = `URI: ${t.aud || t.uri}`, i3 = `Version: ${t.version}`, c3 = `Chain ID: ${Qr(e)}`, f6 = `Nonce: ${t.nonce}`, u2 = `Issued At: ${t.iat}`, a2 = t.exp ? `Expiration Time: ${t.exp}` : void 0, l2 = t.nbf ? `Not Before: ${t.nbf}` : void 0, d4 = t.requestId ? `Request ID: ${t.requestId}` : void 0, h3 = t.resources ? `Resources:${t.resources.map((m3) => `
- ${m3}`).join("")}` : void 0, y3 = je(t.resources);
  if (y3) {
    const m3 = kt(y3);
    o2 = wn(o2, m3);
  }
  return [n2, r2, "", o2, "", s, i3, c3, f6, u2, a2, l2, d4, h3].filter((m3) => m3 != null).join(`
`);
};
function so(t) {
  return Buffer.from(JSON.stringify(t)).toString("base64");
}
function io(t) {
  return JSON.parse(Buffer.from(t, "base64").toString("utf-8"));
}
function yt(t) {
  if (!t) throw new Error("No recap provided, value is undefined");
  if (!t.att) throw new Error("No `att` property found");
  const e = Object.keys(t.att);
  if (!(e != null && e.length)) throw new Error("No resources found in `att` property");
  e.forEach((n2) => {
    const r2 = t.att[n2];
    if (Array.isArray(r2)) throw new Error(`Resource must be an object: ${n2}`);
    if (typeof r2 != "object") throw new Error(`Resource must be an object: ${n2}`);
    if (!Object.keys(r2).length) throw new Error(`Resource object is empty: ${n2}`);
    Object.keys(r2).forEach((o2) => {
      const s = r2[o2];
      if (!Array.isArray(s)) throw new Error(`Ability limits ${o2} must be an array of objects, found: ${s}`);
      if (!s.length) throw new Error(`Value of ${o2} is empty array, must be an array with objects`);
      s.forEach((i3) => {
        if (typeof i3 != "object") throw new Error(`Ability limits (${o2}) must be an array of objects, found: ${i3}`);
      });
    });
  });
}
function co(t, e, n2, r2 = {}) {
  return n2?.sort((o2, s) => o2.localeCompare(s)), { att: { [t]: yn(e, n2, r2) } };
}
function yn(t, e, n2 = {}) {
  e = e?.sort((o2, s) => o2.localeCompare(s));
  const r2 = e.map((o2) => ({ [`${t}/${o2}`]: [n2] }));
  return Object.assign({}, ...r2);
}
function Ce(t) {
  return yt(t), `urn:recap:${so(t).replace(/=/g, "")}`;
}
function kt(t) {
  const e = io(t.replace("urn:recap:", ""));
  return yt(e), e;
}
function Kc(t, e, n2) {
  const r2 = co(t, e, n2);
  return Ce(r2);
}
function mn(t) {
  return t && t.includes("urn:recap:");
}
function qc(t, e) {
  const n2 = kt(t), r2 = kt(e), o2 = ao(n2, r2);
  return Ce(o2);
}
function ao(t, e) {
  yt(t), yt(e);
  const n2 = Object.keys(t.att).concat(Object.keys(e.att)).sort((o2, s) => o2.localeCompare(s)), r2 = { att: {} };
  return n2.forEach((o2) => {
    var s, i3;
    Object.keys(((s = t.att) == null ? void 0 : s[o2]) || {}).concat(Object.keys(((i3 = e.att) == null ? void 0 : i3[o2]) || {})).sort((c3, f6) => c3.localeCompare(f6)).forEach((c3) => {
      var f6, u2;
      r2.att[o2] = Jr(gn({}, r2.att[o2]), { [c3]: ((f6 = t.att[o2]) == null ? void 0 : f6[c3]) || ((u2 = e.att[o2]) == null ? void 0 : u2[c3]) });
    });
  }), r2;
}
function wn(t = "", e) {
  yt(e);
  const n2 = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (t.includes(n2)) return t;
  const r2 = [];
  let o2 = 0;
  Object.keys(e.att).forEach((c3) => {
    const f6 = Object.keys(e.att[c3]).map((l2) => ({ ability: l2.split("/")[0], action: l2.split("/")[1] }));
    f6.sort((l2, d4) => l2.action.localeCompare(d4.action));
    const u2 = {};
    f6.forEach((l2) => {
      u2[l2.ability] || (u2[l2.ability] = []), u2[l2.ability].push(l2.action);
    });
    const a2 = Object.keys(u2).map((l2) => (o2++, `(${o2}) '${l2}': '${u2[l2].join("', '")}' for '${c3}'.`));
    r2.push(a2.join(", ").replace(".,", "."));
  });
  const s = r2.join(" "), i3 = `${n2}${s}`;
  return `${t ? t + " " : ""}${i3}`;
}
function Fc(t) {
  var e;
  const n2 = kt(t);
  yt(n2);
  const r2 = (e = n2.att) == null ? void 0 : e.eip155;
  return r2 ? Object.keys(r2).map((o2) => o2.split("/")[1]) : [];
}
function Zc(t) {
  const e = kt(t);
  yt(e);
  const n2 = [];
  return Object.values(e.att).forEach((r2) => {
    Object.values(r2).forEach((o2) => {
      var s;
      (s = o2?.[0]) != null && s.chains && n2.push(o2[0].chains);
    });
  }), [...new Set(n2.flat())];
}
function je(t) {
  if (!t) return;
  const e = t?.[t.length - 1];
  return mn(e) ? e : void 0;
}
function lo(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function vn(t) {
  if (typeof t != "boolean") throw new Error(`boolean expected, not ${t}`);
}
function xn(t) {
  if (!Number.isSafeInteger(t) || t < 0) throw new Error("positive integer expected, got " + t);
}
function ot(t, ...e) {
  if (!lo(t)) throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(t.length)) throw new Error("Uint8Array expected of length " + e + ", got length=" + t.length);
}
function ho(t, e = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e && t.finished) throw new Error("Hash#digest() has already been called");
}
function Gc(t, e) {
  ot(t);
  const n2 = e.outputLen;
  if (t.length < n2) throw new Error("digestInto() expects output buffer of length at least " + n2);
}
function Pt(t) {
  return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
}
function Qt(...t) {
  for (let e = 0; e < t.length; e++) t[e].fill(0);
}
function zc(t) {
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
var Yc = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Wc(t) {
  if (typeof t != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
function En(t) {
  if (typeof t == "string") t = Wc(t);
  else if (lo(t)) t = Bn(t);
  else throw new Error("Uint8Array expected, got " + typeof t);
  return t;
}
function Xc(t, e) {
  if (e == null || typeof e != "object") throw new Error("options must be defined");
  return Object.assign(t, e);
}
function Jc(t, e) {
  if (t.length !== e.length) return false;
  let n2 = 0;
  for (let r2 = 0; r2 < t.length; r2++) n2 |= t[r2] ^ e[r2];
  return n2 === 0;
}
var Qc = (t, e) => {
  function n2(r2, ...o2) {
    if (ot(r2), !Yc) throw new Error("Non little-endian hardware is not yet supported");
    if (t.nonceLength !== void 0) {
      const a2 = o2[0];
      if (!a2) throw new Error("nonce / iv required");
      t.varSizeNonce ? ot(a2) : ot(a2, t.nonceLength);
    }
    const s = t.tagLength;
    s && o2[1] !== void 0 && ot(o2[1]);
    const i3 = e(r2, ...o2), c3 = (a2, l2) => {
      if (l2 !== void 0) {
        if (a2 !== 2) throw new Error("cipher output not supported");
        ot(l2);
      }
    };
    let f6 = false;
    return { encrypt(a2, l2) {
      if (f6) throw new Error("cannot encrypt() twice with same key + nonce");
      return f6 = true, ot(a2), c3(i3.encrypt.length, l2), i3.encrypt(a2, l2);
    }, decrypt(a2, l2) {
      if (ot(a2), s && a2.length < s) throw new Error("invalid ciphertext length: smaller than tagLength=" + s);
      return c3(i3.decrypt.length, l2), i3.decrypt(a2, l2);
    } };
  }
  return Object.assign(n2, t), n2;
};
function po(t, e, n2 = true) {
  if (e === void 0) return new Uint8Array(t);
  if (e.length !== t) throw new Error("invalid output length, expected " + t + ", got: " + e.length);
  if (n2 && !ef(e)) throw new Error("invalid output, must be aligned");
  return e;
}
function go(t, e, n2, r2) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e, n2, r2);
  const o2 = BigInt(32), s = BigInt(4294967295), i3 = Number(n2 >> o2 & s), c3 = Number(n2 & s), f6 = r2 ? 4 : 0, u2 = r2 ? 0 : 4;
  t.setUint32(e + f6, i3, r2), t.setUint32(e + u2, c3, r2);
}
function tf(t, e, n2) {
  vn(n2);
  const r2 = new Uint8Array(16), o2 = zc(r2);
  return go(o2, 0, BigInt(e), n2), go(o2, 8, BigInt(t), n2), r2;
}
function ef(t) {
  return t.byteOffset % 4 === 0;
}
function Bn(t) {
  return Uint8Array.from(t);
}
var bo = (t) => Uint8Array.from(t.split("").map((e) => e.charCodeAt(0)));
var nf = bo("expand 16-byte k");
var rf = bo("expand 32-byte k");
var of = Pt(nf);
var sf = Pt(rf);
function K(t, e) {
  return t << e | t >>> 32 - e;
}
function An(t) {
  return t.byteOffset % 4 === 0;
}
var Le = 64;
var cf = 16;
var yo = 2 ** 32 - 1;
var mo = new Uint32Array();
function ff(t, e, n2, r2, o2, s, i3, c3) {
  const f6 = o2.length, u2 = new Uint8Array(Le), a2 = Pt(u2), l2 = An(o2) && An(s), d4 = l2 ? Pt(o2) : mo, h3 = l2 ? Pt(s) : mo;
  for (let y3 = 0; y3 < f6; i3++) {
    if (t(e, n2, r2, a2, i3, c3), i3 >= yo) throw new Error("arx: counter overflow");
    const m3 = Math.min(Le, f6 - y3);
    if (l2 && m3 === Le) {
      const v4 = y3 / 4;
      if (y3 % 4 !== 0) throw new Error("arx: invalid block position");
      for (let U3 = 0, F2; U3 < cf; U3++) F2 = v4 + U3, h3[F2] = d4[F2] ^ a2[U3];
      y3 += Le;
      continue;
    }
    for (let v4 = 0, U3; v4 < m3; v4++) U3 = y3 + v4, s[U3] = o2[U3] ^ u2[v4];
    y3 += m3;
  }
}
function af(t, e) {
  const { allowShortKeys: n2, extendNonceFn: r2, counterLength: o2, counterRight: s, rounds: i3 } = Xc({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, e);
  if (typeof t != "function") throw new Error("core must be a function");
  return xn(o2), xn(i3), vn(s), vn(n2), (c3, f6, u2, a2, l2 = 0) => {
    ot(c3), ot(f6), ot(u2);
    const d4 = u2.length;
    if (a2 === void 0 && (a2 = new Uint8Array(d4)), ot(a2), xn(l2), l2 < 0 || l2 >= yo) throw new Error("arx: counter overflow");
    if (a2.length < d4) throw new Error(`arx: output (${a2.length}) is shorter than data (${d4})`);
    const h3 = [];
    let y3 = c3.length, m3, v4;
    if (y3 === 32) h3.push(m3 = Bn(c3)), v4 = sf;
    else if (y3 === 16 && n2) m3 = new Uint8Array(32), m3.set(c3), m3.set(c3, 16), v4 = of, h3.push(m3);
    else throw new Error(`arx: invalid 32-byte key, got length=${y3}`);
    An(f6) || h3.push(f6 = Bn(f6));
    const U3 = Pt(m3);
    if (r2) {
      if (f6.length !== 24) throw new Error("arx: extended nonce must be 24 bytes");
      r2(v4, U3, Pt(f6.subarray(0, 16)), U3), f6 = f6.subarray(16);
    }
    const F2 = 16 - o2;
    if (F2 !== f6.length) throw new Error(`arx: nonce must be ${F2} or 16 bytes`);
    if (F2 !== 12) {
      const Z2 = new Uint8Array(12);
      Z2.set(f6, s ? 0 : 12 - f6.length), f6 = Z2, h3.push(f6);
    }
    const R4 = Pt(f6);
    return ff(t, v4, U3, R4, u2, a2, l2, i3), Qt(...h3), a2;
  };
}
var W = (t, e) => t[e++] & 255 | (t[e++] & 255) << 8;
var uf = class {
  constructor(e) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = false, e = En(e), ot(e, 32);
    const n2 = W(e, 0), r2 = W(e, 2), o2 = W(e, 4), s = W(e, 6), i3 = W(e, 8), c3 = W(e, 10), f6 = W(e, 12), u2 = W(e, 14);
    this.r[0] = n2 & 8191, this.r[1] = (n2 >>> 13 | r2 << 3) & 8191, this.r[2] = (r2 >>> 10 | o2 << 6) & 7939, this.r[3] = (o2 >>> 7 | s << 9) & 8191, this.r[4] = (s >>> 4 | i3 << 12) & 255, this.r[5] = i3 >>> 1 & 8190, this.r[6] = (i3 >>> 14 | c3 << 2) & 8191, this.r[7] = (c3 >>> 11 | f6 << 5) & 8065, this.r[8] = (f6 >>> 8 | u2 << 8) & 8191, this.r[9] = u2 >>> 5 & 127;
    for (let a2 = 0; a2 < 8; a2++) this.pad[a2] = W(e, 16 + 2 * a2);
  }
  process(e, n2, r2 = false) {
    const o2 = r2 ? 0 : 2048, { h: s, r: i3 } = this, c3 = i3[0], f6 = i3[1], u2 = i3[2], a2 = i3[3], l2 = i3[4], d4 = i3[5], h3 = i3[6], y3 = i3[7], m3 = i3[8], v4 = i3[9], U3 = W(e, n2 + 0), F2 = W(e, n2 + 2), R4 = W(e, n2 + 4), Z2 = W(e, n2 + 6), H2 = W(e, n2 + 8), j3 = W(e, n2 + 10), L2 = W(e, n2 + 12), k2 = W(e, n2 + 14);
    let O3 = s[0] + (U3 & 8191), T3 = s[1] + ((U3 >>> 13 | F2 << 3) & 8191), C5 = s[2] + ((F2 >>> 10 | R4 << 6) & 8191), _2 = s[3] + ((R4 >>> 7 | Z2 << 9) & 8191), p3 = s[4] + ((Z2 >>> 4 | H2 << 12) & 8191), b3 = s[5] + (H2 >>> 1 & 8191), g2 = s[6] + ((H2 >>> 14 | j3 << 2) & 8191), x3 = s[7] + ((j3 >>> 11 | L2 << 5) & 8191), E2 = s[8] + ((L2 >>> 8 | k2 << 8) & 8191), A3 = s[9] + (k2 >>> 5 | o2), w3 = 0, B2 = w3 + O3 * c3 + T3 * (5 * v4) + C5 * (5 * m3) + _2 * (5 * y3) + p3 * (5 * h3);
    w3 = B2 >>> 13, B2 &= 8191, B2 += b3 * (5 * d4) + g2 * (5 * l2) + x3 * (5 * a2) + E2 * (5 * u2) + A3 * (5 * f6), w3 += B2 >>> 13, B2 &= 8191;
    let I2 = w3 + O3 * f6 + T3 * c3 + C5 * (5 * v4) + _2 * (5 * m3) + p3 * (5 * y3);
    w3 = I2 >>> 13, I2 &= 8191, I2 += b3 * (5 * h3) + g2 * (5 * d4) + x3 * (5 * l2) + E2 * (5 * a2) + A3 * (5 * u2), w3 += I2 >>> 13, I2 &= 8191;
    let N3 = w3 + O3 * u2 + T3 * f6 + C5 * c3 + _2 * (5 * v4) + p3 * (5 * m3);
    w3 = N3 >>> 13, N3 &= 8191, N3 += b3 * (5 * y3) + g2 * (5 * h3) + x3 * (5 * d4) + E2 * (5 * l2) + A3 * (5 * a2), w3 += N3 >>> 13, N3 &= 8191;
    let D2 = w3 + O3 * a2 + T3 * u2 + C5 * f6 + _2 * c3 + p3 * (5 * v4);
    w3 = D2 >>> 13, D2 &= 8191, D2 += b3 * (5 * m3) + g2 * (5 * y3) + x3 * (5 * h3) + E2 * (5 * d4) + A3 * (5 * l2), w3 += D2 >>> 13, D2 &= 8191;
    let P4 = w3 + O3 * l2 + T3 * a2 + C5 * u2 + _2 * f6 + p3 * c3;
    w3 = P4 >>> 13, P4 &= 8191, P4 += b3 * (5 * v4) + g2 * (5 * m3) + x3 * (5 * y3) + E2 * (5 * h3) + A3 * (5 * d4), w3 += P4 >>> 13, P4 &= 8191;
    let $4 = w3 + O3 * d4 + T3 * l2 + C5 * a2 + _2 * u2 + p3 * f6;
    w3 = $4 >>> 13, $4 &= 8191, $4 += b3 * c3 + g2 * (5 * v4) + x3 * (5 * m3) + E2 * (5 * y3) + A3 * (5 * h3), w3 += $4 >>> 13, $4 &= 8191;
    let V3 = w3 + O3 * h3 + T3 * d4 + C5 * l2 + _2 * a2 + p3 * u2;
    w3 = V3 >>> 13, V3 &= 8191, V3 += b3 * f6 + g2 * c3 + x3 * (5 * v4) + E2 * (5 * m3) + A3 * (5 * y3), w3 += V3 >>> 13, V3 &= 8191;
    let q2 = w3 + O3 * y3 + T3 * h3 + C5 * d4 + _2 * l2 + p3 * a2;
    w3 = q2 >>> 13, q2 &= 8191, q2 += b3 * u2 + g2 * f6 + x3 * c3 + E2 * (5 * v4) + A3 * (5 * m3), w3 += q2 >>> 13, q2 &= 8191;
    let G4 = w3 + O3 * m3 + T3 * y3 + C5 * h3 + _2 * d4 + p3 * l2;
    w3 = G4 >>> 13, G4 &= 8191, G4 += b3 * a2 + g2 * u2 + x3 * f6 + E2 * c3 + A3 * (5 * v4), w3 += G4 >>> 13, G4 &= 8191;
    let M4 = w3 + O3 * v4 + T3 * m3 + C5 * y3 + _2 * h3 + p3 * d4;
    w3 = M4 >>> 13, M4 &= 8191, M4 += b3 * l2 + g2 * a2 + x3 * u2 + E2 * f6 + A3 * c3, w3 += M4 >>> 13, M4 &= 8191, w3 = (w3 << 2) + w3 | 0, w3 = w3 + B2 | 0, B2 = w3 & 8191, w3 = w3 >>> 13, I2 += w3, s[0] = B2, s[1] = I2, s[2] = N3, s[3] = D2, s[4] = P4, s[5] = $4, s[6] = V3, s[7] = q2, s[8] = G4, s[9] = M4;
  }
  finalize() {
    const { h: e, pad: n2 } = this, r2 = new Uint16Array(10);
    let o2 = e[1] >>> 13;
    e[1] &= 8191;
    for (let c3 = 2; c3 < 10; c3++) e[c3] += o2, o2 = e[c3] >>> 13, e[c3] &= 8191;
    e[0] += o2 * 5, o2 = e[0] >>> 13, e[0] &= 8191, e[1] += o2, o2 = e[1] >>> 13, e[1] &= 8191, e[2] += o2, r2[0] = e[0] + 5, o2 = r2[0] >>> 13, r2[0] &= 8191;
    for (let c3 = 1; c3 < 10; c3++) r2[c3] = e[c3] + o2, o2 = r2[c3] >>> 13, r2[c3] &= 8191;
    r2[9] -= 8192;
    let s = (o2 ^ 1) - 1;
    for (let c3 = 0; c3 < 10; c3++) r2[c3] &= s;
    s = ~s;
    for (let c3 = 0; c3 < 10; c3++) e[c3] = e[c3] & s | r2[c3];
    e[0] = (e[0] | e[1] << 13) & 65535, e[1] = (e[1] >>> 3 | e[2] << 10) & 65535, e[2] = (e[2] >>> 6 | e[3] << 7) & 65535, e[3] = (e[3] >>> 9 | e[4] << 4) & 65535, e[4] = (e[4] >>> 12 | e[5] << 1 | e[6] << 14) & 65535, e[5] = (e[6] >>> 2 | e[7] << 11) & 65535, e[6] = (e[7] >>> 5 | e[8] << 8) & 65535, e[7] = (e[8] >>> 8 | e[9] << 5) & 65535;
    let i3 = e[0] + n2[0];
    e[0] = i3 & 65535;
    for (let c3 = 1; c3 < 8; c3++) i3 = (e[c3] + n2[c3] | 0) + (i3 >>> 16) | 0, e[c3] = i3 & 65535;
    Qt(r2);
  }
  update(e) {
    ho(this), e = En(e), ot(e);
    const { buffer: n2, blockLen: r2 } = this, o2 = e.length;
    for (let s = 0; s < o2; ) {
      const i3 = Math.min(r2 - this.pos, o2 - s);
      if (i3 === r2) {
        for (; r2 <= o2 - s; s += r2) this.process(e, s);
        continue;
      }
      n2.set(e.subarray(s, s + i3), this.pos), this.pos += i3, s += i3, this.pos === r2 && (this.process(n2, 0, false), this.pos = 0);
    }
    return this;
  }
  destroy() {
    Qt(this.h, this.r, this.buffer, this.pad);
  }
  digestInto(e) {
    ho(this), Gc(e, this), this.finished = true;
    const { buffer: n2, h: r2 } = this;
    let { pos: o2 } = this;
    if (o2) {
      for (n2[o2++] = 1; o2 < 16; o2++) n2[o2] = 0;
      this.process(n2, 0, true);
    }
    this.finalize();
    let s = 0;
    for (let i3 = 0; i3 < 8; i3++) e[s++] = r2[i3] >>> 0, e[s++] = r2[i3] >>> 8;
    return e;
  }
  digest() {
    const { buffer: e, outputLen: n2 } = this;
    this.digestInto(e);
    const r2 = e.slice(0, n2);
    return this.destroy(), r2;
  }
};
function lf(t) {
  const e = (r2, o2) => t(o2).update(En(r2)).digest(), n2 = t(new Uint8Array(32));
  return e.outputLen = n2.outputLen, e.blockLen = n2.blockLen, e.create = (r2) => t(r2), e;
}
var df = lf((t) => new uf(t));
function hf(t, e, n2, r2, o2, s = 20) {
  let i3 = t[0], c3 = t[1], f6 = t[2], u2 = t[3], a2 = e[0], l2 = e[1], d4 = e[2], h3 = e[3], y3 = e[4], m3 = e[5], v4 = e[6], U3 = e[7], F2 = o2, R4 = n2[0], Z2 = n2[1], H2 = n2[2], j3 = i3, L2 = c3, k2 = f6, O3 = u2, T3 = a2, C5 = l2, _2 = d4, p3 = h3, b3 = y3, g2 = m3, x3 = v4, E2 = U3, A3 = F2, w3 = R4, B2 = Z2, I2 = H2;
  for (let D2 = 0; D2 < s; D2 += 2) j3 = j3 + T3 | 0, A3 = K(A3 ^ j3, 16), b3 = b3 + A3 | 0, T3 = K(T3 ^ b3, 12), j3 = j3 + T3 | 0, A3 = K(A3 ^ j3, 8), b3 = b3 + A3 | 0, T3 = K(T3 ^ b3, 7), L2 = L2 + C5 | 0, w3 = K(w3 ^ L2, 16), g2 = g2 + w3 | 0, C5 = K(C5 ^ g2, 12), L2 = L2 + C5 | 0, w3 = K(w3 ^ L2, 8), g2 = g2 + w3 | 0, C5 = K(C5 ^ g2, 7), k2 = k2 + _2 | 0, B2 = K(B2 ^ k2, 16), x3 = x3 + B2 | 0, _2 = K(_2 ^ x3, 12), k2 = k2 + _2 | 0, B2 = K(B2 ^ k2, 8), x3 = x3 + B2 | 0, _2 = K(_2 ^ x3, 7), O3 = O3 + p3 | 0, I2 = K(I2 ^ O3, 16), E2 = E2 + I2 | 0, p3 = K(p3 ^ E2, 12), O3 = O3 + p3 | 0, I2 = K(I2 ^ O3, 8), E2 = E2 + I2 | 0, p3 = K(p3 ^ E2, 7), j3 = j3 + C5 | 0, I2 = K(I2 ^ j3, 16), x3 = x3 + I2 | 0, C5 = K(C5 ^ x3, 12), j3 = j3 + C5 | 0, I2 = K(I2 ^ j3, 8), x3 = x3 + I2 | 0, C5 = K(C5 ^ x3, 7), L2 = L2 + _2 | 0, A3 = K(A3 ^ L2, 16), E2 = E2 + A3 | 0, _2 = K(_2 ^ E2, 12), L2 = L2 + _2 | 0, A3 = K(A3 ^ L2, 8), E2 = E2 + A3 | 0, _2 = K(_2 ^ E2, 7), k2 = k2 + p3 | 0, w3 = K(w3 ^ k2, 16), b3 = b3 + w3 | 0, p3 = K(p3 ^ b3, 12), k2 = k2 + p3 | 0, w3 = K(w3 ^ k2, 8), b3 = b3 + w3 | 0, p3 = K(p3 ^ b3, 7), O3 = O3 + T3 | 0, B2 = K(B2 ^ O3, 16), g2 = g2 + B2 | 0, T3 = K(T3 ^ g2, 12), O3 = O3 + T3 | 0, B2 = K(B2 ^ O3, 8), g2 = g2 + B2 | 0, T3 = K(T3 ^ g2, 7);
  let N3 = 0;
  r2[N3++] = i3 + j3 | 0, r2[N3++] = c3 + L2 | 0, r2[N3++] = f6 + k2 | 0, r2[N3++] = u2 + O3 | 0, r2[N3++] = a2 + T3 | 0, r2[N3++] = l2 + C5 | 0, r2[N3++] = d4 + _2 | 0, r2[N3++] = h3 + p3 | 0, r2[N3++] = y3 + b3 | 0, r2[N3++] = m3 + g2 | 0, r2[N3++] = v4 + x3 | 0, r2[N3++] = U3 + E2 | 0, r2[N3++] = F2 + A3 | 0, r2[N3++] = R4 + w3 | 0, r2[N3++] = Z2 + B2 | 0, r2[N3++] = H2 + I2 | 0;
}
var pf = af(hf, { counterRight: false, counterLength: 4, allowShortKeys: false });
var gf = new Uint8Array(16);
var wo = (t, e) => {
  t.update(e);
  const n2 = e.length % 16;
  n2 && t.update(gf.subarray(n2));
};
var bf = new Uint8Array(32);
function vo(t, e, n2, r2, o2) {
  const s = t(e, n2, bf), i3 = df.create(s);
  o2 && wo(i3, o2), wo(i3, r2);
  const c3 = tf(r2.length, o2 ? o2.length : 0, true);
  i3.update(c3);
  const f6 = i3.digest();
  return Qt(s, c3), f6;
}
var yf = (t) => (e, n2, r2) => ({ encrypt(s, i3) {
  const c3 = s.length;
  i3 = po(c3 + 16, i3, false), i3.set(s);
  const f6 = i3.subarray(0, -16);
  t(e, n2, f6, f6, 1);
  const u2 = vo(t, e, n2, f6, r2);
  return i3.set(u2, c3), Qt(u2), i3;
}, decrypt(s, i3) {
  i3 = po(s.length - 16, i3, false);
  const c3 = s.subarray(0, -16), f6 = s.subarray(-16), u2 = vo(t, e, n2, c3, r2);
  if (!Jc(f6, u2)) throw new Error("invalid tag");
  return i3.set(s.subarray(0, -16)), t(e, n2, i3, i3, 1), Qt(u2), i3;
} });
var xo = Qc({ blockSize: 64, nonceLength: 12, tagLength: 16 }, yf(pf));
var Eo = class extends Re {
  constructor(e, n2) {
    super(), this.finished = false, this.destroyed = false, Ue(e);
    const r2 = pt(n2);
    if (this.iHash = e.create(), typeof this.iHash.update != "function") throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o2 = this.blockLen, s = new Uint8Array(o2);
    s.set(r2.length > o2 ? e.create().update(r2).digest() : r2);
    for (let i3 = 0; i3 < s.length; i3++) s[i3] ^= 54;
    this.iHash.update(s), this.oHash = e.create();
    for (let i3 = 0; i3 < s.length; i3++) s[i3] ^= 106;
    this.oHash.update(s), lt(s);
  }
  update(e) {
    return Nt(this), this.iHash.update(e), this;
  }
  digestInto(e) {
    Nt(this), ht(e, this.outputLen), this.finished = true, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();
  }
  digest() {
    const e = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e), e;
  }
  _cloneInto(e) {
    e || (e = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n2, iHash: r2, finished: o2, destroyed: s, blockLen: i3, outputLen: c3 } = this;
    return e = e, e.finished = o2, e.destroyed = s, e.blockLen = i3, e.outputLen = c3, e.oHash = n2._cloneInto(e.oHash), e.iHash = r2._cloneInto(e.iHash), e;
  }
  clone() {
    return this._cloneInto();
  }
  destroy() {
    this.destroyed = true, this.oHash.destroy(), this.iHash.destroy();
  }
};
var ke = (t, e, n2) => new Eo(t, e).update(n2).digest();
ke.create = (t, e) => new Eo(t, e);
function mf(t, e, n2) {
  return Ue(t), n2 === void 0 && (n2 = new Uint8Array(t.outputLen)), ke(t, pt(n2), pt(e));
}
var In = Uint8Array.from([0]);
var Bo = Uint8Array.of();
function wf(t, e, n2, r2 = 32) {
  Ue(t), mt(r2);
  const o2 = t.outputLen;
  if (r2 > 255 * o2) throw new Error("Length should be <= 255*HashLen");
  const s = Math.ceil(r2 / o2);
  n2 === void 0 && (n2 = Bo);
  const i3 = new Uint8Array(s * o2), c3 = ke.create(t, e), f6 = c3._cloneInto(), u2 = new Uint8Array(c3.outputLen);
  for (let a2 = 0; a2 < s; a2++) In[0] = a2 + 1, f6.update(a2 === 0 ? Bo : u2).update(n2).update(In).digestInto(u2), i3.set(u2, o2 * a2), c3._cloneInto(f6);
  return c3.destroy(), f6.destroy(), lt(u2, In), i3.slice(0, r2);
}
var vf = (t, e, n2, r2, o2) => wf(t, mf(t, e, n2), r2, o2);
var Pe = $e;
var Sn = BigInt(0);
var On = BigInt(1);
function He(t, e = "") {
  if (typeof t != "boolean") {
    const n2 = e && `"${e}"`;
    throw new Error(n2 + "expected boolean, got type=" + typeof t);
  }
  return t;
}
function Kt(t, e, n2 = "") {
  const r2 = Ne(t), o2 = t?.length, s = e !== void 0;
  if (!r2 || s && o2 !== e) {
    const i3 = n2 && `"${n2}" `, c3 = s ? ` of length ${e}` : "", f6 = r2 ? `length=${o2}` : `type=${typeof t}`;
    throw new Error(i3 + "expected Uint8Array" + c3 + ", got " + f6);
  }
  return t;
}
function De(t) {
  const e = t.toString(16);
  return e.length & 1 ? "0" + e : e;
}
function Ao(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  return t === "" ? Sn : BigInt("0x" + t);
}
function Ve(t) {
  return Ao(Jt(t));
}
function Me(t) {
  return ht(t), Ao(Jt(Uint8Array.from(t).reverse()));
}
function Nn(t, e) {
  return _e(t.toString(16).padStart(e * 2, "0"));
}
function Un(t, e) {
  return Nn(t, e).reverse();
}
function tt(t, e, n2) {
  let r2;
  if (typeof e == "string") try {
    r2 = _e(e);
  } catch (s) {
    throw new Error(t + " must be hex string or Uint8Array, cause: " + s);
  }
  else if (Ne(e)) r2 = Uint8Array.from(e);
  else throw new Error(t + " must be hex string or Uint8Array");
  const o2 = r2.length;
  if (typeof n2 == "number" && o2 !== n2) throw new Error(t + " of length " + n2 + " expected, got " + o2);
  return r2;
}
var _n = (t) => typeof t == "bigint" && Sn <= t;
function xf(t, e, n2) {
  return _n(t) && _n(e) && _n(n2) && e <= t && t < n2;
}
function Rn(t, e, n2, r2) {
  if (!xf(e, n2, r2)) throw new Error("expected valid " + t + ": " + n2 + " <= n < " + r2 + ", got " + e);
}
function Io(t) {
  let e;
  for (e = 0; t > Sn; t >>= On, e += 1) ;
  return e;
}
var ye = (t) => (On << BigInt(t)) - On;
function Ef(t, e, n2) {
  if (typeof t != "number" || t < 2) throw new Error("hashLen must be a number");
  if (typeof e != "number" || e < 2) throw new Error("qByteLen must be a number");
  if (typeof n2 != "function") throw new Error("hmacFn must be a function");
  const r2 = (h3) => new Uint8Array(h3), o2 = (h3) => Uint8Array.of(h3);
  let s = r2(t), i3 = r2(t), c3 = 0;
  const f6 = () => {
    s.fill(1), i3.fill(0), c3 = 0;
  }, u2 = (...h3) => n2(i3, s, ...h3), a2 = (h3 = r2(0)) => {
    i3 = u2(o2(0), h3), s = u2(), h3.length !== 0 && (i3 = u2(o2(1), h3), s = u2());
  }, l2 = () => {
    if (c3++ >= 1e3) throw new Error("drbg: tried 1000 values");
    let h3 = 0;
    const y3 = [];
    for (; h3 < e; ) {
      s = u2();
      const m3 = s.slice();
      y3.push(m3), h3 += s.length;
    }
    return _t(...y3);
  };
  return (h3, y3) => {
    f6(), a2(h3);
    let m3;
    for (; !(m3 = y3(l2())); ) a2();
    return f6(), m3;
  };
}
function Ke(t, e, n2 = {}) {
  if (!t || typeof t != "object") throw new Error("expected valid options object");
  function r2(o2, s, i3) {
    const c3 = t[o2];
    if (i3 && c3 === void 0) return;
    const f6 = typeof c3;
    if (f6 !== s || c3 === null) throw new Error(`param "${o2}" is invalid: expected ${s}, got ${f6}`);
  }
  Object.entries(e).forEach(([o2, s]) => r2(o2, s, false)), Object.entries(n2).forEach(([o2, s]) => r2(o2, s, true));
}
function So(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return (n2, ...r2) => {
    const o2 = e.get(n2);
    if (o2 !== void 0) return o2;
    const s = t(n2, ...r2);
    return e.set(n2, s), s;
  };
}
var st = BigInt(0);
var nt = BigInt(1);
var qt = BigInt(2);
var Oo = BigInt(3);
var No = BigInt(4);
var Uo = BigInt(5);
var Bf = BigInt(7);
var _o = BigInt(8);
var Af = BigInt(9);
var Ro = BigInt(16);
function ct(t, e) {
  const n2 = t % e;
  return n2 >= st ? n2 : e + n2;
}
function gt(t, e, n2) {
  let r2 = t;
  for (; e-- > st; ) r2 *= r2, r2 %= n2;
  return r2;
}
function $o(t, e) {
  if (t === st) throw new Error("invert: expected non-zero number");
  if (e <= st) throw new Error("invert: expected positive modulus, got " + e);
  let n2 = ct(t, e), r2 = e, o2 = st, s = nt;
  for (; n2 !== st; ) {
    const c3 = r2 / n2, f6 = r2 % n2, u2 = o2 - s * c3;
    r2 = n2, n2 = f6, o2 = s, s = u2;
  }
  if (r2 !== nt) throw new Error("invert: does not exist");
  return ct(o2, e);
}
function $n(t, e, n2) {
  if (!t.eql(t.sqr(e), n2)) throw new Error("Cannot find square root");
}
function To(t, e) {
  const n2 = (t.ORDER + nt) / No, r2 = t.pow(e, n2);
  return $n(t, r2, e), r2;
}
function If(t, e) {
  const n2 = (t.ORDER - Uo) / _o, r2 = t.mul(e, qt), o2 = t.pow(r2, n2), s = t.mul(e, o2), i3 = t.mul(t.mul(s, qt), o2), c3 = t.mul(s, t.sub(i3, t.ONE));
  return $n(t, c3, e), c3;
}
function Sf(t) {
  const e = Ht(t), n2 = Co(t), r2 = n2(e, e.neg(e.ONE)), o2 = n2(e, r2), s = n2(e, e.neg(r2)), i3 = (t + Bf) / Ro;
  return (c3, f6) => {
    let u2 = c3.pow(f6, i3), a2 = c3.mul(u2, r2);
    const l2 = c3.mul(u2, o2), d4 = c3.mul(u2, s), h3 = c3.eql(c3.sqr(a2), f6), y3 = c3.eql(c3.sqr(l2), f6);
    u2 = c3.cmov(u2, a2, h3), a2 = c3.cmov(d4, l2, y3);
    const m3 = c3.eql(c3.sqr(a2), f6), v4 = c3.cmov(u2, a2, m3);
    return $n(c3, v4, f6), v4;
  };
}
function Co(t) {
  if (t < Oo) throw new Error("sqrt is not defined for small field");
  let e = t - nt, n2 = 0;
  for (; e % qt === st; ) e /= qt, n2++;
  let r2 = qt;
  const o2 = Ht(t);
  for (; Lo(o2, r2) === 1; ) if (r2++ > 1e3) throw new Error("Cannot find square root: probably non-prime P");
  if (n2 === 1) return To;
  let s = o2.pow(r2, e);
  const i3 = (e + nt) / qt;
  return function(f6, u2) {
    if (f6.is0(u2)) return u2;
    if (Lo(f6, u2) !== 1) throw new Error("Cannot find square root");
    let a2 = n2, l2 = f6.mul(f6.ONE, s), d4 = f6.pow(u2, e), h3 = f6.pow(u2, i3);
    for (; !f6.eql(d4, f6.ONE); ) {
      if (f6.is0(d4)) return f6.ZERO;
      let y3 = 1, m3 = f6.sqr(d4);
      for (; !f6.eql(m3, f6.ONE); ) if (y3++, m3 = f6.sqr(m3), y3 === a2) throw new Error("Cannot find square root");
      const v4 = nt << BigInt(a2 - y3 - 1), U3 = f6.pow(l2, v4);
      a2 = y3, l2 = f6.sqr(U3), d4 = f6.mul(d4, l2), h3 = f6.mul(h3, U3);
    }
    return h3;
  };
}
function Of(t) {
  return t % No === Oo ? To : t % _o === Uo ? If : t % Ro === Af ? Sf(t) : Co(t);
}
var Nf = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function Uf(t) {
  const e = { ORDER: "bigint", MASK: "bigint", BYTES: "number", BITS: "number" }, n2 = Nf.reduce((r2, o2) => (r2[o2] = "function", r2), e);
  return Ke(t, n2), t;
}
function _f(t, e, n2) {
  if (n2 < st) throw new Error("invalid exponent, negatives unsupported");
  if (n2 === st) return t.ONE;
  if (n2 === nt) return e;
  let r2 = t.ONE, o2 = e;
  for (; n2 > st; ) n2 & nt && (r2 = t.mul(r2, o2)), o2 = t.sqr(o2), n2 >>= nt;
  return r2;
}
function jo(t, e, n2 = false) {
  const r2 = new Array(e.length).fill(n2 ? t.ZERO : void 0), o2 = e.reduce((i3, c3, f6) => t.is0(c3) ? i3 : (r2[f6] = i3, t.mul(i3, c3)), t.ONE), s = t.inv(o2);
  return e.reduceRight((i3, c3, f6) => t.is0(c3) ? i3 : (r2[f6] = t.mul(i3, r2[f6]), t.mul(i3, c3)), s), r2;
}
function Lo(t, e) {
  const n2 = (t.ORDER - nt) / qt, r2 = t.pow(e, n2), o2 = t.eql(r2, t.ONE), s = t.eql(r2, t.ZERO), i3 = t.eql(r2, t.neg(t.ONE));
  if (!o2 && !s && !i3) throw new Error("invalid Legendre symbol result");
  return o2 ? 1 : s ? 0 : -1;
}
function ko(t, e) {
  e !== void 0 && mt(e);
  const n2 = e !== void 0 ? e : t.toString(2).length, r2 = Math.ceil(n2 / 8);
  return { nBitLength: n2, nByteLength: r2 };
}
function Ht(t, e, n2 = false, r2 = {}) {
  if (t <= st) throw new Error("invalid field: expected ORDER > 0, got " + t);
  let o2, s, i3 = false, c3;
  if (typeof e == "object" && e != null) {
    if (r2.sqrt || n2) throw new Error("cannot specify opts in two arguments");
    const d4 = e;
    d4.BITS && (o2 = d4.BITS), d4.sqrt && (s = d4.sqrt), typeof d4.isLE == "boolean" && (n2 = d4.isLE), typeof d4.modFromBytes == "boolean" && (i3 = d4.modFromBytes), c3 = d4.allowedLengths;
  } else typeof e == "number" && (o2 = e), r2.sqrt && (s = r2.sqrt);
  const { nBitLength: f6, nByteLength: u2 } = ko(t, o2);
  if (u2 > 2048) throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a2;
  const l2 = Object.freeze({ ORDER: t, isLE: n2, BITS: f6, BYTES: u2, MASK: ye(f6), ZERO: st, ONE: nt, allowedLengths: c3, create: (d4) => ct(d4, t), isValid: (d4) => {
    if (typeof d4 != "bigint") throw new Error("invalid field element: expected bigint, got " + typeof d4);
    return st <= d4 && d4 < t;
  }, is0: (d4) => d4 === st, isValidNot0: (d4) => !l2.is0(d4) && l2.isValid(d4), isOdd: (d4) => (d4 & nt) === nt, neg: (d4) => ct(-d4, t), eql: (d4, h3) => d4 === h3, sqr: (d4) => ct(d4 * d4, t), add: (d4, h3) => ct(d4 + h3, t), sub: (d4, h3) => ct(d4 - h3, t), mul: (d4, h3) => ct(d4 * h3, t), pow: (d4, h3) => _f(l2, d4, h3), div: (d4, h3) => ct(d4 * $o(h3, t), t), sqrN: (d4) => d4 * d4, addN: (d4, h3) => d4 + h3, subN: (d4, h3) => d4 - h3, mulN: (d4, h3) => d4 * h3, inv: (d4) => $o(d4, t), sqrt: s || ((d4) => (a2 || (a2 = Of(t)), a2(l2, d4))), toBytes: (d4) => n2 ? Un(d4, u2) : Nn(d4, u2), fromBytes: (d4, h3 = true) => {
    if (c3) {
      if (!c3.includes(d4.length) || d4.length > u2) throw new Error("Field.fromBytes: expected " + c3 + " bytes, got " + d4.length);
      const m3 = new Uint8Array(u2);
      m3.set(d4, n2 ? 0 : m3.length - d4.length), d4 = m3;
    }
    if (d4.length !== u2) throw new Error("Field.fromBytes: expected " + u2 + " bytes, got " + d4.length);
    let y3 = n2 ? Me(d4) : Ve(d4);
    if (i3 && (y3 = ct(y3, t)), !h3 && !l2.isValid(y3)) throw new Error("invalid field element: outside of range 0..ORDER");
    return y3;
  }, invertBatch: (d4) => jo(l2, d4), cmov: (d4, h3, y3) => y3 ? h3 : d4 });
  return Object.freeze(l2);
}
function Po2(t) {
  if (typeof t != "bigint") throw new Error("field order must be bigint");
  const e = t.toString(2).length;
  return Math.ceil(e / 8);
}
function Ho(t) {
  const e = Po2(t);
  return e + Math.ceil(e / 2);
}
function Rf(t, e, n2 = false) {
  const r2 = t.length, o2 = Po2(e), s = Ho(e);
  if (r2 < 16 || r2 < s || r2 > 1024) throw new Error("expected " + s + "-1024 bytes of input, got " + r2);
  const i3 = n2 ? Me(t) : Ve(t), c3 = ct(i3, e - nt) + nt;
  return n2 ? Un(c3, o2) : Nn(c3, o2);
}
var te = BigInt(0);
var Ft = BigInt(1);
function qe(t, e) {
  const n2 = e.negate();
  return t ? n2 : e;
}
function Tn(t, e) {
  const n2 = jo(t.Fp, e.map((r2) => r2.Z));
  return e.map((r2, o2) => t.fromAffine(r2.toAffine(n2[o2])));
}
function Do(t, e) {
  if (!Number.isSafeInteger(t) || t <= 0 || t > e) throw new Error("invalid window size, expected [1.." + e + "], got W=" + t);
}
function Cn(t, e) {
  Do(t, e);
  const n2 = Math.ceil(e / t) + 1, r2 = 2 ** (t - 1), o2 = 2 ** t, s = ye(t), i3 = BigInt(t);
  return { windows: n2, windowSize: r2, mask: s, maxNumber: o2, shiftBy: i3 };
}
function Vo(t, e, n2) {
  const { windowSize: r2, mask: o2, maxNumber: s, shiftBy: i3 } = n2;
  let c3 = Number(t & o2), f6 = t >> i3;
  c3 > r2 && (c3 -= s, f6 += Ft);
  const u2 = e * r2, a2 = u2 + Math.abs(c3) - 1, l2 = c3 === 0, d4 = c3 < 0, h3 = e % 2 !== 0;
  return { nextN: f6, offset: a2, isZero: l2, isNeg: d4, isNegF: h3, offsetF: u2 };
}
function $f(t, e) {
  if (!Array.isArray(t)) throw new Error("array expected");
  t.forEach((n2, r2) => {
    if (!(n2 instanceof e)) throw new Error("invalid point at index " + r2);
  });
}
function Tf(t, e) {
  if (!Array.isArray(t)) throw new Error("array of scalars expected");
  t.forEach((n2, r2) => {
    if (!e.isValid(n2)) throw new Error("invalid scalar at index " + r2);
  });
}
var jn = /* @__PURE__ */ new WeakMap();
var Mo = /* @__PURE__ */ new WeakMap();
function Ln(t) {
  return Mo.get(t) || 1;
}
function Ko(t) {
  if (t !== te) throw new Error("invalid wNAF");
}
var Cf = class {
  constructor(e, n2) {
    this.BASE = e.BASE, this.ZERO = e.ZERO, this.Fn = e.Fn, this.bits = n2;
  }
  _unsafeLadder(e, n2, r2 = this.ZERO) {
    let o2 = e;
    for (; n2 > te; ) n2 & Ft && (r2 = r2.add(o2)), o2 = o2.double(), n2 >>= Ft;
    return r2;
  }
  precomputeWindow(e, n2) {
    const { windows: r2, windowSize: o2 } = Cn(n2, this.bits), s = [];
    let i3 = e, c3 = i3;
    for (let f6 = 0; f6 < r2; f6++) {
      c3 = i3, s.push(c3);
      for (let u2 = 1; u2 < o2; u2++) c3 = c3.add(i3), s.push(c3);
      i3 = c3.double();
    }
    return s;
  }
  wNAF(e, n2, r2) {
    if (!this.Fn.isValid(r2)) throw new Error("invalid scalar");
    let o2 = this.ZERO, s = this.BASE;
    const i3 = Cn(e, this.bits);
    for (let c3 = 0; c3 < i3.windows; c3++) {
      const { nextN: f6, offset: u2, isZero: a2, isNeg: l2, isNegF: d4, offsetF: h3 } = Vo(r2, c3, i3);
      r2 = f6, a2 ? s = s.add(qe(d4, n2[h3])) : o2 = o2.add(qe(l2, n2[u2]));
    }
    return Ko(r2), { p: o2, f: s };
  }
  wNAFUnsafe(e, n2, r2, o2 = this.ZERO) {
    const s = Cn(e, this.bits);
    for (let i3 = 0; i3 < s.windows && r2 !== te; i3++) {
      const { nextN: c3, offset: f6, isZero: u2, isNeg: a2 } = Vo(r2, i3, s);
      if (r2 = c3, !u2) {
        const l2 = n2[f6];
        o2 = o2.add(a2 ? l2.negate() : l2);
      }
    }
    return Ko(r2), o2;
  }
  getPrecomputes(e, n2, r2) {
    let o2 = jn.get(n2);
    return o2 || (o2 = this.precomputeWindow(n2, e), e !== 1 && (typeof r2 == "function" && (o2 = r2(o2)), jn.set(n2, o2))), o2;
  }
  cached(e, n2, r2) {
    const o2 = Ln(e);
    return this.wNAF(o2, this.getPrecomputes(o2, e, r2), n2);
  }
  unsafe(e, n2, r2, o2) {
    const s = Ln(e);
    return s === 1 ? this._unsafeLadder(e, n2, o2) : this.wNAFUnsafe(s, this.getPrecomputes(s, e, r2), n2, o2);
  }
  createCache(e, n2) {
    Do(n2, this.bits), Mo.set(e, n2), jn.delete(e);
  }
  hasCache(e) {
    return Ln(e) !== 1;
  }
};
function jf(t, e, n2, r2) {
  let o2 = e, s = t.ZERO, i3 = t.ZERO;
  for (; n2 > te || r2 > te; ) n2 & Ft && (s = s.add(o2)), r2 & Ft && (i3 = i3.add(o2)), o2 = o2.double(), n2 >>= Ft, r2 >>= Ft;
  return { p1: s, p2: i3 };
}
function Lf(t, e, n2, r2) {
  $f(n2, t), Tf(r2, e);
  const o2 = n2.length, s = r2.length;
  if (o2 !== s) throw new Error("arrays of points and scalars must have equal length");
  const i3 = t.ZERO, c3 = Io(BigInt(o2));
  let f6 = 1;
  c3 > 12 ? f6 = c3 - 3 : c3 > 4 ? f6 = c3 - 2 : c3 > 0 && (f6 = 2);
  const u2 = ye(f6), a2 = new Array(Number(u2) + 1).fill(i3), l2 = Math.floor((e.BITS - 1) / f6) * f6;
  let d4 = i3;
  for (let h3 = l2; h3 >= 0; h3 -= f6) {
    a2.fill(i3);
    for (let m3 = 0; m3 < s; m3++) {
      const v4 = r2[m3], U3 = Number(v4 >> BigInt(h3) & u2);
      a2[U3] = a2[U3].add(n2[m3]);
    }
    let y3 = i3;
    for (let m3 = a2.length - 1, v4 = i3; m3 > 0; m3--) v4 = v4.add(a2[m3]), y3 = y3.add(v4);
    if (d4 = d4.add(y3), h3 !== 0) for (let m3 = 0; m3 < f6; m3++) d4 = d4.double();
  }
  return d4;
}
function qo(t, e, n2) {
  if (e) {
    if (e.ORDER !== t) throw new Error("Field.ORDER must match order: Fp == p, Fn == n");
    return Uf(e), e;
  } else return Ht(t, { isLE: n2 });
}
function kf(t, e, n2 = {}, r2) {
  if (r2 === void 0 && (r2 = t === "edwards"), !e || typeof e != "object") throw new Error(`expected valid ${t} CURVE object`);
  for (const f6 of ["p", "n", "h"]) {
    const u2 = e[f6];
    if (!(typeof u2 == "bigint" && u2 > te)) throw new Error(`CURVE.${f6} must be positive bigint`);
  }
  const o2 = qo(e.p, n2.Fp, r2), s = qo(e.n, n2.Fn, r2), c3 = ["Gx", "Gy", "a", t === "weierstrass" ? "b" : "d"];
  for (const f6 of c3) if (!o2.isValid(e[f6])) throw new Error(`CURVE.${f6} must be valid field element of CURVE.Fp`);
  return e = Object.freeze(Object.assign({}, e)), { CURVE: e, Fp: o2, Fn: s };
}
BigInt(0), BigInt(1), BigInt(2), BigInt(8), kr("HashToScalar-");
var me = BigInt(0);
var ee = BigInt(1);
var Fe = BigInt(2);
function Pf(t) {
  return Ke(t, { adjustScalarBytes: "function", powPminus2: "function" }), Object.freeze({ ...t });
}
function Hf(t) {
  const e = Pf(t), { P: n2, type: r2, adjustScalarBytes: o2, powPminus2: s, randomBytes: i3 } = e, c3 = r2 === "x25519";
  if (!c3 && r2 !== "x448") throw new Error("invalid type");
  const f6 = i3 || Mt, u2 = c3 ? 255 : 448, a2 = c3 ? 32 : 56, l2 = BigInt(c3 ? 9 : 5), d4 = BigInt(c3 ? 121665 : 39081), h3 = c3 ? Fe ** BigInt(254) : Fe ** BigInt(447), y3 = c3 ? BigInt(8) * Fe ** BigInt(251) - ee : BigInt(4) * Fe ** BigInt(445) - ee, m3 = h3 + y3 + ee, v4 = (p3) => ct(p3, n2), U3 = F2(l2);
  function F2(p3) {
    return Un(v4(p3), a2);
  }
  function R4(p3) {
    const b3 = tt("u coordinate", p3, a2);
    return c3 && (b3[31] &= 127), v4(Me(b3));
  }
  function Z2(p3) {
    return Me(o2(tt("scalar", p3, a2)));
  }
  function H2(p3, b3) {
    const g2 = k2(R4(b3), Z2(p3));
    if (g2 === me) throw new Error("invalid private or public key received");
    return F2(g2);
  }
  function j3(p3) {
    return H2(p3, U3);
  }
  function L2(p3, b3, g2) {
    const x3 = v4(p3 * (b3 - g2));
    return b3 = v4(b3 - x3), g2 = v4(g2 + x3), { x_2: b3, x_3: g2 };
  }
  function k2(p3, b3) {
    Rn("u", p3, me, n2), Rn("scalar", b3, h3, m3);
    const g2 = b3, x3 = p3;
    let E2 = ee, A3 = me, w3 = p3, B2 = ee, I2 = me;
    for (let D2 = BigInt(u2 - 1); D2 >= me; D2--) {
      const P4 = g2 >> D2 & ee;
      I2 ^= P4, { x_2: E2, x_3: w3 } = L2(I2, E2, w3), { x_2: A3, x_3: B2 } = L2(I2, A3, B2), I2 = P4;
      const $4 = E2 + A3, V3 = v4($4 * $4), q2 = E2 - A3, G4 = v4(q2 * q2), M4 = V3 - G4, Y3 = w3 + B2, Yt3 = w3 - B2, ce3 = v4(Yt3 * $4), fe4 = v4(Y3 * q2), Qn2 = ce3 + fe4, tr = ce3 - fe4;
      w3 = v4(Qn2 * Qn2), B2 = v4(x3 * v4(tr * tr)), E2 = v4(V3 * G4), A3 = v4(M4 * (V3 + v4(d4 * M4)));
    }
    ({ x_2: E2, x_3: w3 } = L2(I2, E2, w3)), { x_2: A3, x_3: B2 } = L2(I2, A3, B2);
    const N3 = s(A3);
    return v4(E2 * N3);
  }
  const O3 = { secretKey: a2, publicKey: a2, seed: a2 }, T3 = (p3 = f6(a2)) => (ht(p3, O3.seed), p3);
  function C5(p3) {
    const b3 = T3(p3);
    return { secretKey: b3, publicKey: j3(b3) };
  }
  return { keygen: C5, getSharedSecret: (p3, b3) => H2(p3, b3), getPublicKey: (p3) => j3(p3), scalarMult: H2, scalarMultBase: j3, utils: { randomSecretKey: T3, randomPrivateKey: T3 }, GuBytes: U3.slice(), lengths: O3 };
}
var Df = BigInt(1);
var Fo = BigInt(2);
var Vf = BigInt(3);
var Mf = BigInt(5);
var Kf = BigInt(8);
var Zo = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed");
var qf = { p: Zo, n: BigInt("0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed"), h: Kf, a: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec"), d: BigInt("0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3"), Gx: BigInt("0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a"), Gy: BigInt("0x6666666666666666666666666666666666666666666666666666666666666658") };
function Ff(t) {
  const e = BigInt(10), n2 = BigInt(20), r2 = BigInt(40), o2 = BigInt(80), s = Zo, c3 = t * t % s * t % s, f6 = gt(c3, Fo, s) * c3 % s, u2 = gt(f6, Df, s) * t % s, a2 = gt(u2, Mf, s) * u2 % s, l2 = gt(a2, e, s) * a2 % s, d4 = gt(l2, n2, s) * l2 % s, h3 = gt(d4, r2, s) * d4 % s, y3 = gt(h3, o2, s) * h3 % s, m3 = gt(y3, o2, s) * h3 % s, v4 = gt(m3, e, s) * a2 % s;
  return { pow_p_5_8: gt(v4, Fo, s) * t % s, b2: c3 };
}
function Zf(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
var Gf = Ht(qf.p, { isLE: true });
var kn = (() => {
  const t = Gf.ORDER;
  return Hf({ P: t, type: "x25519", powPminus2: (e) => {
    const { pow_p_5_8: n2, b2: r2 } = Ff(e);
    return ct(gt(n2, Vf, t) * r2, t);
  }, adjustScalarBytes: Zf });
})();
var Go = (t, e) => (t + (t >= 0 ? e : -e) / zo) / e;
function zf(t, e, n2) {
  const [[r2, o2], [s, i3]] = e, c3 = Go(i3 * t, n2), f6 = Go(-o2 * t, n2);
  let u2 = t - c3 * r2 - f6 * s, a2 = -c3 * o2 - f6 * i3;
  const l2 = u2 < Et, d4 = a2 < Et;
  l2 && (u2 = -u2), d4 && (a2 = -a2);
  const h3 = ye(Math.ceil(Io(n2) / 2)) + ne;
  if (u2 < Et || u2 >= h3 || a2 < Et || a2 >= h3) throw new Error("splitScalar (endomorphism): failed, k=" + t);
  return { k1neg: l2, k1: u2, k2neg: d4, k2: a2 };
}
function Pn(t) {
  if (!["compact", "recovered", "der"].includes(t)) throw new Error('Signature format must be "compact", "recovered", or "der"');
  return t;
}
function Hn(t, e) {
  const n2 = {};
  for (let r2 of Object.keys(e)) n2[r2] = t[r2] === void 0 ? e[r2] : t[r2];
  return He(n2.lowS, "lowS"), He(n2.prehash, "prehash"), n2.format !== void 0 && Pn(n2.format), n2;
}
var Yf = class extends Error {
  constructor(e = "") {
    super(e);
  }
};
var xt = { Err: Yf, _tlv: { encode: (t, e) => {
  const { Err: n2 } = xt;
  if (t < 0 || t > 256) throw new n2("tlv.encode: wrong tag");
  if (e.length & 1) throw new n2("tlv.encode: unpadded data");
  const r2 = e.length / 2, o2 = De(r2);
  if (o2.length / 2 & 128) throw new n2("tlv.encode: long form length too big");
  const s = r2 > 127 ? De(o2.length / 2 | 128) : "";
  return De(t) + s + o2 + e;
}, decode(t, e) {
  const { Err: n2 } = xt;
  let r2 = 0;
  if (t < 0 || t > 256) throw new n2("tlv.encode: wrong tag");
  if (e.length < 2 || e[r2++] !== t) throw new n2("tlv.decode: wrong tlv");
  const o2 = e[r2++], s = !!(o2 & 128);
  let i3 = 0;
  if (!s) i3 = o2;
  else {
    const f6 = o2 & 127;
    if (!f6) throw new n2("tlv.decode(long): indefinite length not supported");
    if (f6 > 4) throw new n2("tlv.decode(long): byte length is too big");
    const u2 = e.subarray(r2, r2 + f6);
    if (u2.length !== f6) throw new n2("tlv.decode: length bytes not complete");
    if (u2[0] === 0) throw new n2("tlv.decode(long): zero leftmost byte");
    for (const a2 of u2) i3 = i3 << 8 | a2;
    if (r2 += f6, i3 < 128) throw new n2("tlv.decode(long): not minimal encoding");
  }
  const c3 = e.subarray(r2, r2 + i3);
  if (c3.length !== i3) throw new n2("tlv.decode: wrong value length");
  return { v: c3, l: e.subarray(r2 + i3) };
} }, _int: { encode(t) {
  const { Err: e } = xt;
  if (t < Et) throw new e("integer: negative integers are not allowed");
  let n2 = De(t);
  if (Number.parseInt(n2[0], 16) & 8 && (n2 = "00" + n2), n2.length & 1) throw new e("unexpected DER parsing assertion: unpadded hex");
  return n2;
}, decode(t) {
  const { Err: e } = xt;
  if (t[0] & 128) throw new e("invalid signature integer: negative");
  if (t[0] === 0 && !(t[1] & 128)) throw new e("invalid signature integer: unnecessary leading zero");
  return Ve(t);
} }, toSig(t) {
  const { Err: e, _int: n2, _tlv: r2 } = xt, o2 = tt("signature", t), { v: s, l: i3 } = r2.decode(48, o2);
  if (i3.length) throw new e("invalid signature: left bytes after parsing");
  const { v: c3, l: f6 } = r2.decode(2, s), { v: u2, l: a2 } = r2.decode(2, f6);
  if (a2.length) throw new e("invalid signature: left bytes after parsing");
  return { r: n2.decode(c3), s: n2.decode(u2) };
}, hexFromSig(t) {
  const { _tlv: e, _int: n2 } = xt, r2 = e.encode(2, n2.encode(t.r)), o2 = e.encode(2, n2.encode(t.s)), s = r2 + o2;
  return e.encode(48, s);
} };
var Et = BigInt(0);
var ne = BigInt(1);
var zo = BigInt(2);
var Ze = BigInt(3);
var Wf = BigInt(4);
function re(t, e) {
  const { BYTES: n2 } = t;
  let r2;
  if (typeof e == "bigint") r2 = e;
  else {
    let o2 = tt("private key", e);
    try {
      r2 = t.fromBytes(o2);
    } catch {
      throw new Error(`invalid private key: expected ui8a of size ${n2}, got ${typeof e}`);
    }
  }
  if (!t.isValidNot0(r2)) throw new Error("invalid private key: out of range [1..N-1]");
  return r2;
}
function Xf(t, e = {}) {
  const n2 = kf("weierstrass", t, e), { Fp: r2, Fn: o2 } = n2;
  let s = n2.CURVE;
  const { h: i3, n: c3 } = s;
  Ke(e, {}, { allowInfinityPoint: "boolean", clearCofactor: "function", isTorsionFree: "function", fromBytes: "function", toBytes: "function", endo: "object", wrapPrivateKey: "boolean" });
  const { endo: f6 } = e;
  if (f6 && (!r2.is0(s.a) || typeof f6.beta != "bigint" || !Array.isArray(f6.basises))) throw new Error('invalid endo: expected "beta": bigint and "basises": array');
  const u2 = Wo(r2, o2);
  function a2() {
    if (!r2.isOdd) throw new Error("compression is not supported: Field does not have .isOdd()");
  }
  function l2(_2, p3, b3) {
    const { x: g2, y: x3 } = p3.toAffine(), E2 = r2.toBytes(g2);
    if (He(b3, "isCompressed"), b3) {
      a2();
      const A3 = !r2.isOdd(x3);
      return _t(Yo(A3), E2);
    } else return _t(Uint8Array.of(4), E2, r2.toBytes(x3));
  }
  function d4(_2) {
    Kt(_2, void 0, "Point");
    const { publicKey: p3, publicKeyUncompressed: b3 } = u2, g2 = _2.length, x3 = _2[0], E2 = _2.subarray(1);
    if (g2 === p3 && (x3 === 2 || x3 === 3)) {
      const A3 = r2.fromBytes(E2);
      if (!r2.isValid(A3)) throw new Error("bad point: is not on curve, wrong x");
      const w3 = m3(A3);
      let B2;
      try {
        B2 = r2.sqrt(w3);
      } catch (D2) {
        const P4 = D2 instanceof Error ? ": " + D2.message : "";
        throw new Error("bad point: is not on curve, sqrt error" + P4);
      }
      a2();
      const I2 = r2.isOdd(B2);
      return (x3 & 1) === 1 !== I2 && (B2 = r2.neg(B2)), { x: A3, y: B2 };
    } else if (g2 === b3 && x3 === 4) {
      const A3 = r2.BYTES, w3 = r2.fromBytes(E2.subarray(0, A3)), B2 = r2.fromBytes(E2.subarray(A3, A3 * 2));
      if (!v4(w3, B2)) throw new Error("bad point: is not on curve");
      return { x: w3, y: B2 };
    } else throw new Error(`bad point: got length ${g2}, expected compressed=${p3} or uncompressed=${b3}`);
  }
  const h3 = e.toBytes || l2, y3 = e.fromBytes || d4;
  function m3(_2) {
    const p3 = r2.sqr(_2), b3 = r2.mul(p3, _2);
    return r2.add(r2.add(b3, r2.mul(_2, s.a)), s.b);
  }
  function v4(_2, p3) {
    const b3 = r2.sqr(p3), g2 = m3(_2);
    return r2.eql(b3, g2);
  }
  if (!v4(s.Gx, s.Gy)) throw new Error("bad curve params: generator point");
  const U3 = r2.mul(r2.pow(s.a, Ze), Wf), F2 = r2.mul(r2.sqr(s.b), BigInt(27));
  if (r2.is0(r2.add(U3, F2))) throw new Error("bad curve params: a or b");
  function R4(_2, p3, b3 = false) {
    if (!r2.isValid(p3) || b3 && r2.is0(p3)) throw new Error(`bad point coordinate ${_2}`);
    return p3;
  }
  function Z2(_2) {
    if (!(_2 instanceof O3)) throw new Error("ProjectivePoint expected");
  }
  function H2(_2) {
    if (!f6 || !f6.basises) throw new Error("no endo");
    return zf(_2, f6.basises, o2.ORDER);
  }
  const j3 = So((_2, p3) => {
    const { X: b3, Y: g2, Z: x3 } = _2;
    if (r2.eql(x3, r2.ONE)) return { x: b3, y: g2 };
    const E2 = _2.is0();
    p3 == null && (p3 = E2 ? r2.ONE : r2.inv(x3));
    const A3 = r2.mul(b3, p3), w3 = r2.mul(g2, p3), B2 = r2.mul(x3, p3);
    if (E2) return { x: r2.ZERO, y: r2.ZERO };
    if (!r2.eql(B2, r2.ONE)) throw new Error("invZ was invalid");
    return { x: A3, y: w3 };
  }), L2 = So((_2) => {
    if (_2.is0()) {
      if (e.allowInfinityPoint && !r2.is0(_2.Y)) return;
      throw new Error("bad point: ZERO");
    }
    const { x: p3, y: b3 } = _2.toAffine();
    if (!r2.isValid(p3) || !r2.isValid(b3)) throw new Error("bad point: x or y not field elements");
    if (!v4(p3, b3)) throw new Error("bad point: equation left != right");
    if (!_2.isTorsionFree()) throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  function k2(_2, p3, b3, g2, x3) {
    return b3 = new O3(r2.mul(b3.X, _2), b3.Y, b3.Z), p3 = qe(g2, p3), b3 = qe(x3, b3), p3.add(b3);
  }
  class O3 {
    constructor(p3, b3, g2) {
      this.X = R4("x", p3), this.Y = R4("y", b3, true), this.Z = R4("z", g2), Object.freeze(this);
    }
    static CURVE() {
      return s;
    }
    static fromAffine(p3) {
      const { x: b3, y: g2 } = p3 || {};
      if (!p3 || !r2.isValid(b3) || !r2.isValid(g2)) throw new Error("invalid affine point");
      if (p3 instanceof O3) throw new Error("projective point not allowed");
      return r2.is0(b3) && r2.is0(g2) ? O3.ZERO : new O3(b3, g2, r2.ONE);
    }
    static fromBytes(p3) {
      const b3 = O3.fromAffine(y3(Kt(p3, void 0, "point")));
      return b3.assertValidity(), b3;
    }
    static fromHex(p3) {
      return O3.fromBytes(tt("pointHex", p3));
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    precompute(p3 = 8, b3 = true) {
      return C5.createCache(this, p3), b3 || this.multiply(Ze), this;
    }
    assertValidity() {
      L2(this);
    }
    hasEvenY() {
      const { y: p3 } = this.toAffine();
      if (!r2.isOdd) throw new Error("Field doesn't support isOdd");
      return !r2.isOdd(p3);
    }
    equals(p3) {
      Z2(p3);
      const { X: b3, Y: g2, Z: x3 } = this, { X: E2, Y: A3, Z: w3 } = p3, B2 = r2.eql(r2.mul(b3, w3), r2.mul(E2, x3)), I2 = r2.eql(r2.mul(g2, w3), r2.mul(A3, x3));
      return B2 && I2;
    }
    negate() {
      return new O3(this.X, r2.neg(this.Y), this.Z);
    }
    double() {
      const { a: p3, b: b3 } = s, g2 = r2.mul(b3, Ze), { X: x3, Y: E2, Z: A3 } = this;
      let w3 = r2.ZERO, B2 = r2.ZERO, I2 = r2.ZERO, N3 = r2.mul(x3, x3), D2 = r2.mul(E2, E2), P4 = r2.mul(A3, A3), $4 = r2.mul(x3, E2);
      return $4 = r2.add($4, $4), I2 = r2.mul(x3, A3), I2 = r2.add(I2, I2), w3 = r2.mul(p3, I2), B2 = r2.mul(g2, P4), B2 = r2.add(w3, B2), w3 = r2.sub(D2, B2), B2 = r2.add(D2, B2), B2 = r2.mul(w3, B2), w3 = r2.mul($4, w3), I2 = r2.mul(g2, I2), P4 = r2.mul(p3, P4), $4 = r2.sub(N3, P4), $4 = r2.mul(p3, $4), $4 = r2.add($4, I2), I2 = r2.add(N3, N3), N3 = r2.add(I2, N3), N3 = r2.add(N3, P4), N3 = r2.mul(N3, $4), B2 = r2.add(B2, N3), P4 = r2.mul(E2, A3), P4 = r2.add(P4, P4), N3 = r2.mul(P4, $4), w3 = r2.sub(w3, N3), I2 = r2.mul(P4, D2), I2 = r2.add(I2, I2), I2 = r2.add(I2, I2), new O3(w3, B2, I2);
    }
    add(p3) {
      Z2(p3);
      const { X: b3, Y: g2, Z: x3 } = this, { X: E2, Y: A3, Z: w3 } = p3;
      let B2 = r2.ZERO, I2 = r2.ZERO, N3 = r2.ZERO;
      const D2 = s.a, P4 = r2.mul(s.b, Ze);
      let $4 = r2.mul(b3, E2), V3 = r2.mul(g2, A3), q2 = r2.mul(x3, w3), G4 = r2.add(b3, g2), M4 = r2.add(E2, A3);
      G4 = r2.mul(G4, M4), M4 = r2.add($4, V3), G4 = r2.sub(G4, M4), M4 = r2.add(b3, x3);
      let Y3 = r2.add(E2, w3);
      return M4 = r2.mul(M4, Y3), Y3 = r2.add($4, q2), M4 = r2.sub(M4, Y3), Y3 = r2.add(g2, x3), B2 = r2.add(A3, w3), Y3 = r2.mul(Y3, B2), B2 = r2.add(V3, q2), Y3 = r2.sub(Y3, B2), N3 = r2.mul(D2, M4), B2 = r2.mul(P4, q2), N3 = r2.add(B2, N3), B2 = r2.sub(V3, N3), N3 = r2.add(V3, N3), I2 = r2.mul(B2, N3), V3 = r2.add($4, $4), V3 = r2.add(V3, $4), q2 = r2.mul(D2, q2), M4 = r2.mul(P4, M4), V3 = r2.add(V3, q2), q2 = r2.sub($4, q2), q2 = r2.mul(D2, q2), M4 = r2.add(M4, q2), $4 = r2.mul(V3, M4), I2 = r2.add(I2, $4), $4 = r2.mul(Y3, M4), B2 = r2.mul(G4, B2), B2 = r2.sub(B2, $4), $4 = r2.mul(G4, V3), N3 = r2.mul(Y3, N3), N3 = r2.add(N3, $4), new O3(B2, I2, N3);
    }
    subtract(p3) {
      return this.add(p3.negate());
    }
    is0() {
      return this.equals(O3.ZERO);
    }
    multiply(p3) {
      const { endo: b3 } = e;
      if (!o2.isValidNot0(p3)) throw new Error("invalid scalar: out of range");
      let g2, x3;
      const E2 = (A3) => C5.cached(this, A3, (w3) => Tn(O3, w3));
      if (b3) {
        const { k1neg: A3, k1: w3, k2neg: B2, k2: I2 } = H2(p3), { p: N3, f: D2 } = E2(w3), { p: P4, f: $4 } = E2(I2);
        x3 = D2.add($4), g2 = k2(b3.beta, N3, P4, A3, B2);
      } else {
        const { p: A3, f: w3 } = E2(p3);
        g2 = A3, x3 = w3;
      }
      return Tn(O3, [g2, x3])[0];
    }
    multiplyUnsafe(p3) {
      const { endo: b3 } = e, g2 = this;
      if (!o2.isValid(p3)) throw new Error("invalid scalar: out of range");
      if (p3 === Et || g2.is0()) return O3.ZERO;
      if (p3 === ne) return g2;
      if (C5.hasCache(this)) return this.multiply(p3);
      if (b3) {
        const { k1neg: x3, k1: E2, k2neg: A3, k2: w3 } = H2(p3), { p1: B2, p2: I2 } = jf(O3, g2, E2, w3);
        return k2(b3.beta, B2, I2, x3, A3);
      } else return C5.unsafe(g2, p3);
    }
    multiplyAndAddUnsafe(p3, b3, g2) {
      const x3 = this.multiplyUnsafe(b3).add(p3.multiplyUnsafe(g2));
      return x3.is0() ? void 0 : x3;
    }
    toAffine(p3) {
      return j3(this, p3);
    }
    isTorsionFree() {
      const { isTorsionFree: p3 } = e;
      return i3 === ne ? true : p3 ? p3(O3, this) : C5.unsafe(this, c3).is0();
    }
    clearCofactor() {
      const { clearCofactor: p3 } = e;
      return i3 === ne ? this : p3 ? p3(O3, this) : this.multiplyUnsafe(i3);
    }
    isSmallOrder() {
      return this.multiplyUnsafe(i3).is0();
    }
    toBytes(p3 = true) {
      return He(p3, "isCompressed"), this.assertValidity(), h3(O3, this, p3);
    }
    toHex(p3 = true) {
      return Jt(this.toBytes(p3));
    }
    toString() {
      return `<Point ${this.is0() ? "ZERO" : this.toHex()}>`;
    }
    get px() {
      return this.X;
    }
    get py() {
      return this.X;
    }
    get pz() {
      return this.Z;
    }
    toRawBytes(p3 = true) {
      return this.toBytes(p3);
    }
    _setWindowSize(p3) {
      this.precompute(p3);
    }
    static normalizeZ(p3) {
      return Tn(O3, p3);
    }
    static msm(p3, b3) {
      return Lf(O3, o2, p3, b3);
    }
    static fromPrivateKey(p3) {
      return O3.BASE.multiply(re(o2, p3));
    }
  }
  O3.BASE = new O3(s.Gx, s.Gy, r2.ONE), O3.ZERO = new O3(r2.ZERO, r2.ONE, r2.ZERO), O3.Fp = r2, O3.Fn = o2;
  const T3 = o2.BITS, C5 = new Cf(O3, e.endo ? Math.ceil(T3 / 2) : T3);
  return O3.BASE.precompute(8), O3;
}
function Yo(t) {
  return Uint8Array.of(t ? 2 : 3);
}
function Wo(t, e) {
  return { secretKey: e.BYTES, publicKey: 1 + t.BYTES, publicKeyUncompressed: 1 + 2 * t.BYTES, publicKeyHasPrefix: true, signature: 2 * e.BYTES };
}
function Jf(t, e = {}) {
  const { Fn: n2 } = t, r2 = e.randomBytes || Mt, o2 = Object.assign(Wo(t.Fp, n2), { seed: Ho(n2.ORDER) });
  function s(h3) {
    try {
      return !!re(n2, h3);
    } catch {
      return false;
    }
  }
  function i3(h3, y3) {
    const { publicKey: m3, publicKeyUncompressed: v4 } = o2;
    try {
      const U3 = h3.length;
      return y3 === true && U3 !== m3 || y3 === false && U3 !== v4 ? false : !!t.fromBytes(h3);
    } catch {
      return false;
    }
  }
  function c3(h3 = r2(o2.seed)) {
    return Rf(Kt(h3, o2.seed, "seed"), n2.ORDER);
  }
  function f6(h3, y3 = true) {
    return t.BASE.multiply(re(n2, h3)).toBytes(y3);
  }
  function u2(h3) {
    const y3 = c3(h3);
    return { secretKey: y3, publicKey: f6(y3) };
  }
  function a2(h3) {
    if (typeof h3 == "bigint") return false;
    if (h3 instanceof t) return true;
    const { secretKey: y3, publicKey: m3, publicKeyUncompressed: v4 } = o2;
    if (n2.allowedLengths || y3 === m3) return;
    const U3 = tt("key", h3).length;
    return U3 === m3 || U3 === v4;
  }
  function l2(h3, y3, m3 = true) {
    if (a2(h3) === true) throw new Error("first arg must be private key");
    if (a2(y3) === false) throw new Error("second arg must be public key");
    const v4 = re(n2, h3);
    return t.fromHex(y3).multiply(v4).toBytes(m3);
  }
  return Object.freeze({ getPublicKey: f6, getSharedSecret: l2, keygen: u2, Point: t, utils: { isValidSecretKey: s, isValidPublicKey: i3, randomSecretKey: c3, isValidPrivateKey: s, randomPrivateKey: c3, normPrivateKeyToScalar: (h3) => re(n2, h3), precompute(h3 = 8, y3 = t.BASE) {
    return y3.precompute(h3, false);
  } }, lengths: o2 });
}
function Qf(t, e, n2 = {}) {
  Ue(e), Ke(n2, {}, { hmac: "function", lowS: "boolean", randomBytes: "function", bits2int: "function", bits2int_modN: "function" });
  const r2 = n2.randomBytes || Mt, o2 = n2.hmac || ((b3, ...g2) => ke(e, b3, _t(...g2))), { Fp: s, Fn: i3 } = t, { ORDER: c3, BITS: f6 } = i3, { keygen: u2, getPublicKey: a2, getSharedSecret: l2, utils: d4, lengths: h3 } = Jf(t, n2), y3 = { prehash: false, lowS: typeof n2.lowS == "boolean" ? n2.lowS : false, format: void 0, extraEntropy: false }, m3 = "compact";
  function v4(b3) {
    const g2 = c3 >> ne;
    return b3 > g2;
  }
  function U3(b3, g2) {
    if (!i3.isValidNot0(g2)) throw new Error(`invalid signature ${b3}: out of range 1..Point.Fn.ORDER`);
    return g2;
  }
  function F2(b3, g2) {
    Pn(g2);
    const x3 = h3.signature, E2 = g2 === "compact" ? x3 : g2 === "recovered" ? x3 + 1 : void 0;
    return Kt(b3, E2, `${g2} signature`);
  }
  class R4 {
    constructor(g2, x3, E2) {
      this.r = U3("r", g2), this.s = U3("s", x3), E2 != null && (this.recovery = E2), Object.freeze(this);
    }
    static fromBytes(g2, x3 = m3) {
      F2(g2, x3);
      let E2;
      if (x3 === "der") {
        const { r: I2, s: N3 } = xt.toSig(Kt(g2));
        return new R4(I2, N3);
      }
      x3 === "recovered" && (E2 = g2[0], x3 = "compact", g2 = g2.subarray(1));
      const A3 = i3.BYTES, w3 = g2.subarray(0, A3), B2 = g2.subarray(A3, A3 * 2);
      return new R4(i3.fromBytes(w3), i3.fromBytes(B2), E2);
    }
    static fromHex(g2, x3) {
      return this.fromBytes(_e(g2), x3);
    }
    addRecoveryBit(g2) {
      return new R4(this.r, this.s, g2);
    }
    recoverPublicKey(g2) {
      const x3 = s.ORDER, { r: E2, s: A3, recovery: w3 } = this;
      if (w3 == null || ![0, 1, 2, 3].includes(w3)) throw new Error("recovery id invalid");
      if (c3 * zo < x3 && w3 > 1) throw new Error("recovery id is ambiguous for h>1 curve");
      const I2 = w3 === 2 || w3 === 3 ? E2 + c3 : E2;
      if (!s.isValid(I2)) throw new Error("recovery id 2 or 3 invalid");
      const N3 = s.toBytes(I2), D2 = t.fromBytes(_t(Yo((w3 & 1) === 0), N3)), P4 = i3.inv(I2), $4 = H2(tt("msgHash", g2)), V3 = i3.create(-$4 * P4), q2 = i3.create(A3 * P4), G4 = t.BASE.multiplyUnsafe(V3).add(D2.multiplyUnsafe(q2));
      if (G4.is0()) throw new Error("point at infinify");
      return G4.assertValidity(), G4;
    }
    hasHighS() {
      return v4(this.s);
    }
    toBytes(g2 = m3) {
      if (Pn(g2), g2 === "der") return _e(xt.hexFromSig(this));
      const x3 = i3.toBytes(this.r), E2 = i3.toBytes(this.s);
      if (g2 === "recovered") {
        if (this.recovery == null) throw new Error("recovery bit must be present");
        return _t(Uint8Array.of(this.recovery), x3, E2);
      }
      return _t(x3, E2);
    }
    toHex(g2) {
      return Jt(this.toBytes(g2));
    }
    assertValidity() {
    }
    static fromCompact(g2) {
      return R4.fromBytes(tt("sig", g2), "compact");
    }
    static fromDER(g2) {
      return R4.fromBytes(tt("sig", g2), "der");
    }
    normalizeS() {
      return this.hasHighS() ? new R4(this.r, i3.neg(this.s), this.recovery) : this;
    }
    toDERRawBytes() {
      return this.toBytes("der");
    }
    toDERHex() {
      return Jt(this.toBytes("der"));
    }
    toCompactRawBytes() {
      return this.toBytes("compact");
    }
    toCompactHex() {
      return Jt(this.toBytes("compact"));
    }
  }
  const Z2 = n2.bits2int || function(g2) {
    if (g2.length > 8192) throw new Error("input is too large");
    const x3 = Ve(g2), E2 = g2.length * 8 - f6;
    return E2 > 0 ? x3 >> BigInt(E2) : x3;
  }, H2 = n2.bits2int_modN || function(g2) {
    return i3.create(Z2(g2));
  }, j3 = ye(f6);
  function L2(b3) {
    return Rn("num < 2^" + f6, b3, Et, j3), i3.toBytes(b3);
  }
  function k2(b3, g2) {
    return Kt(b3, void 0, "message"), g2 ? Kt(e(b3), void 0, "prehashed message") : b3;
  }
  function O3(b3, g2, x3) {
    if (["recovered", "canonical"].some((V3) => V3 in x3)) throw new Error("sign() legacy options not supported");
    const { lowS: E2, prehash: A3, extraEntropy: w3 } = Hn(x3, y3);
    b3 = k2(b3, A3);
    const B2 = H2(b3), I2 = re(i3, g2), N3 = [L2(I2), L2(B2)];
    if (w3 != null && w3 !== false) {
      const V3 = w3 === true ? r2(h3.secretKey) : w3;
      N3.push(tt("extraEntropy", V3));
    }
    const D2 = _t(...N3), P4 = B2;
    function $4(V3) {
      const q2 = Z2(V3);
      if (!i3.isValidNot0(q2)) return;
      const G4 = i3.inv(q2), M4 = t.BASE.multiply(q2).toAffine(), Y3 = i3.create(M4.x);
      if (Y3 === Et) return;
      const Yt3 = i3.create(G4 * i3.create(P4 + Y3 * I2));
      if (Yt3 === Et) return;
      let ce3 = (M4.x === Y3 ? 0 : 2) | Number(M4.y & ne), fe4 = Yt3;
      return E2 && v4(Yt3) && (fe4 = i3.neg(Yt3), ce3 ^= 1), new R4(Y3, fe4, ce3);
    }
    return { seed: D2, k2sig: $4 };
  }
  function T3(b3, g2, x3 = {}) {
    b3 = tt("message", b3);
    const { seed: E2, k2sig: A3 } = O3(b3, g2, x3);
    return Ef(e.outputLen, i3.BYTES, o2)(E2, A3);
  }
  function C5(b3) {
    let g2;
    const x3 = typeof b3 == "string" || Ne(b3), E2 = !x3 && b3 !== null && typeof b3 == "object" && typeof b3.r == "bigint" && typeof b3.s == "bigint";
    if (!x3 && !E2) throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    if (E2) g2 = new R4(b3.r, b3.s);
    else if (x3) {
      try {
        g2 = R4.fromBytes(tt("sig", b3), "der");
      } catch (A3) {
        if (!(A3 instanceof xt.Err)) throw A3;
      }
      if (!g2) try {
        g2 = R4.fromBytes(tt("sig", b3), "compact");
      } catch {
        return false;
      }
    }
    return g2 || false;
  }
  function _2(b3, g2, x3, E2 = {}) {
    const { lowS: A3, prehash: w3, format: B2 } = Hn(E2, y3);
    if (x3 = tt("publicKey", x3), g2 = k2(tt("message", g2), w3), "strict" in E2) throw new Error("options.strict was renamed to lowS");
    const I2 = B2 === void 0 ? C5(b3) : R4.fromBytes(tt("sig", b3), B2);
    if (I2 === false) return false;
    try {
      const N3 = t.fromBytes(x3);
      if (A3 && I2.hasHighS()) return false;
      const { r: D2, s: P4 } = I2, $4 = H2(g2), V3 = i3.inv(P4), q2 = i3.create($4 * V3), G4 = i3.create(D2 * V3), M4 = t.BASE.multiplyUnsafe(q2).add(N3.multiplyUnsafe(G4));
      return M4.is0() ? false : i3.create(M4.x) === D2;
    } catch {
      return false;
    }
  }
  function p3(b3, g2, x3 = {}) {
    const { prehash: E2 } = Hn(x3, y3);
    return g2 = k2(g2, E2), R4.fromBytes(b3, "recovered").recoverPublicKey(g2).toBytes();
  }
  return Object.freeze({ keygen: u2, getPublicKey: a2, getSharedSecret: l2, utils: d4, lengths: h3, Point: t, sign: T3, verify: _2, recoverPublicKey: p3, Signature: R4, hash: e });
}
function ta(t) {
  const e = { a: t.a, b: t.b, p: t.Fp.ORDER, n: t.n, h: t.h, Gx: t.Gx, Gy: t.Gy }, n2 = t.Fp;
  let r2 = t.allowedPrivateKeyLengths ? Array.from(new Set(t.allowedPrivateKeyLengths.map((i3) => Math.ceil(i3 / 2)))) : void 0;
  const o2 = Ht(e.n, { BITS: t.nBitLength, allowedLengths: r2, modFromBytes: t.wrapPrivateKey }), s = { Fp: n2, Fn: o2, allowInfinityPoint: t.allowInfinityPoint, endo: t.endo, isTorsionFree: t.isTorsionFree, clearCofactor: t.clearCofactor, fromBytes: t.fromBytes, toBytes: t.toBytes };
  return { CURVE: e, curveOpts: s };
}
function ea(t) {
  const { CURVE: e, curveOpts: n2 } = ta(t), r2 = { hmac: t.hmac, randomBytes: t.randomBytes, lowS: t.lowS, bits2int: t.bits2int, bits2int_modN: t.bits2int_modN };
  return { CURVE: e, curveOpts: n2, hash: t.hash, ecdsaOpts: r2 };
}
function na(t, e) {
  const n2 = e.Point;
  return Object.assign({}, e, { ProjectivePoint: n2, CURVE: Object.assign({}, t, ko(n2.Fn.ORDER, n2.Fn.BITS)) });
}
function ra(t) {
  const { CURVE: e, curveOpts: n2, hash: r2, ecdsaOpts: o2 } = ea(t), s = Xf(e, n2), i3 = Qf(s, r2, o2);
  return na(t, i3);
}
function Dn(t, e) {
  const n2 = (r2) => ra({ ...t, hash: r2 });
  return { ...n2(e), create: n2 };
}
var Xo = { p: BigInt("0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff"), n: BigInt("0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551"), h: BigInt(1), a: BigInt("0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc"), b: BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b"), Gx: BigInt("0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"), Gy: BigInt("0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5") };
var Jo = { p: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff"), n: BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973"), h: BigInt(1), a: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc"), b: BigInt("0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef"), Gx: BigInt("0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7"), Gy: BigInt("0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f") };
var Qo2 = { p: BigInt("0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), n: BigInt("0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409"), h: BigInt(1), a: BigInt("0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc"), b: BigInt("0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00"), Gx: BigInt("0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66"), Gy: BigInt("0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650") };
var oa = Ht(Xo.p);
var sa = Ht(Jo.p);
var ia = Ht(Qo2.p);
var ca = Dn({ ...Xo, Fp: oa, lowS: false }, $e);
Dn({ ...Jo, Fp: sa, lowS: false }, yc), Dn({ ...Qo2, Fp: ia, lowS: false, allowedPrivateKeyLengths: [130, 131, 132] }, bc);
var fa = ca;
var Vn = "base10";
var rt = "base16";
var oe = "base64pad";
var Ge = "base64url";
var se = "utf8";
var Mn = 0;
var ie = 1;
var we = 2;
var aa = 0;
var ts = 1;
var ve = 12;
var Kn = 32;
function ua() {
  const t = kn.utils.randomPrivateKey(), e = kn.getPublicKey(t);
  return { privateKey: toString3(t, rt), publicKey: toString3(e, rt) };
}
function la() {
  const t = Mt(Kn);
  return toString3(t, rt);
}
function da(t, e) {
  const n2 = kn.getSharedSecret(fromString3(t, rt), fromString3(e, rt)), r2 = vf(Pe, n2, void 0, void 0, Kn);
  return toString3(r2, rt);
}
function ha(t) {
  const e = Pe(fromString3(t, rt));
  return toString3(e, rt);
}
function pa(t) {
  const e = Pe(fromString3(t, se));
  return toString3(e, rt);
}
function qn(t) {
  return fromString3(`${t}`, Vn);
}
function Zt(t) {
  return Number(toString3(t, Vn));
}
function es(t) {
  return t.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
function ns(t) {
  const e = t.replace(/-/g, "+").replace(/_/g, "/"), n2 = (4 - e.length % 4) % 4;
  return e + "=".repeat(n2);
}
function ga(t) {
  const e = qn(typeof t.type < "u" ? t.type : Mn);
  if (Zt(e) === ie && typeof t.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
  const n2 = typeof t.senderPublicKey < "u" ? fromString3(t.senderPublicKey, rt) : void 0, r2 = typeof t.iv < "u" ? fromString3(t.iv, rt) : Mt(ve), o2 = fromString3(t.symKey, rt), s = xo(o2, r2).encrypt(fromString3(t.message, se)), i3 = Fn({ type: e, sealed: s, iv: r2, senderPublicKey: n2 });
  return t.encoding === Ge ? es(i3) : i3;
}
function ba(t) {
  const e = fromString3(t.symKey, rt), { sealed: n2, iv: r2 } = ze({ encoded: t.encoded, encoding: t.encoding }), o2 = xo(e, r2).decrypt(n2);
  if (o2 === null) throw new Error("Failed to decrypt");
  return toString3(o2, se);
}
function ya(t, e) {
  const n2 = qn(we), r2 = Mt(ve), o2 = fromString3(t, se), s = Fn({ type: n2, sealed: o2, iv: r2 });
  return e === Ge ? es(s) : s;
}
function ma(t, e) {
  const { sealed: n2 } = ze({ encoded: t, encoding: e });
  return toString3(n2, se);
}
function Fn(t) {
  if (Zt(t.type) === we) return toString3(concat3([t.type, t.sealed]), oe);
  if (Zt(t.type) === ie) {
    if (typeof t.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
    return toString3(concat3([t.type, t.senderPublicKey, t.iv, t.sealed]), oe);
  }
  return toString3(concat3([t.type, t.iv, t.sealed]), oe);
}
function ze(t) {
  const e = (t.encoding || oe) === Ge ? ns(t.encoded) : t.encoded, n2 = fromString3(e, oe), r2 = n2.slice(aa, ts), o2 = ts;
  if (Zt(r2) === ie) {
    const f6 = o2 + Kn, u2 = f6 + ve, a2 = n2.slice(o2, f6), l2 = n2.slice(f6, u2), d4 = n2.slice(u2);
    return { type: r2, sealed: d4, iv: l2, senderPublicKey: a2 };
  }
  if (Zt(r2) === we) {
    const f6 = n2.slice(o2), u2 = Mt(ve);
    return { type: r2, sealed: f6, iv: u2 };
  }
  const s = o2 + ve, i3 = n2.slice(o2, s), c3 = n2.slice(s);
  return { type: r2, sealed: c3, iv: i3 };
}
function wa(t, e) {
  const n2 = ze({ encoded: t, encoding: e?.encoding });
  return rs({ type: Zt(n2.type), senderPublicKey: typeof n2.senderPublicKey < "u" ? toString3(n2.senderPublicKey, rt) : void 0, receiverPublicKey: e?.receiverPublicKey });
}
function rs(t) {
  const e = t?.type || Mn;
  if (e === ie) {
    if (typeof t?.senderPublicKey > "u") throw new Error("missing sender public key");
    if (typeof t?.receiverPublicKey > "u") throw new Error("missing receiver public key");
  }
  return { type: e, senderPublicKey: t?.senderPublicKey, receiverPublicKey: t?.receiverPublicKey };
}
function va(t) {
  return t.type === ie && typeof t.senderPublicKey == "string" && typeof t.receiverPublicKey == "string";
}
function xa(t) {
  return t.type === we;
}
function os(t) {
  const e = Buffer.from(t.x, "base64"), n2 = Buffer.from(t.y, "base64");
  return concat3([new Uint8Array([4]), e, n2]);
}
function Ea(t, e) {
  const [n2, r2, o2] = t.split("."), s = Buffer.from(ns(o2), "base64");
  if (s.length !== 64) throw new Error("Invalid signature length");
  const i3 = s.slice(0, 32), c3 = s.slice(32, 64), f6 = `${n2}.${r2}`, u2 = Pe(f6), a2 = os(e);
  if (!fa.verify(concat3([i3, c3]), u2, a2)) throw new Error("Invalid signature");
  return sn(t).payload;
}
var ss = "irn";
function Ba(t) {
  return t?.relay || { protocol: ss };
}
function Aa(t) {
  const e = C[t];
  if (typeof e > "u") throw new Error(`Relay Protocol not supported: ${t}`);
  return e;
}
var Ia = Object.defineProperty;
var Sa = Object.defineProperties;
var Oa = Object.getOwnPropertyDescriptors;
var is = Object.getOwnPropertySymbols;
var Na = Object.prototype.hasOwnProperty;
var Ua = Object.prototype.propertyIsEnumerable;
var cs = (t, e, n2) => e in t ? Ia(t, e, { enumerable: true, configurable: true, writable: true, value: n2 }) : t[e] = n2;
var Zn = (t, e) => {
  for (var n2 in e || (e = {})) Na.call(e, n2) && cs(t, n2, e[n2]);
  if (is) for (var n2 of is(e)) Ua.call(e, n2) && cs(t, n2, e[n2]);
  return t;
};
var _a = (t, e) => Sa(t, Oa(e));
function fs(t, e = "-") {
  const n2 = {}, r2 = "relay" + e;
  return Object.keys(t).forEach((o2) => {
    if (o2.startsWith(r2)) {
      const s = o2.replace(r2, ""), i3 = t[o2];
      n2[s] = i3;
    }
  }), n2;
}
function Ra(t) {
  if (!t.includes("wc:")) {
    const u2 = cn(t);
    u2 != null && u2.includes("wc:") && (t = u2);
  }
  t = t.includes("wc://") ? t.replace("wc://", "") : t, t = t.includes("wc:") ? t.replace("wc:", "") : t;
  const e = t.indexOf(":"), n2 = t.indexOf("?") !== -1 ? t.indexOf("?") : void 0, r2 = t.substring(0, e), o2 = t.substring(e + 1, n2).split("@"), s = typeof n2 < "u" ? t.substring(n2) : "", i3 = new URLSearchParams(s), c3 = Object.fromEntries(i3.entries()), f6 = typeof c3.methods == "string" ? c3.methods.split(",") : void 0;
  return { protocol: r2, topic: as(o2[0]), version: parseInt(o2[1], 10), symKey: c3.symKey, relay: fs(c3), methods: f6, expiryTimestamp: c3.expiryTimestamp ? parseInt(c3.expiryTimestamp, 10) : void 0 };
}
function as(t) {
  return t.startsWith("//") ? t.substring(2) : t;
}
function us(t, e = "-") {
  const n2 = "relay", r2 = {};
  return Object.keys(t).forEach((o2) => {
    const s = o2, i3 = n2 + e + s;
    t[s] && (r2[i3] = t[s]);
  }), r2;
}
function $a(t) {
  const e = new URLSearchParams(), n2 = Zn(Zn(_a(Zn({}, us(t.relay)), { symKey: t.symKey }), t.expiryTimestamp && { expiryTimestamp: t.expiryTimestamp.toString() }), t.methods && { methods: t.methods.join(",") });
  return Object.entries(n2).sort(([r2], [o2]) => r2.localeCompare(o2)).forEach(([r2, o2]) => {
    o2 !== void 0 && e.append(r2, String(o2));
  }), `${t.protocol}:${t.topic}@${t.version}?${e}`;
}
function Ta(t, e, n2) {
  return `${t}?wc_ev=${n2}&topic=${e}`;
}
var Ca = Object.defineProperty;
var ja = Object.defineProperties;
var La = Object.getOwnPropertyDescriptors;
var ls = Object.getOwnPropertySymbols;
var ka = Object.prototype.hasOwnProperty;
var Pa = Object.prototype.propertyIsEnumerable;
var ds = (t, e, n2) => e in t ? Ca(t, e, { enumerable: true, configurable: true, writable: true, value: n2 }) : t[e] = n2;
var Ha = (t, e) => {
  for (var n2 in e || (e = {})) ka.call(e, n2) && ds(t, n2, e[n2]);
  if (ls) for (var n2 of ls(e)) Pa.call(e, n2) && ds(t, n2, e[n2]);
  return t;
};
var Da = (t, e) => ja(t, La(e));
function Gt(t) {
  const e = [];
  return t.forEach((n2) => {
    const [r2, o2] = n2.split(":");
    e.push(`${r2}:${o2}`);
  }), e;
}
function hs(t) {
  const e = [];
  return Object.values(t).forEach((n2) => {
    e.push(...Gt(n2.accounts));
  }), e;
}
function ps(t, e) {
  const n2 = [];
  return Object.values(t).forEach((r2) => {
    Gt(r2.accounts).includes(e) && n2.push(...r2.methods);
  }), n2;
}
function gs(t, e) {
  const n2 = [];
  return Object.values(t).forEach((r2) => {
    Gt(r2.accounts).includes(e) && n2.push(...r2.events);
  }), n2;
}
function Gn(t) {
  return t.includes(":");
}
function bs(t) {
  return Gn(t) ? t.split(":")[0] : t;
}
function xe(t) {
  var e, n2, r2;
  const o2 = {};
  if (!Ye(t)) return o2;
  for (const [s, i3] of Object.entries(t)) {
    const c3 = Gn(s) ? [s] : i3.chains, f6 = i3.methods || [], u2 = i3.events || [], a2 = bs(s);
    o2[a2] = Da(Ha({}, o2[a2]), { chains: ut(c3, (e = o2[a2]) == null ? void 0 : e.chains), methods: ut(f6, (n2 = o2[a2]) == null ? void 0 : n2.methods), events: ut(u2, (r2 = o2[a2]) == null ? void 0 : r2.events) });
  }
  return o2;
}
function ys(t) {
  const e = {};
  return t?.forEach((n2) => {
    var r2;
    const [o2, s] = n2.split(":");
    e[o2] || (e[o2] = { accounts: [], chains: [], events: [], methods: [] }), e[o2].accounts.push(n2), (r2 = e[o2].chains) == null || r2.push(`${o2}:${s}`);
  }), e;
}
function Ka(t, e) {
  e = e.map((r2) => r2.replace("did:pkh:", ""));
  const n2 = ys(e);
  for (const [r2, o2] of Object.entries(n2)) o2.methods ? o2.methods = ut(o2.methods, t) : o2.methods = t, o2.events = ["chainChanged", "accountsChanged"];
  return n2;
}
function qa(t, e) {
  var n2, r2, o2, s, i3, c3;
  const f6 = xe(t), u2 = xe(e), a2 = {}, l2 = Object.keys(f6).concat(Object.keys(u2));
  for (const d4 of l2) a2[d4] = { chains: ut((n2 = f6[d4]) == null ? void 0 : n2.chains, (r2 = u2[d4]) == null ? void 0 : r2.chains), methods: ut((o2 = f6[d4]) == null ? void 0 : o2.methods, (s = u2[d4]) == null ? void 0 : s.methods), events: ut((i3 = f6[d4]) == null ? void 0 : i3.events, (c3 = u2[d4]) == null ? void 0 : c3.events) };
  return a2;
}
var ms = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var ws = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function Bt(t, e) {
  const { message: n2, code: r2 } = ws[t];
  return { message: e ? `${n2} ${e}` : n2, code: r2 };
}
function zt(t, e) {
  const { message: n2, code: r2 } = ms[t];
  return { message: e ? `${n2} ${e}` : n2, code: r2 };
}
function Ee(t, e) {
  return Array.isArray(t) ? typeof e < "u" && t.length ? t.every(e) : true : false;
}
function Ye(t) {
  return Object.getPrototypeOf(t) === Object.prototype && Object.keys(t).length;
}
function Dt(t) {
  return typeof t > "u";
}
function ft(t, e) {
  return e && Dt(t) ? true : typeof t == "string" && !!t.trim().length;
}
function We(t, e) {
  return e && Dt(t) ? true : typeof t == "number" && !isNaN(t);
}
function Fa(t, e) {
  const { requiredNamespaces: n2 } = e, r2 = Object.keys(t.namespaces), o2 = Object.keys(n2);
  let s = true;
  return It(o2, r2) ? (r2.forEach((i3) => {
    const { accounts: c3, methods: f6, events: u2 } = t.namespaces[i3], a2 = Gt(c3), l2 = n2[i3];
    (!It(Ie(i3, l2), a2) || !It(l2.methods, f6) || !It(l2.events, u2)) && (s = false);
  }), s) : false;
}
function Be(t) {
  return ft(t, false) && t.includes(":") ? t.split(":").length === 2 : false;
}
function vs(t) {
  if (ft(t, false) && t.includes(":")) {
    const e = t.split(":");
    if (e.length === 3) {
      const n2 = e[0] + ":" + e[1];
      return !!e[2] && Be(n2);
    }
  }
  return false;
}
function Za(t) {
  function e(n2) {
    try {
      return typeof new URL(n2) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (ft(t, false)) {
      if (e(t)) return true;
      const n2 = cn(t);
      return e(n2);
    }
  } catch {
  }
  return false;
}
function Ga(t) {
  var e;
  return (e = t?.proposer) == null ? void 0 : e.publicKey;
}
function za(t) {
  return t?.topic;
}
function Ya(t, e) {
  let n2 = null;
  return ft(t?.publicKey, false) || (n2 = Bt("MISSING_OR_INVALID", `${e} controller public key should be a string`)), n2;
}
function zn(t) {
  let e = true;
  return Ee(t) ? t.length && (e = t.every((n2) => ft(n2, false))) : e = false, e;
}
function xs(t, e, n2) {
  let r2 = null;
  return Ee(e) && e.length ? e.forEach((o2) => {
    r2 || Be(o2) || (r2 = zt("UNSUPPORTED_CHAINS", `${n2}, chain ${o2} should be a string and conform to "namespace:chainId" format`));
  }) : Be(t) || (r2 = zt("UNSUPPORTED_CHAINS", `${n2}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r2;
}
function Es(t, e, n2) {
  let r2 = null;
  return Object.entries(t).forEach(([o2, s]) => {
    if (r2) return;
    const i3 = xs(o2, Ie(o2, s), `${e} ${n2}`);
    i3 && (r2 = i3);
  }), r2;
}
function Bs(t, e) {
  let n2 = null;
  return Ee(t) ? t.forEach((r2) => {
    n2 || vs(r2) || (n2 = zt("UNSUPPORTED_ACCOUNTS", `${e}, account ${r2} should be a string and conform to "namespace:chainId:address" format`));
  }) : n2 = zt("UNSUPPORTED_ACCOUNTS", `${e}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), n2;
}
function As(t, e) {
  let n2 = null;
  return Object.values(t).forEach((r2) => {
    if (n2) return;
    const o2 = Bs(r2?.accounts, `${e} namespace`);
    o2 && (n2 = o2);
  }), n2;
}
function Is(t, e) {
  let n2 = null;
  return zn(t?.methods) ? zn(t?.events) || (n2 = zt("UNSUPPORTED_EVENTS", `${e}, events should be an array of strings or empty array for no events`)) : n2 = zt("UNSUPPORTED_METHODS", `${e}, methods should be an array of strings or empty array for no methods`), n2;
}
function Yn(t, e) {
  let n2 = null;
  return Object.values(t).forEach((r2) => {
    if (n2) return;
    const o2 = Is(r2, `${e}, namespace`);
    o2 && (n2 = o2);
  }), n2;
}
function Wa(t, e, n2) {
  let r2 = null;
  if (t && Ye(t)) {
    const o2 = Yn(t, e);
    o2 && (r2 = o2);
    const s = Es(t, e, n2);
    s && (r2 = s);
  } else r2 = Bt("MISSING_OR_INVALID", `${e}, ${n2} should be an object with data`);
  return r2;
}
function Ss(t, e) {
  let n2 = null;
  if (t && Ye(t)) {
    const r2 = Yn(t, e);
    r2 && (n2 = r2);
    const o2 = As(t, e);
    o2 && (n2 = o2);
  } else n2 = Bt("MISSING_OR_INVALID", `${e}, namespaces should be an object with data`);
  return n2;
}
function Os(t) {
  return ft(t.protocol, true);
}
function Xa(t, e) {
  let n2 = false;
  return e && !t ? n2 = true : t && Ee(t) && t.length && t.forEach((r2) => {
    n2 = Os(r2);
  }), n2;
}
function Ja(t) {
  return typeof t == "number";
}
function Qa(t) {
  return typeof t < "u" && typeof t !== null;
}
function tu(t) {
  return !(!t || typeof t != "object" || !t.code || !We(t.code, false) || !t.message || !ft(t.message, false));
}
function eu(t) {
  return !(Dt(t) || !ft(t.method, false));
}
function nu(t) {
  return !(Dt(t) || Dt(t.result) && Dt(t.error) || !We(t.id, false) || !ft(t.jsonrpc, false));
}
function ru(t) {
  return !(Dt(t) || !ft(t.name, false));
}
function ou(t, e) {
  return !(!Be(e) || !hs(t).includes(e));
}
function su(t, e, n2) {
  return ft(n2, false) ? ps(t, e).includes(n2) : false;
}
function iu(t, e, n2) {
  return ft(n2, false) ? gs(t, e).includes(n2) : false;
}
function Ns(t, e, n2) {
  let r2 = null;
  const o2 = cu(t), s = fu(e), i3 = Object.keys(o2), c3 = Object.keys(s), f6 = Us(Object.keys(t)), u2 = Us(Object.keys(e)), a2 = f6.filter((l2) => !u2.includes(l2));
  return a2.length && (r2 = Bt("NON_CONFORMING_NAMESPACES", `${n2} namespaces keys don't satisfy requiredNamespaces.
      Required: ${a2.toString()}
      Received: ${Object.keys(e).toString()}`)), It(i3, c3) || (r2 = Bt("NON_CONFORMING_NAMESPACES", `${n2} namespaces chains don't satisfy required namespaces.
      Required: ${i3.toString()}
      Approved: ${c3.toString()}`)), Object.keys(e).forEach((l2) => {
    if (!l2.includes(":") || r2) return;
    const d4 = Gt(e[l2].accounts);
    d4.includes(l2) || (r2 = Bt("NON_CONFORMING_NAMESPACES", `${n2} namespaces accounts don't satisfy namespace accounts for ${l2}
        Required: ${l2}
        Approved: ${d4.toString()}`));
  }), i3.forEach((l2) => {
    r2 || (It(o2[l2].methods, s[l2].methods) ? It(o2[l2].events, s[l2].events) || (r2 = Bt("NON_CONFORMING_NAMESPACES", `${n2} namespaces events don't satisfy namespace events for ${l2}`)) : r2 = Bt("NON_CONFORMING_NAMESPACES", `${n2} namespaces methods don't satisfy namespace methods for ${l2}`));
  }), r2;
}
function cu(t) {
  const e = {};
  return Object.keys(t).forEach((n2) => {
    var r2;
    n2.includes(":") ? e[n2] = t[n2] : (r2 = t[n2].chains) == null || r2.forEach((o2) => {
      e[o2] = { methods: t[n2].methods, events: t[n2].events };
    });
  }), e;
}
function Us(t) {
  return [...new Set(t.map((e) => e.includes(":") ? e.split(":")[0] : e))];
}
function fu(t) {
  const e = {};
  return Object.keys(t).forEach((n2) => {
    if (n2.includes(":")) e[n2] = t[n2];
    else {
      const r2 = Gt(t[n2].accounts);
      r2?.forEach((o2) => {
        e[o2] = { accounts: t[n2].accounts.filter((s) => s.includes(`${o2}:`)), methods: t[n2].methods, events: t[n2].events };
      });
    }
  }), e;
}
function au(t, e) {
  return We(t, false) && t <= e.max && t >= e.min;
}
function uu() {
  const t = Vt();
  return new Promise((e) => {
    switch (t) {
      case et.browser:
        e(_s());
        break;
      case et.reactNative:
        e(Rs());
        break;
      case et.node:
        e($s());
        break;
      default:
        e(true);
    }
  });
}
function _s() {
  return Wt() && navigator?.onLine;
}
async function Rs() {
  if (At() && typeof global < "u" && global != null && global.NetInfo) {
    const t = await (global == null ? void 0 : global.NetInfo.fetch());
    return t?.isConnected;
  }
  return true;
}
function $s() {
  return true;
}
function lu(t) {
  switch (Vt()) {
    case et.browser:
      Ts(t);
      break;
    case et.reactNative:
      Cs(t);
      break;
    case et.node:
      break;
  }
}
function Ts(t) {
  !At() && Wt() && (window.addEventListener("online", () => t(true)), window.addEventListener("offline", () => t(false)));
}
function Cs(t) {
  At() && typeof global < "u" && global != null && global.NetInfo && global?.NetInfo.addEventListener((e) => t(e?.isConnected));
}
function du() {
  var t;
  return Wt() && (0, import_window_getters.getDocument)() ? ((t = (0, import_window_getters.getDocument)()) == null ? void 0 : t.visibilityState) === "visible" : true;
}
var Wn = {};
var hu = class {
  static get(e) {
    return Wn[e];
  }
  static set(e, n2) {
    Wn[e] = n2;
  }
  static delete(e) {
    delete Wn[e];
  }
};
function js(t) {
  const e = esm_default.decode(t);
  if (e.length < 33) throw new Error("Too short to contain a public key");
  return e.slice(1, 33);
}
function Ls({ publicKey: t, signature: e, payload: n2 }) {
  var r2;
  const o2 = Xn(n2.method), s = 128 | parseInt(((r2 = n2.version) == null ? void 0 : r2.toString()) || "4"), i3 = gu(n2.address), c3 = n2.era === "00" ? new Uint8Array([0]) : Xn(n2.era);
  if (c3.length !== 1 && c3.length !== 2) throw new Error("Invalid era length");
  const f6 = parseInt(n2.nonce, 16), u2 = new Uint8Array([f6 & 255, f6 >> 8 & 255]), a2 = BigInt(`0x${pu(n2.tip)}`), l2 = yu(a2), d4 = new Uint8Array([0, ...t, i3, ...e, ...c3, ...u2, ...l2, ...o2]), h3 = bu(d4.length + 1);
  return new Uint8Array([...h3, s, ...d4]);
}
function ks(t) {
  const e = Xn(t), n2 = (0, import_blakejs.blake2b)(e, void 0, 32);
  return "0x" + Buffer.from(n2).toString("hex");
}
function Xn(t) {
  return new Uint8Array(t.replace(/^0x/, "").match(/.{1,2}/g).map((e) => parseInt(e, 16)));
}
function pu(t) {
  return t.startsWith("0x") ? t.slice(2) : t;
}
function gu(t) {
  const e = esm_default.decode(t)[0];
  return e === 42 ? 0 : e === 60 ? 2 : 1;
}
function bu(t) {
  if (t < 64) return new Uint8Array([t << 2]);
  if (t < 16384) {
    const e = t << 2 | 1;
    return new Uint8Array([e & 255, e >> 8 & 255]);
  } else if (t < 1 << 30) {
    const e = t << 2 | 2;
    return new Uint8Array([e & 255, e >> 8 & 255, e >> 16 & 255, e >> 24 & 255]);
  } else throw new Error("Compact encoding > 2^30 not supported");
}
function yu(t) {
  if (t < BigInt(1) << BigInt(6)) return new Uint8Array([Number(t << BigInt(2))]);
  if (t < BigInt(1) << BigInt(14)) {
    const e = t << BigInt(2) | BigInt(1);
    return new Uint8Array([Number(e & BigInt(255)), Number(e >> BigInt(8) & BigInt(255))]);
  } else if (t < BigInt(1) << BigInt(30)) {
    const e = t << BigInt(2) | BigInt(2);
    return new Uint8Array([Number(e & BigInt(255)), Number(e >> BigInt(8) & BigInt(255)), Number(e >> BigInt(16) & BigInt(255)), Number(e >> BigInt(24) & BigInt(255))]);
  } else throw new Error("BigInt compact encoding not supported > 2^30");
}
function mu(t) {
  const e = Uint8Array.from(Buffer.from(t.signature, "hex")), n2 = js(t.transaction.address), r2 = Ls({ publicKey: n2, signature: e, payload: t.transaction }), o2 = Buffer.from(r2).toString("hex");
  return ks(o2);
}
function wu({ logger: t, name: e }) {
  const n2 = typeof t == "string" ? Y({ opts: { level: t, name: e } }).logger : t;
  return n2.level = typeof t == "string" ? t : t.level, n2;
}

// node_modules/@walletconnect/core/dist/index.js
var import_window_getters2 = __toESM(require_cjs2());
var Ue2 = "wc";
var Fe2 = 2;
var ge2 = "core";
var W2 = `${Ue2}@2:${ge2}:`;
var Et2 = { name: ge2, logger: "error" };
var It2 = { database: ":memory:" };
var Tt2 = "crypto";
var Me2 = "client_ed25519_seed";
var Ct2 = import_time2.ONE_DAY;
var Pt2 = "keychain";
var St2 = "0.3";
var Ot2 = "messages";
var Rt2 = "0.3";
var At2 = import_time2.SIX_HOURS;
var xt2 = "publisher";
var Nt2 = "irn";
var $t2 = "error";
var Ke2 = "wss://relay.walletconnect.org";
var zt2 = "relayer";
var C2 = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" };
var Lt2 = "_subscription";
var M2 = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" };
var kt2 = 0.1;
var Pe2 = "2.22.4";
var ee2 = { link_mode: "link_mode", relay: "relay" };
var ye2 = { inbound: "inbound", outbound: "outbound" };
var jt2 = "0.3";
var Ut2 = "WALLETCONNECT_CLIENT_ID";
var Be2 = "WALLETCONNECT_LINK_MODE_APPS";
var j = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" };
var Ft2 = "subscription";
var Mt2 = "0.3";
var Qs = import_time2.FIVE_SECONDS * 1e3;
var Kt2 = "pairing";
var Bt2 = "0.3";
var oe2 = { wc_pairingDelete: { req: { ttl: import_time2.ONE_DAY, prompt: false, tag: 1e3 }, res: { ttl: import_time2.ONE_DAY, prompt: false, tag: 1001 } }, wc_pairingPing: { req: { ttl: import_time2.THIRTY_SECONDS, prompt: false, tag: 1002 }, res: { ttl: import_time2.THIRTY_SECONDS, prompt: false, tag: 1003 } }, unregistered_method: { req: { ttl: import_time2.ONE_DAY, prompt: false, tag: 0 }, res: { ttl: import_time2.ONE_DAY, prompt: false, tag: 0 } } };
var ae2 = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" };
var V2 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
var Vt2 = "history";
var qt2 = "0.3";
var Gt2 = "expirer";
var q = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" };
var Wt2 = "0.3";
var Ht2 = "verify-api";
var ir = "https://verify.walletconnect.com";
var Yt = "https://verify.walletconnect.org";
var be2 = Yt;
var Jt2 = `${be2}/v3`;
var Xt2 = [ir, Yt];
var Zt2 = "echo";
var Qt2 = "https://echo.walletconnect.com";
var Y2 = { pairing_started: "pairing_started", pairing_uri_validation_success: "pairing_uri_validation_success", pairing_uri_not_expired: "pairing_uri_not_expired", store_new_pairing: "store_new_pairing", subscribing_pairing_topic: "subscribing_pairing_topic", subscribe_pairing_topic_success: "subscribe_pairing_topic_success", existing_pairing: "existing_pairing", pairing_not_expired: "pairing_not_expired", emit_inactive_pairing: "emit_inactive_pairing", emit_session_proposal: "emit_session_proposal", subscribing_to_pairing_topic: "subscribing_to_pairing_topic" };
var X3 = { no_wss_connection: "no_wss_connection", no_internet_connection: "no_internet_connection", malformed_pairing_uri: "malformed_pairing_uri", active_pairing_already_exists: "active_pairing_already_exists", subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure", pairing_expired: "pairing_expired", proposal_expired: "proposal_expired", proposal_listener_not_found: "proposal_listener_not_found" };
var rr2 = { session_approve_started: "session_approve_started", proposal_not_expired: "proposal_not_expired", session_namespaces_validation_success: "session_namespaces_validation_success", create_session_topic: "create_session_topic", subscribing_session_topic: "subscribing_session_topic", subscribe_session_topic_success: "subscribe_session_topic_success", publishing_session_approve: "publishing_session_approve", session_approve_publish_success: "session_approve_publish_success", store_session: "store_session", publishing_session_settle: "publishing_session_settle", session_settle_publish_success: "session_settle_publish_success", session_request_response_started: "session_request_response_started", session_request_response_validation_success: "session_request_response_validation_success", session_request_response_publish_started: "session_request_response_publish_started" };
var nr2 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", proposal_expired: "proposal_expired", subscribe_session_topic_failure: "subscribe_session_topic_failure", session_approve_publish_failure: "session_approve_publish_failure", session_settle_publish_failure: "session_settle_publish_failure", session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure", proposal_not_found: "proposal_not_found", session_request_response_validation_failure: "session_request_response_validation_failure", session_request_response_publish_failure: "session_request_response_publish_failure" };
var or = { authenticated_session_approve_started: "authenticated_session_approve_started", authenticated_session_not_expired: "authenticated_session_not_expired", chains_caip2_compliant: "chains_caip2_compliant", chains_evm_compliant: "chains_evm_compliant", create_authenticated_session_topic: "create_authenticated_session_topic", cacaos_verified: "cacaos_verified", store_authenticated_session: "store_authenticated_session", subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic", subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success", publishing_authenticated_session_approve: "publishing_authenticated_session_approve", authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success" };
var ar2 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", missing_session_authenticate_request: "missing_session_authenticate_request", session_authenticate_request_expired: "session_authenticate_request_expired", chains_caip2_compliant_failure: "chains_caip2_compliant_failure", chains_evm_compliant_failure: "chains_evm_compliant_failure", invalid_cacao: "invalid_cacao", subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure", authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure", authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found" };
var ei2 = 0.1;
var ti = "event-client";
var ii2 = 86400;
var si2 = "https://pulse.walletconnect.org/batch";
function cr(r2, e) {
  if (r2.length >= 255) throw new TypeError("Alphabet too long");
  for (var t = new Uint8Array(256), i3 = 0; i3 < t.length; i3++) t[i3] = 255;
  for (var s = 0; s < r2.length; s++) {
    var n2 = r2.charAt(s), o2 = n2.charCodeAt(0);
    if (t[o2] !== 255) throw new TypeError(n2 + " is ambiguous");
    t[o2] = s;
  }
  var a2 = r2.length, c3 = r2.charAt(0), h3 = Math.log(a2) / Math.log(256), l2 = Math.log(256) / Math.log(a2);
  function g2(u2) {
    if (u2 instanceof Uint8Array || (ArrayBuffer.isView(u2) ? u2 = new Uint8Array(u2.buffer, u2.byteOffset, u2.byteLength) : Array.isArray(u2) && (u2 = Uint8Array.from(u2))), !(u2 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (u2.length === 0) return "";
    for (var m3 = 0, D2 = 0, w3 = 0, E2 = u2.length; w3 !== E2 && u2[w3] === 0; ) w3++, m3++;
    for (var L2 = (E2 - w3) * l2 + 1 >>> 0, I2 = new Uint8Array(L2); w3 !== E2; ) {
      for (var k2 = u2[w3], T3 = 0, S4 = L2 - 1; (k2 !== 0 || T3 < D2) && S4 !== -1; S4--, T3++) k2 += 256 * I2[S4] >>> 0, I2[S4] = k2 % a2 >>> 0, k2 = k2 / a2 >>> 0;
      if (k2 !== 0) throw new Error("Non-zero carry");
      D2 = T3, w3++;
    }
    for (var O3 = L2 - D2; O3 !== L2 && I2[O3] === 0; ) O3++;
    for (var te3 = c3.repeat(m3); O3 < L2; ++O3) te3 += r2.charAt(I2[O3]);
    return te3;
  }
  function y3(u2) {
    if (typeof u2 != "string") throw new TypeError("Expected String");
    if (u2.length === 0) return new Uint8Array();
    var m3 = 0;
    if (u2[m3] !== " ") {
      for (var D2 = 0, w3 = 0; u2[m3] === c3; ) D2++, m3++;
      for (var E2 = (u2.length - m3) * h3 + 1 >>> 0, L2 = new Uint8Array(E2); u2[m3]; ) {
        var I2 = t[u2.charCodeAt(m3)];
        if (I2 === 255) return;
        for (var k2 = 0, T3 = E2 - 1; (I2 !== 0 || k2 < w3) && T3 !== -1; T3--, k2++) I2 += a2 * L2[T3] >>> 0, L2[T3] = I2 % 256 >>> 0, I2 = I2 / 256 >>> 0;
        if (I2 !== 0) throw new Error("Non-zero carry");
        w3 = k2, m3++;
      }
      if (u2[m3] !== " ") {
        for (var S4 = E2 - w3; S4 !== E2 && L2[S4] === 0; ) S4++;
        for (var O3 = new Uint8Array(D2 + (E2 - S4)), te3 = D2; S4 !== E2; ) O3[te3++] = L2[S4++];
        return O3;
      }
    }
  }
  function _2(u2) {
    var m3 = y3(u2);
    if (m3) return m3;
    throw new Error(`Non-${e} character`);
  }
  return { encode: g2, decodeUnsafe: y3, decode: _2 };
}
var hr = cr;
var lr2 = hr;
var ri2 = (r2) => {
  if (r2 instanceof Uint8Array && r2.constructor.name === "Uint8Array") return r2;
  if (r2 instanceof ArrayBuffer) return new Uint8Array(r2);
  if (ArrayBuffer.isView(r2)) return new Uint8Array(r2.buffer, r2.byteOffset, r2.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var ur2 = (r2) => new TextEncoder().encode(r2);
var dr2 = (r2) => new TextDecoder().decode(r2);
var pr2 = class {
  constructor(e, t, i3) {
    this.name = e, this.prefix = t, this.baseEncode = i3;
  }
  encode(e) {
    if (e instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var gr2 = class {
  constructor(e, t, i3) {
    if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = t.codePointAt(0), this.baseDecode = i3;
  }
  decode(e) {
    if (typeof e == "string") {
      if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e) {
    return ni2(this, e);
  }
};
var yr2 = class {
  constructor(e) {
    this.decoders = e;
  }
  or(e) {
    return ni2(this, e);
  }
  decode(e) {
    const t = e[0], i3 = this.decoders[t];
    if (i3) return i3.decode(e);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ni2 = (r2, e) => new yr2({ ...r2.decoders || { [r2.prefix]: r2 }, ...e.decoders || { [e.prefix]: e } });
var br2 = class {
  constructor(e, t, i3, s) {
    this.name = e, this.prefix = t, this.baseEncode = i3, this.baseDecode = s, this.encoder = new pr2(e, t, i3), this.decoder = new gr2(e, t, s);
  }
  encode(e) {
    return this.encoder.encode(e);
  }
  decode(e) {
    return this.decoder.decode(e);
  }
};
var Se = ({ name: r2, prefix: e, encode: t, decode: i3 }) => new br2(r2, e, t, i3);
var me2 = ({ prefix: r2, name: e, alphabet: t }) => {
  const { encode: i3, decode: s } = lr2(t, e);
  return Se({ prefix: r2, name: e, encode: i3, decode: (n2) => ri2(s(n2)) });
};
var mr2 = (r2, e, t, i3) => {
  const s = {};
  for (let l2 = 0; l2 < e.length; ++l2) s[e[l2]] = l2;
  let n2 = r2.length;
  for (; r2[n2 - 1] === "="; ) --n2;
  const o2 = new Uint8Array(n2 * t / 8 | 0);
  let a2 = 0, c3 = 0, h3 = 0;
  for (let l2 = 0; l2 < n2; ++l2) {
    const g2 = s[r2[l2]];
    if (g2 === void 0) throw new SyntaxError(`Non-${i3} character`);
    c3 = c3 << t | g2, a2 += t, a2 >= 8 && (a2 -= 8, o2[h3++] = 255 & c3 >> a2);
  }
  if (a2 >= t || 255 & c3 << 8 - a2) throw new SyntaxError("Unexpected end of data");
  return o2;
};
var fr = (r2, e, t) => {
  const i3 = e[e.length - 1] === "=", s = (1 << t) - 1;
  let n2 = "", o2 = 0, a2 = 0;
  for (let c3 = 0; c3 < r2.length; ++c3) for (a2 = a2 << 8 | r2[c3], o2 += 8; o2 > t; ) o2 -= t, n2 += e[s & a2 >> o2];
  if (o2 && (n2 += e[s & a2 << t - o2]), i3) for (; n2.length * t & 7; ) n2 += "=";
  return n2;
};
var x = ({ name: r2, prefix: e, bitsPerChar: t, alphabet: i3 }) => Se({ prefix: e, name: r2, encode(s) {
  return fr(s, i3, t);
}, decode(s) {
  return mr2(s, i3, t, r2);
} });
var Dr2 = Se({ prefix: "\0", name: "identity", encode: (r2) => dr2(r2), decode: (r2) => ur2(r2) });
var vr = Object.freeze({ __proto__: null, identity: Dr2 });
var _r2 = x({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var wr2 = Object.freeze({ __proto__: null, base2: _r2 });
var Er = x({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Ir2 = Object.freeze({ __proto__: null, base8: Er });
var Tr2 = me2({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Cr2 = Object.freeze({ __proto__: null, base10: Tr2 });
var Pr2 = x({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Sr2 = x({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Or2 = Object.freeze({ __proto__: null, base16: Pr2, base16upper: Sr2 });
var Rr2 = x({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Ar2 = x({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var xr = x({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var Nr2 = x({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var $r2 = x({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var zr2 = x({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var Lr2 = x({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var kr2 = x({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var jr2 = x({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var Ur2 = Object.freeze({ __proto__: null, base32: Rr2, base32upper: Ar2, base32pad: xr, base32padupper: Nr2, base32hex: $r2, base32hexupper: zr2, base32hexpad: Lr2, base32hexpadupper: kr2, base32z: jr2 });
var Fr3 = me2({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var Mr2 = me2({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var Kr2 = Object.freeze({ __proto__: null, base36: Fr3, base36upper: Mr2 });
var Br2 = me2({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Vr2 = me2({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var qr2 = Object.freeze({ __proto__: null, base58btc: Br2, base58flickr: Vr2 });
var Gr2 = x({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var Wr2 = x({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var Hr2 = x({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var Yr2 = x({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Jr2 = Object.freeze({ __proto__: null, base64: Gr2, base64pad: Wr2, base64url: Hr2, base64urlpad: Yr2 });
var oi2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var Xr2 = oi2.reduce((r2, e, t) => (r2[t] = e, r2), []);
var Zr2 = oi2.reduce((r2, e, t) => (r2[e.codePointAt(0)] = t, r2), []);
function Qr2(r2) {
  return r2.reduce((e, t) => (e += Xr2[t], e), "");
}
function en2(r2) {
  const e = [];
  for (const t of r2) {
    const i3 = Zr2[t.codePointAt(0)];
    if (i3 === void 0) throw new Error(`Non-base256emoji character: ${t}`);
    e.push(i3);
  }
  return new Uint8Array(e);
}
var tn = Se({ prefix: "🚀", name: "base256emoji", encode: Qr2, decode: en2 });
var sn2 = Object.freeze({ __proto__: null, base256emoji: tn });
var rn2 = ci;
var ai2 = 128;
var nn = 127;
var on2 = ~nn;
var an2 = Math.pow(2, 31);
function ci(r2, e, t) {
  e = e || [], t = t || 0;
  for (var i3 = t; r2 >= an2; ) e[t++] = r2 & 255 | ai2, r2 /= 128;
  for (; r2 & on2; ) e[t++] = r2 & 255 | ai2, r2 >>>= 7;
  return e[t] = r2 | 0, ci.bytes = t - i3 + 1, e;
}
var cn2 = Ve2;
var hn2 = 128;
var hi = 127;
function Ve2(r2, i3) {
  var t = 0, i3 = i3 || 0, s = 0, n2 = i3, o2, a2 = r2.length;
  do {
    if (n2 >= a2) throw Ve2.bytes = 0, new RangeError("Could not decode varint");
    o2 = r2[n2++], t += s < 28 ? (o2 & hi) << s : (o2 & hi) * Math.pow(2, s), s += 7;
  } while (o2 >= hn2);
  return Ve2.bytes = n2 - i3, t;
}
var ln2 = Math.pow(2, 7);
var un2 = Math.pow(2, 14);
var dn2 = Math.pow(2, 21);
var pn2 = Math.pow(2, 28);
var gn2 = Math.pow(2, 35);
var yn2 = Math.pow(2, 42);
var bn2 = Math.pow(2, 49);
var mn2 = Math.pow(2, 56);
var fn2 = Math.pow(2, 63);
var Dn2 = function(r2) {
  return r2 < ln2 ? 1 : r2 < un2 ? 2 : r2 < dn2 ? 3 : r2 < pn2 ? 4 : r2 < gn2 ? 5 : r2 < yn2 ? 6 : r2 < bn2 ? 7 : r2 < mn2 ? 8 : r2 < fn2 ? 9 : 10;
};
var vn2 = { encode: rn2, decode: cn2, encodingLength: Dn2 };
var li2 = vn2;
var ui2 = (r2, e, t = 0) => (li2.encode(r2, e, t), e);
var di2 = (r2) => li2.encodingLength(r2);
var qe2 = (r2, e) => {
  const t = e.byteLength, i3 = di2(r2), s = i3 + di2(t), n2 = new Uint8Array(s + t);
  return ui2(r2, n2, 0), ui2(t, n2, i3), n2.set(e, s), new _n2(r2, t, e, n2);
};
var _n2 = class {
  constructor(e, t, i3, s) {
    this.code = e, this.size = t, this.digest = i3, this.bytes = s;
  }
};
var pi2 = ({ name: r2, code: e, encode: t }) => new wn2(r2, e, t);
var wn2 = class {
  constructor(e, t, i3) {
    this.name = e, this.code = t, this.encode = i3;
  }
  digest(e) {
    if (e instanceof Uint8Array) {
      const t = this.encode(e);
      return t instanceof Uint8Array ? qe2(this.code, t) : t.then((i3) => qe2(this.code, i3));
    } else throw Error("Unknown type, must be binary type");
  }
};
var gi = (r2) => async (e) => new Uint8Array(await crypto.subtle.digest(r2, e));
var En2 = pi2({ name: "sha2-256", code: 18, encode: gi("SHA-256") });
var In2 = pi2({ name: "sha2-512", code: 19, encode: gi("SHA-512") });
var Tn2 = Object.freeze({ __proto__: null, sha256: En2, sha512: In2 });
var yi = 0;
var Cn2 = "identity";
var bi = ri2;
var Pn2 = (r2) => qe2(yi, bi(r2));
var Sn2 = { code: yi, name: Cn2, encode: bi, digest: Pn2 };
var On2 = Object.freeze({ __proto__: null, identity: Sn2 });
new TextEncoder(), new TextDecoder();
var mi2 = { ...vr, ...wr2, ...Ir2, ...Cr2, ...Or2, ...Ur2, ...Kr2, ...qr2, ...Jr2, ...sn2 };
({ ...Tn2, ...On2 });
function fi(r2) {
  return globalThis.Buffer != null ? new Uint8Array(r2.buffer, r2.byteOffset, r2.byteLength) : r2;
}
function Rn2(r2 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? fi(globalThis.Buffer.allocUnsafe(r2)) : new Uint8Array(r2);
}
function Di2(r2, e, t, i3) {
  return { name: r2, prefix: e, encoder: { name: r2, prefix: e, encode: t }, decoder: { decode: i3 } };
}
var vi = Di2("utf8", "u", (r2) => "u" + new TextDecoder("utf8").decode(r2), (r2) => new TextEncoder().encode(r2.substring(1)));
var Ge2 = Di2("ascii", "a", (r2) => {
  let e = "a";
  for (let t = 0; t < r2.length; t++) e += String.fromCharCode(r2[t]);
  return e;
}, (r2) => {
  r2 = r2.substring(1);
  const e = Rn2(r2.length);
  for (let t = 0; t < r2.length; t++) e[t] = r2.charCodeAt(t);
  return e;
});
var An2 = { utf8: vi, "utf-8": vi, hex: mi2.base16, latin1: Ge2, ascii: Ge2, binary: Ge2, ...mi2 };
function xn2(r2, e = "utf8") {
  const t = An2[e];
  if (!t) throw new Error(`Unsupported encoding "${e}"`);
  return (e === "utf8" || e === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? fi(globalThis.Buffer.from(r2, "utf-8")) : t.decoder.decode(`${t.prefix}${r2}`);
}
var Nn2 = Object.defineProperty;
var $n2 = (r2, e, t) => e in r2 ? Nn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var J3 = (r2, e, t) => $n2(r2, typeof e != "symbol" ? e + "" : e, t);
var _i2 = class {
  constructor(e, t) {
    this.core = e, this.logger = t, J3(this, "keychain", /* @__PURE__ */ new Map()), J3(this, "name", Pt2), J3(this, "version", St2), J3(this, "initialized", false), J3(this, "storagePrefix", W2), J3(this, "init", async () => {
      if (!this.initialized) {
        const i3 = await this.getKeyChain();
        typeof i3 < "u" && (this.keychain = i3), this.initialized = true;
      }
    }), J3(this, "has", (i3) => (this.isInitialized(), this.keychain.has(i3))), J3(this, "set", async (i3, s) => {
      this.isInitialized(), this.keychain.set(i3, s), await this.persist();
    }), J3(this, "get", (i3) => {
      this.isInitialized();
      const s = this.keychain.get(i3);
      if (typeof s > "u") {
        const { message: n2 } = Bt("NO_MATCHING_KEY", `${this.name}: ${i3}`);
        throw new Error(n2);
      }
      return s;
    }), J3(this, "del", async (i3) => {
      this.isInitialized(), this.keychain.delete(i3), await this.persist();
    }), this.core = e, this.logger = X(t, this.name);
  }
  get context() {
    return w(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setKeyChain(e) {
    await this.core.storage.setItem(this.storageKey, mi(e));
  }
  async getKeyChain() {
    const e = await this.core.storage.getItem(this.storageKey);
    return typeof e < "u" ? wi(e) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Bt("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var zn2 = Object.defineProperty;
var Ln2 = (r2, e, t) => e in r2 ? zn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var R2 = (r2, e, t) => Ln2(r2, typeof e != "symbol" ? e + "" : e, t);
var wi2 = class {
  constructor(e, t, i3) {
    this.core = e, this.logger = t, R2(this, "name", Tt2), R2(this, "keychain"), R2(this, "randomSessionIdentifier", la()), R2(this, "initialized", false), R2(this, "clientId"), R2(this, "init", async () => {
      this.initialized || (await this.keychain.init(), this.initialized = true);
    }), R2(this, "hasKeys", (s) => (this.isInitialized(), this.keychain.has(s))), R2(this, "getClientId", async () => {
      if (this.isInitialized(), this.clientId) return this.clientId;
      const s = await this.getClientSeed(), n2 = Po(s), o2 = Qe(n2.publicKey);
      return this.clientId = o2, o2;
    }), R2(this, "generateKeyPair", () => {
      this.isInitialized();
      const s = ua();
      return this.setPrivateKey(s.publicKey, s.privateKey);
    }), R2(this, "signJWT", async (s) => {
      this.isInitialized();
      const n2 = await this.getClientSeed(), o2 = Po(n2), a2 = this.randomSessionIdentifier, c3 = Ct2;
      return await Qo(a2, s, c3, o2);
    }), R2(this, "generateSharedKey", (s, n2, o2) => {
      this.isInitialized();
      const a2 = this.getPrivateKey(s), c3 = da(a2, n2);
      return this.setSymKey(c3, o2);
    }), R2(this, "setSymKey", async (s, n2) => {
      this.isInitialized();
      const o2 = n2 || ha(s);
      return await this.keychain.set(o2, s), o2;
    }), R2(this, "deleteKeyPair", async (s) => {
      this.isInitialized(), await this.keychain.del(s);
    }), R2(this, "deleteSymKey", async (s) => {
      this.isInitialized(), await this.keychain.del(s);
    }), R2(this, "encode", async (s, n2, o2) => {
      this.isInitialized();
      const a2 = rs(o2), c3 = safeJsonStringify(n2);
      if (xa(a2)) return ya(c3, o2?.encoding);
      if (va(a2)) {
        const y3 = a2.senderPublicKey, _2 = a2.receiverPublicKey;
        s = await this.generateSharedKey(y3, _2);
      }
      const h3 = this.getSymKey(s), { type: l2, senderPublicKey: g2 } = a2;
      return ga({ type: l2, symKey: h3, message: c3, senderPublicKey: g2, encoding: o2?.encoding });
    }), R2(this, "decode", async (s, n2, o2) => {
      this.isInitialized();
      const a2 = wa(n2, o2);
      if (xa(a2)) {
        const c3 = ma(n2, o2?.encoding);
        return safeJsonParse(c3);
      }
      if (va(a2)) {
        const c3 = a2.receiverPublicKey, h3 = a2.senderPublicKey;
        s = await this.generateSharedKey(c3, h3);
      }
      try {
        const c3 = this.getSymKey(s), h3 = ba({ symKey: c3, encoded: n2, encoding: o2?.encoding });
        return safeJsonParse(h3);
      } catch (c3) {
        this.logger.error(`Failed to decode message from topic: '${s}', clientId: '${await this.getClientId()}'`), this.logger.error(c3);
      }
    }), R2(this, "getPayloadType", (s, n2 = oe) => {
      const o2 = ze({ encoded: s, encoding: n2 });
      return Zt(o2.type);
    }), R2(this, "getPayloadSenderPublicKey", (s, n2 = oe) => {
      const o2 = ze({ encoded: s, encoding: n2 });
      return o2.senderPublicKey ? toString3(o2.senderPublicKey, rt) : void 0;
    }), this.core = e, this.logger = X(t, this.name), this.keychain = i3 || new _i2(this.core, this.logger);
  }
  get context() {
    return w(this.logger);
  }
  async setPrivateKey(e, t) {
    return await this.keychain.set(e, t), e;
  }
  getPrivateKey(e) {
    return this.keychain.get(e);
  }
  async getClientSeed() {
    let e = "";
    try {
      e = this.keychain.get(Me2);
    } catch {
      e = la(), await this.keychain.set(Me2, e);
    }
    return xn2(e, "base16");
  }
  getSymKey(e) {
    return this.keychain.get(e);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Bt("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var kn2 = Object.defineProperty;
var jn2 = Object.defineProperties;
var Un2 = Object.getOwnPropertyDescriptors;
var Ei = Object.getOwnPropertySymbols;
var Fn2 = Object.prototype.hasOwnProperty;
var Mn2 = Object.prototype.propertyIsEnumerable;
var We2 = (r2, e, t) => e in r2 ? kn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Kn2 = (r2, e) => {
  for (var t in e || (e = {})) Fn2.call(e, t) && We2(r2, t, e[t]);
  if (Ei) for (var t of Ei(e)) Mn2.call(e, t) && We2(r2, t, e[t]);
  return r2;
};
var Bn2 = (r2, e) => jn2(r2, Un2(e));
var K2 = (r2, e, t) => We2(r2, typeof e != "symbol" ? e + "" : e, t);
var Ii2 = class extends y {
  constructor(e, t) {
    super(e, t), this.logger = e, this.core = t, K2(this, "messages", /* @__PURE__ */ new Map()), K2(this, "messagesWithoutClientAck", /* @__PURE__ */ new Map()), K2(this, "name", Ot2), K2(this, "version", Rt2), K2(this, "initialized", false), K2(this, "storagePrefix", W2), K2(this, "init", async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const i3 = await this.getRelayerMessages();
          typeof i3 < "u" && (this.messages = i3);
          const s = await this.getRelayerMessagesWithoutClientAck();
          typeof s < "u" && (this.messagesWithoutClientAck = s), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (i3) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(i3);
        } finally {
          this.initialized = true;
        }
      }
    }), K2(this, "set", async (i3, s, n2) => {
      this.isInitialized();
      const o2 = pa(s);
      let a2 = this.messages.get(i3);
      if (typeof a2 > "u" && (a2 = {}), typeof a2[o2] < "u") return o2;
      if (a2[o2] = s, this.messages.set(i3, a2), n2 === ye2.inbound) {
        const c3 = this.messagesWithoutClientAck.get(i3) || {};
        this.messagesWithoutClientAck.set(i3, Bn2(Kn2({}, c3), { [o2]: s }));
      }
      return await this.persist(), o2;
    }), K2(this, "get", (i3) => {
      this.isInitialized();
      let s = this.messages.get(i3);
      return typeof s > "u" && (s = {}), s;
    }), K2(this, "getWithoutAck", (i3) => {
      this.isInitialized();
      const s = {};
      for (const n2 of i3) {
        const o2 = this.messagesWithoutClientAck.get(n2) || {};
        s[n2] = Object.values(o2);
      }
      return s;
    }), K2(this, "has", (i3, s) => {
      this.isInitialized();
      const n2 = this.get(i3), o2 = pa(s);
      return typeof n2[o2] < "u";
    }), K2(this, "ack", async (i3, s) => {
      this.isInitialized();
      const n2 = this.messagesWithoutClientAck.get(i3);
      if (typeof n2 > "u") return;
      const o2 = pa(s);
      delete n2[o2], Object.keys(n2).length === 0 ? this.messagesWithoutClientAck.delete(i3) : this.messagesWithoutClientAck.set(i3, n2), await this.persist();
    }), K2(this, "del", async (i3) => {
      this.isInitialized(), this.messages.delete(i3), this.messagesWithoutClientAck.delete(i3), await this.persist();
    }), this.logger = X(e, this.name), this.core = t;
  }
  get context() {
    return w(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get storageKeyWithoutClientAck() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name + "_withoutClientAck";
  }
  async setRelayerMessages(e) {
    await this.core.storage.setItem(this.storageKey, mi(e));
  }
  async setRelayerMessagesWithoutClientAck(e) {
    await this.core.storage.setItem(this.storageKeyWithoutClientAck, mi(e));
  }
  async getRelayerMessages() {
    const e = await this.core.storage.getItem(this.storageKey);
    return typeof e < "u" ? wi(e) : void 0;
  }
  async getRelayerMessagesWithoutClientAck() {
    const e = await this.core.storage.getItem(this.storageKeyWithoutClientAck);
    return typeof e < "u" ? wi(e) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages), await this.setRelayerMessagesWithoutClientAck(this.messagesWithoutClientAck);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Bt("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Vn2 = Object.defineProperty;
var qn2 = Object.defineProperties;
var Gn2 = Object.getOwnPropertyDescriptors;
var Ti2 = Object.getOwnPropertySymbols;
var Wn2 = Object.prototype.hasOwnProperty;
var Hn2 = Object.prototype.propertyIsEnumerable;
var He2 = (r2, e, t) => e in r2 ? Vn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var ce = (r2, e) => {
  for (var t in e || (e = {})) Wn2.call(e, t) && He2(r2, t, e[t]);
  if (Ti2) for (var t of Ti2(e)) Hn2.call(e, t) && He2(r2, t, e[t]);
  return r2;
};
var Ci2 = (r2, e) => qn2(r2, Gn2(e));
var G = (r2, e, t) => He2(r2, typeof e != "symbol" ? e + "" : e, t);
var Yn2 = class extends m {
  constructor(e, t) {
    super(e, t), this.relayer = e, this.logger = t, G(this, "events", new import_events3.EventEmitter()), G(this, "name", xt2), G(this, "queue", /* @__PURE__ */ new Map()), G(this, "publishTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_MINUTE)), G(this, "initialPublishTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND * 15)), G(this, "needsTransportRestart", false), G(this, "publish", async (i3, s, n2) => {
      var o2, a2, c3, h3, l2;
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: i3, message: s, opts: n2 } });
      const g2 = n2?.ttl || At2, y3 = n2?.prompt || false, _2 = n2?.tag || 0, u2 = n2?.id || getBigIntRpcId().toString(), m3 = Aa(Ba().protocol), D2 = { id: u2, method: n2?.publishMethod || m3.publish, params: ce({ topic: i3, message: s, ttl: g2, prompt: y3, tag: _2, attestation: n2?.attestation }, n2?.tvf) }, w3 = `Failed to publish payload, please try again. id:${u2} tag:${_2}`;
      try {
        Dt((o2 = D2.params) == null ? void 0 : o2.prompt) && ((a2 = D2.params) == null || delete a2.prompt), Dt((c3 = D2.params) == null ? void 0 : c3.tag) && ((h3 = D2.params) == null || delete h3.tag);
        const E2 = new Promise(async (L2) => {
          const I2 = ({ id: T3 }) => {
            var S4;
            ((S4 = D2.id) == null ? void 0 : S4.toString()) === T3.toString() && (this.removeRequestFromQueue(T3), this.relayer.events.removeListener(C2.publish, I2), L2());
          };
          this.relayer.events.on(C2.publish, I2);
          const k2 = Ai(new Promise((T3, S4) => {
            this.rpcPublish(D2, n2).then(T3).catch((O3) => {
              this.logger.warn(O3, O3?.message), S4(O3);
            });
          }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${u2} tag:${_2}`);
          try {
            await k2, this.events.removeListener(C2.publish, I2);
          } catch (T3) {
            this.queue.set(u2, { request: D2, opts: n2, attempt: 1 }), this.logger.warn(T3, T3?.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: u2, topic: i3, message: s, opts: n2 } }), await Ai(E2, this.publishTimeout, w3);
      } catch (E2) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(E2), (l2 = n2?.internal) != null && l2.throwOnFailedPublish) throw E2;
      } finally {
        this.queue.delete(u2);
      }
    }), G(this, "publishCustom", async (i3) => {
      var s, n2, o2, a2, c3;
      this.logger.debug("Publishing custom payload"), this.logger.trace({ type: "method", method: "publishCustom", params: i3 });
      const { payload: h3, opts: l2 = {} } = i3, { attestation: g2, tvf: y3, publishMethod: _2, prompt: u2, tag: m3, ttl: D2 = import_time2.FIVE_MINUTES } = l2, w3 = l2.id || getBigIntRpcId().toString(), E2 = Aa(Ba().protocol), L2 = _2 || E2.publish, I2 = { id: w3, method: L2, params: ce(Ci2(ce({}, h3), { ttl: D2, prompt: u2, tag: m3, attestation: g2 }), y3) }, k2 = `Failed to publish custom payload, please try again. id:${w3} tag:${m3}`;
      try {
        Dt((s = I2.params) == null ? void 0 : s.prompt) && ((n2 = I2.params) == null || delete n2.prompt), Dt((o2 = I2.params) == null ? void 0 : o2.tag) && ((a2 = I2.params) == null || delete a2.tag);
        const T3 = new Promise(async (S4) => {
          const O3 = ({ id: Z2 }) => {
            var we4;
            ((we4 = I2.id) == null ? void 0 : we4.toString()) === Z2.toString() && (this.removeRequestFromQueue(Z2), this.relayer.events.removeListener(C2.publish, O3), S4());
          };
          this.relayer.events.on(C2.publish, O3);
          const te3 = Ai(new Promise((Z2, we4) => {
            this.rpcPublish(I2, l2).then(Z2).catch((Ee3) => {
              this.logger.warn(Ee3, Ee3?.message), we4(Ee3);
            });
          }), this.initialPublishTimeout, `Failed initial custom payload publish, retrying.... method:${L2} id:${w3} tag:${m3}`);
          try {
            await te3, this.events.removeListener(C2.publish, O3);
          } catch (Z2) {
            this.queue.set(w3, { request: I2, opts: l2, attempt: 1 }), this.logger.warn(Z2, Z2?.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: w3, payload: h3, opts: l2 } }), await Ai(T3, this.publishTimeout, k2);
      } catch (T3) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(T3), (c3 = l2?.internal) != null && c3.throwOnFailedPublish) throw T3;
      } finally {
        this.queue.delete(w3);
      }
    }), G(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), G(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), G(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), G(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), this.relayer = e, this.logger = X(t, this.name), this.registerEventListeners();
  }
  get context() {
    return w(this.logger);
  }
  async rpcPublish(e, t) {
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: e });
    const i3 = await this.relayer.request(e);
    return this.relayer.events.emit(C2.publish, ce(ce({}, e), t)), this.logger.debug("Successfully Published Payload"), i3;
  }
  removeRequestFromQueue(e) {
    this.queue.delete(e);
  }
  checkQueue() {
    this.queue.forEach(async (e, t) => {
      var i3;
      const s = e.attempt + 1;
      this.queue.set(t, Ci2(ce({}, e), { attempt: s })), this.logger.warn({}, `Publisher: queue->publishing: ${e.request.id}, tag: ${(i3 = e.request.params) == null ? void 0 : i3.tag}, attempt: ${s}`), await this.rpcPublish(e.request, e.opts), this.logger.warn({}, `Publisher: queue->published: ${e.request.id}`);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(r.pulse, () => {
      if (this.needsTransportRestart) {
        this.needsTransportRestart = false, this.relayer.events.emit(C2.connection_stalled);
        return;
      }
      this.checkQueue();
    }), this.relayer.on(C2.message_ack, (e) => {
      this.removeRequestFromQueue(e.id.toString());
    });
  }
};
var Jn2 = Object.defineProperty;
var Xn2 = (r2, e, t) => e in r2 ? Jn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var he2 = (r2, e, t) => Xn2(r2, typeof e != "symbol" ? e + "" : e, t);
var Zn2 = class {
  constructor() {
    he2(this, "map", /* @__PURE__ */ new Map()), he2(this, "set", (e, t) => {
      const i3 = this.get(e);
      this.exists(e, t) || this.map.set(e, [...i3, t]);
    }), he2(this, "get", (e) => this.map.get(e) || []), he2(this, "exists", (e, t) => this.get(e).includes(t)), he2(this, "delete", (e, t) => {
      if (typeof t > "u") {
        this.map.delete(e);
        return;
      }
      if (!this.map.has(e)) return;
      const i3 = this.get(e);
      if (!this.exists(e, t)) return;
      const s = i3.filter((n2) => n2 !== t);
      if (!s.length) {
        this.map.delete(e);
        return;
      }
      this.map.set(e, s);
    }), he2(this, "clear", () => {
      this.map.clear();
    });
  }
  get topics() {
    return Array.from(this.map.keys());
  }
};
var Qn = Object.defineProperty;
var eo2 = Object.defineProperties;
var to2 = Object.getOwnPropertyDescriptors;
var Pi2 = Object.getOwnPropertySymbols;
var io2 = Object.prototype.hasOwnProperty;
var so2 = Object.prototype.propertyIsEnumerable;
var Ye2 = (r2, e, t) => e in r2 ? Qn(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var fe = (r2, e) => {
  for (var t in e || (e = {})) io2.call(e, t) && Ye2(r2, t, e[t]);
  if (Pi2) for (var t of Pi2(e)) so2.call(e, t) && Ye2(r2, t, e[t]);
  return r2;
};
var Je2 = (r2, e) => eo2(r2, to2(e));
var f4 = (r2, e, t) => Ye2(r2, typeof e != "symbol" ? e + "" : e, t);
var Si2 = class extends P {
  constructor(e, t) {
    super(e, t), this.relayer = e, this.logger = t, f4(this, "subscriptions", /* @__PURE__ */ new Map()), f4(this, "topicMap", new Zn2()), f4(this, "events", new import_events3.EventEmitter()), f4(this, "name", Ft2), f4(this, "version", Mt2), f4(this, "pending", /* @__PURE__ */ new Map()), f4(this, "cached", []), f4(this, "initialized", false), f4(this, "storagePrefix", W2), f4(this, "subscribeTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_MINUTE)), f4(this, "initialSubscribeTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND * 15)), f4(this, "clientId"), f4(this, "batchSubscribeTopicsLimit", 500), f4(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), await this.restore()), this.initialized = true;
    }), f4(this, "subscribe", async (i3, s) => {
      var n2;
      this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i3, opts: s } });
      try {
        const o2 = Ba(s), a2 = { topic: i3, relay: o2, transportType: s?.transportType };
        (n2 = s?.internal) != null && n2.skipSubscribe || this.pending.set(i3, a2);
        const c3 = await this.rpcSubscribe(i3, o2, s);
        return typeof c3 == "string" && (this.onSubscribe(c3, a2), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i3, opts: s } })), c3;
      } catch (o2) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(o2), o2;
      }
    }), f4(this, "unsubscribe", async (i3, s) => {
      this.isInitialized(), typeof s?.id < "u" ? await this.unsubscribeById(i3, s.id, s) : await this.unsubscribeByTopic(i3, s);
    }), f4(this, "isSubscribed", (i3) => new Promise((s) => {
      s(this.topicMap.topics.includes(i3));
    })), f4(this, "isKnownTopic", (i3) => new Promise((s) => {
      s(this.topicMap.topics.includes(i3) || this.pending.has(i3) || this.cached.some((n2) => n2.topic === i3));
    })), f4(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), f4(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), f4(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), f4(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), f4(this, "start", async () => {
      await this.onConnect();
    }), f4(this, "stop", async () => {
      await this.onDisconnect();
    }), f4(this, "restart", async () => {
      await this.restore(), await this.onRestart();
    }), f4(this, "checkPending", async () => {
      if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected)) return;
      const i3 = [];
      this.pending.forEach((s) => {
        i3.push(s);
      }), await this.batchSubscribe(i3);
    }), f4(this, "registerEventListeners", () => {
      this.relayer.core.heartbeat.on(r.pulse, async () => {
        await this.checkPending();
      }), this.events.on(j.created, async (i3) => {
        const s = j.created;
        this.logger.info(`Emitting ${s}`), this.logger.debug({ type: "event", event: s, data: i3 }), await this.persist();
      }), this.events.on(j.deleted, async (i3) => {
        const s = j.deleted;
        this.logger.info(`Emitting ${s}`), this.logger.debug({ type: "event", event: s, data: i3 }), await this.persist();
      });
    }), this.relayer = e, this.logger = X(t, this.name), this.clientId = "";
  }
  get context() {
    return w(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  get hasAnyTopics() {
    return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;
  }
  hasSubscription(e, t) {
    let i3 = false;
    try {
      i3 = this.getSubscription(e).topic === t;
    } catch {
    }
    return i3;
  }
  reset() {
    this.cached = [], this.initialized = true;
  }
  onDisable() {
    this.values.length > 0 && (this.cached = this.values), this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e, t) {
    const i3 = this.topicMap.get(e);
    await Promise.all(i3.map(async (s) => await this.unsubscribeById(e, s, t)));
  }
  async unsubscribeById(e, t, i3) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e, id: t, opts: i3 } });
    try {
      const s = Ba(i3);
      await this.restartToComplete({ topic: e, id: t, relay: s }), await this.rpcUnsubscribe(e, t, s);
      const n2 = zt("USER_DISCONNECTED", `${this.name}, ${e}`);
      await this.onUnsubscribe(e, t, n2), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e, id: t, opts: i3 } });
    } catch (s) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(s), s;
    }
  }
  async rpcSubscribe(e, t, i3) {
    var s, n2;
    const o2 = await this.getSubscriptionId(e);
    if ((s = i3?.internal) != null && s.skipSubscribe) return o2;
    (!i3 || i3?.transportType === ee2.relay) && await this.restartToComplete({ topic: e, id: e, relay: t });
    const a2 = { method: Aa(t.protocol).subscribe, params: { topic: e } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: a2 });
    const c3 = (n2 = i3?.internal) == null ? void 0 : n2.throwOnFailedPublish;
    try {
      if (i3?.transportType === ee2.link_mode) return setTimeout(() => {
        (this.relayer.connected || this.relayer.connecting) && this.relayer.request(a2).catch((g2) => this.logger.warn(g2));
      }, (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND)), o2;
      const h3 = new Promise(async (g2) => {
        const y3 = (_2) => {
          _2.topic === e && (this.events.removeListener(j.created, y3), g2(_2.id));
        };
        this.events.on(j.created, y3);
        try {
          const _2 = await Ai(new Promise((u2, m3) => {
            this.relayer.request(a2).catch((D2) => {
              this.logger.warn(D2, D2?.message), m3(D2);
            }).then(u2);
          }), this.initialSubscribeTimeout, `Subscribing to ${e} failed, please try again`);
          this.events.removeListener(j.created, y3), g2(_2);
        } catch {
        }
      }), l2 = await Ai(h3, this.subscribeTimeout, `Subscribing to ${e} failed, please try again`);
      if (!l2 && c3) throw new Error(`Subscribing to ${e} failed, please try again`);
      return l2 ? o2 : null;
    } catch (h3) {
      if (this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(C2.connection_stalled), c3) throw h3;
    }
    return null;
  }
  async rpcBatchSubscribe(e) {
    if (!e.length) return;
    const t = e[0].relay, i3 = { method: Aa(t.protocol).batchSubscribe, params: { topics: e.map((s) => s.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i3 });
    try {
      await await Ai(new Promise((s) => {
        this.relayer.request(i3).catch((n2) => this.logger.warn(n2)).then(s);
      }), this.subscribeTimeout, "rpcBatchSubscribe failed, please try again");
    } catch {
      this.relayer.events.emit(C2.connection_stalled);
    }
  }
  async rpcBatchFetchMessages(e) {
    if (!e.length) return;
    const t = e[0].relay, i3 = { method: Aa(t.protocol).batchFetchMessages, params: { topics: e.map((n2) => n2.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i3 });
    let s;
    try {
      s = await await Ai(new Promise((n2, o2) => {
        this.relayer.request(i3).catch((a2) => {
          this.logger.warn(a2), o2(a2);
        }).then(n2);
      }), this.subscribeTimeout, "rpcBatchFetchMessages failed, please try again");
    } catch {
      this.relayer.events.emit(C2.connection_stalled);
    }
    return s;
  }
  rpcUnsubscribe(e, t, i3) {
    const s = { method: Aa(i3.protocol).unsubscribe, params: { topic: e, id: t } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s }), this.relayer.request(s);
  }
  onSubscribe(e, t) {
    this.setSubscription(e, Je2(fe({}, t), { id: e })), this.pending.delete(t.topic);
  }
  onBatchSubscribe(e) {
    e.length && e.forEach((t) => {
      this.setSubscription(t.id, fe({}, t)), this.pending.delete(t.topic);
    });
  }
  async onUnsubscribe(e, t, i3) {
    this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, i3), await this.relayer.messages.del(e);
  }
  async setRelayerSubscriptions(e) {
    await this.relayer.core.storage.setItem(this.storageKey, e);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e, t) {
    this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e, subscription: t }), this.addSubscription(e, t);
  }
  addSubscription(e, t) {
    this.subscriptions.set(e, fe({}, t)), this.topicMap.set(t.topic, e), this.events.emit(j.created, t);
  }
  getSubscription(e) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e });
    const t = this.subscriptions.get(e);
    if (!t) {
      const { message: i3 } = Bt("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw new Error(i3);
    }
    return t;
  }
  deleteSubscription(e, t) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e, reason: t });
    const i3 = this.getSubscription(e);
    this.subscriptions.delete(e), this.topicMap.delete(i3.topic, e), this.events.emit(j.deleted, Je2(fe({}, i3), { reason: t }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit(j.sync);
  }
  async onRestart() {
    if (this.cached.length) {
      const e = [...this.cached], t = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let i3 = 0; i3 < t; i3++) {
        const s = e.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchSubscribe(s);
      }
    }
    this.events.emit(j.resubscribed);
  }
  async restore() {
    try {
      const e = await this.getRelayerSubscriptions();
      if (typeof e > "u" || !e.length) return;
      if (this.subscriptions.size && !e.every((t) => {
        var i3;
        return t.topic === ((i3 = this.subscriptions.get(t.id)) == null ? void 0 : i3.topic);
      })) {
        const { message: t } = Bt("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e);
    }
  }
  async batchSubscribe(e) {
    e.length && (await this.rpcBatchSubscribe(e), this.onBatchSubscribe(await Promise.all(e.map(async (t) => Je2(fe({}, t), { id: await this.getSubscriptionId(t.topic) })))));
  }
  async batchFetchMessages(e) {
    if (!e.length) return;
    this.logger.trace(`Fetching batch messages for ${e.length} subscriptions`);
    const t = await this.rpcBatchFetchMessages(e);
    t && t.messages && (await Li((0, import_time2.toMiliseconds)(import_time2.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t.messages));
  }
  async onConnect() {
    await this.restart(), this.reset();
  }
  onDisconnect() {
    this.onDisable();
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Bt("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  async restartToComplete(e) {
    !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e), await this.relayer.transportOpen());
  }
  async getClientId() {
    return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;
  }
  async getSubscriptionId(e) {
    return pa(e + await this.getClientId());
  }
};
var ro = Object.defineProperty;
var Oi2 = Object.getOwnPropertySymbols;
var no = Object.prototype.hasOwnProperty;
var oo = Object.prototype.propertyIsEnumerable;
var Xe2 = (r2, e, t) => e in r2 ? ro(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Ri2 = (r2, e) => {
  for (var t in e || (e = {})) no.call(e, t) && Xe2(r2, t, e[t]);
  if (Oi2) for (var t of Oi2(e)) oo.call(e, t) && Xe2(r2, t, e[t]);
  return r2;
};
var p2 = (r2, e, t) => Xe2(r2, typeof e != "symbol" ? e + "" : e, t);
var Ai2 = class extends d {
  constructor(e) {
    var t;
    super(e), p2(this, "protocol", "wc"), p2(this, "version", 2), p2(this, "core"), p2(this, "logger"), p2(this, "events", new import_events3.EventEmitter()), p2(this, "provider"), p2(this, "messages"), p2(this, "subscriber"), p2(this, "publisher"), p2(this, "name", zt2), p2(this, "transportExplicitlyClosed", false), p2(this, "initialized", false), p2(this, "connectionAttemptInProgress", false), p2(this, "relayUrl"), p2(this, "projectId"), p2(this, "packageName"), p2(this, "bundleId"), p2(this, "hasExperiencedNetworkDisruption", false), p2(this, "pingTimeout"), p2(this, "heartBeatTimeout", (0, import_time2.toMiliseconds)(import_time2.THIRTY_SECONDS + import_time2.FIVE_SECONDS)), p2(this, "reconnectTimeout"), p2(this, "connectPromise"), p2(this, "reconnectInProgress", false), p2(this, "requestsInFlight", []), p2(this, "connectTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND * 15)), p2(this, "request", async (i3) => {
      var s, n2;
      this.logger.debug("Publishing Request Payload");
      const o2 = i3.id || getBigIntRpcId().toString();
      await this.toEstablishConnection();
      try {
        this.logger.trace({ id: o2, method: i3.method, topic: (s = i3.params) == null ? void 0 : s.topic }, "relayer.request - publishing...");
        const a2 = `${o2}:${((n2 = i3.params) == null ? void 0 : n2.tag) || ""}`;
        this.requestsInFlight.push(a2);
        const c3 = await this.provider.request(i3);
        return this.requestsInFlight = this.requestsInFlight.filter((h3) => h3 !== a2), c3;
      } catch (a2) {
        throw this.logger.debug(`Failed to Publish Request: ${o2}`), a2;
      }
    }), p2(this, "resetPingTimeout", () => {
      rn() && (clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {
        var i3, s, n2, o2;
        try {
          this.logger.debug({}, "pingTimeout: Connection stalled, terminating..."), (o2 = (n2 = (s = (i3 = this.provider) == null ? void 0 : i3.connection) == null ? void 0 : s.socket) == null ? void 0 : n2.terminate) == null || o2.call(n2);
        } catch (a2) {
          this.logger.warn(a2, a2?.message);
        }
      }, this.heartBeatTimeout));
    }), p2(this, "onPayloadHandler", (i3) => {
      this.onProviderPayload(i3), this.resetPingTimeout();
    }), p2(this, "onConnectHandler", () => {
      this.logger.warn({}, "Relayer connected 🛜"), this.startPingTimeout(), this.events.emit(C2.connect);
    }), p2(this, "onDisconnectHandler", () => {
      this.logger.warn({}, "Relayer disconnected 🛑"), this.requestsInFlight = [], this.onProviderDisconnect();
    }), p2(this, "onProviderErrorHandler", (i3) => {
      this.logger.fatal(`Fatal socket error: ${i3.message}`), this.events.emit(C2.error, i3), this.logger.fatal("Fatal socket error received, closing transport"), this.transportClose();
    }), p2(this, "registerProviderListeners", () => {
      this.provider.on(M2.payload, this.onPayloadHandler), this.provider.on(M2.connect, this.onConnectHandler), this.provider.on(M2.disconnect, this.onDisconnectHandler), this.provider.on(M2.error, this.onProviderErrorHandler);
    }), this.core = e.core, this.logger = wu({ logger: (t = e.logger) != null ? t : $t2, name: this.name }), this.messages = new Ii2(this.logger, e.core), this.subscriber = new Si2(this, this.logger), this.publisher = new Yn2(this, this.logger), this.projectId = e?.projectId, this.relayUrl = e?.relayUrl || Ke2, ai() ? this.packageName = li() : ui() && (this.bundleId = li()), this.provider = {};
  }
  async init() {
    this.logger.trace("Initialized"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = true, this.transportOpen().catch((e) => this.logger.warn(e, e?.message));
  }
  get context() {
    return w(this.logger);
  }
  get connected() {
    var e, t, i3;
    return ((i3 = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : i3.readyState) === 1 || false;
  }
  get connecting() {
    var e, t, i3;
    return ((i3 = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : i3.readyState) === 0 || this.connectPromise !== void 0 || false;
  }
  async publish(e, t, i3) {
    this.isInitialized(), await this.publisher.publish(e, t, i3), await this.recordMessageEvent({ topic: e, message: t, publishedAt: Date.now(), transportType: ee2.relay }, ye2.outbound);
  }
  async publishCustom(e) {
    this.isInitialized(), await this.publisher.publishCustom(e);
  }
  async subscribe(e, t) {
    var i3, s, n2;
    this.isInitialized(), (!(t != null && t.transportType) || t?.transportType === "relay") && await this.toEstablishConnection();
    const o2 = typeof ((i3 = t?.internal) == null ? void 0 : i3.throwOnFailedPublish) > "u" ? true : (s = t?.internal) == null ? void 0 : s.throwOnFailedPublish;
    let a2 = ((n2 = this.subscriber.topicMap.get(e)) == null ? void 0 : n2[0]) || "", c3;
    const h3 = (l2) => {
      l2.topic === e && (this.subscriber.off(j.created, h3), c3());
    };
    return await Promise.all([new Promise((l2) => {
      c3 = l2, this.subscriber.on(j.created, h3);
    }), new Promise(async (l2, g2) => {
      a2 = await this.subscriber.subscribe(e, Ri2({ internal: { throwOnFailedPublish: o2 } }, t)).catch((y3) => {
        o2 && g2(y3);
      }) || a2, l2();
    })]), a2;
  }
  async unsubscribe(e, t) {
    this.isInitialized(), await this.subscriber.unsubscribe(e, t);
  }
  on(e, t) {
    this.events.on(e, t);
  }
  once(e, t) {
    this.events.once(e, t);
  }
  off(e, t) {
    this.events.off(e, t);
  }
  removeListener(e, t) {
    this.events.removeListener(e, t);
  }
  async transportDisconnect() {
    this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await Ai(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();
  }
  async transportClose() {
    this.transportExplicitlyClosed = true, await this.transportDisconnect();
  }
  async transportOpen(e) {
    if (!this.subscriber.hasAnyTopics) {
      this.logger.info("Starting WS connection skipped because the client has no topics to work with.");
      return;
    }
    if (this.connectPromise ? (this.logger.debug({}, "Waiting for existing connection attempt to resolve..."), await this.connectPromise, this.logger.debug({}, "Existing connection attempt resolved")) : (this.connectPromise = new Promise(async (t, i3) => {
      await this.connect(e).then(t).catch(i3).finally(() => {
        this.connectPromise = void 0;
      });
    }), await this.connectPromise), !this.connected) throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);
  }
  async restartTransport(e) {
    this.logger.debug({}, "Restarting transport..."), !this.connectionAttemptInProgress && (this.relayUrl = e || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
  }
  async confirmOnlineStateOrThrow() {
    if (!await uu()) throw new Error("No internet connection detected. Please restart your network and try again.");
  }
  async handleBatchMessageEvents(e) {
    if (e?.length === 0) {
      this.logger.trace("Batch message events is empty. Ignoring...");
      return;
    }
    const t = e.sort((i3, s) => i3.publishedAt - s.publishedAt);
    this.logger.debug(`Batch of ${t.length} message events sorted`);
    for (const i3 of t) try {
      await this.onMessageEvent(i3);
    } catch (s) {
      this.logger.warn(s, "Error while processing batch message event: " + s?.message);
    }
    this.logger.trace(`Batch of ${t.length} message events processed`);
  }
  async onLinkMessageEvent(e, t) {
    const { topic: i3 } = e;
    if (!t.sessionExists) {
      const s = Ni(import_time2.FIVE_MINUTES), n2 = { topic: i3, expiry: s, relay: { protocol: "irn" }, active: false };
      await this.core.pairing.pairings.set(i3, n2);
    }
    this.events.emit(C2.message, e), await this.recordMessageEvent(e, ye2.inbound);
  }
  async connect(e) {
    await this.confirmOnlineStateOrThrow(), e && e !== this.relayUrl && (this.relayUrl = e, await this.transportDisconnect()), this.connectionAttemptInProgress = true, this.transportExplicitlyClosed = false;
    let t = 1;
    for (; t < 6; ) {
      try {
        if (this.transportExplicitlyClosed) break;
        this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t}...`), await this.createProvider(), await new Promise(async (i3, s) => {
          const n2 = () => {
            s(new Error("Connection interrupted while trying to connect"));
          };
          this.provider.once(M2.disconnect, n2), await Ai(new Promise((o2, a2) => {
            this.provider.connect().then(o2).catch(a2);
          }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((o2) => {
            s(o2);
          }).finally(() => {
            this.provider.off(M2.disconnect, n2), clearTimeout(this.reconnectTimeout);
          }), await new Promise(async (o2, a2) => {
            const c3 = () => {
              s(new Error("Connection interrupted while trying to subscribe"));
            };
            this.provider.once(M2.disconnect, c3), await this.subscriber.start().then(o2).catch(a2).finally(() => {
              this.provider.off(M2.disconnect, c3);
            });
          }), this.hasExperiencedNetworkDisruption = false, i3();
        });
      } catch (i3) {
        await this.subscriber.stop();
        const s = i3;
        this.logger.warn({}, s.message), this.hasExperiencedNetworkDisruption = true;
      } finally {
        this.connectionAttemptInProgress = false;
      }
      if (this.connected) {
        this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t}`);
        break;
      }
      await new Promise((i3) => setTimeout(i3, (0, import_time2.toMiliseconds)(t * 1))), t++;
    }
  }
  startPingTimeout() {
    var e, t, i3, s, n2;
    if (rn()) try {
      (t = (e = this.provider) == null ? void 0 : e.connection) != null && t.socket && ((n2 = (s = (i3 = this.provider) == null ? void 0 : i3.connection) == null ? void 0 : s.socket) == null || n2.on("ping", () => {
        this.resetPingTimeout();
      })), this.resetPingTimeout();
    } catch (o2) {
      this.logger.warn(o2, o2?.message);
    }
  }
  async createProvider() {
    this.provider.connection && this.unregisterProviderListeners();
    const e = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new o(new f(pi({ sdkVersion: Pe2, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e, useOnCloseEvent: true, bundleId: this.bundleId, packageName: this.packageName }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e, t) {
    const { topic: i3, message: s } = e;
    await this.messages.set(i3, s, t);
  }
  async shouldIgnoreMessageEvent(e) {
    const { topic: t, message: i3 } = e;
    if (!i3 || i3.length === 0) return this.logger.warn(`Ignoring invalid/empty message: ${i3}`), true;
    if (!await this.subscriber.isKnownTopic(t)) return this.logger.warn(`Ignoring message for unknown topic ${t}`), true;
    const s = this.messages.has(t, i3);
    return s && this.logger.warn(`Ignoring duplicate message: ${i3}`), s;
  }
  async onProviderPayload(e) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e }), isJsonRpcRequest(e)) {
      if (!e.method.endsWith(Lt2)) return;
      const t = e.params, { topic: i3, message: s, publishedAt: n2, attestation: o2 } = t.data, a2 = { topic: i3, message: s, publishedAt: n2, transportType: ee2.relay, attestation: o2 };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(Ri2({ type: "event", event: t.id }, a2)), this.events.emit(t.id, a2), await this.acknowledgePayload(e), await this.onMessageEvent(a2);
    } else isJsonRpcResponse(e) && this.events.emit(C2.message_ack, e);
  }
  async onMessageEvent(e) {
    await this.shouldIgnoreMessageEvent(e) || (await this.recordMessageEvent(e, ye2.inbound), this.events.emit(C2.message, e));
  }
  async acknowledgePayload(e) {
    const t = formatJsonRpcResult(e.id, true);
    await this.provider.connection.send(t);
  }
  unregisterProviderListeners() {
    this.provider.off(M2.payload, this.onPayloadHandler), this.provider.off(M2.connect, this.onConnectHandler), this.provider.off(M2.disconnect, this.onDisconnectHandler), this.provider.off(M2.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);
  }
  async registerEventListeners() {
    let e = await uu();
    lu(async (t) => {
      e !== t && (e = t, t ? await this.transportOpen().catch((i3) => this.logger.error(i3, i3?.message)) : (this.hasExperiencedNetworkDisruption = true, await this.transportDisconnect(), this.transportExplicitlyClosed = false));
    }), this.core.heartbeat.on(r.pulse, async () => {
      if (!this.transportExplicitlyClosed && !this.connected && du()) try {
        await this.confirmOnlineStateOrThrow(), await this.transportOpen();
      } catch (t) {
        this.logger.warn(t, t?.message);
      }
    });
  }
  async onProviderDisconnect() {
    clearTimeout(this.pingTimeout), this.events.emit(C2.disconnect), this.connectionAttemptInProgress = false, !this.reconnectInProgress && (this.reconnectInProgress = true, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async () => {
      await this.transportOpen().catch((e) => this.logger.error(e, e?.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = false;
    }, (0, import_time2.toMiliseconds)(kt2)))));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Bt("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  async toEstablishConnection() {
    if (await this.confirmOnlineStateOrThrow(), !this.connected) {
      if (this.connectPromise) {
        await this.connectPromise;
        return;
      }
      await this.connect();
    }
  }
};
function ao2(r2, e) {
  return r2 === e || Number.isNaN(r2) && Number.isNaN(e);
}
function xi(r2) {
  return Object.getOwnPropertySymbols(r2).filter((e) => Object.prototype.propertyIsEnumerable.call(r2, e));
}
function Ni2(r2) {
  return r2 == null ? r2 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(r2);
}
var co2 = "[object RegExp]";
var ho2 = "[object String]";
var lo2 = "[object Number]";
var uo = "[object Boolean]";
var $i2 = "[object Arguments]";
var po2 = "[object Symbol]";
var go2 = "[object Date]";
var yo2 = "[object Map]";
var bo2 = "[object Set]";
var mo2 = "[object Array]";
var fo = "[object Function]";
var Do2 = "[object ArrayBuffer]";
var Ze2 = "[object Object]";
var vo2 = "[object Error]";
var _o2 = "[object DataView]";
var wo2 = "[object Uint8Array]";
var Eo2 = "[object Uint8ClampedArray]";
var Io2 = "[object Uint16Array]";
var To2 = "[object Uint32Array]";
var Co2 = "[object BigUint64Array]";
var Po3 = "[object Int8Array]";
var So2 = "[object Int16Array]";
var Oo2 = "[object Int32Array]";
var Ro2 = "[object BigInt64Array]";
var Ao2 = "[object Float32Array]";
var xo2 = "[object Float64Array]";
function No2() {
}
function zi2(r2) {
  if (!r2 || typeof r2 != "object") return false;
  const e = Object.getPrototypeOf(r2);
  return e === null || e === Object.prototype || Object.getPrototypeOf(e) === null ? Object.prototype.toString.call(r2) === "[object Object]" : false;
}
function $o2(r2, e, t) {
  return De2(r2, e, void 0, void 0, void 0, void 0, t);
}
function De2(r2, e, t, i3, s, n2, o2) {
  const a2 = o2(r2, e, t, i3, s, n2);
  if (a2 !== void 0) return a2;
  if (typeof r2 == typeof e) switch (typeof r2) {
    case "bigint":
    case "string":
    case "boolean":
    case "symbol":
    case "undefined":
      return r2 === e;
    case "number":
      return r2 === e || Object.is(r2, e);
    case "function":
      return r2 === e;
    case "object":
      return ve2(r2, e, n2, o2);
  }
  return ve2(r2, e, n2, o2);
}
function ve2(r2, e, t, i3) {
  if (Object.is(r2, e)) return true;
  let s = Ni2(r2), n2 = Ni2(e);
  if (s === $i2 && (s = Ze2), n2 === $i2 && (n2 = Ze2), s !== n2) return false;
  switch (s) {
    case ho2:
      return r2.toString() === e.toString();
    case lo2: {
      const c3 = r2.valueOf(), h3 = e.valueOf();
      return ao2(c3, h3);
    }
    case uo:
    case go2:
    case po2:
      return Object.is(r2.valueOf(), e.valueOf());
    case co2:
      return r2.source === e.source && r2.flags === e.flags;
    case fo:
      return r2 === e;
  }
  t = t ?? /* @__PURE__ */ new Map();
  const o2 = t.get(r2), a2 = t.get(e);
  if (o2 != null && a2 != null) return o2 === e;
  t.set(r2, e), t.set(e, r2);
  try {
    switch (s) {
      case yo2: {
        if (r2.size !== e.size) return false;
        for (const [c3, h3] of r2.entries()) if (!e.has(c3) || !De2(h3, e.get(c3), c3, r2, e, t, i3)) return false;
        return true;
      }
      case bo2: {
        if (r2.size !== e.size) return false;
        const c3 = Array.from(r2.values()), h3 = Array.from(e.values());
        for (let l2 = 0; l2 < c3.length; l2++) {
          const g2 = c3[l2], y3 = h3.findIndex((_2) => De2(g2, _2, void 0, r2, e, t, i3));
          if (y3 === -1) return false;
          h3.splice(y3, 1);
        }
        return true;
      }
      case mo2:
      case wo2:
      case Eo2:
      case Io2:
      case To2:
      case Co2:
      case Po3:
      case So2:
      case Oo2:
      case Ro2:
      case Ao2:
      case xo2: {
        if (typeof Buffer < "u" && Buffer.isBuffer(r2) !== Buffer.isBuffer(e) || r2.length !== e.length) return false;
        for (let c3 = 0; c3 < r2.length; c3++) if (!De2(r2[c3], e[c3], c3, r2, e, t, i3)) return false;
        return true;
      }
      case Do2:
        return r2.byteLength !== e.byteLength ? false : ve2(new Uint8Array(r2), new Uint8Array(e), t, i3);
      case _o2:
        return r2.byteLength !== e.byteLength || r2.byteOffset !== e.byteOffset ? false : ve2(new Uint8Array(r2), new Uint8Array(e), t, i3);
      case vo2:
        return r2.name === e.name && r2.message === e.message;
      case Ze2: {
        if (!(ve2(r2.constructor, e.constructor, t, i3) || zi2(r2) && zi2(e))) return false;
        const h3 = [...Object.keys(r2), ...xi(r2)], l2 = [...Object.keys(e), ...xi(e)];
        if (h3.length !== l2.length) return false;
        for (let g2 = 0; g2 < h3.length; g2++) {
          const y3 = h3[g2], _2 = r2[y3];
          if (!Object.hasOwn(e, y3)) return false;
          const u2 = e[y3];
          if (!De2(_2, u2, y3, r2, e, t, i3)) return false;
        }
        return true;
      }
      default:
        return false;
    }
  } finally {
    t.delete(r2), t.delete(e);
  }
}
function zo2(r2, e) {
  return $o2(r2, e, No2);
}
var Lo2 = Object.defineProperty;
var Li2 = Object.getOwnPropertySymbols;
var ko2 = Object.prototype.hasOwnProperty;
var jo2 = Object.prototype.propertyIsEnumerable;
var Qe2 = (r2, e, t) => e in r2 ? Lo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var ki2 = (r2, e) => {
  for (var t in e || (e = {})) ko2.call(e, t) && Qe2(r2, t, e[t]);
  if (Li2) for (var t of Li2(e)) jo2.call(e, t) && Qe2(r2, t, e[t]);
  return r2;
};
var U = (r2, e, t) => Qe2(r2, typeof e != "symbol" ? e + "" : e, t);
var ji2 = class extends f3 {
  constructor(e, t, i3, s = W2, n2 = void 0) {
    super(e, t, i3, s), this.core = e, this.logger = t, this.name = i3, U(this, "map", /* @__PURE__ */ new Map()), U(this, "version", jt2), U(this, "cached", []), U(this, "initialized", false), U(this, "getKey"), U(this, "storagePrefix", W2), U(this, "recentlyDeleted", []), U(this, "recentlyDeletedLimit", 200), U(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((o2) => {
        this.getKey && o2 !== null && !Dt(o2) ? this.map.set(this.getKey(o2), o2) : Ga(o2) ? this.map.set(o2.id, o2) : za(o2) && this.map.set(o2.topic, o2);
      }), this.cached = [], this.initialized = true);
    }), U(this, "set", async (o2, a2) => {
      this.isInitialized(), this.map.has(o2) ? await this.update(o2, a2) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: o2, value: a2 }), this.map.set(o2, a2), await this.persist());
    }), U(this, "get", (o2) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: o2 }), this.getData(o2))), U(this, "getAll", (o2) => (this.isInitialized(), o2 ? this.values.filter((a2) => Object.keys(o2).every((c3) => zo2(a2[c3], o2[c3]))) : this.values)), U(this, "update", async (o2, a2) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: o2, update: a2 });
      const c3 = ki2(ki2({}, this.getData(o2)), a2);
      this.map.set(o2, c3), await this.persist();
    }), U(this, "delete", async (o2, a2) => {
      this.isInitialized(), this.map.has(o2) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: o2, reason: a2 }), this.map.delete(o2), this.addToRecentlyDeleted(o2), await this.persist());
    }), this.logger = X(t, this.name), this.storagePrefix = s, this.getKey = n2;
  }
  get context() {
    return w(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  addToRecentlyDeleted(e) {
    this.recentlyDeleted.push(e), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
  }
  async setDataStore(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e) {
    const t = this.map.get(e);
    if (!t) {
      if (this.recentlyDeleted.includes(e)) {
        const { message: s } = Bt("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e}`);
        throw this.logger.error(s), new Error(s);
      }
      const { message: i3 } = Bt("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw this.logger.error(i3), new Error(i3);
    }
    return t;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e = await this.getDataStore();
      if (typeof e > "u" || !e.length) return;
      if (this.map.size) {
        const { message: t } = Bt("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Bt("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Uo2 = Object.defineProperty;
var Fo2 = (r2, e, t) => e in r2 ? Uo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var d2 = (r2, e, t) => Fo2(r2, typeof e != "symbol" ? e + "" : e, t);
var Ui2 = class {
  constructor(e, t) {
    this.core = e, this.logger = t, d2(this, "name", Kt2), d2(this, "version", Bt2), d2(this, "events", new import_events3.default()), d2(this, "pairings"), d2(this, "initialized", false), d2(this, "storagePrefix", W2), d2(this, "ignoredPayloadTypes", [ie]), d2(this, "registeredMethods", []), d2(this, "init", async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = true, this.logger.trace("Initialized"));
    }), d2(this, "register", ({ methods: i3 }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...i3])];
    }), d2(this, "create", async (i3) => {
      this.isInitialized();
      const s = la(), n2 = await this.core.crypto.setSymKey(s), o2 = Ni(import_time2.FIVE_MINUTES), a2 = { protocol: Nt2 }, c3 = { topic: n2, expiry: o2, relay: a2, active: false, methods: i3?.methods }, h3 = $a({ protocol: this.core.protocol, version: this.core.version, topic: n2, symKey: s, relay: a2, expiryTimestamp: o2, methods: i3?.methods });
      return this.events.emit(ae2.create, c3), this.core.expirer.set(n2, o2), await this.pairings.set(n2, c3), await this.core.relayer.subscribe(n2, { transportType: i3?.transportType, internal: i3?.internal }), { topic: n2, uri: h3 };
    }), d2(this, "pair", async (i3) => {
      this.isInitialized();
      const s = this.core.eventClient.createEvent({ properties: { topic: i3?.uri, trace: [Y2.pairing_started] } });
      this.isValidPair(i3, s);
      const { topic: n2, symKey: o2, relay: a2, expiryTimestamp: c3, methods: h3 } = Ra(i3.uri);
      s.props.properties.topic = n2, s.addTrace(Y2.pairing_uri_validation_success), s.addTrace(Y2.pairing_uri_not_expired);
      let l2;
      if (this.pairings.keys.includes(n2)) {
        if (l2 = this.pairings.get(n2), s.addTrace(Y2.existing_pairing), l2.active) throw s.setError(X3.active_pairing_already_exists), new Error(`Pairing already exists: ${n2}. Please try again with a new connection URI.`);
        s.addTrace(Y2.pairing_not_expired);
      }
      const g2 = c3 || Ni(import_time2.FIVE_MINUTES), y3 = { topic: n2, relay: a2, expiry: g2, active: false, methods: h3 };
      this.core.expirer.set(n2, g2), await this.pairings.set(n2, y3), s.addTrace(Y2.store_new_pairing), i3.activatePairing && await this.activate({ topic: n2 }), this.events.emit(ae2.create, y3), s.addTrace(Y2.emit_inactive_pairing), this.core.crypto.keychain.has(n2) || await this.core.crypto.setSymKey(o2, n2), s.addTrace(Y2.subscribing_pairing_topic);
      try {
        await this.core.relayer.confirmOnlineStateOrThrow();
      } catch {
        s.setError(X3.no_internet_connection);
      }
      try {
        await this.core.relayer.subscribe(n2, { relay: a2 });
      } catch (_2) {
        throw s.setError(X3.subscribe_pairing_topic_failure), _2;
      }
      return s.addTrace(Y2.subscribe_pairing_topic_success), y3;
    }), d2(this, "activate", async ({ topic: i3 }) => {
      this.isInitialized();
      const s = Ni(import_time2.FIVE_MINUTES);
      this.core.expirer.set(i3, s), await this.pairings.update(i3, { active: true, expiry: s });
    }), d2(this, "ping", async (i3) => {
      this.isInitialized(), await this.isValidPing(i3), this.logger.warn("ping() is deprecated and will be removed in the next major release.");
      const { topic: s } = i3;
      if (this.pairings.keys.includes(s)) {
        const n2 = await this.sendRequest(s, "wc_pairingPing", {}), { done: o2, resolve: a2, reject: c3 } = Bi();
        this.events.once(_i("pairing_ping", n2), ({ error: h3 }) => {
          h3 ? c3(h3) : a2();
        }), await o2();
      }
    }), d2(this, "updateExpiry", async ({ topic: i3, expiry: s }) => {
      this.isInitialized(), await this.pairings.update(i3, { expiry: s });
    }), d2(this, "updateMetadata", async ({ topic: i3, metadata: s }) => {
      this.isInitialized(), await this.pairings.update(i3, { peerMetadata: s });
    }), d2(this, "getPairings", () => (this.isInitialized(), this.pairings.values)), d2(this, "disconnect", async (i3) => {
      this.isInitialized(), await this.isValidDisconnect(i3);
      const { topic: s } = i3;
      this.pairings.keys.includes(s) && (await this.sendRequest(s, "wc_pairingDelete", zt("USER_DISCONNECTED")), await this.deletePairing(s));
    }), d2(this, "formatUriFromPairing", (i3) => {
      this.isInitialized();
      const { topic: s, relay: n2, expiry: o2, methods: a2 } = i3, c3 = this.core.crypto.keychain.get(s);
      return $a({ protocol: this.core.protocol, version: this.core.version, topic: s, symKey: c3, relay: n2, expiryTimestamp: o2, methods: a2 });
    }), d2(this, "sendRequest", async (i3, s, n2) => {
      const o2 = formatJsonRpcRequest(s, n2), a2 = await this.core.crypto.encode(i3, o2), c3 = oe2[s].req;
      return this.core.history.set(i3, o2), this.core.relayer.publish(i3, a2, c3), o2.id;
    }), d2(this, "sendResult", async (i3, s, n2) => {
      const o2 = formatJsonRpcResult(i3, n2), a2 = await this.core.crypto.encode(s, o2), c3 = (await this.core.history.get(s, i3)).request.method, h3 = oe2[c3].res;
      await this.core.relayer.publish(s, a2, h3), await this.core.history.resolve(o2);
    }), d2(this, "sendError", async (i3, s, n2) => {
      const o2 = formatJsonRpcError(i3, n2), a2 = await this.core.crypto.encode(s, o2), c3 = (await this.core.history.get(s, i3)).request.method, h3 = oe2[c3] ? oe2[c3].res : oe2.unregistered_method.res;
      await this.core.relayer.publish(s, a2, h3), await this.core.history.resolve(o2);
    }), d2(this, "deletePairing", async (i3, s) => {
      await this.core.relayer.unsubscribe(i3), await Promise.all([this.pairings.delete(i3, zt("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(i3), s ? Promise.resolve() : this.core.expirer.del(i3)]);
    }), d2(this, "cleanup", async () => {
      const i3 = this.pairings.getAll().filter((s) => Ui(s.expiry));
      await Promise.all(i3.map((s) => this.deletePairing(s.topic)));
    }), d2(this, "onRelayEventRequest", async (i3) => {
      const { topic: s, payload: n2 } = i3;
      switch (n2.method) {
        case "wc_pairingPing":
          return await this.onPairingPingRequest(s, n2);
        case "wc_pairingDelete":
          return await this.onPairingDeleteRequest(s, n2);
        default:
          return await this.onUnknownRpcMethodRequest(s, n2);
      }
    }), d2(this, "onRelayEventResponse", async (i3) => {
      const { topic: s, payload: n2 } = i3, o2 = (await this.core.history.get(s, n2.id)).request.method;
      switch (o2) {
        case "wc_pairingPing":
          return this.onPairingPingResponse(s, n2);
        default:
          return this.onUnknownRpcMethodResponse(o2);
      }
    }), d2(this, "onPairingPingRequest", async (i3, s) => {
      const { id: n2 } = s;
      try {
        this.isValidPing({ topic: i3 }), await this.sendResult(n2, i3, true), this.events.emit(ae2.ping, { id: n2, topic: i3 });
      } catch (o2) {
        await this.sendError(n2, i3, o2), this.logger.error(o2);
      }
    }), d2(this, "onPairingPingResponse", (i3, s) => {
      const { id: n2 } = s;
      setTimeout(() => {
        isJsonRpcResult(s) ? this.events.emit(_i("pairing_ping", n2), {}) : isJsonRpcError(s) && this.events.emit(_i("pairing_ping", n2), { error: s.error });
      }, 500);
    }), d2(this, "onPairingDeleteRequest", async (i3, s) => {
      const { id: n2 } = s;
      try {
        this.isValidDisconnect({ topic: i3 }), await this.deletePairing(i3), this.events.emit(ae2.delete, { id: n2, topic: i3 });
      } catch (o2) {
        await this.sendError(n2, i3, o2), this.logger.error(o2);
      }
    }), d2(this, "onUnknownRpcMethodRequest", async (i3, s) => {
      const { id: n2, method: o2 } = s;
      try {
        if (this.registeredMethods.includes(o2)) return;
        const a2 = zt("WC_METHOD_UNSUPPORTED", o2);
        await this.sendError(n2, i3, a2), this.logger.error(a2);
      } catch (a2) {
        await this.sendError(n2, i3, a2), this.logger.error(a2);
      }
    }), d2(this, "onUnknownRpcMethodResponse", (i3) => {
      this.registeredMethods.includes(i3) || this.logger.error(zt("WC_METHOD_UNSUPPORTED", i3));
    }), d2(this, "isValidPair", (i3, s) => {
      var n2;
      if (!Qa(i3)) {
        const { message: a2 } = Bt("MISSING_OR_INVALID", `pair() params: ${i3}`);
        throw s.setError(X3.malformed_pairing_uri), new Error(a2);
      }
      if (!Za(i3.uri)) {
        const { message: a2 } = Bt("MISSING_OR_INVALID", `pair() uri: ${i3.uri}`);
        throw s.setError(X3.malformed_pairing_uri), new Error(a2);
      }
      const o2 = Ra(i3?.uri);
      if (!((n2 = o2?.relay) != null && n2.protocol)) {
        const { message: a2 } = Bt("MISSING_OR_INVALID", "pair() uri#relay-protocol");
        throw s.setError(X3.malformed_pairing_uri), new Error(a2);
      }
      if (!(o2 != null && o2.symKey)) {
        const { message: a2 } = Bt("MISSING_OR_INVALID", "pair() uri#symKey");
        throw s.setError(X3.malformed_pairing_uri), new Error(a2);
      }
      if (o2 != null && o2.expiryTimestamp && (0, import_time2.toMiliseconds)(o2?.expiryTimestamp) < Date.now()) {
        s.setError(X3.pairing_expired);
        const { message: a2 } = Bt("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
        throw new Error(a2);
      }
    }), d2(this, "isValidPing", async (i3) => {
      if (!Qa(i3)) {
        const { message: n2 } = Bt("MISSING_OR_INVALID", `ping() params: ${i3}`);
        throw new Error(n2);
      }
      const { topic: s } = i3;
      await this.isValidPairingTopic(s);
    }), d2(this, "isValidDisconnect", async (i3) => {
      if (!Qa(i3)) {
        const { message: n2 } = Bt("MISSING_OR_INVALID", `disconnect() params: ${i3}`);
        throw new Error(n2);
      }
      const { topic: s } = i3;
      await this.isValidPairingTopic(s);
    }), d2(this, "isValidPairingTopic", async (i3) => {
      if (!ft(i3, false)) {
        const { message: s } = Bt("MISSING_OR_INVALID", `pairing topic should be a string: ${i3}`);
        throw new Error(s);
      }
      if (!this.pairings.keys.includes(i3)) {
        const { message: s } = Bt("NO_MATCHING_KEY", `pairing topic doesn't exist: ${i3}`);
        throw new Error(s);
      }
      if (Ui(this.pairings.get(i3).expiry)) {
        await this.deletePairing(i3);
        const { message: s } = Bt("EXPIRED", `pairing topic: ${i3}`);
        throw new Error(s);
      }
    }), this.core = e, this.logger = X(t, this.name), this.pairings = new ji2(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return w(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Bt("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(C2.message, async (e) => {
      const { topic: t, message: i3, transportType: s } = e;
      if (this.pairings.keys.includes(t) && s !== ee2.link_mode && !this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(i3))) try {
        const n2 = await this.core.crypto.decode(t, i3);
        isJsonRpcRequest(n2) ? (this.core.history.set(t, n2), await this.onRelayEventRequest({ topic: t, payload: n2 })) : isJsonRpcResponse(n2) && (await this.core.history.resolve(n2), await this.onRelayEventResponse({ topic: t, payload: n2 }), this.core.history.delete(t, n2.id)), await this.core.relayer.messages.ack(t, i3);
      } catch (n2) {
        this.logger.error(n2);
      }
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on(q.expired, async (e) => {
      const { topic: t } = Oi(e.target);
      t && this.pairings.keys.includes(t) && (await this.deletePairing(t, true), this.events.emit(ae2.expire, { topic: t }));
    });
  }
};
var Mo2 = Object.defineProperty;
var Ko2 = (r2, e, t) => e in r2 ? Mo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var N = (r2, e, t) => Ko2(r2, typeof e != "symbol" ? e + "" : e, t);
var Fi2 = class extends I {
  constructor(e, t) {
    super(e, t), this.core = e, this.logger = t, N(this, "records", /* @__PURE__ */ new Map()), N(this, "events", new import_events3.EventEmitter()), N(this, "name", Vt2), N(this, "version", qt2), N(this, "cached", []), N(this, "initialized", false), N(this, "storagePrefix", W2), N(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i3) => this.records.set(i3.id, i3)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), N(this, "set", (i3, s, n2) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: i3, request: s, chainId: n2 }), this.records.has(s.id)) return;
      const o2 = { id: s.id, topic: i3, request: { method: s.method, params: s.params || null }, chainId: n2, expiry: Ni(import_time2.THIRTY_DAYS) };
      this.records.set(o2.id, o2), this.persist(), this.events.emit(V2.created, o2);
    }), N(this, "resolve", async (i3) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: i3 }), !this.records.has(i3.id)) return;
      const s = await this.getRecord(i3.id);
      typeof s.response > "u" && (s.response = isJsonRpcError(i3) ? { error: i3.error } : { result: i3.result }, this.records.set(s.id, s), this.persist(), this.events.emit(V2.updated, s));
    }), N(this, "get", async (i3, s) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: i3, id: s }), await this.getRecord(s))), N(this, "delete", (i3, s) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: s }), this.values.forEach((n2) => {
        if (n2.topic === i3) {
          if (typeof s < "u" && n2.id !== s) return;
          this.records.delete(n2.id), this.events.emit(V2.deleted, n2);
        }
      }), this.persist();
    }), N(this, "exists", async (i3, s) => (this.isInitialized(), this.records.has(s) ? (await this.getRecord(s)).topic === i3 : false)), N(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), N(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), N(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), N(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), this.logger = X(t, this.name);
  }
  get context() {
    return w(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e = [];
    return this.values.forEach((t) => {
      if (typeof t.response < "u") return;
      const i3 = { topic: t.topic, request: formatJsonRpcRequest(t.request.method, t.request.params, t.id), chainId: t.chainId };
      return e.push(i3);
    }), e;
  }
  async setJsonRpcRecords(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e) {
    this.isInitialized();
    const t = this.records.get(e);
    if (!t) {
      const { message: i3 } = Bt("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw new Error(i3);
    }
    return t;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(V2.sync);
  }
  async restore() {
    try {
      const e = await this.getJsonRpcRecords();
      if (typeof e > "u" || !e.length) return;
      if (this.records.size) {
        const { message: t } = Bt("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e);
    }
  }
  registerEventListeners() {
    this.events.on(V2.created, (e) => {
      const t = V2.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
    }), this.events.on(V2.updated, (e) => {
      const t = V2.updated;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
    }), this.events.on(V2.deleted, (e) => {
      const t = V2.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
    }), this.core.heartbeat.on(r.pulse, () => {
      this.cleanup();
    });
  }
  cleanup() {
    try {
      this.isInitialized();
      let e = false;
      this.records.forEach((t) => {
        (0, import_time2.toMiliseconds)(t.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t.id}`), this.records.delete(t.id), this.events.emit(V2.deleted, t, false), e = true);
      }), e && this.persist();
    } catch (e) {
      this.logger.warn(e);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Bt("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Bo2 = Object.defineProperty;
var Vo2 = (r2, e, t) => e in r2 ? Bo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var z2 = (r2, e, t) => Vo2(r2, typeof e != "symbol" ? e + "" : e, t);
var Mi2 = class extends S {
  constructor(e, t) {
    super(e, t), this.core = e, this.logger = t, z2(this, "expirations", /* @__PURE__ */ new Map()), z2(this, "events", new import_events3.EventEmitter()), z2(this, "name", Gt2), z2(this, "version", Wt2), z2(this, "cached", []), z2(this, "initialized", false), z2(this, "storagePrefix", W2), z2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i3) => this.expirations.set(i3.target, i3)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), z2(this, "has", (i3) => {
      try {
        const s = this.formatTarget(i3);
        return typeof this.getExpiration(s) < "u";
      } catch {
        return false;
      }
    }), z2(this, "set", (i3, s) => {
      this.isInitialized();
      const n2 = this.formatTarget(i3), o2 = { target: n2, expiry: s };
      this.expirations.set(n2, o2), this.checkExpiry(n2, o2), this.events.emit(q.created, { target: n2, expiration: o2 });
    }), z2(this, "get", (i3) => {
      this.isInitialized();
      const s = this.formatTarget(i3);
      return this.getExpiration(s);
    }), z2(this, "del", (i3) => {
      if (this.isInitialized(), this.has(i3)) {
        const s = this.formatTarget(i3), n2 = this.getExpiration(s);
        this.expirations.delete(s), this.events.emit(q.deleted, { target: s, expiration: n2 });
      }
    }), z2(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), z2(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), z2(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), z2(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), this.logger = X(t, this.name);
  }
  get context() {
    return w(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e) {
    if (typeof e == "string") return Ii(e);
    if (typeof e == "number") return Si(e);
    const { message: t } = Bt("UNKNOWN_TYPE", `Target type: ${typeof e}`);
    throw new Error(t);
  }
  async setExpirations(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit(q.sync);
  }
  async restore() {
    try {
      const e = await this.getExpirations();
      if (typeof e > "u" || !e.length) return;
      if (this.expirations.size) {
        const { message: t } = Bt("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e);
    }
  }
  getExpiration(e) {
    const t = this.expirations.get(e);
    if (!t) {
      const { message: i3 } = Bt("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw this.logger.warn(i3), new Error(i3);
    }
    return t;
  }
  checkExpiry(e, t) {
    const { expiry: i3 } = t;
    (0, import_time2.toMiliseconds)(i3) - Date.now() <= 0 && this.expire(e, t);
  }
  expire(e, t) {
    this.expirations.delete(e), this.events.emit(q.expired, { target: e, expiration: t });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e, t) => this.checkExpiry(t, e));
  }
  registerEventListeners() {
    this.core.heartbeat.on(r.pulse, () => this.checkExpirations()), this.events.on(q.created, (e) => {
      const t = q.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    }), this.events.on(q.expired, (e) => {
      const t = q.expired;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    }), this.events.on(q.deleted, (e) => {
      const t = q.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Bt("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var qo2 = Object.defineProperty;
var Go2 = (r2, e, t) => e in r2 ? qo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var P2 = (r2, e, t) => Go2(r2, typeof e != "symbol" ? e + "" : e, t);
var Ki2 = class extends M {
  constructor(e, t, i3) {
    super(e, t, i3), this.core = e, this.logger = t, this.store = i3, P2(this, "name", Ht2), P2(this, "abortController"), P2(this, "isDevEnv"), P2(this, "verifyUrlV3", Jt2), P2(this, "storagePrefix", W2), P2(this, "version", Fe2), P2(this, "publicKey"), P2(this, "fetchPromise"), P2(this, "init", async () => {
      var s;
      this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0, import_time2.toMiliseconds)((s = this.publicKey) == null ? void 0 : s.expiresAt) < Date.now() && (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
    }), P2(this, "register", async (s) => {
      if (!Wt() || this.isDevEnv) return;
      const n2 = window.location.origin, { id: o2, decryptedId: a2 } = s, c3 = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${n2}&id=${o2}&decryptedId=${a2}`;
      try {
        const h3 = (0, import_window_getters2.getDocument)(), l2 = this.startAbortTimer(import_time2.ONE_SECOND * 5), g2 = await new Promise((y3, _2) => {
          const u2 = () => {
            window.removeEventListener("message", D2), h3.body.removeChild(m3), _2("attestation aborted");
          };
          this.abortController.signal.addEventListener("abort", u2);
          const m3 = h3.createElement("iframe");
          m3.src = c3, m3.style.display = "none", m3.addEventListener("error", u2, { signal: this.abortController.signal });
          const D2 = (w3) => {
            if (w3.data && typeof w3.data == "string") try {
              const E2 = JSON.parse(w3.data);
              if (E2.type === "verify_attestation") {
                if (sn(E2.attestation).payload.id !== o2) return;
                clearInterval(l2), h3.body.removeChild(m3), this.abortController.signal.removeEventListener("abort", u2), window.removeEventListener("message", D2), y3(E2.attestation === null ? "" : E2.attestation);
              }
            } catch (E2) {
              this.logger.warn(E2);
            }
          };
          h3.body.appendChild(m3), window.addEventListener("message", D2, { signal: this.abortController.signal });
        });
        return this.logger.debug(g2, "jwt attestation"), g2;
      } catch (h3) {
        this.logger.warn(h3);
      }
      return "";
    }), P2(this, "resolve", async (s) => {
      if (this.isDevEnv) return "";
      const { attestationId: n2, hash: o2, encryptedId: a2 } = s;
      if (n2 === "") {
        this.logger.debug("resolve: attestationId is empty, skipping");
        return;
      }
      if (n2) {
        if (sn(n2).payload.id !== a2) return;
        const h3 = await this.isValidJwtAttestation(n2);
        if (h3) {
          if (!h3.isVerified) {
            this.logger.warn("resolve: jwt attestation: origin url not verified");
            return;
          }
          return h3;
        }
      }
      if (!o2) return;
      const c3 = this.getVerifyUrl(s?.verifyUrl);
      return this.fetchAttestation(o2, c3);
    }), P2(this, "fetchAttestation", async (s, n2) => {
      this.logger.debug(`resolving attestation: ${s} from url: ${n2}`);
      const o2 = this.startAbortTimer(import_time2.ONE_SECOND * 5), a2 = await fetch(`${n2}/attestation/${s}?v2Supported=true`, { signal: this.abortController.signal });
      return clearTimeout(o2), a2.status === 200 ? await a2.json() : void 0;
    }), P2(this, "getVerifyUrl", (s) => {
      let n2 = s || be2;
      return Xt2.includes(n2) || (this.logger.info(`verify url: ${n2}, not included in trusted list, assigning default: ${be2}`), n2 = be2), n2;
    }), P2(this, "fetchPublicKey", async () => {
      try {
        this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
        const s = this.startAbortTimer(import_time2.FIVE_SECONDS), n2 = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
        return clearTimeout(s), await n2.json();
      } catch (s) {
        this.logger.warn(s);
      }
    }), P2(this, "persistPublicKey", async (s) => {
      this.logger.debug(s, "persisting public key to local storage"), await this.store.setItem(this.storeKey, s), this.publicKey = s;
    }), P2(this, "removePublicKey", async () => {
      this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;
    }), P2(this, "isValidJwtAttestation", async (s) => {
      const n2 = await this.getPublicKey();
      try {
        if (n2) return this.validateAttestation(s, n2);
      } catch (a2) {
        this.logger.error(a2), this.logger.warn("error validating attestation");
      }
      const o2 = await this.fetchAndPersistPublicKey();
      try {
        if (o2) return this.validateAttestation(s, o2);
      } catch (a2) {
        this.logger.error(a2), this.logger.warn("error validating attestation");
      }
    }), P2(this, "getPublicKey", async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), P2(this, "fetchAndPersistPublicKey", async () => {
      if (this.fetchPromise) return await this.fetchPromise, this.publicKey;
      this.fetchPromise = new Promise(async (n2) => {
        const o2 = await this.fetchPublicKey();
        o2 && (await this.persistPublicKey(o2), n2(o2));
      });
      const s = await this.fetchPromise;
      return this.fetchPromise = void 0, s;
    }), P2(this, "validateAttestation", (s, n2) => {
      const o2 = Ea(s, n2.publicKey), a2 = { hasExpired: (0, import_time2.toMiliseconds)(o2.exp) < Date.now(), payload: o2 };
      if (a2.hasExpired) throw this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired");
      return { origin: a2.payload.origin, isScam: a2.payload.isScam, isVerified: a2.payload.isVerified };
    }), this.logger = X(t, this.name), this.abortController = new AbortController(), this.isDevEnv = ji(), this.init();
  }
  get storeKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
  }
  get context() {
    return w(this.logger);
  }
  startAbortTimer(e) {
    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), (0, import_time2.toMiliseconds)(e));
  }
};
var Wo2 = Object.defineProperty;
var Ho2 = (r2, e, t) => e in r2 ? Wo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Bi2 = (r2, e, t) => Ho2(r2, typeof e != "symbol" ? e + "" : e, t);
var Vi2 = class extends O {
  constructor(e, t) {
    super(e, t), this.projectId = e, this.logger = t, Bi2(this, "context", Zt2), Bi2(this, "registerDeviceToken", async (i3) => {
      const { clientId: s, token: n2, notificationType: o2, enableEncrypted: a2 = false } = i3, c3 = `${Qt2}/${this.projectId}/clients`;
      await fetch(c3, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ client_id: s, type: o2, token: n2, always_raw: a2 }) });
    }), this.logger = X(t, this.context);
  }
};
var Yo2 = Object.defineProperty;
var qi2 = Object.getOwnPropertySymbols;
var Jo2 = Object.prototype.hasOwnProperty;
var Xo2 = Object.prototype.propertyIsEnumerable;
var et2 = (r2, e, t) => e in r2 ? Yo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var _e2 = (r2, e) => {
  for (var t in e || (e = {})) Jo2.call(e, t) && et2(r2, t, e[t]);
  if (qi2) for (var t of qi2(e)) Xo2.call(e, t) && et2(r2, t, e[t]);
  return r2;
};
var A = (r2, e, t) => et2(r2, typeof e != "symbol" ? e + "" : e, t);
var Gi2 = class extends R {
  constructor(e, t, i3 = true) {
    super(e, t, i3), this.core = e, this.logger = t, A(this, "context", ti), A(this, "storagePrefix", W2), A(this, "storageVersion", ei2), A(this, "events", /* @__PURE__ */ new Map()), A(this, "shouldPersist", false), A(this, "init", async () => {
      if (!ji()) try {
        const s = { eventId: Ci(), timestamp: Date.now(), domain: this.getAppDomain(), props: { event: "INIT", type: "", properties: { client_id: await this.core.crypto.getClientId(), user_agent: wr(this.core.relayer.protocol, this.core.relayer.version, Pe2) } } };
        await this.sendEvent([s]);
      } catch (s) {
        this.logger.warn(s);
      }
    }), A(this, "createEvent", (s) => {
      const { event: n2 = "ERROR", type: o2 = "", properties: { topic: a2, trace: c3 } } = s, h3 = Ci(), l2 = this.core.projectId || "", g2 = Date.now(), y3 = _e2({ eventId: h3, timestamp: g2, props: { event: n2, type: o2, properties: { topic: a2, trace: c3 } }, bundleId: l2, domain: this.getAppDomain() }, this.setMethods(h3));
      return this.telemetryEnabled && (this.events.set(h3, y3), this.shouldPersist = true), y3;
    }), A(this, "getEvent", (s) => {
      const { eventId: n2, topic: o2 } = s;
      if (n2) return this.events.get(n2);
      const a2 = Array.from(this.events.values()).find((c3) => c3.props.properties.topic === o2);
      if (a2) return _e2(_e2({}, a2), this.setMethods(a2.eventId));
    }), A(this, "deleteEvent", (s) => {
      const { eventId: n2 } = s;
      this.events.delete(n2), this.shouldPersist = true;
    }), A(this, "setEventListeners", () => {
      this.core.heartbeat.on(r.pulse, async () => {
        this.shouldPersist && await this.persist(), this.events.forEach((s) => {
          (0, import_time2.fromMiliseconds)(Date.now()) - (0, import_time2.fromMiliseconds)(s.timestamp) > ii2 && (this.events.delete(s.eventId), this.shouldPersist = true);
        });
      });
    }), A(this, "setMethods", (s) => ({ addTrace: (n2) => this.addTrace(s, n2), setError: (n2) => this.setError(s, n2) })), A(this, "addTrace", (s, n2) => {
      const o2 = this.events.get(s);
      o2 && (o2.props.properties.trace.push(n2), this.events.set(s, o2), this.shouldPersist = true);
    }), A(this, "setError", (s, n2) => {
      const o2 = this.events.get(s);
      o2 && (o2.props.type = n2, o2.timestamp = Date.now(), this.events.set(s, o2), this.shouldPersist = true);
    }), A(this, "persist", async () => {
      await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = false;
    }), A(this, "restore", async () => {
      try {
        const s = await this.core.storage.getItem(this.storageKey) || [];
        if (!s.length) return;
        s.forEach((n2) => {
          this.events.set(n2.eventId, _e2(_e2({}, n2), this.setMethods(n2.eventId)));
        });
      } catch (s) {
        this.logger.warn(s);
      }
    }), A(this, "submit", async () => {
      if (!this.telemetryEnabled || this.events.size === 0) return;
      const s = [];
      for (const [n2, o2] of this.events) o2.props.type && s.push(o2);
      if (s.length !== 0) try {
        if ((await this.sendEvent(s)).ok) for (const n2 of s) this.events.delete(n2.eventId), this.shouldPersist = true;
      } catch (n2) {
        this.logger.warn(n2);
      }
    }), A(this, "sendEvent", async (s) => {
      const n2 = this.getAppDomain() ? "" : "&sp=desktop";
      return await fetch(`${si2}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${Pe2}${n2}`, { method: "POST", body: JSON.stringify(s) });
    }), A(this, "getAppDomain", () => br().url), this.logger = X(t, this.context), this.telemetryEnabled = i3, i3 ? this.restore().then(async () => {
      await this.submit(), this.setEventListeners();
    }) : this.persist();
  }
  get storageKey() {
    return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
  }
};
var Zo2 = Object.defineProperty;
var Wi2 = Object.getOwnPropertySymbols;
var Qo3 = Object.prototype.hasOwnProperty;
var ea2 = Object.prototype.propertyIsEnumerable;
var tt2 = (r2, e, t) => e in r2 ? Zo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Hi2 = (r2, e) => {
  for (var t in e || (e = {})) Qo3.call(e, t) && tt2(r2, t, e[t]);
  if (Wi2) for (var t of Wi2(e)) ea2.call(e, t) && tt2(r2, t, e[t]);
  return r2;
};
var v2 = (r2, e, t) => tt2(r2, typeof e != "symbol" ? e + "" : e, t);
var Oe2 = class _Oe extends h2 {
  constructor(e) {
    var t;
    super(e), v2(this, "protocol", Ue2), v2(this, "version", Fe2), v2(this, "name", ge2), v2(this, "relayUrl"), v2(this, "projectId"), v2(this, "customStoragePrefix"), v2(this, "events", new import_events3.EventEmitter()), v2(this, "logger"), v2(this, "heartbeat"), v2(this, "relayer"), v2(this, "crypto"), v2(this, "storage"), v2(this, "history"), v2(this, "expirer"), v2(this, "pairing"), v2(this, "verify"), v2(this, "echoClient"), v2(this, "linkModeSupportedApps"), v2(this, "eventClient"), v2(this, "initialized", false), v2(this, "logChunkController"), v2(this, "on", (a2, c3) => this.events.on(a2, c3)), v2(this, "once", (a2, c3) => this.events.once(a2, c3)), v2(this, "off", (a2, c3) => this.events.off(a2, c3)), v2(this, "removeListener", (a2, c3) => this.events.removeListener(a2, c3)), v2(this, "dispatchEnvelope", ({ topic: a2, message: c3, sessionExists: h3 }) => {
      if (!a2 || !c3) return;
      const l2 = { topic: a2, message: c3, publishedAt: Date.now(), transportType: ee2.link_mode };
      this.relayer.onLinkMessageEvent(l2, { sessionExists: h3 });
    });
    const i3 = this.getGlobalCore(e?.customStoragePrefix);
    if (i3) try {
      return this.customStoragePrefix = i3.customStoragePrefix, this.logger = i3.logger, this.heartbeat = i3.heartbeat, this.crypto = i3.crypto, this.history = i3.history, this.expirer = i3.expirer, this.storage = i3.storage, this.relayer = i3.relayer, this.pairing = i3.pairing, this.verify = i3.verify, this.echoClient = i3.echoClient, this.linkModeSupportedApps = i3.linkModeSupportedApps, this.eventClient = i3.eventClient, this.initialized = i3.initialized, this.logChunkController = i3.logChunkController, i3;
    } catch (a2) {
      console.warn("Failed to copy global core", a2);
    }
    this.projectId = e?.projectId, this.relayUrl = e?.relayUrl || Ke2, this.customStoragePrefix = e != null && e.customStoragePrefix ? `:${e.customStoragePrefix}` : "";
    const s = D({ level: typeof e?.logger == "string" && e.logger ? e.logger : Et2.logger, name: ge2 }), { logger: n2, chunkLoggerController: o2 } = Y({ opts: s, maxSizeInBytes: e?.maxLogBlobSizeInBytes, loggerOverride: e?.logger });
    this.logChunkController = o2, (t = this.logChunkController) != null && t.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {
      var a2, c3;
      (a2 = this.logChunkController) != null && a2.downloadLogsBlobInBrowser && ((c3 = this.logChunkController) == null || c3.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
    }), this.logger = X(n2, this.name), this.heartbeat = new i(), this.crypto = new wi2(this, this.logger, e?.keychain), this.history = new Fi2(this, this.logger), this.expirer = new Mi2(this, this.logger), this.storage = e != null && e.storage ? e.storage : new h(Hi2(Hi2({}, It2), e?.storageOptions)), this.relayer = new Ai2({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new Ui2(this, this.logger), this.verify = new Ki2(this, this.logger, this.storage), this.echoClient = new Vi2(this.projectId || "", this.logger), this.linkModeSupportedApps = [], this.eventClient = new Gi2(this, this.logger, e?.telemetryEnabled), this.setGlobalCore(this);
  }
  static async init(e) {
    const t = new _Oe(e);
    await t.initialize();
    const i3 = await t.crypto.getClientId();
    return await t.storage.setItem(Ut2, i3), t;
  }
  get context() {
    return w(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async getLogsBlob() {
    var e;
    return (e = this.logChunkController) == null ? void 0 : e.logsToBlob({ clientId: await this.crypto.getClientId() });
  }
  async addLinkModeSupportedApp(e) {
    this.linkModeSupportedApps.includes(e) || (this.linkModeSupportedApps.push(e), await this.storage.setItem(Be2, this.linkModeSupportedApps));
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = await this.storage.getItem(Be2) || [], this.initialized = true, this.logger.info("Core Initialization Success");
    } catch (e) {
      throw this.logger.warn(e, `Core Initialization Failure at epoch ${Date.now()}`), this.logger.error(e.message), e;
    }
  }
  getGlobalCore(e = "") {
    try {
      if (this.isGlobalCoreDisabled()) return;
      const t = `_walletConnectCore_${e}`, i3 = `${t}_count`;
      return globalThis[i3] = (globalThis[i3] || 0) + 1, globalThis[i3] > 1 && console.warn(`WalletConnect Core is already initialized. This is probably a mistake and can lead to unexpected behavior. Init() was called ${globalThis[i3]} times.`), globalThis[t];
    } catch (t) {
      console.warn("Failed to get global WalletConnect core", t);
      return;
    }
  }
  setGlobalCore(e) {
    var t;
    try {
      if (this.isGlobalCoreDisabled()) return;
      const i3 = `_walletConnectCore_${((t = e.opts) == null ? void 0 : t.customStoragePrefix) || ""}`;
      globalThis[i3] = e;
    } catch (i3) {
      console.warn("Failed to set global WalletConnect core", i3);
    }
  }
  isGlobalCoreDisabled() {
    try {
      return typeof process < "u" && process.env.DISABLE_GLOBAL_CORE === "true";
    } catch {
      return true;
    }
  }
};
var ta2 = Oe2;

// node_modules/@walletconnect/sign-client/dist/index.js
var import_time3 = __toESM(require_cjs());
var Ve3 = "wc";
var ke2 = 2;
var De3 = "client";
var we2 = `${Ve3}@${ke2}:${De3}:`;
var me3 = { name: De3, logger: "error", controller: false, relayUrl: "wss://relay.walletconnect.org" };
var Le2 = "WALLETCONNECT_DEEPLINK_CHOICE";
var dt2 = "proposal";
var Me3 = "Proposal expired";
var ut2 = "session";
var W3 = import_time3.SEVEN_DAYS;
var gt2 = "engine";
var P3 = { wc_sessionPropose: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1100 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1101 }, reject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1120 }, autoReject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1121 } }, wc_sessionSettle: { req: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1102 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1104 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1105 } }, wc_sessionExtend: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1106 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1107 } }, wc_sessionRequest: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1108 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1109 } }, wc_sessionEvent: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1110 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1111 } }, wc_sessionDelete: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1112 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1113 } }, wc_sessionPing: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1114 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1115 } }, wc_sessionAuthenticate: { req: { ttl: import_time3.ONE_HOUR, prompt: true, tag: 1116 }, res: { ttl: import_time3.ONE_HOUR, prompt: false, tag: 1117 }, reject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1118 }, autoReject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1119 } } };
var _e3 = { min: import_time3.FIVE_MINUTES, max: import_time3.SEVEN_DAYS };
var $2 = { idle: "IDLE", active: "ACTIVE" };
var yt2 = { eth_sendTransaction: { key: "" }, eth_sendRawTransaction: { key: "" }, wallet_sendCalls: { key: "" }, solana_signTransaction: { key: "signature" }, solana_signAllTransactions: { key: "transactions" }, solana_signAndSendTransaction: { key: "signature" }, sui_signAndExecuteTransaction: { key: "digest" }, sui_signTransaction: { key: "" }, hedera_signAndExecuteTransaction: { key: "transactionId" }, hedera_executeTransaction: { key: "transactionId" }, near_signTransaction: { key: "" }, near_signTransactions: { key: "" }, tron_signTransaction: { key: "txID" }, xrpl_signTransaction: { key: "" }, xrpl_signTransactionFor: { key: "" }, algo_signTxn: { key: "" }, sendTransfer: { key: "txid" }, stacks_stxTransfer: { key: "txId" }, polkadot_signTransaction: { key: "" }, cosmos_signDirect: { key: "" } };
var wt2 = "request";
var mt2 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"];
var _t2 = "wc";
var ft2 = "auth";
var Et3 = "authKeys";
var St3 = "pairingTopics";
var Rt3 = "requests";
var le2 = `${_t2}@${1.5}:${ft2}:`;
var pe2 = `${le2}:PUB_KEY`;
var Ns2 = Object.defineProperty;
var Os2 = Object.defineProperties;
var bs2 = Object.getOwnPropertyDescriptors;
var vt2 = Object.getOwnPropertySymbols;
var As2 = Object.prototype.hasOwnProperty;
var xs2 = Object.prototype.propertyIsEnumerable;
var $e2 = (E2, o2, t) => o2 in E2 ? Ns2(E2, o2, { enumerable: true, configurable: true, writable: true, value: t }) : E2[o2] = t;
var R3 = (E2, o2) => {
  for (var t in o2 || (o2 = {})) As2.call(o2, t) && $e2(E2, t, o2[t]);
  if (vt2) for (var t of vt2(o2)) xs2.call(o2, t) && $e2(E2, t, o2[t]);
  return E2;
};
var O2 = (E2, o2) => Os2(E2, bs2(o2));
var c2 = (E2, o2, t) => $e2(E2, typeof o2 != "symbol" ? o2 + "" : o2, t);
var Cs2 = class extends V {
  constructor(o2) {
    super(o2), c2(this, "name", gt2), c2(this, "events", new import_events4.default()), c2(this, "initialized", false), c2(this, "requestQueue", { state: $2.idle, queue: [] }), c2(this, "sessionRequestQueue", { state: $2.idle, queue: [] }), c2(this, "emittedSessionRequests", new ki({ limit: 500 })), c2(this, "requestQueueDelay", import_time3.ONE_SECOND), c2(this, "expectedPairingMethodMap", /* @__PURE__ */ new Map()), c2(this, "recentlyDeletedMap", /* @__PURE__ */ new Map()), c2(this, "recentlyDeletedLimit", 200), c2(this, "relayMessageCache", []), c2(this, "pendingSessions", /* @__PURE__ */ new Map()), c2(this, "init", async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({ methods: Object.keys(P3) }), this.initialized = true, setTimeout(async () => {
        await this.processPendingMessageEvents(), this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
      }, (0, import_time3.toMiliseconds)(this.requestQueueDelay)));
    }), c2(this, "connect", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      const e = O2(R3({}, t), { requiredNamespaces: t.requiredNamespaces || {}, optionalNamespaces: t.optionalNamespaces || {} });
      await this.isValidConnect(e), e.optionalNamespaces = qa(e.requiredNamespaces, e.optionalNamespaces), e.requiredNamespaces = {};
      const { pairingTopic: s, requiredNamespaces: i3, optionalNamespaces: r2, sessionProperties: n2, scopedProperties: a2, relays: l2 } = e;
      let p3 = s, h3, u2 = false;
      try {
        if (p3) {
          const T3 = this.client.core.pairing.pairings.get(p3);
          this.client.logger.warn("connect() with existing pairing topic is deprecated and will be removed in the next major release."), u2 = T3.active;
        }
      } catch (T3) {
        throw this.client.logger.error(`connect() -> pairing.get(${p3}) failed`), T3;
      }
      if (!p3 || !u2) {
        const { topic: T3, uri: K3 } = await this.client.core.pairing.create({ internal: { skipSubscribe: true } });
        p3 = T3, h3 = K3;
      }
      if (!p3) {
        const { message: T3 } = Bt("NO_MATCHING_KEY", `connect() pairing topic: ${p3}`);
        throw new Error(T3);
      }
      const d4 = await this.client.core.crypto.generateKeyPair(), y3 = P3.wc_sessionPropose.req.ttl || import_time3.FIVE_MINUTES, w3 = Ni(y3), m3 = O2(R3(R3({ requiredNamespaces: i3, optionalNamespaces: r2, relays: l2 ?? [{ protocol: Nt2 }], proposer: { publicKey: d4, metadata: this.client.metadata }, expiryTimestamp: w3, pairingTopic: p3 }, n2 && { sessionProperties: n2 }), a2 && { scopedProperties: a2 }), { id: payloadId() }), S4 = _i("session_connect", m3.id), { reject: _2, resolve: b3, done: V3 } = Bi(y3, Me3), I2 = ({ id: T3 }) => {
        T3 === m3.id && (this.client.events.off("proposal_expire", I2), this.pendingSessions.delete(m3.id), this.events.emit(S4, { error: { message: Me3, code: 0 } }));
      };
      return this.client.events.on("proposal_expire", I2), this.events.once(S4, ({ error: T3, session: K3 }) => {
        this.client.events.off("proposal_expire", I2), T3 ? _2(T3) : K3 && b3(K3);
      }), await this.sendProposeSession({ proposal: m3, publishOpts: { internal: { throwOnFailedPublish: true }, tvf: { correlationId: m3.id } } }), await this.setProposal(m3.id, m3), { uri: h3, approval: V3 };
    }), c2(this, "pair", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        return await this.client.core.pairing.pair(t);
      } catch (e) {
        throw this.client.logger.error("pair() failed"), e;
      }
    }), c2(this, "approve", async (t) => {
      var e, s, i3;
      const r2 = this.client.core.eventClient.createEvent({ properties: { topic: (e = t?.id) == null ? void 0 : e.toString(), trace: [rr2.session_approve_started] } });
      try {
        this.isInitialized(), await this.confirmOnlineStateOrThrow();
      } catch (N3) {
        throw r2.setError(nr2.no_internet_connection), N3;
      }
      try {
        await this.isValidProposalId(t?.id);
      } catch (N3) {
        throw this.client.logger.error(`approve() -> proposal.get(${t?.id}) failed`), r2.setError(nr2.proposal_not_found), N3;
      }
      try {
        await this.isValidApprove(t);
      } catch (N3) {
        throw this.client.logger.error("approve() -> isValidApprove() failed"), r2.setError(nr2.session_approve_namespace_validation_failure), N3;
      }
      const { id: n2, relayProtocol: a2, namespaces: l2, sessionProperties: p3, scopedProperties: h3, sessionConfig: u2 } = t, d4 = this.client.proposal.get(n2);
      this.client.core.eventClient.deleteEvent({ eventId: r2.eventId });
      const { pairingTopic: y3, proposer: w3, requiredNamespaces: m3, optionalNamespaces: S4 } = d4;
      let _2 = (s = this.client.core.eventClient) == null ? void 0 : s.getEvent({ topic: y3 });
      _2 || (_2 = (i3 = this.client.core.eventClient) == null ? void 0 : i3.createEvent({ type: rr2.session_approve_started, properties: { topic: y3, trace: [rr2.session_approve_started, rr2.session_namespaces_validation_success] } }));
      const b3 = await this.client.core.crypto.generateKeyPair(), V3 = w3.publicKey, I2 = await this.client.core.crypto.generateSharedKey(b3, V3), T3 = R3(R3(R3({ relay: { protocol: a2 ?? "irn" }, namespaces: l2, controller: { publicKey: b3, metadata: this.client.metadata }, expiry: Ni(W3) }, p3 && { sessionProperties: p3 }), h3 && { scopedProperties: h3 }), u2 && { sessionConfig: u2 }), K3 = ee2.relay;
      _2.addTrace(rr2.subscribing_session_topic);
      try {
        await this.client.core.relayer.subscribe(I2, { transportType: K3, internal: { skipSubscribe: true } });
      } catch (N3) {
        throw _2.setError(nr2.subscribe_session_topic_failure), N3;
      }
      _2.addTrace(rr2.subscribe_session_topic_success);
      const Ee3 = O2(R3({}, T3), { topic: I2, requiredNamespaces: m3, optionalNamespaces: S4, pairingTopic: y3, acknowledged: false, self: T3.controller, peer: { publicKey: w3.publicKey, metadata: w3.metadata }, controller: b3, transportType: ee2.relay });
      await this.client.session.set(I2, Ee3), _2.addTrace(rr2.store_session);
      try {
        await this.sendApproveSession({ sessionTopic: I2, proposal: d4, pairingProposalResponse: { relay: { protocol: a2 ?? "irn" }, responderPublicKey: b3 }, sessionSettleRequest: T3, publishOpts: { internal: { throwOnFailedPublish: true }, tvf: { correlationId: n2 } } }), _2.addTrace(rr2.session_approve_publish_success);
      } catch (N3) {
        throw this.client.logger.error(N3), this.client.session.delete(I2, zt("USER_DISCONNECTED")), await this.client.core.relayer.unsubscribe(I2), N3;
      }
      return this.client.core.eventClient.deleteEvent({ eventId: _2.eventId }), await this.client.core.pairing.updateMetadata({ topic: y3, metadata: w3.metadata }), await this.deleteProposal(n2), await this.client.core.pairing.activate({ topic: y3 }), await this.setExpiry(I2, Ni(W3)), { topic: I2, acknowledged: () => Promise.resolve(this.client.session.get(I2)) };
    }), c2(this, "reject", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidReject(t);
      } catch (r2) {
        throw this.client.logger.error("reject() -> isValidReject() failed"), r2;
      }
      const { id: e, reason: s } = t;
      let i3;
      try {
        i3 = this.client.proposal.get(e).pairingTopic;
      } catch (r2) {
        throw this.client.logger.error(`reject() -> proposal.get(${e}) failed`), r2;
      }
      i3 && await this.sendError({ id: e, topic: i3, error: s, rpcOpts: P3.wc_sessionPropose.reject }), await this.deleteProposal(e);
    }), c2(this, "update", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidUpdate(t);
      } catch (h3) {
        throw this.client.logger.error("update() -> isValidUpdate() failed"), h3;
      }
      const { topic: e, namespaces: s } = t, { done: i3, resolve: r2, reject: n2 } = Bi(), a2 = payloadId(), l2 = getBigIntRpcId().toString(), p3 = this.client.session.get(e).namespaces;
      return this.events.once(_i("session_update", a2), ({ error: h3 }) => {
        h3 ? n2(h3) : r2();
      }), await this.client.session.update(e, { namespaces: s }), await this.sendRequest({ topic: e, method: "wc_sessionUpdate", params: { namespaces: s }, throwOnFailedPublish: true, clientRpcId: a2, relayRpcId: l2 }).catch((h3) => {
        this.client.logger.error(h3), this.client.session.update(e, { namespaces: p3 }), n2(h3);
      }), { acknowledged: i3 };
    }), c2(this, "extend", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidExtend(t);
      } catch (a2) {
        throw this.client.logger.error("extend() -> isValidExtend() failed"), a2;
      }
      const { topic: e } = t, s = payloadId(), { done: i3, resolve: r2, reject: n2 } = Bi();
      return this.events.once(_i("session_extend", s), ({ error: a2 }) => {
        a2 ? n2(a2) : r2();
      }), await this.setExpiry(e, Ni(W3)), this.sendRequest({ topic: e, method: "wc_sessionExtend", params: {}, clientRpcId: s, throwOnFailedPublish: true }).catch((a2) => {
        n2(a2);
      }), { acknowledged: i3 };
    }), c2(this, "request", async (t) => {
      this.isInitialized();
      try {
        await this.isValidRequest(t);
      } catch (m3) {
        throw this.client.logger.error("request() -> isValidRequest() failed"), m3;
      }
      const { chainId: e, request: s, topic: i3, expiry: r2 = P3.wc_sessionRequest.req.ttl } = t, n2 = this.client.session.get(i3);
      n2?.transportType === ee2.relay && await this.confirmOnlineStateOrThrow();
      const a2 = payloadId(), l2 = getBigIntRpcId().toString(), { done: p3, resolve: h3, reject: u2 } = Bi(r2, "Request expired. Please try again.");
      this.events.once(_i("session_request", a2), ({ error: m3, result: S4 }) => {
        m3 ? u2(m3) : h3(S4);
      });
      const d4 = "wc_sessionRequest", y3 = this.getAppLinkIfEnabled(n2.peer.metadata, n2.transportType);
      if (y3) return await this.sendRequest({ clientRpcId: a2, relayRpcId: l2, topic: i3, method: d4, params: { request: O2(R3({}, s), { expiryTimestamp: Ni(r2) }), chainId: e }, expiry: r2, throwOnFailedPublish: true, appLink: y3 }).catch((m3) => u2(m3)), this.client.events.emit("session_request_sent", { topic: i3, request: s, chainId: e, id: a2 }), await p3();
      const w3 = { request: O2(R3({}, s), { expiryTimestamp: Ni(r2) }), chainId: e };
      return await Promise.all([new Promise(async (m3) => {
        await this.sendRequest({ clientRpcId: a2, relayRpcId: l2, topic: i3, method: d4, params: w3, expiry: r2, throwOnFailedPublish: true, tvf: this.getTVFParams(a2, w3) }).catch((S4) => u2(S4)), this.client.events.emit("session_request_sent", { topic: i3, request: s, chainId: e, id: a2 }), m3();
      }), new Promise(async (m3) => {
        var S4;
        if (!((S4 = n2.sessionConfig) != null && S4.disableDeepLink)) {
          const _2 = await $i(this.client.core.storage, Le2);
          await Ri({ id: a2, topic: i3, wcDeepLink: _2 });
        }
        m3();
      }), p3()]).then((m3) => m3[2]);
    }), c2(this, "respond", async (t) => {
      var e, s;
      this.isInitialized();
      const i3 = this.client.core.eventClient.createEvent({ properties: { topic: t?.topic || ((s = (e = t?.response) == null ? void 0 : e.id) == null ? void 0 : s.toString()), trace: [rr2.session_request_response_started] } });
      try {
        await this.isValidRespond(t);
      } catch (h3) {
        throw i3.addTrace(h3?.message), i3.setError(nr2.session_request_response_validation_failure), h3;
      }
      i3.addTrace(rr2.session_request_response_validation_success);
      const { topic: r2, response: n2 } = t, { id: a2 } = n2, l2 = this.client.session.get(r2);
      l2.transportType === ee2.relay && await this.confirmOnlineStateOrThrow();
      const p3 = this.getAppLinkIfEnabled(l2.peer.metadata, l2.transportType);
      try {
        i3.addTrace(rr2.session_request_response_publish_started), isJsonRpcResult(n2) ? await this.sendResult({ id: a2, topic: r2, result: n2.result, throwOnFailedPublish: true, appLink: p3 }) : isJsonRpcError(n2) && await this.sendError({ id: a2, topic: r2, error: n2.error, appLink: p3 }), this.cleanupAfterResponse(t);
      } catch (h3) {
        throw i3.addTrace(h3?.message), i3.setError(nr2.session_request_response_publish_failure), h3;
      }
    }), c2(this, "ping", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidPing(t);
      } catch (s) {
        throw this.client.logger.error("ping() -> isValidPing() failed"), s;
      }
      const { topic: e } = t;
      if (this.client.session.keys.includes(e)) {
        const s = payloadId(), i3 = getBigIntRpcId().toString(), { done: r2, resolve: n2, reject: a2 } = Bi();
        this.events.once(_i("session_ping", s), ({ error: l2 }) => {
          l2 ? a2(l2) : n2();
        }), await Promise.all([this.sendRequest({ topic: e, method: "wc_sessionPing", params: {}, throwOnFailedPublish: true, clientRpcId: s, relayRpcId: i3 }), r2()]);
      } else this.client.core.pairing.pairings.keys.includes(e) && (this.client.logger.warn("ping() on pairing topic is deprecated and will be removed in the next major release."), await this.client.core.pairing.ping({ topic: e }));
    }), c2(this, "emit", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(t);
      const { topic: e, event: s, chainId: i3 } = t, r2 = getBigIntRpcId().toString(), n2 = payloadId();
      await this.sendRequest({ topic: e, method: "wc_sessionEvent", params: { event: s, chainId: i3 }, throwOnFailedPublish: true, relayRpcId: r2, clientRpcId: n2 });
    }), c2(this, "disconnect", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(t);
      const { topic: e } = t;
      if (this.client.session.keys.includes(e)) await this.sendRequest({ topic: e, method: "wc_sessionDelete", params: zt("USER_DISCONNECTED"), throwOnFailedPublish: true }), await this.deleteSession({ topic: e, emitEvent: false });
      else if (this.client.core.pairing.pairings.keys.includes(e)) await this.client.core.pairing.disconnect({ topic: e });
      else {
        const { message: s } = Bt("MISMATCHED_TOPIC", `Session or pairing topic not found: ${e}`);
        throw new Error(s);
      }
    }), c2(this, "find", (t) => (this.isInitialized(), this.client.session.getAll().filter((e) => Fa(e, t)))), c2(this, "getPendingSessionRequests", () => this.client.pendingRequest.getAll()), c2(this, "authenticate", async (t, e) => {
      var s;
      this.isInitialized(), this.isValidAuthenticate(t);
      const i3 = e && this.client.core.linkModeSupportedApps.includes(e) && ((s = this.client.metadata.redirect) == null ? void 0 : s.linkMode), r2 = i3 ? ee2.link_mode : ee2.relay;
      r2 === ee2.relay && await this.confirmOnlineStateOrThrow();
      const { chains: n2, statement: a2 = "", uri: l2, domain: p3, nonce: h3, type: u2, exp: d4, nbf: y3, methods: w3 = [], expiry: m3 } = t, S4 = [...t.resources || []], { topic: _2, uri: b3 } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r2 });
      this.client.logger.info({ message: "Generated new pairing", pairing: { topic: _2, uri: b3 } });
      const V3 = await this.client.core.crypto.generateKeyPair(), I2 = ha(V3);
      if (await Promise.all([this.client.auth.authKeys.set(pe2, { responseTopic: I2, publicKey: V3 }), this.client.auth.pairingTopics.set(I2, { topic: I2, pairingTopic: _2 })]), await this.client.core.relayer.subscribe(I2, { transportType: r2 }), this.client.logger.info(`sending request to new pairing topic: ${_2}`), w3.length > 0) {
        const { namespace: A3 } = Je(n2[0]);
        let k2 = Kc(A3, "request", w3);
        je(S4) && (k2 = qc(k2, S4.pop())), S4.push(k2);
      }
      const T3 = m3 && m3 > P3.wc_sessionAuthenticate.req.ttl ? m3 : P3.wc_sessionAuthenticate.req.ttl, K3 = { authPayload: { type: u2 ?? "caip122", chains: n2, statement: a2, aud: l2, domain: p3, version: "1", nonce: h3, iat: (/* @__PURE__ */ new Date()).toISOString(), exp: d4, nbf: y3, resources: S4 }, requester: { publicKey: V3, metadata: this.client.metadata }, expiryTimestamp: Ni(T3) }, Ee3 = { eip155: { chains: n2, methods: [.../* @__PURE__ */ new Set(["personal_sign", ...w3])], events: ["chainChanged", "accountsChanged"] } }, N3 = { requiredNamespaces: {}, optionalNamespaces: Ee3, relays: [{ protocol: "irn" }], pairingTopic: _2, proposer: { publicKey: V3, metadata: this.client.metadata }, expiryTimestamp: Ni(P3.wc_sessionPropose.req.ttl), id: payloadId() }, { done: Tt4, resolve: Ue4, reject: Se3 } = Bi(T3, "Request expired"), ie4 = payloadId(), he4 = _i("session_connect", N3.id), Re3 = _i("session_request", ie4), de3 = async ({ error: A3, session: k2 }) => {
        this.events.off(Re3, ve4), A3 ? Se3(A3) : k2 && Ue4({ session: k2 });
      }, ve4 = async (A3) => {
        var k2, Ge4, je2;
        if (await this.deletePendingAuthRequest(ie4, { message: "fulfilled", code: 0 }), A3.error) {
          const ne3 = zt("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
          return A3.error.code === ne3.code ? void 0 : (this.events.off(he4, de3), Se3(A3.error.message));
        }
        await this.deleteProposal(N3.id), this.events.off(he4, de3);
        const { cacaos: Fe4, responder: H2 } = A3.result, Te3 = [], Qe4 = [];
        for (const ne3 of Fe4) {
          await Pc({ cacao: ne3, projectId: this.client.core.projectId }) || (this.client.logger.error(ne3, "Signature verification failed"), Se3(zt("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
          const { p: qe3 } = ne3, Pe4 = je(qe3.resources), He4 = [to(qe3.iss)], qt4 = bn(qe3.iss);
          if (Pe4) {
            const Ne2 = Fc(Pe4), Pt4 = Zc(Pe4);
            Te3.push(...Ne2), He4.push(...Pt4);
          }
          for (const Ne2 of He4) Qe4.push(`${Ne2}:${qt4}`);
        }
        const re4 = await this.client.core.crypto.generateSharedKey(V3, H2.publicKey);
        let ue2;
        Te3.length > 0 && (ue2 = { topic: re4, acknowledged: true, self: { publicKey: V3, metadata: this.client.metadata }, peer: H2, controller: H2.publicKey, expiry: Ni(W3), requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: _2, namespaces: Ka([...new Set(Te3)], [...new Set(Qe4)]), transportType: r2 }, await this.client.core.relayer.subscribe(re4, { transportType: r2 }), await this.client.session.set(re4, ue2), _2 && await this.client.core.pairing.updateMetadata({ topic: _2, metadata: H2.metadata }), ue2 = this.client.session.get(re4)), (k2 = this.client.metadata.redirect) != null && k2.linkMode && (Ge4 = H2.metadata.redirect) != null && Ge4.linkMode && (je2 = H2.metadata.redirect) != null && je2.universal && e && (this.client.core.addLinkModeSupportedApp(H2.metadata.redirect.universal), this.client.session.update(re4, { transportType: ee2.link_mode })), Ue4({ auths: Fe4, session: ue2 });
      };
      this.events.once(he4, de3), this.events.once(Re3, ve4);
      let Ie3;
      try {
        if (i3) {
          const A3 = formatJsonRpcRequest("wc_sessionAuthenticate", K3, ie4);
          this.client.core.history.set(_2, A3);
          const k2 = await this.client.core.crypto.encode("", A3, { type: we, encoding: Ge });
          Ie3 = Ta(e, _2, k2);
        } else await Promise.all([this.sendRequest({ topic: _2, method: "wc_sessionAuthenticate", params: K3, expiry: t.expiry, throwOnFailedPublish: true, clientRpcId: ie4 }), this.sendRequest({ topic: _2, method: "wc_sessionPropose", params: N3, expiry: P3.wc_sessionPropose.req.ttl, throwOnFailedPublish: true, clientRpcId: N3.id })]);
      } catch (A3) {
        throw this.events.off(he4, de3), this.events.off(Re3, ve4), A3;
      }
      return await this.setProposal(N3.id, N3), await this.setAuthRequest(ie4, { request: O2(R3({}, K3), { verifyContext: {} }), pairingTopic: _2, transportType: r2 }), { uri: Ie3 ?? b3, response: Tt4 };
    }), c2(this, "approveSessionAuthenticate", async (t) => {
      const { id: e, auths: s } = t, i3 = this.client.core.eventClient.createEvent({ properties: { topic: e.toString(), trace: [or.authenticated_session_approve_started] } });
      try {
        this.isInitialized();
      } catch (m3) {
        throw i3.setError(ar2.no_internet_connection), m3;
      }
      const r2 = this.getPendingAuthRequest(e);
      if (!r2) throw i3.setError(ar2.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${e}`);
      const n2 = r2.transportType || ee2.relay;
      n2 === ee2.relay && await this.confirmOnlineStateOrThrow();
      const a2 = r2.requester.publicKey, l2 = await this.client.core.crypto.generateKeyPair(), p3 = ha(a2), h3 = { type: ie, receiverPublicKey: a2, senderPublicKey: l2 }, u2 = [], d4 = [];
      for (const m3 of s) {
        if (!await Pc({ cacao: m3, projectId: this.client.core.projectId })) {
          i3.setError(ar2.invalid_cacao);
          const I2 = zt("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
          throw await this.sendError({ id: e, topic: p3, error: I2, encodeOpts: h3 }), new Error(I2.message);
        }
        i3.addTrace(or.cacaos_verified);
        const { p: S4 } = m3, _2 = je(S4.resources), b3 = [to(S4.iss)], V3 = bn(S4.iss);
        if (_2) {
          const I2 = Fc(_2), T3 = Zc(_2);
          u2.push(...I2), b3.push(...T3);
        }
        for (const I2 of b3) d4.push(`${I2}:${V3}`);
      }
      const y3 = await this.client.core.crypto.generateSharedKey(l2, a2);
      i3.addTrace(or.create_authenticated_session_topic);
      let w3;
      if (u2?.length > 0) {
        w3 = { topic: y3, acknowledged: true, self: { publicKey: l2, metadata: this.client.metadata }, peer: { publicKey: a2, metadata: r2.requester.metadata }, controller: a2, expiry: Ni(W3), authentication: s, requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: r2.pairingTopic, namespaces: Ka([...new Set(u2)], [...new Set(d4)]), transportType: n2 }, i3.addTrace(or.subscribing_authenticated_session_topic);
        try {
          await this.client.core.relayer.subscribe(y3, { transportType: n2 });
        } catch (m3) {
          throw i3.setError(ar2.subscribe_authenticated_session_topic_failure), m3;
        }
        i3.addTrace(or.subscribe_authenticated_session_topic_success), await this.client.session.set(y3, w3), i3.addTrace(or.store_authenticated_session), await this.client.core.pairing.updateMetadata({ topic: r2.pairingTopic, metadata: r2.requester.metadata });
      }
      i3.addTrace(or.publishing_authenticated_session_approve);
      try {
        await this.sendResult({ topic: p3, id: e, result: { cacaos: s, responder: { publicKey: l2, metadata: this.client.metadata } }, encodeOpts: h3, throwOnFailedPublish: true, appLink: this.getAppLinkIfEnabled(r2.requester.metadata, n2) });
      } catch (m3) {
        throw i3.setError(ar2.authenticated_session_approve_publish_failure), m3;
      }
      return await this.client.auth.requests.delete(e, { message: "fulfilled", code: 0 }), await this.client.core.pairing.activate({ topic: r2.pairingTopic }), this.client.core.eventClient.deleteEvent({ eventId: i3.eventId }), { session: w3 };
    }), c2(this, "rejectSessionAuthenticate", async (t) => {
      this.isInitialized();
      const { id: e, reason: s } = t, i3 = this.getPendingAuthRequest(e);
      if (!i3) throw new Error(`Could not find pending auth request with id ${e}`);
      i3.transportType === ee2.relay && await this.confirmOnlineStateOrThrow();
      const r2 = i3.requester.publicKey, n2 = await this.client.core.crypto.generateKeyPair(), a2 = ha(r2), l2 = { type: ie, receiverPublicKey: r2, senderPublicKey: n2 };
      await this.sendError({ id: e, topic: a2, error: s, encodeOpts: l2, rpcOpts: P3.wc_sessionAuthenticate.reject, appLink: this.getAppLinkIfEnabled(i3.requester.metadata, i3.transportType) }), await this.client.auth.requests.delete(e, { message: "rejected", code: 0 }), await this.deleteProposal(e);
    }), c2(this, "formatAuthMessage", (t) => {
      this.isInitialized();
      const { request: e, iss: s } = t;
      return eo(e, s);
    }), c2(this, "processRelayMessageCache", () => {
      setTimeout(async () => {
        if (this.relayMessageCache.length !== 0) for (; this.relayMessageCache.length > 0; ) try {
          const t = this.relayMessageCache.shift();
          t && await this.onRelayMessage(t);
        } catch (t) {
          this.client.logger.error(t);
        }
      }, 50);
    }), c2(this, "cleanupDuplicatePairings", async (t) => {
      if (t.pairingTopic) try {
        const e = this.client.core.pairing.pairings.get(t.pairingTopic), s = this.client.core.pairing.pairings.getAll().filter((i3) => {
          var r2, n2;
          return ((r2 = i3.peerMetadata) == null ? void 0 : r2.url) && ((n2 = i3.peerMetadata) == null ? void 0 : n2.url) === t.peer.metadata.url && i3.topic && i3.topic !== e.topic;
        });
        if (s.length === 0) return;
        this.client.logger.info(`Cleaning up ${s.length} duplicate pairing(s)`), await Promise.all(s.map((i3) => this.client.core.pairing.disconnect({ topic: i3.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
      } catch (e) {
        this.client.logger.error(e);
      }
    }), c2(this, "deleteSession", async (t) => {
      var e;
      const { topic: s, expirerHasDeleted: i3 = false, emitEvent: r2 = true, id: n2 = 0 } = t, { self: a2 } = this.client.session.get(s);
      await this.client.core.relayer.unsubscribe(s), await this.client.session.delete(s, zt("USER_DISCONNECTED")), this.addToRecentlyDeleted(s, "session"), this.client.core.crypto.keychain.has(a2.publicKey) && await this.client.core.crypto.deleteKeyPair(a2.publicKey), this.client.core.crypto.keychain.has(s) && await this.client.core.crypto.deleteSymKey(s), i3 || this.client.core.expirer.del(s), this.client.core.storage.removeItem(Le2).catch((l2) => this.client.logger.warn(l2)), this.getPendingSessionRequests().forEach((l2) => {
        l2.topic === s && this.deletePendingSessionRequest(l2.id, zt("USER_DISCONNECTED"));
      }), s === ((e = this.sessionRequestQueue.queue[0]) == null ? void 0 : e.topic) && (this.sessionRequestQueue.state = $2.idle), r2 && this.client.events.emit("session_delete", { id: n2, topic: s });
    }), c2(this, "deleteProposal", async (t, e) => {
      if (e) try {
        const s = this.client.proposal.get(t), i3 = this.client.core.eventClient.getEvent({ topic: s.pairingTopic });
        i3?.setError(nr2.proposal_expired);
      } catch {
      }
      await Promise.all([this.client.proposal.delete(t, zt("USER_DISCONNECTED")), e ? Promise.resolve() : this.client.core.expirer.del(t)]), this.addToRecentlyDeleted(t, "proposal");
    }), c2(this, "deletePendingSessionRequest", async (t, e, s = false) => {
      await Promise.all([this.client.pendingRequest.delete(t, e), s ? Promise.resolve() : this.client.core.expirer.del(t)]), this.addToRecentlyDeleted(t, "request"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i3) => i3.id !== t), s && (this.sessionRequestQueue.state = $2.idle, this.client.events.emit("session_request_expire", { id: t }));
    }), c2(this, "deletePendingAuthRequest", async (t, e, s = false) => {
      await Promise.all([this.client.auth.requests.delete(t, e), s ? Promise.resolve() : this.client.core.expirer.del(t)]);
    }), c2(this, "setExpiry", async (t, e) => {
      this.client.session.keys.includes(t) && (this.client.core.expirer.set(t, e), await this.client.session.update(t, { expiry: e }));
    }), c2(this, "setProposal", async (t, e) => {
      this.client.core.expirer.set(t, Ni(P3.wc_sessionPropose.req.ttl)), await this.client.proposal.set(t, e);
    }), c2(this, "setAuthRequest", async (t, e) => {
      const { request: s, pairingTopic: i3, transportType: r2 = ee2.relay } = e;
      this.client.core.expirer.set(t, s.expiryTimestamp), await this.client.auth.requests.set(t, { authPayload: s.authPayload, requester: s.requester, expiryTimestamp: s.expiryTimestamp, id: t, pairingTopic: i3, verifyContext: s.verifyContext, transportType: r2 });
    }), c2(this, "setPendingSessionRequest", async (t) => {
      const { id: e, topic: s, params: i3, verifyContext: r2 } = t, n2 = i3.request.expiryTimestamp || Ni(P3.wc_sessionRequest.req.ttl);
      this.client.core.expirer.set(e, n2), await this.client.pendingRequest.set(e, { id: e, topic: s, params: i3, verifyContext: r2 });
    }), c2(this, "sendRequest", async (t) => {
      const { topic: e, method: s, params: i3, expiry: r2, relayRpcId: n2, clientRpcId: a2, throwOnFailedPublish: l2, appLink: p3, tvf: h3, publishOpts: u2 = {} } = t, d4 = formatJsonRpcRequest(s, i3, a2);
      let y3;
      const w3 = !!p3;
      try {
        const _2 = w3 ? Ge : oe;
        y3 = await this.client.core.crypto.encode(e, d4, { encoding: _2 });
      } catch (_2) {
        throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${e} failed`), _2;
      }
      let m3;
      if (mt2.includes(s)) {
        const _2 = pa(JSON.stringify(d4)), b3 = pa(y3);
        m3 = await this.client.core.verify.register({ id: b3, decryptedId: _2 });
      }
      const S4 = R3(R3({}, P3[s].req), u2);
      if (S4.attestation = m3, r2 && (S4.ttl = r2), n2 && (S4.id = n2), this.client.core.history.set(e, d4), w3) {
        const _2 = Ta(p3, e, y3);
        await global.Linking.openURL(_2, this.client.name);
      } else S4.tvf = O2(R3({}, h3), { correlationId: d4.id }), l2 ? (S4.internal = O2(R3({}, S4.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(e, y3, S4)) : this.client.core.relayer.publish(e, y3, S4).catch((_2) => this.client.logger.error(_2));
      return d4.id;
    }), c2(this, "sendProposeSession", async (t) => {
      const { proposal: e, publishOpts: s } = t, i3 = formatJsonRpcRequest("wc_sessionPropose", e, e.id);
      this.client.core.history.set(e.pairingTopic, i3);
      const r2 = await this.client.core.crypto.encode(e.pairingTopic, i3, { encoding: oe }), n2 = pa(JSON.stringify(i3)), a2 = pa(r2), l2 = await this.client.core.verify.register({ id: a2, decryptedId: n2 });
      await this.client.core.relayer.publishCustom({ payload: { pairingTopic: e.pairingTopic, sessionProposal: r2 }, opts: O2(R3({}, s), { publishMethod: "wc_proposeSession", attestation: l2 }) });
    }), c2(this, "sendApproveSession", async (t) => {
      const { sessionTopic: e, pairingProposalResponse: s, proposal: i3, sessionSettleRequest: r2, publishOpts: n2 } = t, a2 = formatJsonRpcResult(i3.id, s), l2 = await this.client.core.crypto.encode(i3.pairingTopic, a2, { encoding: oe }), p3 = formatJsonRpcRequest("wc_sessionSettle", r2, n2?.id), h3 = await this.client.core.crypto.encode(e, p3, { encoding: oe });
      this.client.core.history.set(e, p3), await this.client.core.relayer.publishCustom({ payload: { sessionTopic: e, pairingTopic: i3.pairingTopic, sessionProposalResponse: l2, sessionSettlementRequest: h3 }, opts: O2(R3({}, n2), { publishMethod: "wc_approveSession" }) });
    }), c2(this, "sendResult", async (t) => {
      const { id: e, topic: s, result: i3, throwOnFailedPublish: r2, encodeOpts: n2, appLink: a2 } = t, l2 = formatJsonRpcResult(e, i3);
      let p3;
      const h3 = a2 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const y3 = h3 ? Ge : oe;
        p3 = await this.client.core.crypto.encode(s, l2, O2(R3({}, n2 || {}), { encoding: y3 }));
      } catch (y3) {
        throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s} failed`), y3;
      }
      let u2, d4;
      try {
        u2 = await this.client.core.history.get(s, e);
        const y3 = u2.request;
        try {
          d4 = this.getTVFParams(e, y3.params, i3);
        } catch (w3) {
          this.client.logger.warn(`sendResult() -> getTVFParams() failed: ${w3?.message}`);
        }
      } catch (y3) {
        throw this.client.logger.error(`sendResult() -> history.get(${s}, ${e}) failed`), y3;
      }
      if (h3) {
        const y3 = Ta(a2, s, p3);
        await global.Linking.openURL(y3, this.client.name);
      } else {
        const y3 = u2.request.method, w3 = P3[y3].res;
        w3.tvf = O2(R3({}, d4), { correlationId: e }), r2 ? (w3.internal = O2(R3({}, w3.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(s, p3, w3)) : this.client.core.relayer.publish(s, p3, w3).catch((m3) => this.client.logger.error(m3));
      }
      await this.client.core.history.resolve(l2);
    }), c2(this, "sendError", async (t) => {
      const { id: e, topic: s, error: i3, encodeOpts: r2, rpcOpts: n2, appLink: a2 } = t, l2 = formatJsonRpcError(e, i3);
      let p3;
      const h3 = a2 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const d4 = h3 ? Ge : oe;
        p3 = await this.client.core.crypto.encode(s, l2, O2(R3({}, r2 || {}), { encoding: d4 }));
      } catch (d4) {
        throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s} failed`), d4;
      }
      let u2;
      try {
        u2 = await this.client.core.history.get(s, e);
      } catch (d4) {
        throw this.client.logger.error(`sendError() -> history.get(${s}, ${e}) failed`), d4;
      }
      if (h3) {
        const d4 = Ta(a2, s, p3);
        await global.Linking.openURL(d4, this.client.name);
      } else {
        const d4 = u2.request.method, y3 = n2 || P3[d4].res;
        this.client.core.relayer.publish(s, p3, y3);
      }
      await this.client.core.history.resolve(l2);
    }), c2(this, "cleanup", async () => {
      const t = [], e = [];
      this.client.session.getAll().forEach((s) => {
        let i3 = false;
        Ui(s.expiry) && (i3 = true), this.client.core.crypto.keychain.has(s.topic) || (i3 = true), i3 && t.push(s.topic);
      }), this.client.proposal.getAll().forEach((s) => {
        Ui(s.expiryTimestamp) && e.push(s.id);
      }), await Promise.all([...t.map((s) => this.deleteSession({ topic: s })), ...e.map((s) => this.deleteProposal(s))]);
    }), c2(this, "onProviderMessageEvent", async (t) => {
      !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(t) : await this.onRelayMessage(t);
    }), c2(this, "onRelayEventRequest", async (t) => {
      this.requestQueue.queue.push(t), await this.processRequestsQueue();
    }), c2(this, "processRequestsQueue", async () => {
      if (this.requestQueue.state === $2.active) {
        this.client.logger.info("Request queue already active, skipping...");
        return;
      }
      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
        this.requestQueue.state = $2.active;
        const t = this.requestQueue.queue.shift();
        if (t) try {
          await this.processRequest(t);
        } catch (e) {
          this.client.logger.warn(e);
        }
      }
      this.requestQueue.state = $2.idle;
    }), c2(this, "processRequest", async (t) => {
      const { topic: e, payload: s, attestation: i3, transportType: r2, encryptedId: n2 } = t, a2 = s.method;
      if (!this.shouldIgnorePairingRequest({ topic: e, requestMethod: a2 })) switch (a2) {
        case "wc_sessionPropose":
          return await this.onSessionProposeRequest({ topic: e, payload: s, attestation: i3, encryptedId: n2 });
        case "wc_sessionSettle":
          return await this.onSessionSettleRequest(e, s);
        case "wc_sessionUpdate":
          return await this.onSessionUpdateRequest(e, s);
        case "wc_sessionExtend":
          return await this.onSessionExtendRequest(e, s);
        case "wc_sessionPing":
          return await this.onSessionPingRequest(e, s);
        case "wc_sessionDelete":
          return await this.onSessionDeleteRequest(e, s);
        case "wc_sessionRequest":
          return await this.onSessionRequest({ topic: e, payload: s, attestation: i3, encryptedId: n2, transportType: r2 });
        case "wc_sessionEvent":
          return await this.onSessionEventRequest(e, s);
        case "wc_sessionAuthenticate":
          return await this.onSessionAuthenticateRequest({ topic: e, payload: s, attestation: i3, encryptedId: n2, transportType: r2 });
        default:
          return this.client.logger.info(`Unsupported request method ${a2}`);
      }
    }), c2(this, "onRelayEventResponse", async (t) => {
      const { topic: e, payload: s, transportType: i3 } = t, r2 = (await this.client.core.history.get(e, s.id)).request.method;
      switch (r2) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(e, s, i3);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(e, s);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(e, s);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(e, s);
        case "wc_sessionPing":
          return this.onSessionPingResponse(e, s);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(e, s);
        case "wc_sessionAuthenticate":
          return this.onSessionAuthenticateResponse(e, s);
        default:
          return this.client.logger.info(`Unsupported response method ${r2}`);
      }
    }), c2(this, "onRelayEventUnknownPayload", (t) => {
      const { topic: e } = t, { message: s } = Bt("MISSING_OR_INVALID", `Decoded payload on topic ${e} is not identifiable as a JSON-RPC request or a response.`);
      throw new Error(s);
    }), c2(this, "shouldIgnorePairingRequest", (t) => {
      const { topic: e, requestMethod: s } = t, i3 = this.expectedPairingMethodMap.get(e);
      return !i3 || i3.includes(s) ? false : !!(i3.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
    }), c2(this, "onSessionProposeRequest", async (t) => {
      const { topic: e, payload: s, attestation: i3, encryptedId: r2 } = t, { params: n2, id: a2 } = s;
      try {
        const l2 = this.client.core.eventClient.getEvent({ topic: e });
        this.client.events.listenerCount("session_proposal") === 0 && (console.warn("No listener for session_proposal event"), l2?.setError(X3.proposal_listener_not_found)), this.isValidConnect(R3({}, s.params));
        const p3 = n2.expiryTimestamp || Ni(P3.wc_sessionPropose.req.ttl), h3 = R3({ id: a2, pairingTopic: e, expiryTimestamp: p3, attestation: i3, encryptedId: r2 }, n2);
        await this.setProposal(a2, h3);
        const u2 = await this.getVerifyContext({ attestationId: i3, hash: pa(JSON.stringify(s)), encryptedId: r2, metadata: h3.proposer.metadata });
        l2?.addTrace(Y2.emit_session_proposal), this.client.events.emit("session_proposal", { id: a2, params: h3, verifyContext: u2 });
      } catch (l2) {
        await this.sendError({ id: a2, topic: e, error: l2, rpcOpts: P3.wc_sessionPropose.autoReject }), this.client.logger.error(l2);
      }
    }), c2(this, "onSessionProposeResponse", async (t, e, s) => {
      const { id: i3 } = e;
      if (isJsonRpcResult(e)) {
        const { result: r2 } = e;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r2 });
        const n2 = this.client.proposal.get(i3);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: n2 });
        const a2 = n2.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a2 });
        const l2 = r2.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: l2 });
        const p3 = await this.client.core.crypto.generateSharedKey(a2, l2);
        this.pendingSessions.set(i3, { sessionTopic: p3, pairingTopic: t, proposalId: i3, publicKey: a2 });
        const h3 = await this.client.core.relayer.subscribe(p3, { transportType: s });
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: h3 }), await this.client.core.pairing.activate({ topic: t });
      } else if (isJsonRpcError(e)) {
        await this.deleteProposal(i3);
        const r2 = _i("session_connect", i3);
        if (this.events.listenerCount(r2) === 0) throw new Error(`emitting ${r2} without any listeners, 954`);
        this.events.emit(r2, { error: e.error });
      }
    }), c2(this, "onSessionSettleRequest", async (t, e) => {
      const { id: s, params: i3 } = e;
      try {
        this.isValidSessionSettleRequest(i3);
        const { relay: r2, controller: n2, expiry: a2, namespaces: l2, sessionProperties: p3, scopedProperties: h3, sessionConfig: u2 } = e.params, d4 = [...this.pendingSessions.values()].find((m3) => m3.sessionTopic === t);
        if (!d4) return this.client.logger.error(`Pending session not found for topic ${t}`);
        const y3 = this.client.proposal.get(d4.proposalId), w3 = O2(R3(R3(R3({ topic: t, relay: r2, expiry: a2, namespaces: l2, acknowledged: true, pairingTopic: d4.pairingTopic, requiredNamespaces: y3.requiredNamespaces, optionalNamespaces: y3.optionalNamespaces, controller: n2.publicKey, self: { publicKey: d4.publicKey, metadata: this.client.metadata }, peer: { publicKey: n2.publicKey, metadata: n2.metadata } }, p3 && { sessionProperties: p3 }), h3 && { scopedProperties: h3 }), u2 && { sessionConfig: u2 }), { transportType: ee2.relay });
        await this.client.session.set(w3.topic, w3), await this.setExpiry(w3.topic, w3.expiry), await this.client.core.pairing.updateMetadata({ topic: d4.pairingTopic, metadata: w3.peer.metadata }), this.client.events.emit("session_connect", { session: w3 }), this.events.emit(_i("session_connect", d4.proposalId), { session: w3 }), this.pendingSessions.delete(d4.proposalId), this.deleteProposal(d4.proposalId, false), this.cleanupDuplicatePairings(w3), await this.sendResult({ id: e.id, topic: t, result: true });
      } catch (r2) {
        await this.sendError({ id: s, topic: t, error: r2 }), this.client.logger.error(r2);
      }
    }), c2(this, "onSessionSettleResponse", async (t, e) => {
      const { id: s } = e;
      isJsonRpcResult(e) ? (await this.client.session.update(t, { acknowledged: true }), this.events.emit(_i("session_approve", s), {})) : isJsonRpcError(e) && (await this.client.session.delete(t, zt("USER_DISCONNECTED")), this.events.emit(_i("session_approve", s), { error: e.error }));
    }), c2(this, "onSessionUpdateRequest", async (t, e) => {
      const { params: s, id: i3 } = e;
      try {
        const r2 = `${t}_session_update`, n2 = hu.get(r2);
        if (n2 && this.isRequestOutOfSync(n2, i3)) {
          this.client.logger.warn(`Discarding out of sync request - ${i3}`), this.sendError({ id: i3, topic: t, error: zt("INVALID_UPDATE_REQUEST") });
          return;
        }
        this.isValidUpdate(R3({ topic: t }, s));
        try {
          hu.set(r2, i3), await this.client.session.update(t, { namespaces: s.namespaces }), await this.sendResult({ id: i3, topic: t, result: true });
        } catch (a2) {
          throw hu.delete(r2), a2;
        }
        this.client.events.emit("session_update", { id: i3, topic: t, params: s });
      } catch (r2) {
        await this.sendError({ id: i3, topic: t, error: r2 }), this.client.logger.error(r2);
      }
    }), c2(this, "isRequestOutOfSync", (t, e) => e.toString().slice(0, -3) < t.toString().slice(0, -3)), c2(this, "onSessionUpdateResponse", (t, e) => {
      const { id: s } = e, i3 = _i("session_update", s);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(e) ? this.events.emit(_i("session_update", s), {}) : isJsonRpcError(e) && this.events.emit(_i("session_update", s), { error: e.error });
    }), c2(this, "onSessionExtendRequest", async (t, e) => {
      const { id: s } = e;
      try {
        this.isValidExtend({ topic: t }), await this.setExpiry(t, Ni(W3)), await this.sendResult({ id: s, topic: t, result: true }), this.client.events.emit("session_extend", { id: s, topic: t });
      } catch (i3) {
        await this.sendError({ id: s, topic: t, error: i3 }), this.client.logger.error(i3);
      }
    }), c2(this, "onSessionExtendResponse", (t, e) => {
      const { id: s } = e, i3 = _i("session_extend", s);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(e) ? this.events.emit(_i("session_extend", s), {}) : isJsonRpcError(e) && this.events.emit(_i("session_extend", s), { error: e.error });
    }), c2(this, "onSessionPingRequest", async (t, e) => {
      const { id: s } = e;
      try {
        this.isValidPing({ topic: t }), await this.sendResult({ id: s, topic: t, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_ping", { id: s, topic: t });
      } catch (i3) {
        await this.sendError({ id: s, topic: t, error: i3 }), this.client.logger.error(i3);
      }
    }), c2(this, "onSessionPingResponse", (t, e) => {
      const { id: s } = e, i3 = _i("session_ping", s);
      setTimeout(() => {
        if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners 2176`);
        isJsonRpcResult(e) ? this.events.emit(_i("session_ping", s), {}) : isJsonRpcError(e) && this.events.emit(_i("session_ping", s), { error: e.error });
      }, 500);
    }), c2(this, "onSessionDeleteRequest", async (t, e) => {
      const { id: s } = e;
      try {
        this.isValidDisconnect({ topic: t, reason: e.params }), await Promise.all([new Promise((i3) => {
          this.client.core.relayer.once(C2.publish, async () => {
            i3(await this.deleteSession({ topic: t, id: s }));
          });
        }), this.sendResult({ id: s, topic: t, result: true }), this.cleanupPendingSentRequestsForTopic({ topic: t, error: zt("USER_DISCONNECTED") })]).catch((i3) => this.client.logger.error(i3));
      } catch (i3) {
        this.client.logger.error(i3);
      }
    }), c2(this, "onSessionRequest", async (t) => {
      var e, s, i3;
      const { topic: r2, payload: n2, attestation: a2, encryptedId: l2, transportType: p3 } = t, { id: h3, params: u2 } = n2;
      try {
        await this.isValidRequest(R3({ topic: r2 }, u2));
        const d4 = this.client.session.get(r2), y3 = await this.getVerifyContext({ attestationId: a2, hash: pa(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", u2, h3))), encryptedId: l2, metadata: d4.peer.metadata, transportType: p3 }), w3 = { id: h3, topic: r2, params: u2, verifyContext: y3 };
        await this.setPendingSessionRequest(w3), p3 === ee2.link_mode && (e = d4.peer.metadata.redirect) != null && e.universal && this.client.core.addLinkModeSupportedApp((s = d4.peer.metadata.redirect) == null ? void 0 : s.universal), (i3 = this.client.signConfig) != null && i3.disableRequestQueue ? this.emitSessionRequest(w3) : (this.addSessionRequestToSessionRequestQueue(w3), this.processSessionRequestQueue());
      } catch (d4) {
        await this.sendError({ id: h3, topic: r2, error: d4 }), this.client.logger.error(d4);
      }
    }), c2(this, "onSessionRequestResponse", (t, e) => {
      const { id: s } = e, i3 = _i("session_request", s);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(e) ? this.events.emit(_i("session_request", s), { result: e.result }) : isJsonRpcError(e) && this.events.emit(_i("session_request", s), { error: e.error });
    }), c2(this, "onSessionEventRequest", async (t, e) => {
      const { id: s, params: i3 } = e;
      try {
        const r2 = `${t}_session_event_${i3.event.name}`, n2 = hu.get(r2);
        if (n2 && this.isRequestOutOfSync(n2, s)) {
          this.client.logger.info(`Discarding out of sync request - ${s}`);
          return;
        }
        this.isValidEmit(R3({ topic: t }, i3)), this.client.events.emit("session_event", { id: s, topic: t, params: i3 }), hu.set(r2, s);
      } catch (r2) {
        await this.sendError({ id: s, topic: t, error: r2 }), this.client.logger.error(r2);
      }
    }), c2(this, "onSessionAuthenticateResponse", (t, e) => {
      const { id: s } = e;
      this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: t, payload: e }), isJsonRpcResult(e) ? this.events.emit(_i("session_request", s), { result: e.result }) : isJsonRpcError(e) && this.events.emit(_i("session_request", s), { error: e.error });
    }), c2(this, "onSessionAuthenticateRequest", async (t) => {
      var e;
      const { topic: s, payload: i3, attestation: r2, encryptedId: n2, transportType: a2 } = t;
      try {
        const { requester: l2, authPayload: p3, expiryTimestamp: h3 } = i3.params, u2 = await this.getVerifyContext({ attestationId: r2, hash: pa(JSON.stringify(i3)), encryptedId: n2, metadata: l2.metadata, transportType: a2 }), d4 = { requester: l2, pairingTopic: s, id: i3.id, authPayload: p3, verifyContext: u2, expiryTimestamp: h3 };
        await this.setAuthRequest(i3.id, { request: d4, pairingTopic: s, transportType: a2 }), a2 === ee2.link_mode && (e = l2.metadata.redirect) != null && e.universal && this.client.core.addLinkModeSupportedApp(l2.metadata.redirect.universal), this.client.events.emit("session_authenticate", { topic: s, params: i3.params, id: i3.id, verifyContext: u2 });
      } catch (l2) {
        this.client.logger.error(l2);
        const p3 = i3.params.requester.publicKey, h3 = await this.client.core.crypto.generateKeyPair(), u2 = this.getAppLinkIfEnabled(i3.params.requester.metadata, a2), d4 = { type: ie, receiverPublicKey: p3, senderPublicKey: h3 };
        await this.sendError({ id: i3.id, topic: s, error: l2, encodeOpts: d4, rpcOpts: P3.wc_sessionAuthenticate.autoReject, appLink: u2 });
      }
    }), c2(this, "addSessionRequestToSessionRequestQueue", (t) => {
      this.sessionRequestQueue.queue.push(t);
    }), c2(this, "cleanupAfterResponse", (t) => {
      this.deletePendingSessionRequest(t.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
        this.sessionRequestQueue.state = $2.idle, this.processSessionRequestQueue();
      }, (0, import_time3.toMiliseconds)(this.requestQueueDelay));
    }), c2(this, "cleanupPendingSentRequestsForTopic", ({ topic: t, error: e }) => {
      const s = this.client.core.history.pending;
      s.length > 0 && s.filter((i3) => i3.topic === t && i3.request.method === "wc_sessionRequest").forEach((i3) => {
        const r2 = i3.request.id, n2 = _i("session_request", r2);
        if (this.events.listenerCount(n2) === 0) throw new Error(`emitting ${n2} without any listeners`);
        this.events.emit(_i("session_request", i3.request.id), { error: e });
      });
    }), c2(this, "processSessionRequestQueue", () => {
      if (this.sessionRequestQueue.state === $2.active) {
        this.client.logger.info("session request queue is already active.");
        return;
      }
      const t = this.sessionRequestQueue.queue[0];
      if (!t) {
        this.client.logger.info("session request queue is empty.");
        return;
      }
      try {
        this.emitSessionRequest(t);
      } catch (e) {
        this.client.logger.error(e);
      }
    }), c2(this, "emitSessionRequest", (t) => {
      if (this.emittedSessionRequests.has(t.id)) {
        this.client.logger.warn({ id: t.id }, `Skipping emitting \`session_request\` event for duplicate request. id: ${t.id}`);
        return;
      }
      this.sessionRequestQueue.state = $2.active, this.emittedSessionRequests.add(t.id), this.client.events.emit("session_request", t);
    }), c2(this, "onPairingCreated", (t) => {
      if (t.methods && this.expectedPairingMethodMap.set(t.topic, t.methods), t.active) return;
      const e = this.client.proposal.getAll().find((s) => s.pairingTopic === t.topic);
      e && this.onSessionProposeRequest({ topic: t.topic, payload: formatJsonRpcRequest("wc_sessionPropose", O2(R3({}, e), { requiredNamespaces: e.requiredNamespaces, optionalNamespaces: e.optionalNamespaces, relays: e.relays, proposer: e.proposer, sessionProperties: e.sessionProperties, scopedProperties: e.scopedProperties }), e.id), attestation: e.attestation, encryptedId: e.encryptedId });
    }), c2(this, "isValidConnect", async (t) => {
      if (!Qa(t)) {
        const { message: l2 } = Bt("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(t)}`);
        throw new Error(l2);
      }
      const { pairingTopic: e, requiredNamespaces: s, optionalNamespaces: i3, sessionProperties: r2, scopedProperties: n2, relays: a2 } = t;
      if (Dt(e) || await this.isValidPairingTopic(e), !Xa(a2, true)) {
        const { message: l2 } = Bt("MISSING_OR_INVALID", `connect() relays: ${a2}`);
        throw new Error(l2);
      }
      if (s && !Dt(s) && Ye(s) !== 0) {
        const l2 = "requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces";
        ["fatal", "error", "silent"].includes(this.client.logger.level) ? console.warn(l2) : this.client.logger.warn(l2), this.validateNamespaces(s, "requiredNamespaces");
      }
      if (i3 && !Dt(i3) && Ye(i3) !== 0 && this.validateNamespaces(i3, "optionalNamespaces"), r2 && !Dt(r2) && this.validateSessionProps(r2, "sessionProperties"), n2 && !Dt(n2)) {
        this.validateSessionProps(n2, "scopedProperties");
        const l2 = Object.keys(s || {}).concat(Object.keys(i3 || {}));
        if (!Object.keys(n2).every((p3) => l2.includes(p3.split(":")[0]))) throw new Error(`Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(n2)}, required/optional namespaces: ${JSON.stringify(l2)}`);
      }
    }), c2(this, "validateNamespaces", (t, e) => {
      const s = Wa(t, "connect()", e);
      if (s) throw new Error(s.message);
    }), c2(this, "isValidApprove", async (t) => {
      if (!Qa(t)) throw new Error(Bt("MISSING_OR_INVALID", `approve() params: ${t}`).message);
      const { id: e, namespaces: s, relayProtocol: i3, sessionProperties: r2, scopedProperties: n2 } = t;
      this.checkRecentlyDeleted(e), await this.isValidProposalId(e);
      const a2 = this.client.proposal.get(e), l2 = Ss(s, "approve()");
      if (l2) throw new Error(l2.message);
      const p3 = Ns(a2.requiredNamespaces, s, "approve()");
      if (p3) throw new Error(p3.message);
      if (!ft(i3, true)) {
        const { message: h3 } = Bt("MISSING_OR_INVALID", `approve() relayProtocol: ${i3}`);
        throw new Error(h3);
      }
      if (r2 && !Dt(r2) && this.validateSessionProps(r2, "sessionProperties"), n2 && !Dt(n2)) {
        this.validateSessionProps(n2, "scopedProperties");
        const h3 = new Set(Object.keys(s));
        if (!Object.keys(n2).every((u2) => h3.has(u2.split(":")[0]))) throw new Error(`Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(n2)}, approved namespaces: ${Array.from(h3).join(", ")}`);
      }
    }), c2(this, "isValidReject", async (t) => {
      if (!Qa(t)) {
        const { message: i3 } = Bt("MISSING_OR_INVALID", `reject() params: ${t}`);
        throw new Error(i3);
      }
      const { id: e, reason: s } = t;
      if (this.checkRecentlyDeleted(e), await this.isValidProposalId(e), !tu(s)) {
        const { message: i3 } = Bt("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s)}`);
        throw new Error(i3);
      }
    }), c2(this, "isValidSessionSettleRequest", (t) => {
      if (!Qa(t)) {
        const { message: l2 } = Bt("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${t}`);
        throw new Error(l2);
      }
      const { relay: e, controller: s, namespaces: i3, expiry: r2 } = t;
      if (!Os(e)) {
        const { message: l2 } = Bt("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(l2);
      }
      const n2 = Ya(s, "onSessionSettleRequest()");
      if (n2) throw new Error(n2.message);
      const a2 = Ss(i3, "onSessionSettleRequest()");
      if (a2) throw new Error(a2.message);
      if (Ui(r2)) {
        const { message: l2 } = Bt("EXPIRED", "onSessionSettleRequest()");
        throw new Error(l2);
      }
    }), c2(this, "isValidUpdate", async (t) => {
      if (!Qa(t)) {
        const { message: a2 } = Bt("MISSING_OR_INVALID", `update() params: ${t}`);
        throw new Error(a2);
      }
      const { topic: e, namespaces: s } = t;
      this.checkRecentlyDeleted(e), await this.isValidSessionTopic(e);
      const i3 = this.client.session.get(e), r2 = Ss(s, "update()");
      if (r2) throw new Error(r2.message);
      const n2 = Ns(i3.requiredNamespaces, s, "update()");
      if (n2) throw new Error(n2.message);
    }), c2(this, "isValidExtend", async (t) => {
      if (!Qa(t)) {
        const { message: s } = Bt("MISSING_OR_INVALID", `extend() params: ${t}`);
        throw new Error(s);
      }
      const { topic: e } = t;
      this.checkRecentlyDeleted(e), await this.isValidSessionTopic(e);
    }), c2(this, "isValidRequest", async (t) => {
      if (!Qa(t)) {
        const { message: a2 } = Bt("MISSING_OR_INVALID", `request() params: ${t}`);
        throw new Error(a2);
      }
      const { topic: e, request: s, chainId: i3, expiry: r2 } = t;
      this.checkRecentlyDeleted(e), await this.isValidSessionTopic(e);
      const { namespaces: n2 } = this.client.session.get(e);
      if (!ou(n2, i3)) {
        const { message: a2 } = Bt("MISSING_OR_INVALID", `request() chainId: ${i3}`);
        throw new Error(a2);
      }
      if (!eu(s)) {
        const { message: a2 } = Bt("MISSING_OR_INVALID", `request() ${JSON.stringify(s)}`);
        throw new Error(a2);
      }
      if (!su(n2, i3, s.method)) {
        const { message: a2 } = Bt("MISSING_OR_INVALID", `request() method: ${s.method}`);
        throw new Error(a2);
      }
      if (r2 && !au(r2, _e3)) {
        const { message: a2 } = Bt("MISSING_OR_INVALID", `request() expiry: ${r2}. Expiry must be a number (in seconds) between ${_e3.min} and ${_e3.max}`);
        throw new Error(a2);
      }
    }), c2(this, "isValidRespond", async (t) => {
      var e;
      if (!Qa(t)) {
        const { message: n2 } = Bt("MISSING_OR_INVALID", `respond() params: ${t}`);
        throw new Error(n2);
      }
      const { topic: s, response: i3 } = t;
      try {
        await this.isValidSessionTopic(s);
      } catch (n2) {
        throw (e = t?.response) != null && e.id && this.cleanupAfterResponse(t), n2;
      }
      if (!nu(i3)) {
        const { message: n2 } = Bt("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i3)}`);
        throw new Error(n2);
      }
      const r2 = this.client.pendingRequest.get(i3.id);
      if (r2.topic !== s) {
        const { message: n2 } = Bt("MISMATCHED_TOPIC", `Request response topic mismatch. reqId: ${i3.id}, expected topic: ${r2.topic}, received topic: ${s}`);
        throw new Error(n2);
      }
    }), c2(this, "isValidPing", async (t) => {
      if (!Qa(t)) {
        const { message: s } = Bt("MISSING_OR_INVALID", `ping() params: ${t}`);
        throw new Error(s);
      }
      const { topic: e } = t;
      await this.isValidSessionOrPairingTopic(e);
    }), c2(this, "isValidEmit", async (t) => {
      if (!Qa(t)) {
        const { message: n2 } = Bt("MISSING_OR_INVALID", `emit() params: ${t}`);
        throw new Error(n2);
      }
      const { topic: e, event: s, chainId: i3 } = t;
      await this.isValidSessionTopic(e);
      const { namespaces: r2 } = this.client.session.get(e);
      if (!ou(r2, i3)) {
        const { message: n2 } = Bt("MISSING_OR_INVALID", `emit() chainId: ${i3}`);
        throw new Error(n2);
      }
      if (!ru(s)) {
        const { message: n2 } = Bt("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s)}`);
        throw new Error(n2);
      }
      if (!iu(r2, i3, s.name)) {
        const { message: n2 } = Bt("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s)}`);
        throw new Error(n2);
      }
    }), c2(this, "isValidDisconnect", async (t) => {
      if (!Qa(t)) {
        const { message: s } = Bt("MISSING_OR_INVALID", `disconnect() params: ${t}`);
        throw new Error(s);
      }
      const { topic: e } = t;
      await this.isValidSessionOrPairingTopic(e);
    }), c2(this, "isValidAuthenticate", (t) => {
      const { chains: e, uri: s, domain: i3, nonce: r2 } = t;
      if (!Array.isArray(e) || e.length === 0) throw new Error("chains is required and must be a non-empty array");
      if (!ft(s, false)) throw new Error("uri is required parameter");
      if (!ft(i3, false)) throw new Error("domain is required parameter");
      if (!ft(r2, false)) throw new Error("nonce is required parameter");
      if ([...new Set(e.map((a2) => Je(a2).namespace))].length > 1) throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
      const { namespace: n2 } = Je(e[0]);
      if (n2 !== "eip155") throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
    }), c2(this, "getVerifyContext", async (t) => {
      const { attestationId: e, hash: s, encryptedId: i3, metadata: r2, transportType: n2 } = t, a2 = { verified: { verifyUrl: r2.verifyUrl || be2, validation: "UNKNOWN", origin: r2.url || "" } };
      try {
        if (n2 === ee2.link_mode) {
          const p3 = this.getAppLinkIfEnabled(r2, n2);
          return a2.verified.validation = p3 && new URL(p3).origin === new URL(r2.url).origin ? "VALID" : "INVALID", a2;
        }
        const l2 = await this.client.core.verify.resolve({ attestationId: e, hash: s, encryptedId: i3, verifyUrl: r2.verifyUrl });
        l2 && (a2.verified.origin = l2.origin, a2.verified.isScam = l2.isScam, a2.verified.validation = l2.origin === new URL(r2.url).origin ? "VALID" : "INVALID");
      } catch (l2) {
        this.client.logger.warn(l2);
      }
      return this.client.logger.debug(`Verify context: ${JSON.stringify(a2)}`), a2;
    }), c2(this, "validateSessionProps", (t, e) => {
      Object.values(t).forEach((s, i3) => {
        if (s == null) {
          const { message: r2 } = Bt("MISSING_OR_INVALID", `${e} must contain an existing value for each key. Received: ${s} for key ${Object.keys(t)[i3]}`);
          throw new Error(r2);
        }
      });
    }), c2(this, "getPendingAuthRequest", (t) => {
      const e = this.client.auth.requests.get(t);
      return typeof e == "object" ? e : void 0;
    }), c2(this, "addToRecentlyDeleted", (t, e) => {
      if (this.recentlyDeletedMap.set(t, e), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {
        let s = 0;
        const i3 = this.recentlyDeletedLimit / 2;
        for (const r2 of this.recentlyDeletedMap.keys()) {
          if (s++ >= i3) break;
          this.recentlyDeletedMap.delete(r2);
        }
      }
    }), c2(this, "checkRecentlyDeleted", (t) => {
      const e = this.recentlyDeletedMap.get(t);
      if (e) {
        const { message: s } = Bt("MISSING_OR_INVALID", `Record was recently deleted - ${e}: ${t}`);
        throw new Error(s);
      }
    }), c2(this, "isLinkModeEnabled", (t, e) => {
      var s, i3, r2, n2, a2, l2, p3, h3, u2;
      return !t || e !== ee2.link_mode ? false : ((i3 = (s = this.client.metadata) == null ? void 0 : s.redirect) == null ? void 0 : i3.linkMode) === true && ((n2 = (r2 = this.client.metadata) == null ? void 0 : r2.redirect) == null ? void 0 : n2.universal) !== void 0 && ((l2 = (a2 = this.client.metadata) == null ? void 0 : a2.redirect) == null ? void 0 : l2.universal) !== "" && ((p3 = t?.redirect) == null ? void 0 : p3.universal) !== void 0 && ((h3 = t?.redirect) == null ? void 0 : h3.universal) !== "" && ((u2 = t?.redirect) == null ? void 0 : u2.linkMode) === true && this.client.core.linkModeSupportedApps.includes(t.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < "u";
    }), c2(this, "getAppLinkIfEnabled", (t, e) => {
      var s;
      return this.isLinkModeEnabled(t, e) ? (s = t?.redirect) == null ? void 0 : s.universal : void 0;
    }), c2(this, "handleLinkModeMessage", ({ url: t }) => {
      if (!t || !t.includes("wc_ev") || !t.includes("topic")) return;
      const e = Ti(t, "topic") || "", s = decodeURIComponent(Ti(t, "wc_ev") || ""), i3 = this.client.session.keys.includes(e);
      i3 && this.client.session.update(e, { transportType: ee2.link_mode }), this.client.core.dispatchEnvelope({ topic: e, message: s, sessionExists: i3 });
    }), c2(this, "registerLinkModeListeners", async () => {
      var t;
      if (ji() || At() && (t = this.client.metadata.redirect) != null && t.linkMode) {
        const e = global == null ? void 0 : global.Linking;
        if (typeof e < "u") {
          e.addEventListener("url", this.handleLinkModeMessage, this.client.name);
          const s = await e.getInitialURL();
          s && setTimeout(() => {
            this.handleLinkModeMessage({ url: s });
          }, 50);
        }
      }
    }), c2(this, "getTVFParams", (t, e, s) => {
      var i3, r2, n2;
      if (!((i3 = e.request) != null && i3.method)) return {};
      const a2 = { correlationId: t, rpcMethods: [e.request.method], chainId: e.chainId };
      try {
        const l2 = this.extractTxHashesFromResult(e.request, s);
        a2.txHashes = l2, a2.contractAddresses = this.isValidContractData(e.request.params) ? [(n2 = (r2 = e.request.params) == null ? void 0 : r2[0]) == null ? void 0 : n2.to] : [];
      } catch (l2) {
        this.client.logger.warn(l2, "Error getting TVF params");
      }
      return a2;
    }), c2(this, "isValidContractData", (t) => {
      var e;
      if (!t) return false;
      try {
        const s = t?.data || ((e = t?.[0]) == null ? void 0 : e.data);
        if (!s.startsWith("0x")) return false;
        const i3 = s.slice(2);
        return /^[0-9a-fA-F]*$/.test(i3) ? i3.length % 2 === 0 : false;
      } catch {
      }
      return false;
    }), c2(this, "extractTxHashesFromResult", (t, e) => {
      var s;
      try {
        if (!e) return [];
        const i3 = t.method, r2 = yt2[i3];
        if (i3 === "sui_signTransaction") return [Oc(e.transactionBytes)];
        if (i3 === "near_signTransaction") return [Nc(e)];
        if (i3 === "near_signTransactions") return e.map((a2) => Nc(a2));
        if (i3 === "xrpl_signTransactionFor" || i3 === "xrpl_signTransaction") return [(s = e.tx_json) == null ? void 0 : s.hash];
        if (i3 === "polkadot_signTransaction") return [mu({ transaction: t.params.transactionPayload, signature: e.signature })];
        if (i3 === "algo_signTxn") return Ee(e) ? e.map((a2) => Uc(a2)) : [Uc(e)];
        if (i3 === "cosmos_signDirect") return [_c(e)];
        if (i3 === "wallet_sendCalls") return Rc(e);
        if (typeof e == "string") return [e];
        const n2 = e[r2.key];
        if (Ee(n2)) return i3 === "solana_signAllTransactions" ? n2.map((a2) => Sc(a2)) : n2;
        if (typeof n2 == "string") return [n2];
      } catch (i3) {
        this.client.logger.warn(i3, "Error extracting tx hashes from result");
      }
      return [];
    });
  }
  async processPendingMessageEvents() {
    try {
      const o2 = this.client.session.keys, t = this.client.core.relayer.messages.getWithoutAck(o2);
      for (const [e, s] of Object.entries(t)) for (const i3 of s) try {
        await this.onProviderMessageEvent({ topic: e, message: i3, publishedAt: Date.now() });
      } catch {
        this.client.logger.warn(`Error processing pending message event for topic: ${e}, message: ${i3}`);
      }
    } catch (o2) {
      this.client.logger.warn(o2, "processPendingMessageEvents failed");
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: o2 } = Bt("NOT_INITIALIZED", this.name);
      throw new Error(o2);
    }
  }
  async confirmOnlineStateOrThrow() {
    await this.client.core.relayer.confirmOnlineStateOrThrow();
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(C2.message, (o2) => {
      this.onProviderMessageEvent(o2);
    });
  }
  async onRelayMessage(o2) {
    const { topic: t, message: e, attestation: s, transportType: i3 } = o2, { publicKey: r2 } = this.client.auth.authKeys.keys.includes(pe2) ? this.client.auth.authKeys.get(pe2) : { responseTopic: void 0, publicKey: void 0 };
    try {
      const n2 = await this.client.core.crypto.decode(t, e, { receiverPublicKey: r2, encoding: i3 === ee2.link_mode ? Ge : oe });
      isJsonRpcRequest(n2) ? (this.client.core.history.set(t, n2), await this.onRelayEventRequest({ topic: t, payload: n2, attestation: s, transportType: i3, encryptedId: pa(e) })) : isJsonRpcResponse(n2) ? (await this.client.core.history.resolve(n2), await this.onRelayEventResponse({ topic: t, payload: n2, transportType: i3 }), this.client.core.history.delete(t, n2.id)) : await this.onRelayEventUnknownPayload({ topic: t, payload: n2, transportType: i3 }), await this.client.core.relayer.messages.ack(t, e);
    } catch (n2) {
      this.client.logger.error(n2);
    }
  }
  registerExpirerEvents() {
    this.client.core.expirer.on(q.expired, async (o2) => {
      const { topic: t, id: e } = Oi(o2.target);
      if (e && this.client.pendingRequest.keys.includes(e)) return await this.deletePendingSessionRequest(e, Bt("EXPIRED"), true);
      if (e && this.client.auth.requests.keys.includes(e)) return await this.deletePendingAuthRequest(e, Bt("EXPIRED"), true);
      t ? this.client.session.keys.includes(t) && (await this.deleteSession({ topic: t, expirerHasDeleted: true }), this.client.events.emit("session_expire", { topic: t })) : e && (await this.deleteProposal(e, true), this.client.events.emit("proposal_expire", { id: e }));
    });
  }
  registerPairingEvents() {
    this.client.core.pairing.events.on(ae2.create, (o2) => this.onPairingCreated(o2)), this.client.core.pairing.events.on(ae2.delete, (o2) => {
      this.addToRecentlyDeleted(o2.topic, "pairing");
    });
  }
  isValidPairingTopic(o2) {
    if (!ft(o2, false)) {
      const { message: t } = Bt("MISSING_OR_INVALID", `pairing topic should be a string: ${o2}`);
      throw new Error(t);
    }
    if (!this.client.core.pairing.pairings.keys.includes(o2)) {
      const { message: t } = Bt("NO_MATCHING_KEY", `pairing topic doesn't exist: ${o2}`);
      throw new Error(t);
    }
    if (Ui(this.client.core.pairing.pairings.get(o2).expiry)) {
      const { message: t } = Bt("EXPIRED", `pairing topic: ${o2}`);
      throw new Error(t);
    }
  }
  async isValidSessionTopic(o2) {
    if (!ft(o2, false)) {
      const { message: t } = Bt("MISSING_OR_INVALID", `session topic should be a string: ${o2}`);
      throw new Error(t);
    }
    if (this.checkRecentlyDeleted(o2), !this.client.session.keys.includes(o2)) {
      const { message: t } = Bt("NO_MATCHING_KEY", `session topic doesn't exist: ${o2}`);
      throw new Error(t);
    }
    if (Ui(this.client.session.get(o2).expiry)) {
      await this.deleteSession({ topic: o2 });
      const { message: t } = Bt("EXPIRED", `session topic: ${o2}`);
      throw new Error(t);
    }
    if (!this.client.core.crypto.keychain.has(o2)) {
      const { message: t } = Bt("MISSING_OR_INVALID", `session topic does not exist in keychain: ${o2}`);
      throw await this.deleteSession({ topic: o2 }), new Error(t);
    }
  }
  async isValidSessionOrPairingTopic(o2) {
    if (this.checkRecentlyDeleted(o2), this.client.session.keys.includes(o2)) await this.isValidSessionTopic(o2);
    else if (this.client.core.pairing.pairings.keys.includes(o2)) this.isValidPairingTopic(o2);
    else if (ft(o2, false)) {
      const { message: t } = Bt("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${o2}`);
      throw new Error(t);
    } else {
      const { message: t } = Bt("MISSING_OR_INVALID", `session or pairing topic should be a string: ${o2}`);
      throw new Error(t);
    }
  }
  async isValidProposalId(o2) {
    if (!Ja(o2)) {
      const { message: t } = Bt("MISSING_OR_INVALID", `proposal id should be a number: ${o2}`);
      throw new Error(t);
    }
    if (!this.client.proposal.keys.includes(o2)) {
      const { message: t } = Bt("NO_MATCHING_KEY", `proposal id doesn't exist: ${o2}`);
      throw new Error(t);
    }
    if (Ui(this.client.proposal.get(o2).expiryTimestamp)) {
      await this.deleteProposal(o2);
      const { message: t } = Bt("EXPIRED", `proposal id: ${o2}`);
      throw new Error(t);
    }
  }
};
var Vs = class extends ji2 {
  constructor(o2, t) {
    super(o2, t, dt2, we2), this.core = o2, this.logger = t;
  }
};
var It3 = class extends ji2 {
  constructor(o2, t) {
    super(o2, t, ut2, we2), this.core = o2, this.logger = t;
  }
};
var ks2 = class extends ji2 {
  constructor(o2, t) {
    super(o2, t, wt2, we2, (e) => e.id), this.core = o2, this.logger = t;
  }
};
var Ds2 = class extends ji2 {
  constructor(o2, t) {
    super(o2, t, Et3, le2, () => pe2), this.core = o2, this.logger = t;
  }
};
var Ls2 = class extends ji2 {
  constructor(o2, t) {
    super(o2, t, St3, le2), this.core = o2, this.logger = t;
  }
};
var Ms = class extends ji2 {
  constructor(o2, t) {
    super(o2, t, Rt3, le2, (e) => e.id), this.core = o2, this.logger = t;
  }
};
var $s2 = Object.defineProperty;
var Ks = (E2, o2, t) => o2 in E2 ? $s2(E2, o2, { enumerable: true, configurable: true, writable: true, value: t }) : E2[o2] = t;
var Ke3 = (E2, o2, t) => Ks(E2, typeof o2 != "symbol" ? o2 + "" : o2, t);
var Us2 = class {
  constructor(o2, t) {
    this.core = o2, this.logger = t, Ke3(this, "authKeys"), Ke3(this, "pairingTopics"), Ke3(this, "requests"), this.authKeys = new Ds2(this.core, this.logger), this.pairingTopics = new Ls2(this.core, this.logger), this.requests = new Ms(this.core, this.logger);
  }
  async init() {
    await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
  }
};
var Gs = Object.defineProperty;
var js2 = (E2, o2, t) => o2 in E2 ? Gs(E2, o2, { enumerable: true, configurable: true, writable: true, value: t }) : E2[o2] = t;
var f5 = (E2, o2, t) => js2(E2, typeof o2 != "symbol" ? o2 + "" : o2, t);
var fe2 = class _fe extends J {
  constructor(o2) {
    super(o2), f5(this, "protocol", Ve3), f5(this, "version", ke2), f5(this, "name", me3.name), f5(this, "metadata"), f5(this, "core"), f5(this, "logger"), f5(this, "events", new import_events4.EventEmitter()), f5(this, "engine"), f5(this, "session"), f5(this, "proposal"), f5(this, "pendingRequest"), f5(this, "auth"), f5(this, "signConfig"), f5(this, "on", (e, s) => this.events.on(e, s)), f5(this, "once", (e, s) => this.events.once(e, s)), f5(this, "off", (e, s) => this.events.off(e, s)), f5(this, "removeListener", (e, s) => this.events.removeListener(e, s)), f5(this, "removeAllListeners", (e) => this.events.removeAllListeners(e)), f5(this, "connect", async (e) => {
      try {
        return await this.engine.connect(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f5(this, "pair", async (e) => {
      try {
        return await this.engine.pair(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f5(this, "approve", async (e) => {
      try {
        return await this.engine.approve(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f5(this, "reject", async (e) => {
      try {
        return await this.engine.reject(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f5(this, "update", async (e) => {
      try {
        return await this.engine.update(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f5(this, "extend", async (e) => {
      try {
        return await this.engine.extend(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f5(this, "request", async (e) => {
      try {
        return await this.engine.request(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f5(this, "respond", async (e) => {
      try {
        return await this.engine.respond(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f5(this, "ping", async (e) => {
      try {
        return await this.engine.ping(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f5(this, "emit", async (e) => {
      try {
        return await this.engine.emit(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f5(this, "disconnect", async (e) => {
      try {
        return await this.engine.disconnect(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f5(this, "find", (e) => {
      try {
        return this.engine.find(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f5(this, "getPendingSessionRequests", () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (e) {
        throw this.logger.error(e.message), e;
      }
    }), f5(this, "authenticate", async (e, s) => {
      try {
        return await this.engine.authenticate(e, s);
      } catch (i3) {
        throw this.logger.error(i3.message), i3;
      }
    }), f5(this, "formatAuthMessage", (e) => {
      try {
        return this.engine.formatAuthMessage(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f5(this, "approveSessionAuthenticate", async (e) => {
      try {
        return await this.engine.approveSessionAuthenticate(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f5(this, "rejectSessionAuthenticate", async (e) => {
      try {
        return await this.engine.rejectSessionAuthenticate(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), this.name = o2?.name || me3.name, this.metadata = di(o2?.metadata), this.signConfig = o2?.signConfig;
    const t = wu({ logger: o2?.logger || me3.logger, name: this.name });
    this.logger = t, this.core = o2?.core || new ta2(o2), this.session = new It3(this.core, this.logger), this.proposal = new Vs(this.core, this.logger), this.pendingRequest = new ks2(this.core, this.logger), this.engine = new Cs2(this), this.auth = new Us2(this.core, this.logger);
  }
  static async init(o2) {
    const t = new _fe(o2);
    return await t.initialize(), t;
  }
  get context() {
    return w(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info("SignClient Initialization Success");
    } catch (o2) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(o2.message), o2;
    }
  }
};
var Qs2 = fe2;

// node_modules/@walletconnect/universal-provider/dist/index.js
var import_events5 = __toESM(require_events());
function _(t) {
  return t == null || typeof t != "object" && typeof t != "function";
}
function Z(t) {
  return Object.getOwnPropertySymbols(t).filter((e) => Object.prototype.propertyIsEnumerable.call(t, e));
}
function T2(t) {
  return t == null ? t === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(t);
}
var Fe3 = "[object RegExp]";
var ee3 = "[object String]";
var te2 = "[object Number]";
var se2 = "[object Boolean]";
var ie3 = "[object Arguments]";
var He3 = "[object Symbol]";
var Ue3 = "[object Date]";
var Be3 = "[object Map]";
var Le3 = "[object Set]";
var Me4 = "[object Array]";
var ze2 = "[object ArrayBuffer]";
var Ge3 = "[object Object]";
var We3 = "[object DataView]";
var Je3 = "[object Uint8Array]";
var Ke4 = "[object Uint8ClampedArray]";
var Ve4 = "[object Uint16Array]";
var Ye3 = "[object Uint32Array]";
var Xe3 = "[object Int8Array]";
var ke3 = "[object Int16Array]";
var Qe3 = "[object Int32Array]";
var Ze3 = "[object Float32Array]";
var Te2 = "[object Float64Array]";
function x2(t) {
  return ArrayBuffer.isView(t) && !(t instanceof DataView);
}
function et3(t, e) {
  return y2(t, void 0, t, /* @__PURE__ */ new Map(), e);
}
function y2(t, e, s, i3 = /* @__PURE__ */ new Map(), r2 = void 0) {
  const a2 = r2?.(t, e, s, i3);
  if (a2 != null) return a2;
  if (_(t)) return t;
  if (i3.has(t)) return i3.get(t);
  if (Array.isArray(t)) {
    const n2 = new Array(t.length);
    i3.set(t, n2);
    for (let c3 = 0; c3 < t.length; c3++) n2[c3] = y2(t[c3], c3, s, i3, r2);
    return Object.hasOwn(t, "index") && (n2.index = t.index), Object.hasOwn(t, "input") && (n2.input = t.input), n2;
  }
  if (t instanceof Date) return new Date(t.getTime());
  if (t instanceof RegExp) {
    const n2 = new RegExp(t.source, t.flags);
    return n2.lastIndex = t.lastIndex, n2;
  }
  if (t instanceof Map) {
    const n2 = /* @__PURE__ */ new Map();
    i3.set(t, n2);
    for (const [c3, o2] of t) n2.set(c3, y2(o2, c3, s, i3, r2));
    return n2;
  }
  if (t instanceof Set) {
    const n2 = /* @__PURE__ */ new Set();
    i3.set(t, n2);
    for (const c3 of t) n2.add(y2(c3, void 0, s, i3, r2));
    return n2;
  }
  if (typeof Buffer < "u" && Buffer.isBuffer(t)) return t.subarray();
  if (x2(t)) {
    const n2 = new (Object.getPrototypeOf(t)).constructor(t.length);
    i3.set(t, n2);
    for (let c3 = 0; c3 < t.length; c3++) n2[c3] = y2(t[c3], c3, s, i3, r2);
    return n2;
  }
  if (t instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && t instanceof SharedArrayBuffer) return t.slice(0);
  if (t instanceof DataView) {
    const n2 = new DataView(t.buffer.slice(0), t.byteOffset, t.byteLength);
    return i3.set(t, n2), m2(n2, t, s, i3, r2), n2;
  }
  if (typeof File < "u" && t instanceof File) {
    const n2 = new File([t], t.name, { type: t.type });
    return i3.set(t, n2), m2(n2, t, s, i3, r2), n2;
  }
  if (t instanceof Blob) {
    const n2 = new Blob([t], { type: t.type });
    return i3.set(t, n2), m2(n2, t, s, i3, r2), n2;
  }
  if (t instanceof Error) {
    const n2 = new t.constructor();
    return i3.set(t, n2), n2.message = t.message, n2.name = t.name, n2.stack = t.stack, n2.cause = t.cause, m2(n2, t, s, i3, r2), n2;
  }
  if (typeof t == "object" && tt3(t)) {
    const n2 = Object.create(Object.getPrototypeOf(t));
    return i3.set(t, n2), m2(n2, t, s, i3, r2), n2;
  }
  return t;
}
function m2(t, e, s = t, i3, r2) {
  const a2 = [...Object.keys(e), ...Z(e)];
  for (let n2 = 0; n2 < a2.length; n2++) {
    const c3 = a2[n2], o2 = Object.getOwnPropertyDescriptor(t, c3);
    (o2 == null || o2.writable) && (t[c3] = y2(e[c3], c3, s, i3, r2));
  }
}
function tt3(t) {
  switch (T2(t)) {
    case ie3:
    case Me4:
    case ze2:
    case We3:
    case se2:
    case Ue3:
    case Ze3:
    case Te2:
    case Xe3:
    case ke3:
    case Qe3:
    case Be3:
    case te2:
    case Ge3:
    case Fe3:
    case Le3:
    case ee3:
    case He3:
    case Je3:
    case Ke4:
    case Ve4:
    case Ye3:
      return true;
    default:
      return false;
  }
}
function st3(t, e) {
  return et3(t, (s, i3, r2, a2) => {
    const n2 = e?.(s, i3, r2, a2);
    if (n2 != null) return n2;
    if (typeof t == "object") switch (Object.prototype.toString.call(t)) {
      case te2:
      case ee3:
      case se2: {
        const c3 = new t.constructor(t?.valueOf());
        return m2(c3, t), c3;
      }
      case ie3: {
        const c3 = {};
        return m2(c3, t), c3.length = t.length, c3[Symbol.iterator] = t[Symbol.iterator], c3;
      }
      default:
        return;
    }
  });
}
function ne2(t) {
  return st3(t);
}
function re3(t) {
  return t !== null && typeof t == "object" && T2(t) === "[object Arguments]";
}
function ae3(t) {
  return typeof t == "object" && t !== null;
}
function it2() {
}
function nt2(t) {
  return x2(t);
}
function rt2(t) {
  if (typeof t != "object" || t == null) return false;
  if (Object.getPrototypeOf(t) === null) return true;
  if (Object.prototype.toString.call(t) !== "[object Object]") {
    const s = t[Symbol.toStringTag];
    return s == null || !Object.getOwnPropertyDescriptor(t, Symbol.toStringTag)?.writable ? false : t.toString() === `[object ${s}]`;
  }
  let e = t;
  for (; Object.getPrototypeOf(e) !== null; ) e = Object.getPrototypeOf(e);
  return Object.getPrototypeOf(t) === e;
}
function at(t) {
  if (_(t)) return t;
  if (Array.isArray(t) || x2(t) || t instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && t instanceof SharedArrayBuffer) return t.slice(0);
  const e = Object.getPrototypeOf(t), s = e.constructor;
  if (t instanceof Date || t instanceof Map || t instanceof Set) return new s(t);
  if (t instanceof RegExp) {
    const i3 = new s(t);
    return i3.lastIndex = t.lastIndex, i3;
  }
  if (t instanceof DataView) return new s(t.buffer.slice(0));
  if (t instanceof Error) {
    const i3 = new s(t.message);
    return i3.stack = t.stack, i3.name = t.name, i3.cause = t.cause, i3;
  }
  if (typeof File < "u" && t instanceof File) return new s([t], t.name, { type: t.type, lastModified: t.lastModified });
  if (typeof t == "object") {
    const i3 = Object.create(e);
    return Object.assign(i3, t);
  }
  return t;
}
function ct3(t, ...e) {
  const s = e.slice(0, -1), i3 = e[e.length - 1];
  let r2 = t;
  for (let a2 = 0; a2 < s.length; a2++) {
    const n2 = s[a2];
    r2 = $3(r2, n2, i3, /* @__PURE__ */ new Map());
  }
  return r2;
}
function $3(t, e, s, i3) {
  if (_(t) && (t = Object(t)), e == null || typeof e != "object") return t;
  if (i3.has(e)) return at(i3.get(e));
  if (i3.set(e, t), Array.isArray(e)) {
    e = e.slice();
    for (let a2 = 0; a2 < e.length; a2++) e[a2] = e[a2] ?? void 0;
  }
  const r2 = [...Object.keys(e), ...Z(e)];
  for (let a2 = 0; a2 < r2.length; a2++) {
    const n2 = r2[a2];
    let c3 = e[n2], o2 = t[n2];
    if (re3(c3) && (c3 = { ...c3 }), re3(o2) && (o2 = { ...o2 }), typeof Buffer < "u" && Buffer.isBuffer(c3) && (c3 = ne2(c3)), Array.isArray(c3)) if (typeof o2 == "object" && o2 != null) {
      const l2 = [], p3 = Reflect.ownKeys(o2);
      for (let f6 = 0; f6 < p3.length; f6++) {
        const u2 = p3[f6];
        l2[u2] = o2[u2];
      }
      o2 = l2;
    } else o2 = [];
    const h3 = s(o2, c3, n2, t, e, i3);
    h3 != null ? t[n2] = h3 : Array.isArray(c3) || ae3(o2) && ae3(c3) ? t[n2] = $3(o2, c3, s, i3) : o2 == null && rt2(c3) ? t[n2] = $3({}, c3, s, i3) : o2 == null && nt2(c3) ? t[n2] = ne2(c3) : (o2 === void 0 || c3 !== void 0) && (t[n2] = c3);
  }
  return t;
}
function ot2(t, ...e) {
  return ct3(t, ...e, it2);
}
var ce2 = "error";
var pt3 = "wss://relay.walletconnect.org";
var ht2 = "wc";
var oe3 = "universal_provider";
var A2 = `${ht2}@2:${oe3}:`;
var pe3 = "https://rpc.walletconnect.org/v1/";
var he3 = "generic";
var lt3 = `${pe3}bundler`;
var v3 = "call_status";
var ut3 = 86400;
var F = { DEFAULT_CHAIN_CHANGED: "default_chain_changed" };
var dt3 = Object.defineProperty;
var ft3 = Object.defineProperties;
var mt3 = Object.getOwnPropertyDescriptors;
var le3 = Object.getOwnPropertySymbols;
var gt3 = Object.prototype.hasOwnProperty;
var yt3 = Object.prototype.propertyIsEnumerable;
var ue = (t, e, s) => e in t ? dt3(t, e, { enumerable: true, configurable: true, writable: true, value: s }) : t[e] = s;
var E = (t, e) => {
  for (var s in e || (e = {})) gt3.call(e, s) && ue(t, s, e[s]);
  if (le3) for (var s of le3(e)) yt3.call(e, s) && ue(t, s, e[s]);
  return t;
};
var vt3 = (t, e) => ft3(t, mt3(e));
function de2(t, e, s) {
  var i3;
  const r2 = Je(t);
  return ((i3 = e.rpcMap) == null ? void 0 : i3[r2.reference]) || `${pe3}?chainId=${r2.namespace}:${r2.reference}&projectId=${s}`;
}
function wt3(t) {
  return t.includes(":") ? t.split(":")[1] : t;
}
function fe3(t) {
  return t.map((e) => `${e.split(":")[0]}:${e.split(":")[1]}`);
}
function bt2(t, e) {
  const s = Object.keys(e.namespaces).filter((r2) => r2.includes(t));
  if (!s.length) return [];
  const i3 = [];
  return s.forEach((r2) => {
    const a2 = e.namespaces[r2].accounts;
    i3.push(...a2);
  }), i3;
}
function me4(t) {
  return Object.fromEntries(Object.entries(t).filter(([e, s]) => {
    var i3, r2;
    return ((i3 = s?.chains) == null ? void 0 : i3.length) && ((r2 = s?.chains) == null ? void 0 : r2.length) > 0;
  }));
}
function C4(t = {}, e = {}) {
  const s = me4(ge3(t)), i3 = me4(ge3(e));
  return ot2(s, i3);
}
function ge3(t) {
  var e, s, i3, r2, a2;
  const n2 = {};
  if (!Ye(t)) return n2;
  for (const [c3, o2] of Object.entries(t)) {
    const h3 = Gn(c3) ? [c3] : o2.chains, l2 = o2.methods || [], p3 = o2.events || [], f6 = o2.rpcMap || {}, u2 = bs(c3);
    n2[u2] = vt3(E(E({}, n2[u2]), o2), { chains: ut(h3, (e = n2[u2]) == null ? void 0 : e.chains), methods: ut(l2, (s = n2[u2]) == null ? void 0 : s.methods), events: ut(p3, (i3 = n2[u2]) == null ? void 0 : i3.events) }), (Ye(f6) || Ye(((r2 = n2[u2]) == null ? void 0 : r2.rpcMap) || {})) && (n2[u2].rpcMap = E(E({}, f6), (a2 = n2[u2]) == null ? void 0 : a2.rpcMap));
  }
  return n2;
}
function ye3(t) {
  return t.includes(":") ? t.split(":")[2] : t;
}
function ve3(t) {
  const e = {};
  for (const [s, i3] of Object.entries(t)) {
    const r2 = i3.methods || [], a2 = i3.events || [], n2 = i3.accounts || [], c3 = Gn(s) ? [s] : i3.chains ? i3.chains : fe3(i3.accounts);
    e[s] = { chains: c3, methods: r2, events: a2, accounts: n2 };
  }
  return e;
}
function H(t) {
  return typeof t == "number" ? t : t.includes("0x") ? parseInt(t, 16) : (t = t.includes(":") ? t.split(":")[1] : t, isNaN(Number(t)) ? t : Number(t));
}
function Pt3(t) {
  try {
    const e = JSON.parse(t);
    return typeof e == "object" && e !== null && !Array.isArray(e);
  } catch {
    return false;
  }
}
var we3 = {};
var w2 = (t) => we3[t];
var U2 = (t, e) => {
  we3[t] = e;
};
var Ot4 = Object.defineProperty;
var be3 = Object.getOwnPropertySymbols;
var It4 = Object.prototype.hasOwnProperty;
var St4 = Object.prototype.propertyIsEnumerable;
var Pe3 = (t, e, s) => e in t ? Ot4(t, e, { enumerable: true, configurable: true, writable: true, value: s }) : t[e] = s;
var Oe3 = (t, e) => {
  for (var s in e || (e = {})) It4.call(e, s) && Pe3(t, s, e[s]);
  if (be3) for (var s of be3(e)) St4.call(e, s) && Pe3(t, s, e[s]);
  return t;
};
var Ie2 = "eip155";
var $t3 = ["atomic", "flow-control", "paymasterService", "sessionKeys", "auxiliaryFunds"];
var At3 = (t) => t && t.startsWith("0x") ? BigInt(t).toString(10) : t;
var B = (t) => t && t.startsWith("0x") ? t : `0x${BigInt(t).toString(16)}`;
var Se2 = (t) => Object.keys(t).filter((e) => $t3.includes(e)).reduce((e, s) => (e[s] = Et4(t[s]), e), {});
var Et4 = (t) => typeof t == "string" && Pt3(t) ? JSON.parse(t) : t;
var Ct3 = (t, e, s) => {
  const { sessionProperties: i3 = {}, scopedProperties: r2 = {} } = t, a2 = {};
  if (!Ye(r2) && !Ye(i3)) return;
  const n2 = Se2(i3);
  for (const c3 of s) {
    const o2 = At3(c3);
    if (!o2) continue;
    a2[B(o2)] = n2;
    const h3 = r2?.[`${Ie2}:${o2}`];
    if (h3) {
      const l2 = h3?.[`${Ie2}:${o2}:${e}`];
      a2[B(o2)] = Oe3(Oe3({}, a2[B(o2)]), Se2(l2 || h3));
    }
  }
  for (const [c3, o2] of Object.entries(a2)) Object.keys(o2).length === 0 && delete a2[c3];
  return Object.keys(a2).length > 0 ? a2 : void 0;
};
var jt3 = Object.defineProperty;
var Nt4 = (t, e, s) => e in t ? jt3(t, e, { enumerable: true, configurable: true, writable: true, value: s }) : t[e] = s;
var qt3 = (t, e, s) => Nt4(t, typeof e != "symbol" ? e + "" : e, s);
var L;
var J4 = class _J {
  constructor(e) {
    qt3(this, "storage"), this.storage = e;
  }
  async getItem(e) {
    return await this.storage.getItem(e);
  }
  async setItem(e, s) {
    return await this.storage.setItem(e, s);
  }
  async removeItem(e) {
    return await this.storage.removeItem(e);
  }
  static getStorage(e) {
    return L || (L = new _J(e)), L;
  }
};
var Dt2 = Object.defineProperty;
var Rt4 = Object.defineProperties;
var _t3 = Object.getOwnPropertyDescriptors;
var $e3 = Object.getOwnPropertySymbols;
var xt3 = Object.prototype.hasOwnProperty;
var Ft3 = Object.prototype.propertyIsEnumerable;
var Ae3 = (t, e, s) => e in t ? Dt2(t, e, { enumerable: true, configurable: true, writable: true, value: s }) : t[e] = s;
var Ht3 = (t, e) => {
  for (var s in e || (e = {})) xt3.call(e, s) && Ae3(t, s, e[s]);
  if ($e3) for (var s of $e3(e)) Ft3.call(e, s) && Ae3(t, s, e[s]);
  return t;
};
var Ut3 = (t, e) => Rt4(t, _t3(e));
async function Bt3(t, e) {
  const s = Je(t.result.capabilities.caip345.caip2), i3 = t.result.capabilities.caip345.transactionHashes, r2 = await Promise.allSettled(i3.map((p3) => Lt3(s.reference, p3, e))), a2 = r2.filter((p3) => p3.status === "fulfilled").map((p3) => p3.value).filter((p3) => p3);
  r2.filter((p3) => p3.status === "rejected").forEach((p3) => console.warn("Failed to fetch transaction receipt:", p3.reason));
  const n2 = !a2.length || a2.some((p3) => !p3), c3 = a2.every((p3) => p3?.status === "0x1"), o2 = a2.every((p3) => p3?.status === "0x0"), h3 = a2.some((p3) => p3?.status === "0x0");
  let l2;
  return n2 ? l2 = 100 : c3 ? l2 = 200 : o2 ? l2 = 500 : h3 && (l2 = 600), { id: t.result.id, version: t.request.version, atomic: t.request.atomicRequired, chainId: t.request.chainId, capabilities: t.result.capabilities, receipts: a2, status: l2 };
}
async function Lt3(t, e, s) {
  return await s(parseInt(t)).request(formatJsonRpcRequest("eth_getTransactionReceipt", [e]));
}
async function Mt3({ sendCalls: t, storage: e }) {
  const s = await e.getItem(v3);
  await e.setItem(v3, Ut3(Ht3({}, s), { [t.result.id]: { request: t.request, result: t.result, expiry: Ni(ut3) } }));
}
async function zt3({ resultId: t, storage: e }) {
  const s = await e.getItem(v3);
  if (s) {
    delete s[t], await e.setItem(v3, s);
    for (const i3 in s) Ui(s[i3].expiry) && delete s[i3];
    await e.setItem(v3, s);
  }
}
async function Gt3({ resultId: t, storage: e }) {
  const s = await e.getItem(v3), i3 = s?.[t];
  if (i3 && !Ui(i3.expiry)) return i3;
  await zt3({ resultId: t, storage: e });
}
var Wt3 = Object.defineProperty;
var Jt3 = Object.defineProperties;
var Kt3 = Object.getOwnPropertyDescriptors;
var Ee2 = Object.getOwnPropertySymbols;
var Vt3 = Object.prototype.hasOwnProperty;
var Yt2 = Object.prototype.propertyIsEnumerable;
var M3 = (t, e, s) => e in t ? Wt3(t, e, { enumerable: true, configurable: true, writable: true, value: s }) : t[e] = s;
var z3 = (t, e) => {
  for (var s in e || (e = {})) Vt3.call(e, s) && M3(t, s, e[s]);
  if (Ee2) for (var s of Ee2(e)) Yt2.call(e, s) && M3(t, s, e[s]);
  return t;
};
var G3 = (t, e) => Jt3(t, Kt3(e));
var g = (t, e, s) => M3(t, typeof e != "symbol" ? e + "" : e, s);
var Xt3 = class {
  constructor(e) {
    g(this, "name", "eip155"), g(this, "client"), g(this, "chainId"), g(this, "namespace"), g(this, "httpProviders"), g(this, "events"), g(this, "storage"), this.namespace = e.namespace, this.events = w2("events"), this.client = w2("client"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain()), this.storage = J4.getStorage(this.client.core.storage);
  }
  async request(e) {
    switch (e.request.method) {
      case "eth_requestAccounts":
        return this.getAccounts();
      case "eth_accounts":
        return this.getAccounts();
      case "wallet_switchEthereumChain":
        return await this.handleSwitchChain(e);
      case "eth_chainId":
        return parseInt(this.getDefaultChain());
      case "wallet_getCapabilities":
        return await this.getCapabilities(e);
      case "wallet_getCallsStatus":
        return await this.getCallStatus(e);
      case "wallet_sendCalls":
        return await this.sendCalls(e);
    }
    return this.namespace.methods.includes(e.request.method) ? await this.client.request(e) : this.getHttpProvider().request(e.request);
  }
  updateNamespace(e) {
    this.namespace = Object.assign(this.namespace, e);
  }
  setDefaultChain(e, s) {
    this.httpProviders[e] || this.setHttpProvider(parseInt(e), s);
    const i3 = this.chainId;
    this.chainId = parseInt(e), this.events.emit(F.DEFAULT_CHAIN_CHANGED, { currentCaipChainId: `${this.name}:${e}`, previousCaipChainId: `${this.name}:${i3}` });
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId.toString();
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const e = this.namespace.chains[0];
    if (!e) throw new Error("ChainId not found");
    return e.split(":")[1];
  }
  createHttpProvider(e, s) {
    const i3 = s || de2(`${this.name}:${e}`, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${e}`);
    return new o(new f2(i3, w2("disableProviderPing")));
  }
  setHttpProvider(e, s) {
    const i3 = this.createHttpProvider(e, s);
    i3 && (this.httpProviders[e] = i3);
  }
  createHttpProviders() {
    const e = {};
    return this.namespace.chains.forEach((s) => {
      var i3;
      const r2 = parseInt(wt3(s));
      e[r2] = this.createHttpProvider(r2, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[s]);
    }), e;
  }
  getAccounts() {
    const e = this.namespace.accounts;
    return e ? [...new Set(e.filter((s) => s.split(":")[1] === this.chainId.toString()).map((s) => s.split(":")[2]))] : [];
  }
  getHttpProvider(e) {
    const s = e || this.chainId;
    return this.httpProviders[s] || (this.httpProviders = G3(z3({}, this.httpProviders), { [s]: this.createHttpProvider(s) }), this.httpProviders[s]);
  }
  async handleSwitchChain(e) {
    var s, i3;
    let r2 = e.request.params ? (s = e.request.params[0]) == null ? void 0 : s.chainId : "0x0";
    r2 = r2.startsWith("0x") ? r2 : `0x${r2}`;
    const a2 = parseInt(r2, 16);
    if (this.isChainApproved(a2)) this.setDefaultChain(`${a2}`);
    else if (this.namespace.methods.includes("wallet_switchEthereumChain")) await this.client.request({ topic: e.topic, request: { method: e.request.method, params: [{ chainId: r2 }] }, chainId: (i3 = this.namespace.chains) == null ? void 0 : i3[0] }), this.setDefaultChain(`${a2}`);
    else throw new Error(`Failed to switch to chain 'eip155:${a2}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`);
    return null;
  }
  isChainApproved(e) {
    return this.namespace.chains.includes(`${this.name}:${e}`);
  }
  async getCapabilities(e) {
    var s, i3, r2, a2, n2;
    const c3 = (i3 = (s = e.request) == null ? void 0 : s.params) == null ? void 0 : i3[0], o2 = ((a2 = (r2 = e.request) == null ? void 0 : r2.params) == null ? void 0 : a2[1]) || [];
    if (!c3) throw new Error("Missing address parameter in `wallet_getCapabilities` request");
    const h3 = this.client.session.get(e.topic), l2 = ((n2 = h3?.sessionProperties) == null ? void 0 : n2.capabilities) || {}, p3 = `${c3}${o2.join(",")}`, f6 = l2?.[p3];
    if (f6) return f6;
    let u2;
    try {
      u2 = Ct3(h3, c3, o2);
    } catch (q2) {
      console.warn("Failed to extract capabilities from session", q2);
    }
    if (u2) return u2;
    const K3 = await this.client.request(e);
    try {
      await this.client.session.update(e.topic, { sessionProperties: G3(z3({}, h3.sessionProperties || {}), { capabilities: G3(z3({}, l2 || {}), { [p3]: K3 }) }) });
    } catch (q2) {
      console.warn("Failed to update session with capabilities", q2);
    }
    return K3;
  }
  async getCallStatus(e) {
    var s, i3, r2;
    const a2 = this.client.session.get(e.topic), n2 = (s = a2.sessionProperties) == null ? void 0 : s.bundler_name;
    if (n2) {
      const h3 = this.getBundlerUrl(e.chainId, n2);
      try {
        return await this.getUserOperationReceipt(h3, e);
      } catch (l2) {
        console.warn("Failed to fetch call status from bundler", l2, h3);
      }
    }
    const c3 = (i3 = a2.sessionProperties) == null ? void 0 : i3.bundler_url;
    if (c3) try {
      return await this.getUserOperationReceipt(c3, e);
    } catch (h3) {
      console.warn("Failed to fetch call status from custom bundler", h3, c3);
    }
    const o2 = await Gt3({ resultId: (r2 = e.request.params) == null ? void 0 : r2[0], storage: this.storage });
    if (o2) try {
      return await Bt3(o2, this.getHttpProvider.bind(this));
    } catch (h3) {
      console.warn("Failed to fetch call status from stored send calls", h3, o2);
    }
    if (this.namespace.methods.includes(e.request.method)) return await this.client.request(e);
    throw new Error("Fetching call status not approved by the wallet.");
  }
  async getUserOperationReceipt(e, s) {
    var i3;
    const r2 = new URL(e), a2 = await fetch(r2, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(formatJsonRpcRequest("eth_getUserOperationReceipt", [(i3 = s.request.params) == null ? void 0 : i3[0]])) });
    if (!a2.ok) throw new Error(`Failed to fetch user operation receipt - ${a2.status}`);
    return await a2.json();
  }
  getBundlerUrl(e, s) {
    return `${lt3}?projectId=${this.client.core.projectId}&chainId=${e}&bundler=${s}`;
  }
  async sendCalls(e) {
    var s, i3, r2;
    const a2 = await this.client.request(e), n2 = (s = e.request.params) == null ? void 0 : s[0], c3 = a2?.id, o2 = a2?.capabilities || {}, h3 = (i3 = o2?.caip345) == null ? void 0 : i3.caip2, l2 = (r2 = o2?.caip345) == null ? void 0 : r2.transactionHashes;
    return !c3 || !h3 || !(l2 != null && l2.length) || await Mt3({ sendCalls: { request: n2, result: a2 }, storage: this.storage }), a2;
  }
};
var kt3 = Object.defineProperty;
var Qt3 = (t, e, s) => e in t ? kt3(t, e, { enumerable: true, configurable: true, writable: true, value: s }) : t[e] = s;
var b2 = (t, e, s) => Qt3(t, typeof e != "symbol" ? e + "" : e, s);
var Zt3 = class {
  constructor(e) {
    b2(this, "name", he3), b2(this, "client"), b2(this, "httpProviders"), b2(this, "events"), b2(this, "namespace"), b2(this, "chainId"), this.namespace = e.namespace, this.events = w2("events"), this.client = w2("client"), this.chainId = this.getDefaultChain(), this.name = this.getNamespaceName(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(e) {
    this.namespace.chains = [...new Set((this.namespace.chains || []).concat(e.chains || []))], this.namespace.accounts = [...new Set((this.namespace.accounts || []).concat(e.accounts || []))], this.namespace.methods = [...new Set((this.namespace.methods || []).concat(e.methods || []))], this.namespace.events = [...new Set((this.namespace.events || []).concat(e.events || []))], this.httpProviders = this.createHttpProviders();
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(e) {
    return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider(e.chainId).request(e.request);
  }
  setDefaultChain(e, s) {
    this.httpProviders[e] || this.setHttpProvider(e, s);
    const i3 = this.chainId;
    this.chainId = e, this.events.emit(F.DEFAULT_CHAIN_CHANGED, { currentCaipChainId: `${this.name}:${e}`, previousCaipChainId: `${this.name}:${i3}` });
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const e = this.namespace.chains[0];
    if (!e) throw new Error("ChainId not found");
    return e.split(":")[1];
  }
  getNamespaceName() {
    const e = this.namespace.chains[0];
    if (!e) throw new Error("ChainId not found");
    return Je(e).namespace;
  }
  getAccounts() {
    const e = this.namespace.accounts;
    return e ? [...new Set(e.filter((s) => s.split(":")[1] === this.chainId.toString()).map((s) => s.split(":")[2]))] : [];
  }
  createHttpProviders() {
    var e, s;
    const i3 = {};
    return (s = (e = this.namespace) == null ? void 0 : e.accounts) == null || s.forEach((r2) => {
      var a2, n2;
      const c3 = Je(r2), o2 = (n2 = (a2 = this.namespace) == null ? void 0 : a2.rpcMap) == null ? void 0 : n2[`${c3.namespace}:${c3.reference}`];
      i3[c3.reference] = this.createHttpProvider(r2, o2);
    }), i3;
  }
  getHttpProvider(e) {
    const s = Je(e).reference, i3 = this.httpProviders[s];
    if (typeof i3 > "u") throw new Error(`JSON-RPC provider for ${e} not found`);
    return i3;
  }
  setHttpProvider(e, s) {
    const i3 = this.createHttpProvider(e, s);
    i3 && (this.httpProviders[e] = i3);
  }
  createHttpProvider(e, s) {
    const i3 = s || de2(e, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${e}`);
    return new o(new f2(i3, w2("disableProviderPing")));
  }
};
var Tt3 = Object.defineProperty;
var es2 = Object.defineProperties;
var ts2 = Object.getOwnPropertyDescriptors;
var Ce2 = Object.getOwnPropertySymbols;
var ss2 = Object.prototype.hasOwnProperty;
var is2 = Object.prototype.propertyIsEnumerable;
var W4 = (t, e, s) => e in t ? Tt3(t, e, { enumerable: true, configurable: true, writable: true, value: s }) : t[e] = s;
var S3 = (t, e) => {
  for (var s in e || (e = {})) ss2.call(e, s) && W4(t, s, e[s]);
  if (Ce2) for (var s of Ce2(e)) is2.call(e, s) && W4(t, s, e[s]);
  return t;
};
var j2 = (t, e) => es2(t, ts2(e));
var d3 = (t, e, s) => W4(t, typeof e != "symbol" ? e + "" : e, s);
var N2 = class _N {
  constructor(e) {
    d3(this, "client"), d3(this, "namespaces"), d3(this, "optionalNamespaces"), d3(this, "sessionProperties"), d3(this, "scopedProperties"), d3(this, "events", new import_events5.default()), d3(this, "rpcProviders", {}), d3(this, "session"), d3(this, "providerOpts"), d3(this, "logger"), d3(this, "uri"), d3(this, "disableProviderPing", false);
    var s, i3;
    this.providerOpts = e, this.logger = wu({ logger: (s = e.logger) != null ? s : ce2, name: (i3 = this.providerOpts.name) != null ? i3 : oe3 }), this.disableProviderPing = e?.disableProviderPing || false;
  }
  static async init(e) {
    const s = new _N(e);
    return await s.initialize(), s;
  }
  async request(e, s, i3) {
    const [r2, a2] = this.validateChain(s);
    if (!this.session) throw new Error("Please call connect() before request()");
    return await this.getProvider(r2).request({ request: S3({}, e), chainId: `${r2}:${a2}`, topic: this.session.topic, expiry: i3 });
  }
  sendAsync(e, s, i3, r2) {
    const a2 = (/* @__PURE__ */ new Date()).getTime();
    this.request(e, i3, r2).then((n2) => s(null, formatJsonRpcResult(a2, n2))).catch((n2) => s(n2, void 0));
  }
  async enable() {
    if (!this.client) throw new Error("Sign Client not initialized");
    return this.session || await this.connect({ namespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties }), await this.requestAccounts();
  }
  async disconnect() {
    var e;
    if (!this.session) throw new Error("Please call connect() before enable()");
    await this.client.disconnect({ topic: (e = this.session) == null ? void 0 : e.topic, reason: zt("USER_DISCONNECTED") }), await this.cleanup();
  }
  async connect(e) {
    if (!this.client) throw new Error("Sign Client not initialized");
    if (this.setNamespaces(e), this.cleanupPendingPairings(), !e.skipPairing) return await this.pair(e.pairingTopic);
  }
  async authenticate(e, s) {
    if (!this.client) throw new Error("Sign Client not initialized");
    this.setNamespaces(e), await this.cleanupPendingPairings();
    const { uri: i3, response: r2 } = await this.client.authenticate(e, s);
    i3 && (this.uri = i3, this.events.emit("display_uri", i3));
    const a2 = await r2();
    if (this.session = a2.session, this.session) {
      const n2 = ve3(this.session.namespaces);
      this.namespaces = C4(this.namespaces, n2), await this.persist("namespaces", this.namespaces), this.onConnect();
    }
    return a2;
  }
  on(e, s) {
    this.events.on(e, s);
  }
  once(e, s) {
    this.events.once(e, s);
  }
  removeListener(e, s) {
    this.events.removeListener(e, s);
  }
  off(e, s) {
    this.events.off(e, s);
  }
  get isWalletConnect() {
    return true;
  }
  async pair(e) {
    const { uri: s, approval: i3 } = await this.client.connect({ pairingTopic: e, requiredNamespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties });
    s && (this.uri = s, this.events.emit("display_uri", s));
    const r2 = await i3();
    this.session = r2;
    const a2 = ve3(r2.namespaces);
    return this.namespaces = C4(this.namespaces, a2), await this.persist("namespaces", this.namespaces), await this.persist("optionalNamespaces", this.optionalNamespaces), this.onConnect(), this.session;
  }
  setDefaultChain(e, s) {
    try {
      if (!this.session) return;
      const [i3, r2] = this.validateChain(e);
      this.getProvider(i3).setDefaultChain(r2, s);
    } catch (i3) {
      if (!/Please call connect/.test(i3.message)) throw i3;
    }
  }
  async cleanupPendingPairings(e = {}) {
    try {
      this.logger.info("Cleaning up inactive pairings...");
      const s = this.client.pairing.getAll();
      if (!Ee(s)) return;
      for (const i3 of s) e.deletePairings ? this.client.core.expirer.set(i3.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(i3.topic);
      this.logger.info(`Inactive pairings cleared: ${s.length}`);
    } catch (s) {
      this.logger.warn(s, "Failed to cleanup pending pairings");
    }
  }
  abortPairingAttempt() {
    this.logger.warn("abortPairingAttempt is deprecated. This is now a no-op.");
  }
  async checkStorage() {
    this.namespaces = await this.getFromStore("namespaces") || {}, this.optionalNamespaces = await this.getFromStore("optionalNamespaces") || {}, this.session && this.createProviders();
  }
  async initialize() {
    this.logger.trace("Initialized"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();
  }
  async createClient() {
    var e, s;
    if (this.client = this.providerOpts.client || await Qs2.init({ core: this.providerOpts.core, logger: this.providerOpts.logger || ce2, relayUrl: this.providerOpts.relayUrl || pt3, projectId: this.providerOpts.projectId, metadata: this.providerOpts.metadata, storageOptions: this.providerOpts.storageOptions, storage: this.providerOpts.storage, name: this.providerOpts.name, customStoragePrefix: this.providerOpts.customStoragePrefix, telemetryEnabled: this.providerOpts.telemetryEnabled }), this.providerOpts.session) try {
      this.session = this.client.session.get(this.providerOpts.session.topic);
    } catch (i3) {
      throw this.logger.error(i3, "Failed to get session"), new Error(`The provided session: ${(s = (e = this.providerOpts) == null ? void 0 : e.session) == null ? void 0 : s.topic} doesn't exist in the Sign client`);
    }
    else {
      const i3 = this.client.session.getAll();
      this.session = i3[0];
    }
    this.logger.trace("SignClient Initialized");
  }
  createProviders() {
    if (!this.client) throw new Error("Sign Client not initialized");
    if (!this.session) throw new Error("Session not initialized. Please call connect() before enable()");
    const e = [...new Set(Object.keys(this.session.namespaces).map((s) => bs(s)))];
    U2("client", this.client), U2("events", this.events), U2("disableProviderPing", this.disableProviderPing), e.forEach((s) => {
      if (!this.session) return;
      const i3 = bt2(s, this.session);
      if (i3?.length === 0) return;
      const r2 = fe3(i3), a2 = C4(this.namespaces, this.optionalNamespaces), n2 = j2(S3({}, a2[s]), { accounts: i3, chains: r2 });
      switch (s) {
        case "eip155":
          this.rpcProviders[s] = new Xt3({ namespace: n2 });
          break;
        default:
          this.rpcProviders[s] = new Zt3({ namespace: n2 });
      }
    });
  }
  registerEventListeners() {
    if (typeof this.client > "u") throw new Error("Sign Client is not initialized");
    this.client.on("session_ping", (e) => {
      var s;
      const { topic: i3 } = e;
      i3 === ((s = this.session) == null ? void 0 : s.topic) && this.events.emit("session_ping", e);
    }), this.client.on("session_event", (e) => {
      var s;
      const { params: i3, topic: r2 } = e;
      if (r2 !== ((s = this.session) == null ? void 0 : s.topic)) return;
      const { event: a2 } = i3;
      if (a2.name === "accountsChanged") {
        const n2 = a2.data;
        n2 && Ee(n2) && this.events.emit("accountsChanged", n2.map(ye3));
      } else if (a2.name === "chainChanged") {
        const n2 = i3.chainId, c3 = i3.event.data, o2 = bs(n2), h3 = H(n2) !== H(c3) ? `${o2}:${H(c3)}` : n2;
        this.onChainChanged({ currentCaipChainId: h3 });
      } else this.events.emit(a2.name, a2.data);
      this.events.emit("session_event", e);
    }), this.client.on("session_update", ({ topic: e, params: s }) => {
      var i3, r2;
      if (e !== ((i3 = this.session) == null ? void 0 : i3.topic)) return;
      const { namespaces: a2 } = s, n2 = (r2 = this.client) == null ? void 0 : r2.session.get(e);
      this.session = j2(S3({}, n2), { namespaces: a2 }), this.onSessionUpdate(), this.events.emit("session_update", { topic: e, params: s });
    }), this.client.on("session_delete", async (e) => {
      var s;
      e.topic === ((s = this.session) == null ? void 0 : s.topic) && (await this.cleanup(), this.events.emit("session_delete", e), this.events.emit("disconnect", j2(S3({}, zt("USER_DISCONNECTED")), { data: e.topic })));
    }), this.on(F.DEFAULT_CHAIN_CHANGED, (e) => {
      this.onChainChanged(j2(S3({}, e), { internal: true }));
    });
  }
  getProvider(e) {
    return this.rpcProviders[e] || this.rpcProviders[he3];
  }
  onSessionUpdate() {
    Object.keys(this.rpcProviders).forEach((e) => {
      var s;
      this.getProvider(e).updateNamespace((s = this.session) == null ? void 0 : s.namespaces[e]);
    });
  }
  setNamespaces(e) {
    const { namespaces: s = {}, optionalNamespaces: i3 = {}, sessionProperties: r2, scopedProperties: a2 } = e;
    this.optionalNamespaces = C4(s, i3), this.sessionProperties = r2, this.scopedProperties = a2;
  }
  validateChain(e) {
    const [s, i3] = e?.split(":") || ["", ""];
    if (!this.namespaces || !Object.keys(this.namespaces).length) return [s, i3];
    if (s && !Object.keys(this.namespaces || {}).map((n2) => bs(n2)).includes(s)) throw new Error(`Namespace '${s}' is not configured. Please call connect() first with namespace config.`);
    if (s && i3) return [s, i3];
    const r2 = bs(Object.keys(this.namespaces)[0]), a2 = this.rpcProviders[r2].getDefaultChain();
    return [r2, a2];
  }
  async requestAccounts() {
    const [e] = this.validateChain();
    return await this.getProvider(e).requestAccounts();
  }
  async onChainChanged({ currentCaipChainId: e, previousCaipChainId: s, internal: i3 = false }) {
    if (!this.namespaces) return;
    const [r2, a2] = this.validateChain(e);
    a2 && (this.updateNamespaceChain(r2, a2), i3 ? (this.events.emit("chainChanged", a2), this.emitAccountsChangedOnChainChange({ namespace: r2, currentCaipChainId: e, previousCaipChainId: s })) : this.getProvider(r2).setDefaultChain(a2), await this.persist("namespaces", this.namespaces));
  }
  emitAccountsChangedOnChainChange({ namespace: e, currentCaipChainId: s, previousCaipChainId: i3 }) {
    var r2, a2;
    try {
      if (i3 === s) return;
      const n2 = (a2 = (r2 = this.session) == null ? void 0 : r2.namespaces[e]) == null ? void 0 : a2.accounts;
      if (!n2) return;
      const c3 = n2.filter((o2) => o2.includes(`${s}:`)).map(ye3);
      if (!Ee(c3)) return;
      this.events.emit("accountsChanged", c3);
    } catch (n2) {
      this.logger.warn(n2, "Failed to emit accountsChanged on chain change");
    }
  }
  updateNamespaceChain(e, s) {
    if (!this.namespaces) return;
    const i3 = this.namespaces[e] ? e : `${e}:${s}`, r2 = { chains: [], methods: [], events: [], defaultChain: s };
    this.namespaces[i3] ? this.namespaces[i3] && (this.namespaces[i3].defaultChain = s) : this.namespaces[i3] = r2;
  }
  onConnect() {
    this.createProviders(), this.events.emit("connect", { session: this.session });
  }
  async cleanup() {
    this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, await this.deleteFromStore("namespaces"), await this.deleteFromStore("optionalNamespaces"), await this.deleteFromStore("sessionProperties"), this.session = void 0, this.cleanupPendingPairings({ deletePairings: true }), await this.cleanupStorage();
  }
  async persist(e, s) {
    var i3;
    const r2 = ((i3 = this.session) == null ? void 0 : i3.topic) || "";
    await this.client.core.storage.setItem(`${A2}/${e}${r2}`, s);
  }
  async getFromStore(e) {
    var s;
    const i3 = ((s = this.session) == null ? void 0 : s.topic) || "";
    return await this.client.core.storage.getItem(`${A2}/${e}${i3}`);
  }
  async deleteFromStore(e) {
    var s;
    const i3 = ((s = this.session) == null ? void 0 : s.topic) || "";
    await this.client.core.storage.removeItem(`${A2}/${e}${i3}`);
  }
  async cleanupStorage() {
    var e;
    try {
      if (((e = this.client) == null ? void 0 : e.session.length) > 0) return;
      const s = await this.client.core.storage.getKeys();
      for (const i3 of s) i3.startsWith(A2) && await this.client.core.storage.removeItem(i3);
    } catch (s) {
      this.logger.warn(s, "Failed to cleanup storage");
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/EnsUtil.js
var SLIP44_MSB = 2147483648;
var EnsUtil = {
  convertEVMChainIdToCoinType(chainId) {
    if (chainId >= SLIP44_MSB) {
      throw new Error("Invalid chainId");
    }
    return (SLIP44_MSB | chainId) >>> 0;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EnsController.js
var state2 = proxy({
  suggestions: [],
  loading: false
});
var controller2 = {
  state: state2,
  subscribe(callback) {
    return subscribe(state2, () => callback(state2));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state2, key, callback);
  },
  async resolveName(name) {
    try {
      return await BlockchainApiController.lookupEnsName(name);
    } catch (e) {
      const error = e;
      throw new Error(error?.reasons?.[0]?.description || "Error resolving name");
    }
  },
  async isNameRegistered(name) {
    try {
      await BlockchainApiController.lookupEnsName(name);
      return true;
    } catch {
      return false;
    }
  },
  async getSuggestions(value) {
    try {
      state2.loading = true;
      state2.suggestions = [];
      const response = await BlockchainApiController.getEnsNameSuggestions(value);
      state2.suggestions = response.suggestions || [];
      return state2.suggestions;
    } catch (e) {
      const errorMessage = EnsController.parseEnsApiError(e, "Error fetching name suggestions");
      throw new Error(errorMessage);
    } finally {
      state2.loading = false;
    }
  },
  async getNamesForAddress(address) {
    try {
      const network = ChainController.state.activeCaipNetwork;
      if (!network) {
        return [];
      }
      const cachedEns = StorageUtil.getEnsFromCacheForAddress(address);
      if (cachedEns) {
        return cachedEns;
      }
      const response = await BlockchainApiController.reverseLookupEnsName({ address });
      StorageUtil.updateEnsCache({
        address,
        ens: response,
        timestamp: Date.now()
      });
      return response;
    } catch (e) {
      const errorMessage = EnsController.parseEnsApiError(e, "Error fetching names for address");
      throw new Error(errorMessage);
    }
  },
  async registerName(name) {
    const network = ChainController.state.activeCaipNetwork;
    const address = ChainController.getAccountData(network?.chainNamespace)?.address;
    const emailConnector = ConnectorController.getAuthConnector();
    if (!network) {
      throw new Error("Network not found");
    }
    if (!address || !emailConnector) {
      throw new Error("Address or auth connector not found");
    }
    state2.loading = true;
    try {
      const message = JSON.stringify({
        name,
        attributes: {},
        // Unix timestamp
        timestamp: Math.floor(Date.now() / 1e3)
      });
      RouterController.pushTransactionStack({
        onCancel() {
          RouterController.replace("RegisterAccountName");
        }
      });
      const signature = await ConnectionController.signMessage(message);
      state2.loading = false;
      const networkId = network.id;
      if (!networkId) {
        throw new Error("Network not found");
      }
      const coinType = EnsUtil.convertEVMChainIdToCoinType(Number(networkId));
      await BlockchainApiController.registerEnsName({
        coinType,
        address,
        signature,
        message
      });
      ChainController.setAccountProp("profileName", name, network.chainNamespace);
      StorageUtil.updateEnsCache({
        address,
        ens: [
          {
            name,
            registered_at: (/* @__PURE__ */ new Date()).toISOString(),
            updated_at: void 0,
            addresses: {},
            attributes: []
          }
        ],
        timestamp: Date.now()
      });
      RouterController.replace("RegisterAccountNameSuccess");
    } catch (e) {
      const errorMessage = EnsController.parseEnsApiError(e, `Error registering name ${name}`);
      RouterController.replace("RegisterAccountName");
      throw new Error(errorMessage);
    } finally {
      state2.loading = false;
    }
  },
  validateName(name) {
    return /^[a-zA-Z0-9-]{4,}$/u.test(name);
  },
  parseEnsApiError(error, defaultError) {
    const ensError = error;
    return ensError?.reasons?.[0]?.description || defaultError;
  }
};
var EnsController = withErrorBoundary(controller2);

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/WalletConnectUtil.js
var DEFAULT_METHODS = {
  solana: [
    "solana_signMessage",
    "solana_signTransaction",
    "solana_requestAccounts",
    "solana_getAccounts",
    "solana_signAllTransactions",
    "solana_signAndSendTransaction"
  ],
  eip155: [
    "eth_accounts",
    "eth_requestAccounts",
    "eth_sendRawTransaction",
    "eth_sign",
    "eth_signTransaction",
    "eth_signTypedData",
    "eth_signTypedData_v3",
    "eth_signTypedData_v4",
    "eth_sendTransaction",
    "personal_sign",
    "wallet_switchEthereumChain",
    "wallet_addEthereumChain",
    "wallet_getPermissions",
    "wallet_requestPermissions",
    "wallet_registerOnboarding",
    "wallet_watchAsset",
    "wallet_scanQRCode",
    // EIP-5792
    "wallet_getCallsStatus",
    "wallet_showCallsStatus",
    "wallet_sendCalls",
    "wallet_getCapabilities",
    // EIP-7715
    "wallet_grantPermissions",
    "wallet_revokePermissions",
    //EIP-7811
    "wallet_getAssets"
  ],
  bip122: ["sendTransfer", "signMessage", "signPsbt", "getAccountAddresses"]
};
var WcHelpersUtil = {
  RPC_ERROR_CODE: {
    USER_REJECTED: 5e3,
    USER_REJECTED_METHODS: 5002
  },
  getMethodsByChainNamespace(chainNamespace) {
    return DEFAULT_METHODS[chainNamespace] || [];
  },
  createDefaultNamespace(chainNamespace) {
    return {
      methods: this.getMethodsByChainNamespace(chainNamespace),
      events: ["accountsChanged", "chainChanged"],
      chains: [],
      rpcMap: {}
    };
  },
  applyNamespaceOverrides(baseNamespaces, overrides) {
    if (!overrides) {
      return { ...baseNamespaces };
    }
    const result = { ...baseNamespaces };
    const namespacesToOverride = /* @__PURE__ */ new Set();
    if (overrides.methods) {
      Object.keys(overrides.methods).forEach((ns2) => namespacesToOverride.add(ns2));
    }
    if (overrides.chains) {
      Object.keys(overrides.chains).forEach((ns2) => namespacesToOverride.add(ns2));
    }
    if (overrides.events) {
      Object.keys(overrides.events).forEach((ns2) => namespacesToOverride.add(ns2));
    }
    if (overrides.rpcMap) {
      Object.keys(overrides.rpcMap).forEach((chainId) => {
        const [ns2] = chainId.split(":");
        if (ns2) {
          namespacesToOverride.add(ns2);
        }
      });
    }
    namespacesToOverride.forEach((ns2) => {
      if (!result[ns2]) {
        result[ns2] = this.createDefaultNamespace(ns2);
      }
    });
    if (overrides.methods) {
      Object.entries(overrides.methods).forEach(([ns2, methods]) => {
        if (result[ns2]) {
          result[ns2].methods = methods;
        }
      });
    }
    if (overrides.chains) {
      Object.entries(overrides.chains).forEach(([ns2, chains]) => {
        if (result[ns2]) {
          result[ns2].chains = chains;
        }
      });
    }
    if (overrides.events) {
      Object.entries(overrides.events).forEach(([ns2, events]) => {
        if (result[ns2]) {
          result[ns2].events = events;
        }
      });
    }
    if (overrides.rpcMap) {
      const processedNamespaces = /* @__PURE__ */ new Set();
      Object.entries(overrides.rpcMap).forEach(([chainId, rpcUrl]) => {
        const [ns2, id] = chainId.split(":");
        if (!ns2 || !id || !result[ns2]) {
          return;
        }
        if (!result[ns2].rpcMap) {
          result[ns2].rpcMap = {};
        }
        if (!processedNamespaces.has(ns2)) {
          result[ns2].rpcMap = {};
          processedNamespaces.add(ns2);
        }
        result[ns2].rpcMap[id] = rpcUrl;
      });
    }
    return result;
  },
  createNamespaces(caipNetworks, configOverride) {
    const defaultNamespaces = caipNetworks.reduce((acc, chain) => {
      const { id, chainNamespace, rpcUrls } = chain;
      const rpcUrl = rpcUrls.default.http[0];
      if (!acc[chainNamespace]) {
        acc[chainNamespace] = this.createDefaultNamespace(chainNamespace);
      }
      const caipNetworkId = `${chainNamespace}:${id}`;
      const namespace = acc[chainNamespace];
      namespace.chains.push(caipNetworkId);
      switch (caipNetworkId) {
        case "solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp":
          namespace.chains.push("solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ");
          break;
        case "solana:EtWTRABZaYq6iMfeYKouRu166VU2xqa1":
          namespace.chains.push("solana:8E9rvCKLFQia2Y35HXjjpWzj8weVo44K");
          break;
        default:
      }
      if (namespace?.rpcMap && rpcUrl) {
        namespace.rpcMap[id] = rpcUrl;
      }
      return acc;
    }, {});
    return this.applyNamespaceOverrides(defaultNamespaces, configOverride);
  },
  resolveReownName: async (name) => {
    const wcNameAddress = await EnsController.resolveName(name);
    const networkNameAddresses = Object.values(wcNameAddress?.addresses) || [];
    return networkNameAddresses[0]?.address || false;
  },
  getChainsFromNamespaces(namespaces = {}) {
    return Object.values(namespaces).flatMap((namespace) => {
      const chains = namespace.chains || [];
      const accountsChains = namespace.accounts.map((account) => {
        const [chainNamespace, chainId] = account.split(":");
        return `${chainNamespace}:${chainId}`;
      });
      return Array.from(/* @__PURE__ */ new Set([...chains, ...accountsChains]));
    });
  },
  isSessionEventData(data) {
    return typeof data === "object" && data !== null && "id" in data && "topic" in data && "params" in data && typeof data.params === "object" && data.params !== null && "chainId" in data.params && "event" in data.params && typeof data.params.event === "object" && data.params.event !== null;
  },
  isUserRejectedRequestError(error) {
    try {
      if (typeof error === "object" && error !== null) {
        const objErr = error;
        const hasCode = typeof objErr["code"] === "number";
        const hasUserRejectedMethods = hasCode && objErr["code"] === WcHelpersUtil.RPC_ERROR_CODE.USER_REJECTED_METHODS;
        const hasUserRejected = hasCode && objErr["code"] === WcHelpersUtil.RPC_ERROR_CODE.USER_REJECTED;
        return hasUserRejectedMethods || hasUserRejected;
      }
      return false;
    } catch {
      return false;
    }
  },
  isOriginAllowed(currentOrigin, allowedPatterns, defaultAllowedOrigins) {
    for (const pattern of [...allowedPatterns, ...defaultAllowedOrigins]) {
      if (pattern.includes("*")) {
        const escapedPattern = pattern.replace(/[.*+?^${}()|[\]\\]/gu, "\\$&");
        const regexString = `^${escapedPattern.replace(/\\\*/gu, ".*")}$`;
        const regex = new RegExp(regexString, "u");
        if (regex.test(currentOrigin)) {
          return true;
        }
      } else {
        try {
          if (new URL(pattern).origin === currentOrigin) {
            return true;
          }
        } catch (e) {
          if (pattern === currentOrigin) {
            return true;
          }
        }
      }
    }
    return false;
  },
  listenWcProvider({ universalProvider, namespace, onConnect, onDisconnect, onAccountsChanged, onChainChanged, onDisplayUri }) {
    if (onConnect) {
      universalProvider.on("connect", () => {
        const accounts = WcHelpersUtil.getWalletConnectAccounts(universalProvider, namespace);
        onConnect(accounts);
      });
    }
    if (onDisconnect) {
      universalProvider.on("disconnect", () => {
        onDisconnect();
      });
    }
    if (onAccountsChanged) {
      universalProvider.on("accountsChanged", (accounts) => {
        try {
          const allAccounts = universalProvider.session?.namespaces?.[namespace]?.accounts || [];
          const defaultChain = universalProvider.rpcProviders?.[namespace]?.getDefaultChain();
          const parsedAccounts = accounts.map((account) => {
            const caipAccount = allAccounts.find((acc) => acc.includes(`${namespace}:${defaultChain}:${account}`));
            if (!caipAccount) {
              return void 0;
            }
            const { chainId, chainNamespace } = ParseUtil.parseCaipAddress(caipAccount);
            return {
              address: account,
              chainId,
              chainNamespace
            };
          }).filter((account) => account !== void 0);
          if (parsedAccounts.length > 0) {
            onAccountsChanged(parsedAccounts);
          }
        } catch (error) {
          console.warn("Failed to parse accounts for namespace on accountsChanged event", namespace, accounts, error);
        }
      });
    }
    if (onChainChanged) {
      universalProvider.on("chainChanged", (chainId) => {
        onChainChanged(chainId);
      });
    }
    if (onDisplayUri) {
      universalProvider.on("display_uri", (uri) => {
        onDisplayUri(uri);
      });
    }
  },
  getWalletConnectAccounts(universalProvider, namespace) {
    const accountsAdded = /* @__PURE__ */ new Set();
    const accounts = universalProvider?.session?.namespaces?.[namespace]?.accounts?.map((account) => ParseUtil.parseCaipAddress(account)).filter(({ address }) => {
      if (accountsAdded.has(address.toLowerCase())) {
        return false;
      }
      accountsAdded.add(address.toLowerCase());
      return true;
    });
    if (accounts && accounts.length > 0) {
      return accounts;
    }
    return [];
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AdapterController/ChainAdapterBlueprint.js
var IGNORED_CONNECTOR_IDS_FOR_LISTENER = [
  ConstantsUtil.CONNECTOR_ID.AUTH,
  ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT
];
var AdapterBlueprint = class {
  /**
   * Creates an instance of AdapterBlueprint.
   * @param {AdapterBlueprint.Params} params - The parameters for initializing the adapter
   */
  constructor(params) {
    this.availableConnectors = [];
    this.availableConnections = [];
    this.providerHandlers = {};
    this.eventListeners = /* @__PURE__ */ new Map();
    this.getCaipNetworks = (namespace) => ChainController.getCaipNetworks(namespace);
    this.getConnectorId = (namespace) => ConnectorController.getConnectorId(namespace);
    if (params) {
      this.construct(params);
    }
  }
  /**
   * Initializes the adapter with the given parameters.
   * @param {AdapterBlueprint.Params} params - The parameters for initializing the adapter
   */
  construct(params) {
    this.projectId = params.projectId;
    this.namespace = params.namespace;
    this.adapterType = params.adapterType;
  }
  /**
   * Gets the available connectors.
   * @returns {Connector[]} An array of available connectors
   */
  get connectors() {
    return this.availableConnectors;
  }
  /**
   * Gets the available connections.
   * @returns {Connection[]} An array of available connections
   */
  get connections() {
    return this.availableConnections;
  }
  /**
   * Gets the supported networks.
   * @returns {CaipNetwork[]} An array of supported networks
   */
  get networks() {
    return this.getCaipNetworks(this.namespace);
  }
  /**
   * Handles the auth connected event.
   * @param {W3mFrameTypes.Responses['FrameGetUserResponse']} user - The user response
   */
  onAuthConnected({ accounts, chainId }) {
    const caipNetwork = this.getCaipNetworks().filter((n2) => n2.chainNamespace === this.namespace).find((n2) => n2.id.toString() === chainId?.toString());
    if (accounts && caipNetwork) {
      this.addConnection({
        connectorId: ConstantsUtil.CONNECTOR_ID.AUTH,
        accounts,
        caipNetwork
      });
    }
  }
  /**
   * Sets the auth provider.
   * @param {W3mFrameProvider} authProvider - The auth provider instance
   */
  setAuthProvider(authProvider) {
    authProvider.onConnect(this.onAuthConnected.bind(this));
    authProvider.onSocialConnected(this.onAuthConnected.bind(this));
    this.addConnector({
      id: ConstantsUtil.CONNECTOR_ID.AUTH,
      type: "AUTH",
      name: ConstantsUtil.CONNECTOR_NAMES.AUTH,
      provider: authProvider,
      imageId: void 0,
      chain: this.namespace,
      chains: []
    });
  }
  /**
   * Adds one or more connectors to the available connectors list.
   * @param {...Connector} connectors - The connectors to add
   */
  addConnector(...connectors) {
    const connectorsAdded = /* @__PURE__ */ new Set();
    this.availableConnectors = [...connectors, ...this.availableConnectors].filter((connector) => {
      if (connectorsAdded.has(connector.id)) {
        return false;
      }
      connectorsAdded.add(connector.id);
      return true;
    });
    this.emit("connectors", this.availableConnectors);
  }
  /**
   * Adds connections to the available connections list
   * @param {...Connection} connections - The connections to add
   */
  addConnection(...connections) {
    const connectionsAdded = /* @__PURE__ */ new Set();
    this.availableConnections = [...connections, ...this.availableConnections].filter((connection) => {
      if (connectionsAdded.has(connection.connectorId.toLowerCase())) {
        return false;
      }
      connectionsAdded.add(connection.connectorId.toLowerCase());
      return true;
    });
    this.emit("connections", this.availableConnections);
  }
  /**
   * Deletes a connection from the available connections list
   * @param {string} connectorId - The connector ID of the connection to delete
   */
  deleteConnection(connectorId) {
    this.availableConnections = this.availableConnections.filter((c3) => c3.connectorId.toLowerCase() !== connectorId.toLowerCase());
    this.emit("connections", this.availableConnections);
  }
  /**
   * Clears all connections from the available connections list
   * @param {boolean} emit - Whether to emit the connections event
   */
  clearConnections(emit = false) {
    this.availableConnections = [];
    if (emit) {
      this.emit("connections", this.availableConnections);
    }
  }
  setStatus(status, chainNamespace) {
    ChainController.setAccountProp("status", status, chainNamespace);
  }
  /**
   * Adds an event listener for a specific event.
   * @template T
   * @param {T} eventName - The name of the event
   * @param {EventCallback<T>} callback - The callback function to be called when the event is emitted
   */
  on(eventName, callback) {
    if (!this.eventListeners.has(eventName)) {
      this.eventListeners.set(eventName, /* @__PURE__ */ new Set());
    }
    this.eventListeners.get(eventName)?.add(callback);
  }
  /**
   * Removes an event listener for a specific event.
   * @template T
   * @param {T} eventName - The name of the event
   * @param {EventCallback<T>} callback - The callback function to be removed
   */
  off(eventName, callback) {
    const listeners = this.eventListeners.get(eventName);
    if (listeners) {
      listeners.delete(callback);
    }
  }
  /**
   * Removes all event listeners.
   */
  removeAllEventListeners() {
    this.eventListeners.forEach((listeners) => {
      listeners.clear();
    });
  }
  /**
   * Emits an event with the given name and optional data.
   * @template T
   * @param {T} eventName - The name of the event to emit
   * @param {EventData[T]} [data] - The optional data to be passed to the event listeners
   */
  emit(eventName, data) {
    const listeners = this.eventListeners.get(eventName);
    if (listeners) {
      listeners.forEach((callback) => callback(data));
    }
  }
  /**
   * Connects to WalletConnect.
   * @param {number | string} [_chainId] - Optional chain ID to connect to
   */
  async connectWalletConnect(_chainId) {
    try {
      const connector = this.getWalletConnectConnector();
      const result = await connector.connectWalletConnect();
      return { clientId: result.clientId };
    } catch (err) {
      if (WcHelpersUtil.isUserRejectedRequestError(err)) {
        throw new UserRejectedRequestError(err);
      }
      throw err;
    }
  }
  /**
   * Switches the network.
   * @param {AdapterBlueprint.SwitchNetworkParams} params - Network switching parameters
   */
  async switchNetwork(params) {
    const { caipNetwork } = params;
    const providerType = ProviderController.getProviderId(caipNetwork.chainNamespace);
    const provider = ProviderController.getProvider(caipNetwork.chainNamespace);
    if (!provider) {
      throw new Error("Provider not found");
    }
    if (providerType === "WALLET_CONNECT") {
      const walletConnectProvider = provider;
      walletConnectProvider.setDefaultChain(caipNetwork.caipNetworkId);
      return;
    }
    if (providerType === "AUTH") {
      const authProvider = ConnectorController.getAuthConnector()?.provider;
      if (!authProvider) {
        throw new Error("Auth provider not found");
      }
      const preferredAccountType = getPreferredAccountType(caipNetwork.chainNamespace);
      await authProvider.switchNetwork({ chainId: caipNetwork.caipNetworkId });
      const user = await authProvider.getUser({
        chainId: caipNetwork.caipNetworkId,
        preferredAccountType
      });
      this.emit("switchNetwork", user);
    }
  }
  getWalletConnectConnector() {
    const connector = this.connectors.find((c3) => c3.id === "walletConnect");
    if (!connector) {
      throw new Error("WalletConnectConnector not found");
    }
    return connector;
  }
  /**
   * Handles connect event for a specific connector.
   * @param {string[]} accounts - The accounts that changed
   * @param {string} connectorId - The ID of the connector
   */
  onConnect(accounts, connectorId) {
    if (accounts.length > 0) {
      const { address, chainId } = CoreHelperUtil.getAccount(accounts[0]);
      const caipNetwork = this.getCaipNetworks().filter((n2) => n2.chainNamespace === this.namespace).find((n2) => n2.id.toString() === chainId?.toString());
      const connector = this.connectors.find((c3) => c3.id === connectorId);
      if (address) {
        this.emit("accountChanged", {
          address,
          chainId,
          connector
        });
        this.addConnection({
          connectorId,
          accounts: accounts.map((_account) => {
            const { address: address2 } = CoreHelperUtil.getAccount(_account);
            return { address: address2 };
          }),
          caipNetwork
        });
      }
    }
  }
  /**
   * Handles accounts changed event for a specific connector.
   * @param {string[]} accounts - The accounts that changed
   * @param {string} connectorId - The ID of the connector
   */
  onAccountsChanged(accounts, connectorId, disconnectIfNoAccounts = true) {
    if (accounts.length > 0) {
      const { address } = CoreHelperUtil.getAccount(accounts[0]);
      const connection = this.getConnection({
        connectorId,
        connections: this.connections,
        connectors: this.connectors
      });
      if (address && this.getConnectorId(ConstantsUtil.CHAIN.EVM)?.toLowerCase() === connectorId.toLowerCase()) {
        this.emit("accountChanged", {
          address,
          chainId: connection?.caipNetwork?.id,
          connector: connection?.connector
        });
      }
      this.addConnection({
        connectorId,
        accounts: accounts.map((_account) => {
          const { address: address2 } = CoreHelperUtil.getAccount(_account);
          return { address: address2 };
        }),
        caipNetwork: connection?.caipNetwork
      });
    } else if (disconnectIfNoAccounts) {
      this.onDisconnect(connectorId);
    }
  }
  /**
   * Handles disconnect event for a specific connector.
   * @param {string} connectorId - The ID of the connector
   */
  onDisconnect(connectorId) {
    this.removeProviderListeners(connectorId);
    this.deleteConnection(connectorId);
    if (this.getConnectorId(ConstantsUtil.CHAIN.EVM)?.toLowerCase() === connectorId.toLowerCase()) {
      this.emitFirstAvailableConnection();
    }
    if (this.connections.length === 0) {
      this.emit("disconnect");
    }
  }
  /**
   * Handles chain changed event for a specific connector.
   * @param {string} chainId - The ID of the chain that changed
   * @param {string} connectorId - The ID of the connector
   */
  onChainChanged(chainId, connectorId) {
    const formattedChainId = typeof chainId === "string" && chainId.startsWith("0x") ? parseInt(chainId, 16).toString() : chainId.toString();
    const connection = this.getConnection({
      connectorId,
      connections: this.connections,
      connectors: this.connectors
    });
    const caipNetwork = this.getCaipNetworks().filter((n2) => n2.chainNamespace === this.namespace).find((n2) => n2.id.toString() === formattedChainId);
    if (connection) {
      this.addConnection({
        connectorId,
        accounts: connection.accounts,
        caipNetwork
      });
    }
    if (this.getConnectorId(ConstantsUtil.CHAIN.EVM)?.toLowerCase() === connectorId.toLowerCase()) {
      this.emit("switchNetwork", { chainId: formattedChainId });
    }
  }
  /**
   * Listens to provider events for a specific connector.
   * @param {string} connectorId - The ID of the connector
   * @param {Provider | CombinedProvider} provider - The provider to listen to
   */
  listenProviderEvents(connectorId, provider) {
    if (IGNORED_CONNECTOR_IDS_FOR_LISTENER.includes(connectorId)) {
      return;
    }
    const accountsChangedHandler = (accounts) => this.onAccountsChanged(accounts, connectorId);
    const chainChangedHandler = (chainId) => this.onChainChanged(chainId, connectorId);
    const disconnectHandler = () => this.onDisconnect(connectorId);
    if (!this.providerHandlers[connectorId]) {
      provider.on("disconnect", disconnectHandler);
      provider.on("accountsChanged", accountsChangedHandler);
      provider.on("chainChanged", chainChangedHandler);
      this.providerHandlers[connectorId] = {
        provider,
        disconnect: disconnectHandler,
        accountsChanged: accountsChangedHandler,
        chainChanged: chainChangedHandler
      };
    }
  }
  /**
   * Removes provider listeners for a specific connector.
   * @param {string} connectorId - The ID of the connector
   */
  removeProviderListeners(connectorId) {
    if (this.providerHandlers[connectorId]) {
      const { provider, disconnect, accountsChanged, chainChanged } = this.providerHandlers[connectorId];
      provider.removeListener("disconnect", disconnect);
      provider.removeListener("accountsChanged", accountsChanged);
      provider.removeListener("chainChanged", chainChanged);
      this.providerHandlers[connectorId] = null;
    }
  }
  /**
   * Emits the first available connection.
   */
  emitFirstAvailableConnection() {
    const connection = this.getConnection({
      connections: this.connections,
      connectors: this.connectors
    });
    if (connection) {
      const [account] = connection.accounts;
      this.emit("accountChanged", {
        address: account?.address,
        chainId: connection.caipNetwork?.id,
        connector: connection.connector
      });
    }
  }
  /**
   * Gets a connection based on provided parameters.
   * If connectorId is provided, returns connection for that specific connector.
   * Otherwise, returns the first available valid connection.
   *
   * @param params - Connection parameters
   * @param params.address - Optional address to filter by
   * @param params.connectorId - Optional connector ID to filter by
   * @param params.connections - List of available connections
   * @param params.connectors - List of available connectors
   * @returns Connection or null if none found
   */
  getConnection({ address, connectorId, connections, connectors }) {
    if (connectorId) {
      const connection = connections.find((c3) => c3.connectorId.toLowerCase() === connectorId.toLowerCase());
      if (!connection) {
        return null;
      }
      const connector = connectors.find((c3) => c3.id.toLowerCase() === connection.connectorId.toLowerCase());
      const account = address ? connection.accounts.find((a2) => a2.address.toLowerCase() === address.toLowerCase()) : connection.accounts[0];
      return { ...connection, account, connector };
    }
    const validConnection = connections.find((c3) => c3.accounts.length > 0 && connectors.some((conn) => conn.id.toLowerCase() === c3.connectorId.toLowerCase()));
    if (validConnection) {
      const [account] = validConnection.accounts;
      const connector = connectors.find((c3) => c3.id.toLowerCase() === validConnection.connectorId.toLowerCase());
      return {
        ...validConnection,
        account,
        connector
      };
    }
    return null;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/SIWXUtil.js
var addEmbeddedWalletSessionPromise = null;
var SIWXUtil = {
  getSIWX() {
    return OptionsController.state.siwx;
  },
  async initializeIfEnabled(caipAddress = ChainController.getActiveCaipAddress()) {
    const siwx = OptionsController.state.siwx;
    if (!(siwx && caipAddress)) {
      return;
    }
    const [namespace, chainId, address] = caipAddress.split(":");
    if (!ChainController.checkIfSupportedNetwork(namespace, `${namespace}:${chainId}`)) {
      return;
    }
    try {
      if (OptionsController.state.remoteFeatures?.emailCapture) {
        const user = ChainController.getAccountData(namespace)?.user;
        await ModalController.open({
          view: "DataCapture",
          data: {
            email: user?.email ?? void 0
          }
        });
        return;
      }
      if (addEmbeddedWalletSessionPromise) {
        await addEmbeddedWalletSessionPromise;
      }
      const sessions = await siwx.getSessions(`${namespace}:${chainId}`, address);
      if (sessions.length) {
        return;
      }
      await ModalController.open({
        view: "SIWXSignMessage"
      });
    } catch (error) {
      console.error("SIWXUtil:initializeIfEnabled", error);
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_ERROR",
        properties: this.getSIWXEventProperties(error)
      });
      await ConnectionController._getClient()?.disconnect().catch(console.error);
      RouterController.reset("Connect");
      SnackController.showError("A problem occurred while trying initialize authentication");
    }
  },
  async isAuthenticated(caipAddress = ChainController.getActiveCaipAddress()) {
    const siwx = OptionsController.state.siwx;
    if (!siwx) {
      return true;
    }
    if (!caipAddress) {
      return true;
    }
    const { chainNamespace, chainId, address } = ParseUtil.parseCaipAddress(caipAddress);
    const caipNetworkId = `${chainNamespace}:${chainId}`;
    const sessions = await SIWXUtil.getSessions({
      address,
      caipNetworkId
    });
    return sessions.length > 0;
  },
  async requestSignMessage() {
    const siwx = OptionsController.state.siwx;
    const address = CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress());
    const network = getActiveCaipNetwork();
    const client = ConnectionController._getClient();
    if (!siwx) {
      throw new Error("SIWX is not enabled");
    }
    if (!address) {
      throw new Error("No ActiveCaipAddress found");
    }
    if (!network) {
      throw new Error("No ActiveCaipNetwork or client found");
    }
    if (!client) {
      throw new Error("No ConnectionController client found");
    }
    try {
      const siwxMessage = await siwx.createMessage({
        chainId: network.caipNetworkId,
        accountAddress: address
      });
      const message = siwxMessage.toString();
      const connectorId = ConnectorController.getConnectorId(network.chainNamespace);
      if (connectorId === ConstantsUtil.CONNECTOR_ID.AUTH) {
        RouterController.pushTransactionStack({});
      }
      const signature = await client.signMessage(message);
      await siwx.addSession({
        data: siwxMessage,
        message,
        signature
      });
      ChainController.setLastConnectedSIWECaipNetwork(network);
      ModalController.close();
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_SUCCESS",
        properties: this.getSIWXEventProperties()
      });
    } catch (error) {
      if (!ModalController.state.open || RouterController.state.view === "ApproveTransaction") {
        await ModalController.open({
          view: "SIWXSignMessage"
        });
      }
      SnackController.showError("Error signing message");
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_ERROR",
        properties: this.getSIWXEventProperties(error)
      });
      console.error("SWIXUtil:requestSignMessage", error);
    }
  },
  async cancelSignMessage() {
    try {
      const siwx = this.getSIWX();
      const isRequired = siwx?.getRequired?.();
      if (isRequired) {
        const lastNetwork = ChainController.getLastConnectedSIWECaipNetwork();
        if (lastNetwork) {
          const sessions = await siwx?.getSessions(lastNetwork?.caipNetworkId, CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress()) || "");
          if (sessions && sessions.length > 0) {
            await ChainController.switchActiveNetwork(lastNetwork);
          } else {
            await ConnectionController.disconnect();
          }
        } else {
          await ConnectionController.disconnect();
        }
      } else {
        ModalController.close();
      }
      ModalController.close();
      EventsController.sendEvent({
        event: "CLICK_CANCEL_SIWX",
        type: "track",
        properties: this.getSIWXEventProperties()
      });
    } catch (error) {
      console.error("SIWXUtil:cancelSignMessage", error);
    }
  },
  async getAllSessions() {
    const siwx = this.getSIWX();
    const allRequestedCaipNetworks = ChainController.getAllRequestedCaipNetworks();
    const sessions = [];
    await Promise.all(allRequestedCaipNetworks.map(async (caipNetwork) => {
      const session = await siwx?.getSessions(caipNetwork.caipNetworkId, CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress()) || "");
      if (session) {
        sessions.push(...session);
      }
    }));
    return sessions;
  },
  async getSessions(args) {
    const siwx = OptionsController.state.siwx;
    let address = args?.address;
    if (!address) {
      const activeCaipAddress = ChainController.getActiveCaipAddress();
      address = CoreHelperUtil.getPlainAddress(activeCaipAddress);
    }
    let network = args?.caipNetworkId;
    if (!network) {
      const activeCaipNetwork = ChainController.getActiveCaipNetwork();
      network = activeCaipNetwork?.caipNetworkId;
    }
    if (!(siwx && address && network)) {
      return [];
    }
    return siwx.getSessions(network, address);
  },
  async isSIWXCloseDisabled() {
    const siwx = this.getSIWX();
    if (siwx) {
      const isApproveSignScreen = RouterController.state.view === "ApproveTransaction";
      const isSiwxSignMessage = RouterController.state.view === "SIWXSignMessage";
      if (isApproveSignScreen || isSiwxSignMessage) {
        return siwx.getRequired?.() && (await this.getSessions()).length === 0;
      }
    }
    return false;
  },
  async authConnectorAuthenticate({ authConnector, chainId, socialUri, preferredAccountType, chainNamespace }) {
    const siwx = SIWXUtil.getSIWX();
    const network = getActiveCaipNetwork();
    if (!siwx || !chainNamespace.includes(ConstantsUtil.CHAIN.EVM) || // Request to input email and sign message when email capture is enabled
    OptionsController.state.remoteFeatures?.emailCapture) {
      const result2 = await authConnector.connect({
        chainId,
        socialUri,
        preferredAccountType
      });
      return {
        address: result2.address,
        chainId: result2.chainId,
        accounts: result2.accounts
      };
    }
    const caipNetwork = `${chainNamespace}:${chainId}`;
    const siwxMessage = await siwx.createMessage({
      chainId: caipNetwork,
      accountAddress: "<<AccountAddress>>"
    });
    const siwxMessageData = {
      accountAddress: siwxMessage.accountAddress,
      chainId: siwxMessage.chainId,
      domain: siwxMessage.domain,
      uri: siwxMessage.uri,
      version: siwxMessage.version,
      nonce: siwxMessage.nonce,
      notBefore: siwxMessage.notBefore,
      statement: siwxMessage.statement,
      resources: siwxMessage.resources,
      requestId: siwxMessage.requestId,
      issuedAt: siwxMessage.issuedAt,
      expirationTime: siwxMessage.expirationTime,
      serializedMessage: siwxMessage.toString()
    };
    const result = await authConnector.connect({
      chainId,
      socialUri,
      siwxMessage: siwxMessageData,
      preferredAccountType
    });
    siwxMessageData.accountAddress = result.address;
    siwxMessageData.serializedMessage = result.message || "";
    if (result.signature && result.message) {
      const promise = SIWXUtil.addEmbeddedWalletSession(siwxMessageData, result.message, result.signature);
      await promise;
    }
    ChainController.setLastConnectedSIWECaipNetwork(network);
    return {
      address: result.address,
      chainId: result.chainId,
      accounts: result.accounts
    };
  },
  async addEmbeddedWalletSession(siwxMessageData, message, signature) {
    if (addEmbeddedWalletSessionPromise) {
      return addEmbeddedWalletSessionPromise;
    }
    const siwx = SIWXUtil.getSIWX();
    if (!siwx) {
      return Promise.resolve();
    }
    addEmbeddedWalletSessionPromise = siwx.addSession({
      data: siwxMessageData,
      message,
      signature
    }).finally(() => {
      addEmbeddedWalletSessionPromise = null;
    });
    return addEmbeddedWalletSessionPromise;
  },
  async universalProviderAuthenticate({ universalProvider, chains, methods }) {
    const siwx = SIWXUtil.getSIWX();
    const network = getActiveCaipNetwork();
    const namespaces = new Set(chains.map((chain) => chain.split(":")[0]));
    if (!siwx || namespaces.size !== 1 || !namespaces.has("eip155")) {
      return false;
    }
    const siwxMessage = await siwx.createMessage({
      chainId: getActiveCaipNetwork()?.caipNetworkId || "",
      accountAddress: ""
    });
    const result = await universalProvider.authenticate({
      nonce: siwxMessage.nonce,
      domain: siwxMessage.domain,
      uri: siwxMessage.uri,
      exp: siwxMessage.expirationTime,
      iat: siwxMessage.issuedAt,
      nbf: siwxMessage.notBefore,
      requestId: siwxMessage.requestId,
      version: siwxMessage.version,
      resources: siwxMessage.resources,
      statement: siwxMessage.statement,
      chainId: siwxMessage.chainId,
      methods,
      // The first chainId is what is used for universal provider to build the message
      chains: [siwxMessage.chainId, ...chains.filter((chain) => chain !== siwxMessage.chainId)]
    });
    SnackController.showLoading("Authenticating...", { autoClose: false });
    const walletInfo = {
      ...result.session.peer.metadata,
      name: result.session.peer.metadata.name,
      icon: result.session.peer.metadata.icons?.[0],
      type: "WALLET_CONNECT"
    };
    ChainController.setAccountProp("connectedWalletInfo", walletInfo, Array.from(namespaces)[0]);
    if (result?.auths?.length) {
      const sessions = result.auths.map((cacao) => {
        const message = universalProvider.client.formatAuthMessage({
          request: cacao.p,
          iss: cacao.p.iss
        });
        return {
          data: {
            ...cacao.p,
            accountAddress: cacao.p.iss.split(":").slice(-1).join(""),
            chainId: cacao.p.iss.split(":").slice(2, 4).join(":"),
            uri: cacao.p.aud,
            version: cacao.p.version || siwxMessage.version,
            expirationTime: cacao.p.exp,
            issuedAt: cacao.p.iat,
            notBefore: cacao.p.nbf
          },
          message,
          signature: cacao.s.s,
          cacao
        };
      });
      try {
        await siwx.setSessions(sessions);
        if (network) {
          ChainController.setLastConnectedSIWECaipNetwork(network);
        }
        EventsController.sendEvent({
          type: "track",
          event: "SIWX_AUTH_SUCCESS",
          properties: SIWXUtil.getSIWXEventProperties()
        });
      } catch (error) {
        console.error("SIWX:universalProviderAuth - failed to set sessions", error);
        EventsController.sendEvent({
          type: "track",
          event: "SIWX_AUTH_ERROR",
          properties: SIWXUtil.getSIWXEventProperties(error)
        });
        await universalProvider.disconnect().catch(console.error);
        throw error;
      } finally {
        SnackController.hide();
      }
    }
    return true;
  },
  getSIWXEventProperties(error) {
    const namespace = ChainController.state.activeChain;
    if (!namespace) {
      throw new Error("SIWXUtil:getSIWXEventProperties - namespace is required");
    }
    return {
      network: ChainController.state.activeCaipNetwork?.caipNetworkId || "",
      isSmartAccount: getPreferredAccountType(namespace) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
      message: error ? CoreHelperUtil.parseError(error) : void 0
    };
  },
  async clearSessions() {
    const siwx = this.getSIWX();
    if (siwx) {
      await siwx.setSessions([]);
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AdapterController/WalletConnectConnector.js
var WalletConnectConnector = class {
  constructor({ provider, namespace }) {
    this.id = ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT;
    this.name = "WalletConnect";
    this.type = "WALLET_CONNECT";
    this.imageId = "ef1a1fcf-7fe8-4d69-bd6d-fda1345b4400";
    this.getCaipNetworks = ChainController.getCaipNetworks.bind(ChainController);
    this.caipNetworks = this.getCaipNetworks();
    this.provider = provider;
    this.chain = namespace;
  }
  get chains() {
    return this.getCaipNetworks();
  }
  async connectWalletConnect() {
    const isAuthenticated = await this.authenticate();
    if (!isAuthenticated) {
      const caipNetworks = this.getCaipNetworks();
      const universalProviderConfigOverride = OptionsController.state.universalProviderConfigOverride;
      const namespaces = WcHelpersUtil.createNamespaces(caipNetworks, universalProviderConfigOverride);
      await this.provider.connect({ optionalNamespaces: namespaces });
    }
    return {
      clientId: await this.provider.client.core.crypto.getClientId(),
      session: this.provider.session
    };
  }
  async disconnect() {
    await this.provider.disconnect();
  }
  async authenticate() {
    const chains = this.chains.map((network) => network.caipNetworkId);
    return SIWXUtil.universalProviderAuthenticate({
      universalProvider: this.provider,
      chains,
      methods: OPTIONAL_METHODS
    });
  }
};
var OPTIONAL_METHODS = [
  "eth_accounts",
  "eth_requestAccounts",
  "eth_sendRawTransaction",
  "eth_sign",
  "eth_signTransaction",
  "eth_signTypedData",
  "eth_signTypedData_v3",
  "eth_signTypedData_v4",
  "eth_sendTransaction",
  "personal_sign",
  "wallet_switchEthereumChain",
  "wallet_addEthereumChain",
  "wallet_getPermissions",
  "wallet_requestPermissions",
  "wallet_registerOnboarding",
  "wallet_watchAsset",
  "wallet_scanQRCode",
  // EIP-5792
  "wallet_getCallsStatus",
  "wallet_sendCalls",
  "wallet_getCapabilities",
  // EIP-7715
  "wallet_grantPermissions",
  "wallet_revokePermissions",
  //EIP-7811
  "wallet_getAssets"
];

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/SwapCalculationUtil.js
var SwapCalculationUtil = {
  getGasPriceInEther(gas, gasPrice) {
    const totalGasCostInWei = gasPrice * gas;
    const totalGasCostInEther = Number(totalGasCostInWei) / 1e18;
    return totalGasCostInEther;
  },
  getGasPriceInUSD(networkPrice, gas, gasPrice) {
    const totalGasCostInEther = SwapCalculationUtil.getGasPriceInEther(gas, gasPrice);
    const networkPriceInUSD = NumberUtil.bigNumber(networkPrice);
    const gasCostInUSD = networkPriceInUSD.times(totalGasCostInEther);
    return gasCostInUSD.toNumber();
  },
  getPriceImpact({ sourceTokenAmount, sourceTokenPriceInUSD, toTokenPriceInUSD, toTokenAmount }) {
    const inputValue = NumberUtil.bigNumber(sourceTokenAmount).times(sourceTokenPriceInUSD);
    const outputValue = NumberUtil.bigNumber(toTokenAmount).times(toTokenPriceInUSD);
    const priceImpact = inputValue.minus(outputValue).div(inputValue).times(100);
    return priceImpact.toNumber();
  },
  getMaxSlippage(slippage, toTokenAmount) {
    const slippageToleranceDecimal = NumberUtil.bigNumber(slippage).div(100);
    const maxSlippageAmount = NumberUtil.multiply(toTokenAmount, slippageToleranceDecimal);
    return maxSlippageAmount.toNumber();
  },
  getProviderFee(sourceTokenAmount, feePercentage = 85e-4) {
    const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(feePercentage);
    return providerFee.toString();
  },
  isInsufficientNetworkTokenForGas(networkBalanceInUSD, gasPriceInUSD) {
    const gasPrice = gasPriceInUSD || "0";
    if (NumberUtil.bigNumber(networkBalanceInUSD).eq(0)) {
      return true;
    }
    return NumberUtil.bigNumber(NumberUtil.bigNumber(gasPrice)).gt(networkBalanceInUSD);
  },
  isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, balance) {
    const sourceTokenBalance = balance?.find((token) => token.address === sourceTokenAddress)?.quantity?.numeric;
    const isInSufficientBalance = NumberUtil.bigNumber(sourceTokenBalance || "0").lt(sourceTokenAmount);
    return isInSufficientBalance;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AlertController.js
var state3 = proxy({
  message: "",
  variant: "info",
  open: false
});
var controller3 = {
  state: state3,
  subscribeKey(key, callback) {
    return subscribeKey(state3, key, callback);
  },
  open(message, variant) {
    const { debug } = OptionsController.state;
    const { code, displayMessage, debugMessage } = message;
    if (displayMessage && debug) {
      state3.message = displayMessage;
      state3.variant = variant;
      state3.open = true;
    }
    if (debugMessage) {
      console.error(typeof debugMessage === "function" ? debugMessage() : debugMessage, code ? { code } : void 0);
    }
  },
  warn(title, description, code) {
    state3.open = true;
    state3.message = title;
    state3.variant = "warning";
    if (description) {
      console.warn(description, code);
    }
  },
  close() {
    state3.open = false;
    state3.message = "";
    state3.variant = "info";
  }
};
var AlertController = withErrorBoundary(controller3);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SwapController.js
var INITIAL_GAS_LIMIT = 15e4;
var TO_AMOUNT_DECIMALS = 6;
var initialState = {
  // Loading states
  initializing: false,
  initialized: false,
  loadingPrices: false,
  loadingQuote: false,
  loadingApprovalTransaction: false,
  loadingBuildTransaction: false,
  loadingTransaction: false,
  // Control states
  switchingTokens: false,
  // Error states
  fetchError: false,
  // Approval & Swap transaction states
  approvalTransaction: void 0,
  swapTransaction: void 0,
  transactionError: void 0,
  // Input values
  sourceToken: void 0,
  sourceTokenAmount: "",
  sourceTokenPriceInUSD: 0,
  toToken: void 0,
  toTokenAmount: "",
  toTokenPriceInUSD: 0,
  networkPrice: "0",
  networkBalanceInUSD: "0",
  networkTokenSymbol: "",
  inputError: void 0,
  // Request values
  slippage: ConstantsUtil2.CONVERT_SLIPPAGE_TOLERANCE,
  // Tokens
  tokens: void 0,
  popularTokens: void 0,
  suggestedTokens: void 0,
  foundTokens: void 0,
  myTokensWithBalance: void 0,
  tokensPriceMap: {},
  // Calculations
  gasFee: "0",
  gasPriceInUSD: 0,
  priceImpact: void 0,
  maxSlippage: void 0,
  providerFee: void 0
};
var state4 = proxy({ ...initialState });
var controller4 = {
  state: state4,
  subscribe(callback) {
    return subscribe(state4, () => callback(state4));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state4, key, callback);
  },
  getParams() {
    const namespace = ChainController.state.activeChain;
    const caipAddress = ChainController.getAccountData(namespace)?.caipAddress ?? ChainController.state.activeCaipAddress;
    const address = CoreHelperUtil.getPlainAddress(caipAddress);
    const networkAddress = getActiveNetworkTokenAddress();
    const connectorId = ConnectorController.getConnectorId(ChainController.state.activeChain);
    if (!address) {
      throw new Error("No address found to swap the tokens from.");
    }
    const invalidToToken = !state4.toToken?.address || !state4.toToken?.decimals;
    const invalidSourceToken = !state4.sourceToken?.address || !state4.sourceToken?.decimals || !NumberUtil.bigNumber(state4.sourceTokenAmount).gt(0);
    const invalidSourceTokenAmount = !state4.sourceTokenAmount;
    return {
      networkAddress,
      fromAddress: address,
      fromCaipAddress: caipAddress,
      sourceTokenAddress: state4.sourceToken?.address,
      toTokenAddress: state4.toToken?.address,
      toTokenAmount: state4.toTokenAmount,
      toTokenDecimals: state4.toToken?.decimals,
      sourceTokenAmount: state4.sourceTokenAmount,
      sourceTokenDecimals: state4.sourceToken?.decimals,
      invalidToToken,
      invalidSourceToken,
      invalidSourceTokenAmount,
      availableToSwap: caipAddress && !invalidToToken && !invalidSourceToken && !invalidSourceTokenAmount,
      isAuthConnector: connectorId === ConstantsUtil.CONNECTOR_ID.AUTH
    };
  },
  async setSourceToken(sourceToken) {
    if (!sourceToken) {
      state4.sourceToken = sourceToken;
      state4.sourceTokenAmount = "";
      state4.sourceTokenPriceInUSD = 0;
      return;
    }
    state4.sourceToken = sourceToken;
    await SwapController.setTokenPrice(sourceToken.address, "sourceToken");
  },
  setSourceTokenAmount(amount) {
    state4.sourceTokenAmount = amount;
  },
  async setToToken(toToken) {
    if (!toToken) {
      state4.toToken = toToken;
      state4.toTokenAmount = "";
      state4.toTokenPriceInUSD = 0;
      return;
    }
    state4.toToken = toToken;
    await SwapController.setTokenPrice(toToken.address, "toToken");
  },
  setToTokenAmount(amount) {
    state4.toTokenAmount = amount ? NumberUtil.toFixed(amount, TO_AMOUNT_DECIMALS) : "";
  },
  async setTokenPrice(address, target) {
    let price = state4.tokensPriceMap[address] || 0;
    if (!price) {
      state4.loadingPrices = true;
      price = await SwapController.getAddressPrice(address);
    }
    if (target === "sourceToken") {
      state4.sourceTokenPriceInUSD = price;
    } else if (target === "toToken") {
      state4.toTokenPriceInUSD = price;
    }
    if (state4.loadingPrices) {
      state4.loadingPrices = false;
    }
    if (SwapController.getParams().availableToSwap && !state4.switchingTokens) {
      SwapController.swapTokens();
    }
  },
  async switchTokens() {
    if (state4.initializing || !state4.initialized || state4.switchingTokens) {
      return;
    }
    state4.switchingTokens = true;
    try {
      const newSourceToken = state4.toToken ? { ...state4.toToken } : void 0;
      const newToToken = state4.sourceToken ? { ...state4.sourceToken } : void 0;
      const newSourceTokenAmount = newSourceToken && state4.toTokenAmount === "" ? "1" : state4.toTokenAmount;
      SwapController.setSourceTokenAmount(newSourceTokenAmount);
      SwapController.setToTokenAmount("");
      await SwapController.setSourceToken(newSourceToken);
      await SwapController.setToToken(newToToken);
      state4.switchingTokens = false;
      SwapController.swapTokens();
    } catch (error) {
      state4.switchingTokens = false;
      throw error;
    }
  },
  resetState() {
    state4.myTokensWithBalance = initialState.myTokensWithBalance;
    state4.tokensPriceMap = initialState.tokensPriceMap;
    state4.initialized = initialState.initialized;
    state4.initializing = initialState.initializing;
    state4.switchingTokens = initialState.switchingTokens;
    state4.sourceToken = initialState.sourceToken;
    state4.sourceTokenAmount = initialState.sourceTokenAmount;
    state4.sourceTokenPriceInUSD = initialState.sourceTokenPriceInUSD;
    state4.toToken = initialState.toToken;
    state4.toTokenAmount = initialState.toTokenAmount;
    state4.toTokenPriceInUSD = initialState.toTokenPriceInUSD;
    state4.networkPrice = initialState.networkPrice;
    state4.networkTokenSymbol = initialState.networkTokenSymbol;
    state4.networkBalanceInUSD = initialState.networkBalanceInUSD;
    state4.inputError = initialState.inputError;
  },
  resetValues() {
    const { networkAddress } = SwapController.getParams();
    const networkToken = state4.tokens?.find((token) => token.address === networkAddress);
    SwapController.setSourceToken(networkToken);
    SwapController.setToToken(void 0);
  },
  getApprovalLoadingState() {
    return state4.loadingApprovalTransaction;
  },
  clearError() {
    state4.transactionError = void 0;
  },
  async initializeState() {
    if (state4.initializing) {
      return;
    }
    state4.initializing = true;
    if (!state4.initialized) {
      try {
        await SwapController.fetchTokens();
        state4.initialized = true;
      } catch (error) {
        state4.initialized = false;
        SnackController.showError("Failed to initialize swap");
        RouterController.goBack();
      }
    }
    state4.initializing = false;
  },
  async fetchTokens() {
    const { networkAddress } = SwapController.getParams();
    await SwapController.getNetworkTokenPrice();
    await SwapController.getMyTokensWithBalance();
    const networkToken = state4.myTokensWithBalance?.find((token) => token.address === networkAddress);
    if (networkToken) {
      state4.networkTokenSymbol = networkToken.symbol;
      SwapController.setSourceToken(networkToken);
      SwapController.setSourceTokenAmount("0");
    }
  },
  async getTokenList() {
    const activeCaipNetworkId = ChainController.state.activeCaipNetwork?.caipNetworkId;
    if (state4.caipNetworkId === activeCaipNetworkId && state4.tokens) {
      return;
    }
    try {
      state4.tokensLoading = true;
      const tokens = await SwapApiUtil.getTokenList(activeCaipNetworkId);
      state4.tokens = tokens;
      state4.caipNetworkId = activeCaipNetworkId;
      state4.popularTokens = tokens.sort((aTokenInfo, bTokenInfo) => {
        if (aTokenInfo.symbol < bTokenInfo.symbol) {
          return -1;
        }
        if (aTokenInfo.symbol > bTokenInfo.symbol) {
          return 1;
        }
        return 0;
      });
      const suggestedTokensByChain = activeCaipNetworkId && ConstantsUtil2.SUGGESTED_TOKENS_BY_CHAIN?.[activeCaipNetworkId] || [];
      const suggestedTokenObjects = suggestedTokensByChain.map((symbol) => tokens.find((t) => t.symbol === symbol)).filter((t) => Boolean(t));
      const allSuggestedTokens = ConstantsUtil2.SWAP_SUGGESTED_TOKENS || [];
      const allSuggestedTokenObjects = allSuggestedTokens.map((symbol) => tokens.find((t) => t.symbol === symbol)).filter((t) => Boolean(t)).filter((t) => !suggestedTokenObjects.some((ct4) => ct4.address === t.address));
      state4.suggestedTokens = [...suggestedTokenObjects, ...allSuggestedTokenObjects];
    } catch (error) {
      state4.tokens = [];
      state4.popularTokens = [];
      state4.suggestedTokens = [];
    } finally {
      state4.tokensLoading = false;
    }
  },
  async getAddressPrice(address) {
    const existPrice = state4.tokensPriceMap[address];
    if (existPrice) {
      return existPrice;
    }
    const response = await BlockchainApiController.fetchTokenPrice({
      addresses: [address]
    });
    const fungibles = response?.fungibles || [];
    const allTokens = [...state4.tokens || [], ...state4.myTokensWithBalance || []];
    const symbol = allTokens?.find((token) => token.address === address)?.symbol;
    const price = fungibles.find((p3) => p3.symbol.toLowerCase() === symbol?.toLowerCase())?.price || 0;
    const priceAsFloat = parseFloat(price.toString());
    state4.tokensPriceMap[address] = priceAsFloat;
    return priceAsFloat;
  },
  async getNetworkTokenPrice() {
    const { networkAddress } = SwapController.getParams();
    const response = await BlockchainApiController.fetchTokenPrice({
      addresses: [networkAddress]
    }).catch(() => {
      SnackController.showError("Failed to fetch network token price");
      return { fungibles: [] };
    });
    const token = response.fungibles?.[0];
    const price = token?.price.toString() || "0";
    state4.tokensPriceMap[networkAddress] = parseFloat(price);
    state4.networkTokenSymbol = token?.symbol || "";
    state4.networkPrice = price;
  },
  async getMyTokensWithBalance(forceUpdate) {
    const balances = await BalanceUtil.getMyTokensWithBalance(forceUpdate);
    const swapBalances = SwapApiUtil.mapBalancesToSwapTokens(balances);
    if (!swapBalances) {
      return;
    }
    await SwapController.getInitialGasPrice();
    SwapController.setBalances(swapBalances);
  },
  setBalances(balances) {
    const { networkAddress } = SwapController.getParams();
    const caipNetwork = ChainController.state.activeCaipNetwork;
    if (!caipNetwork) {
      return;
    }
    const networkToken = balances.find((token) => token.address === networkAddress);
    balances.forEach((token) => {
      state4.tokensPriceMap[token.address] = token.price || 0;
    });
    state4.myTokensWithBalance = balances.filter((token) => token.address.startsWith(caipNetwork.caipNetworkId));
    state4.networkBalanceInUSD = networkToken ? NumberUtil.multiply(networkToken.quantity.numeric, networkToken.price).toString() : "0";
  },
  async getInitialGasPrice() {
    const res = await SwapApiUtil.fetchGasPrice();
    if (!res) {
      return { gasPrice: null, gasPriceInUSD: null };
    }
    switch (ChainController.state?.activeCaipNetwork?.chainNamespace) {
      case ConstantsUtil.CHAIN.SOLANA:
        state4.gasFee = res.standard ?? "0";
        state4.gasPriceInUSD = NumberUtil.multiply(res.standard, state4.networkPrice).div(1e9).toNumber();
        return {
          gasPrice: BigInt(state4.gasFee),
          gasPriceInUSD: Number(state4.gasPriceInUSD)
        };
      case ConstantsUtil.CHAIN.EVM:
      default:
        const value = res.standard ?? "0";
        const gasFee = BigInt(value);
        const gasLimit = BigInt(INITIAL_GAS_LIMIT);
        const gasPrice = SwapCalculationUtil.getGasPriceInUSD(state4.networkPrice, gasLimit, gasFee);
        state4.gasFee = value;
        state4.gasPriceInUSD = gasPrice;
        return { gasPrice: gasFee, gasPriceInUSD: gasPrice };
    }
  },
  // -- Swap -------------------------------------- //
  async swapTokens() {
    const address = ChainController.getAccountData()?.address;
    const sourceToken = state4.sourceToken;
    const toToken = state4.toToken;
    const haveSourceTokenAmount = NumberUtil.bigNumber(state4.sourceTokenAmount).gt(0);
    if (!haveSourceTokenAmount) {
      SwapController.setToTokenAmount("");
    }
    if (!toToken || !sourceToken || state4.loadingPrices || !haveSourceTokenAmount || !address) {
      return;
    }
    state4.loadingQuote = true;
    const amountDecimal = NumberUtil.bigNumber(state4.sourceTokenAmount).times(10 ** sourceToken.decimals).round(0);
    try {
      const quoteResponse = await BlockchainApiController.fetchSwapQuote({
        userAddress: address,
        from: sourceToken.address,
        to: toToken.address,
        gasPrice: state4.gasFee,
        amount: amountDecimal.toString()
      });
      state4.loadingQuote = false;
      const quoteToAmount = quoteResponse?.quotes?.[0]?.toAmount;
      if (!quoteToAmount) {
        AlertController.open({
          displayMessage: "Incorrect amount",
          debugMessage: "Please enter a valid amount"
        }, "error");
        return;
      }
      const toTokenAmount = NumberUtil.bigNumber(quoteToAmount).div(10 ** toToken.decimals).toString();
      SwapController.setToTokenAmount(toTokenAmount);
      const isInsufficientToken = SwapController.hasInsufficientToken(state4.sourceTokenAmount, sourceToken.address);
      if (isInsufficientToken) {
        state4.inputError = "Insufficient balance";
      } else {
        state4.inputError = void 0;
        SwapController.setTransactionDetails();
      }
    } catch (error) {
      const response = await SwapApiUtil.handleSwapError(error);
      state4.loadingQuote = false;
      state4.inputError = response || "Insufficient balance";
    }
  },
  // -- Create Transactions -------------------------------------- //
  async getTransaction() {
    const { fromCaipAddress, availableToSwap } = SwapController.getParams();
    const sourceToken = state4.sourceToken;
    const toToken = state4.toToken;
    if (!fromCaipAddress || !availableToSwap || !sourceToken || !toToken || state4.loadingQuote) {
      return void 0;
    }
    try {
      state4.loadingBuildTransaction = true;
      const hasAllowance = await SwapApiUtil.fetchSwapAllowance({
        userAddress: fromCaipAddress,
        tokenAddress: sourceToken.address,
        sourceTokenAmount: state4.sourceTokenAmount,
        sourceTokenDecimals: sourceToken.decimals
      });
      let transaction = void 0;
      if (hasAllowance) {
        transaction = await SwapController.createSwapTransaction();
      } else {
        transaction = await SwapController.createAllowanceTransaction();
      }
      state4.loadingBuildTransaction = false;
      state4.fetchError = false;
      return transaction;
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to check allowance");
      state4.loadingBuildTransaction = false;
      state4.approvalTransaction = void 0;
      state4.swapTransaction = void 0;
      state4.fetchError = true;
      return void 0;
    }
  },
  async createAllowanceTransaction() {
    const { fromCaipAddress, sourceTokenAddress, toTokenAddress } = SwapController.getParams();
    if (!fromCaipAddress || !toTokenAddress) {
      return void 0;
    }
    if (!sourceTokenAddress) {
      throw new Error("createAllowanceTransaction - No source token address found.");
    }
    try {
      const response = await BlockchainApiController.generateApproveCalldata({
        from: sourceTokenAddress,
        to: toTokenAddress,
        userAddress: fromCaipAddress
      });
      const address = CoreHelperUtil.getPlainAddress(response.tx.from);
      if (!address) {
        throw new Error("SwapController:createAllowanceTransaction - address is required");
      }
      const transaction = {
        data: response.tx.data,
        to: address,
        gasPrice: BigInt(response.tx.eip155.gasPrice),
        value: BigInt(response.tx.value),
        toAmount: state4.toTokenAmount
      };
      state4.swapTransaction = void 0;
      state4.approvalTransaction = {
        data: transaction.data,
        to: transaction.to,
        gasPrice: transaction.gasPrice,
        value: transaction.value,
        toAmount: transaction.toAmount
      };
      return {
        data: transaction.data,
        to: transaction.to,
        gasPrice: transaction.gasPrice,
        value: transaction.value,
        toAmount: transaction.toAmount
      };
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to create approval transaction");
      state4.approvalTransaction = void 0;
      state4.swapTransaction = void 0;
      state4.fetchError = true;
      return void 0;
    }
  },
  async createSwapTransaction() {
    const { networkAddress, fromCaipAddress, sourceTokenAmount } = SwapController.getParams();
    const sourceToken = state4.sourceToken;
    const toToken = state4.toToken;
    if (!fromCaipAddress || !sourceTokenAmount || !sourceToken || !toToken) {
      return void 0;
    }
    const amount = ConnectionController.parseUnits(sourceTokenAmount, sourceToken.decimals)?.toString();
    try {
      const response = await BlockchainApiController.generateSwapCalldata({
        userAddress: fromCaipAddress,
        from: sourceToken.address,
        to: toToken.address,
        amount,
        disableEstimate: true
      });
      const isSourceTokenIsNetworkToken = sourceToken.address === networkAddress;
      const gas = BigInt(response.tx.eip155.gas);
      const gasPrice = BigInt(response.tx.eip155.gasPrice);
      const address = CoreHelperUtil.getPlainAddress(response.tx.to);
      if (!address) {
        throw new Error("SwapController:createSwapTransaction - address is required");
      }
      const transaction = {
        data: response.tx.data,
        to: address,
        gas,
        gasPrice,
        value: isSourceTokenIsNetworkToken ? BigInt(amount ?? "0") : BigInt("0"),
        toAmount: state4.toTokenAmount
      };
      state4.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state4.networkPrice, gas, gasPrice);
      state4.approvalTransaction = void 0;
      state4.swapTransaction = transaction;
      return transaction;
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to create transaction");
      state4.approvalTransaction = void 0;
      state4.swapTransaction = void 0;
      state4.fetchError = true;
      return void 0;
    }
  },
  onEmbeddedWalletApprovalSuccess() {
    SnackController.showLoading("Approve limit increase in your wallet");
    RouterController.replace("SwapPreview");
  },
  // -- Send Transactions --------------------------------- //
  async sendTransactionForApproval(data) {
    const { fromAddress, isAuthConnector } = SwapController.getParams();
    state4.loadingApprovalTransaction = true;
    const approveLimitMessage = `Approve limit increase in your wallet`;
    if (isAuthConnector) {
      RouterController.pushTransactionStack({
        onSuccess: SwapController.onEmbeddedWalletApprovalSuccess
      });
    } else {
      SnackController.showLoading(approveLimitMessage);
    }
    try {
      await ConnectionController.sendTransaction({
        address: fromAddress,
        to: data.to,
        data: data.data,
        value: data.value,
        chainNamespace: ConstantsUtil.CHAIN.EVM
      });
      await SwapController.swapTokens();
      await SwapController.getTransaction();
      state4.approvalTransaction = void 0;
      state4.loadingApprovalTransaction = false;
    } catch (err) {
      const error = err;
      state4.transactionError = error?.displayMessage;
      state4.loadingApprovalTransaction = false;
      SnackController.showError(error?.displayMessage || "Transaction error");
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_APPROVAL_ERROR",
        properties: {
          message: error?.displayMessage || error?.message || "Unknown",
          network: ChainController.state.activeCaipNetwork?.caipNetworkId || "",
          swapFromToken: SwapController.state.sourceToken?.symbol || "",
          swapToToken: SwapController.state.toToken?.symbol || "",
          swapFromAmount: SwapController.state.sourceTokenAmount || "",
          swapToAmount: SwapController.state.toTokenAmount || "",
          isSmartAccount: getPreferredAccountType(ConstantsUtil.CHAIN.EVM) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
    }
  },
  async sendTransactionForSwap(data) {
    if (!data) {
      return void 0;
    }
    const { fromAddress, toTokenAmount, isAuthConnector } = SwapController.getParams();
    state4.loadingTransaction = true;
    const snackbarPendingMessage = `Swapping ${state4.sourceToken?.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${state4.toToken?.symbol}`;
    const snackbarSuccessMessage = `Swapped ${state4.sourceToken?.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${state4.toToken?.symbol}`;
    if (isAuthConnector) {
      RouterController.pushTransactionStack({
        onSuccess() {
          RouterController.replace("Account");
          SnackController.showLoading(snackbarPendingMessage);
          controller4.resetState();
        }
      });
    } else {
      SnackController.showLoading("Confirm transaction in your wallet");
    }
    try {
      const forceUpdateAddresses = [state4.sourceToken?.address, state4.toToken?.address].join(",");
      const transactionHash = await ConnectionController.sendTransaction({
        address: fromAddress,
        to: data.to,
        data: data.data,
        value: data.value,
        chainNamespace: ConstantsUtil.CHAIN.EVM
      });
      state4.loadingTransaction = false;
      SnackController.showSuccess(snackbarSuccessMessage);
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_SUCCESS",
        properties: {
          network: ChainController.state.activeCaipNetwork?.caipNetworkId || "",
          swapFromToken: SwapController.state.sourceToken?.symbol || "",
          swapToToken: SwapController.state.toToken?.symbol || "",
          swapFromAmount: SwapController.state.sourceTokenAmount || "",
          swapToAmount: SwapController.state.toTokenAmount || "",
          isSmartAccount: getPreferredAccountType(ConstantsUtil.CHAIN.EVM) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
      controller4.resetState();
      if (!isAuthConnector) {
        RouterController.replace("Account");
      }
      controller4.getMyTokensWithBalance(forceUpdateAddresses);
      return transactionHash;
    } catch (err) {
      const error = err;
      state4.transactionError = error?.displayMessage;
      state4.loadingTransaction = false;
      SnackController.showError(error?.displayMessage || "Transaction error");
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_ERROR",
        properties: {
          message: error?.displayMessage || error?.message || "Unknown",
          network: ChainController.state.activeCaipNetwork?.caipNetworkId || "",
          swapFromToken: SwapController.state.sourceToken?.symbol || "",
          swapToToken: SwapController.state.toToken?.symbol || "",
          swapFromAmount: SwapController.state.sourceTokenAmount || "",
          swapToAmount: SwapController.state.toTokenAmount || "",
          isSmartAccount: getPreferredAccountType(ConstantsUtil.CHAIN.EVM) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
      return void 0;
    }
  },
  // -- Checks -------------------------------------------- //
  hasInsufficientToken(sourceTokenAmount, sourceTokenAddress) {
    const isInsufficientSourceTokenForSwap = SwapCalculationUtil.isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, state4.myTokensWithBalance);
    return isInsufficientSourceTokenForSwap;
  },
  // -- Calculations -------------------------------------- //
  setTransactionDetails() {
    const { toTokenAddress, toTokenDecimals } = SwapController.getParams();
    if (!toTokenAddress || !toTokenDecimals) {
      return;
    }
    state4.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state4.networkPrice, BigInt(state4.gasFee), BigInt(INITIAL_GAS_LIMIT));
    state4.priceImpact = SwapCalculationUtil.getPriceImpact({
      sourceTokenAmount: state4.sourceTokenAmount,
      sourceTokenPriceInUSD: state4.sourceTokenPriceInUSD,
      toTokenPriceInUSD: state4.toTokenPriceInUSD,
      toTokenAmount: state4.toTokenAmount
    });
    state4.maxSlippage = SwapCalculationUtil.getMaxSlippage(state4.slippage, state4.toTokenAmount);
    state4.providerFee = SwapCalculationUtil.getProviderFee(state4.sourceTokenAmount);
  }
};
var SwapController = withErrorBoundary(controller4);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/TooltipController.js
var state5 = proxy({
  message: "",
  open: false,
  triggerRect: {
    width: 0,
    height: 0,
    top: 0,
    left: 0
  },
  variant: "shade"
});
var controller5 = {
  state: state5,
  subscribe(callback) {
    return subscribe(state5, () => callback(state5));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state5, key, callback);
  },
  showTooltip({ message, triggerRect, variant }) {
    state5.open = true;
    state5.message = message;
    state5.triggerRect = triggerRect;
    state5.variant = variant;
  },
  hide() {
    state5.open = false;
    state5.message = "";
    state5.triggerRect = {
      width: 0,
      height: 0,
      top: 0,
      left: 0
    };
  }
};
var TooltipController = withErrorBoundary(controller5);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsStateController.js
var state6 = proxy({
  isLegalCheckboxChecked: false
});
var OptionsStateController = {
  state: state6,
  subscribe(callback) {
    return subscribe(state6, () => callback(state6));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state6, key, callback);
  },
  setIsLegalCheckboxChecked(isLegalCheckboxChecked) {
    state6.isLegalCheckboxChecked = isLegalCheckboxChecked;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ExchangeUtil.js
var CHAIN_ASSET_INFO_MAP = {
  eip155: {
    native: { assetNamespace: "slip44", assetReference: "60" },
    defaultTokenNamespace: "erc20"
  },
  solana: {
    native: { assetNamespace: "slip44", assetReference: "501" },
    defaultTokenNamespace: "token"
  }
};
var JsonRpcError = class extends Error {
};
function getApiUrl() {
  const { sdkType, sdkVersion, projectId } = OptionsController.getSnapshot();
  const url = new URL("https://rpc.walletconnect.org/v1/json-rpc");
  url.searchParams.set("projectId", projectId);
  url.searchParams.set("st", sdkType);
  url.searchParams.set("sv", sdkVersion);
  url.searchParams.set("source", "fund-wallet");
  return url.toString();
}
async function sendRequest(method, params) {
  const url = getApiUrl();
  const { projectId } = OptionsController.getSnapshot();
  const requestBody = {
    jsonrpc: "2.0",
    id: 1,
    method,
    params: {
      ...params || {},
      projectId
    }
  };
  const response = await fetch(url, {
    method: "POST",
    body: JSON.stringify(requestBody),
    headers: { "Content-Type": "application/json" }
  });
  const json = await response.json();
  if (json.error) {
    throw new JsonRpcError(json.error.message);
  }
  return json;
}
async function getExchanges(params) {
  const response = await sendRequest("reown_getExchanges", params);
  return response.result;
}
async function getPayUrl(params) {
  const response = await sendRequest("reown_getExchangePayUrl", params);
  return response.result;
}
async function getBuyStatus(params) {
  const response = await sendRequest("reown_getExchangeBuyStatus", params);
  return response.result;
}
function formatCaip19Asset(caipNetworkId, asset) {
  const { chainNamespace, chainId } = ParseUtil.parseCaipNetworkId(caipNetworkId);
  const chainInfo = CHAIN_ASSET_INFO_MAP[chainNamespace];
  if (!chainInfo) {
    throw new Error(`Unsupported chain namespace for CAIP-19 formatting: ${chainNamespace}`);
  }
  let assetNamespace = chainInfo.native.assetNamespace;
  let assetReference = chainInfo.native.assetReference;
  if (asset !== "native") {
    assetNamespace = chainInfo.defaultTokenNamespace;
    assetReference = asset;
  }
  const networkPart = `${chainNamespace}:${chainId}`;
  return `${networkPart}/${assetNamespace}:${assetReference}`;
}
var ethereumETH = {
  network: "eip155:1",
  asset: "native",
  metadata: {
    name: "Ethereum",
    symbol: "ETH",
    decimals: 18
  }
};
var baseETH = {
  network: "eip155:8453",
  asset: "native",
  metadata: {
    name: "Ethereum",
    symbol: "ETH",
    decimals: 18
  }
};
var baseUSDC = {
  network: "eip155:8453",
  asset: "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
  metadata: {
    name: "USD Coin",
    symbol: "USDC",
    decimals: 6
  }
};
var baseSepoliaUSDC = {
  network: "eip155:84532",
  asset: "0x036CbD53842c5426634e7929541eC2318f3dCF7e",
  metadata: {
    name: "USD Coin",
    symbol: "USDC",
    decimals: 6
  }
};
var baseSepoliaETH = {
  network: "eip155:84532",
  asset: "native",
  metadata: {
    name: "Ethereum",
    symbol: "ETH",
    decimals: 18
  }
};
var ethereumUSDC = {
  network: "eip155:1",
  asset: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
  metadata: {
    name: "USD Coin",
    symbol: "USDC",
    decimals: 6
  }
};
var arbitrumUSDC = {
  network: "eip155:42161",
  asset: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
  metadata: {
    name: "USD Coin",
    symbol: "USDC",
    decimals: 6
  }
};
var polygonUSDC = {
  network: "eip155:137",
  asset: "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
  metadata: {
    name: "USD Coin",
    symbol: "USDC",
    decimals: 6
  }
};
var solanaUSDC = {
  network: "solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp",
  asset: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
  metadata: {
    name: "USD Coin",
    symbol: "USDC",
    decimals: 6
  }
};
var ethereumUSDT = {
  network: "eip155:1",
  asset: "0xdAC17F958D2ee523a2206206994597C13D831ec7",
  metadata: {
    name: "Tether USD",
    symbol: "USDT",
    decimals: 6
  }
};
var optimismUSDT = {
  network: "eip155:10",
  asset: "0x94b008aA00579c1307B0EF2c499aD98a8ce58e58",
  metadata: {
    name: "Tether USD",
    symbol: "USDT",
    decimals: 6
  }
};
var arbitrumUSDT = {
  network: "eip155:42161",
  asset: "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
  metadata: {
    name: "Tether USD",
    symbol: "USDT",
    decimals: 6
  }
};
var polygonUSDT = {
  network: "eip155:137",
  asset: "0xc2132d05d31c914a87c6611c10748aeb04b58e8f",
  metadata: {
    name: "Tether USD",
    symbol: "USDT",
    decimals: 6
  }
};
var solanaUSDT = {
  network: "solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp",
  asset: "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB",
  metadata: {
    name: "Tether USD",
    symbol: "USDT",
    decimals: 6
  }
};
var solanaSOL = {
  network: "solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp",
  asset: "native",
  metadata: {
    name: "Solana",
    symbol: "SOL",
    decimals: 9
  }
};
var assets = {
  ethereumETH,
  baseETH,
  baseUSDC,
  baseSepoliaETH,
  ethereumUSDC,
  arbitrumUSDC,
  polygonUSDC,
  solanaUSDC,
  ethereumUSDT,
  optimismUSDT,
  arbitrumUSDT,
  polygonUSDT,
  solanaUSDT,
  solanaSOL
};
function getPaymentAssetsForNetwork(network) {
  return Object.values(assets).filter((asset) => asset.network === network);
}

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ExchangeController.js
var DEFAULT_PAGE = 0;
var DEFAULT_STATE = {
  paymentAsset: null,
  amount: null,
  tokenAmount: 0,
  priceLoading: false,
  error: null,
  exchanges: [],
  isLoading: false,
  currentPayment: void 0,
  isPaymentInProgress: false,
  paymentId: "",
  assets: []
};
var state7 = proxy(DEFAULT_STATE);
var ExchangeController = {
  state: state7,
  // -- Subscriptions ----------------------------------- //
  subscribe(callback) {
    return subscribe(state7, () => callback(state7));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state7, key, callback);
  },
  resetState() {
    Object.assign(state7, { ...DEFAULT_STATE });
  },
  async getAssetsForNetwork(network) {
    const assets2 = getPaymentAssetsForNetwork(network);
    const metadata = await ExchangeController.getAssetsImageAndPrice(assets2);
    const assetsWithPrice = assets2.map((asset) => {
      const assetAddress = asset.asset === "native" ? getActiveNetworkTokenAddress() : `${asset.network}:${asset.asset}`;
      const assetMetadata = metadata.find((m3) => m3.fungibles?.[0]?.address?.toLowerCase() === assetAddress.toLowerCase());
      return {
        ...asset,
        price: assetMetadata?.fungibles?.[0]?.price || 1,
        metadata: {
          ...asset.metadata,
          iconUrl: assetMetadata?.fungibles?.[0]?.iconUrl
        }
      };
    });
    state7.assets = assetsWithPrice;
    return assetsWithPrice;
  },
  async getAssetsImageAndPrice(assets2) {
    const addresses = assets2.map((asset) => asset.asset === "native" ? getActiveNetworkTokenAddress() : `${asset.network}:${asset.asset}`);
    const metadata = await Promise.all(addresses.map((address) => BlockchainApiController.fetchTokenPrice({ addresses: [address] })));
    return metadata;
  },
  getTokenAmount() {
    if (!state7?.paymentAsset?.price) {
      throw new Error("Cannot get token price");
    }
    const bigAmount = NumberUtil.bigNumber(state7.amount ?? 0).round(8);
    const bigPrice = NumberUtil.bigNumber(state7.paymentAsset.price).round(8);
    return bigAmount.div(bigPrice).round(8).toNumber();
  },
  setAmount(amount) {
    state7.amount = amount;
    if (state7.paymentAsset?.price) {
      state7.tokenAmount = ExchangeController.getTokenAmount();
    }
  },
  setPaymentAsset(asset) {
    state7.paymentAsset = asset;
  },
  isPayWithExchangeEnabled() {
    return OptionsController.state.remoteFeatures?.payWithExchange;
  },
  isPayWithExchangeSupported() {
    return ExchangeController.isPayWithExchangeEnabled() && ChainController.state.activeCaipNetwork && ConstantsUtil2.PAY_WITH_EXCHANGE_SUPPORTED_CHAIN_NAMESPACES.includes(ChainController.state.activeCaipNetwork.chainNamespace);
  },
  // -- Getters ----------------------------------------- //
  async fetchExchanges() {
    try {
      const isPayWithExchangeSupported = ExchangeController.isPayWithExchangeSupported();
      if (!state7.paymentAsset || !isPayWithExchangeSupported) {
        state7.exchanges = [];
        state7.isLoading = false;
        return;
      }
      state7.isLoading = true;
      const response = await getExchanges({
        page: DEFAULT_PAGE,
        asset: formatCaip19Asset(state7.paymentAsset.network, state7.paymentAsset.asset),
        amount: state7.amount?.toString() ?? "0"
      });
      state7.exchanges = response.exchanges.slice(0, 2);
    } catch (error) {
      SnackController.showError("Unable to get exchanges");
      throw new Error("Unable to get exchanges");
    } finally {
      state7.isLoading = false;
    }
  },
  async getPayUrl(exchangeId, params) {
    try {
      const numericAmount = Number(params.amount);
      const response = await getPayUrl({
        exchangeId,
        asset: formatCaip19Asset(params.network, params.asset),
        amount: numericAmount.toString(),
        recipient: `${params.network}:${params.recipient}`
      });
      EventsController.sendEvent({
        type: "track",
        event: "PAY_EXCHANGE_SELECTED",
        properties: {
          exchange: {
            id: exchangeId
          },
          configuration: {
            network: params.network,
            asset: params.asset,
            recipient: params.recipient,
            amount: numericAmount
          },
          currentPayment: {
            type: "exchange",
            exchangeId
          },
          source: "fund-from-exchange",
          headless: false
        }
      });
      return response;
    } catch (error) {
      if (error instanceof Error && error.message.includes("is not supported")) {
        throw new Error("Asset not supported");
      }
      throw new Error(error.message);
    }
  },
  async handlePayWithExchange(exchangeId) {
    try {
      const address = ChainController.getAccountData()?.address;
      if (!address) {
        throw new Error("No account connected");
      }
      if (!state7.paymentAsset) {
        throw new Error("No payment asset selected");
      }
      const popupWindow = CoreHelperUtil.returnOpenHref("", "popupWindow", "scrollbar=yes,width=480,height=720");
      if (!popupWindow) {
        throw new Error("Could not create popup window");
      }
      state7.isPaymentInProgress = true;
      state7.paymentId = crypto.randomUUID();
      state7.currentPayment = {
        type: "exchange",
        exchangeId
      };
      const { network, asset } = state7.paymentAsset;
      const payUrlParams = {
        network,
        asset,
        amount: state7.tokenAmount,
        recipient: address
      };
      const payUrl = await ExchangeController.getPayUrl(exchangeId, payUrlParams);
      if (!payUrl) {
        try {
          popupWindow.close();
        } catch (err) {
          console.error("Unable to close popup window", err);
        }
        throw new Error("Unable to initiate payment");
      }
      state7.currentPayment.sessionId = payUrl.sessionId;
      state7.currentPayment.status = "IN_PROGRESS";
      state7.currentPayment.exchangeId = exchangeId;
      popupWindow.location.href = payUrl.url;
    } catch (error) {
      state7.error = "Unable to initiate payment";
      SnackController.showError(state7.error);
    }
  },
  async waitUntilComplete({ exchangeId, sessionId, paymentId, retries = 20 }) {
    const status = await ExchangeController.getBuyStatus(exchangeId, sessionId, paymentId);
    if (status.status === "SUCCESS" || status.status === "FAILED") {
      return status;
    }
    if (retries === 0) {
      throw new Error("Unable to get deposit status");
    }
    await new Promise((resolve) => {
      setTimeout(resolve, 5e3);
    });
    return ExchangeController.waitUntilComplete({
      exchangeId,
      sessionId,
      paymentId,
      retries: retries - 1
    });
  },
  async getBuyStatus(exchangeId, sessionId, paymentId) {
    try {
      if (!state7.currentPayment) {
        throw new Error("No current payment");
      }
      const status = await getBuyStatus({ sessionId, exchangeId });
      state7.currentPayment.status = status.status;
      if (status.status === "SUCCESS" || status.status === "FAILED") {
        const address = ChainController.getAccountData()?.address;
        state7.currentPayment.result = status.txHash;
        state7.isPaymentInProgress = false;
        EventsController.sendEvent({
          type: "track",
          event: status.status === "SUCCESS" ? "PAY_SUCCESS" : "PAY_ERROR",
          properties: {
            message: status.status === "FAILED" ? CoreHelperUtil.parseError(state7.error) : void 0,
            source: "fund-from-exchange",
            paymentId,
            configuration: {
              network: state7.paymentAsset?.network || "",
              asset: state7.paymentAsset?.asset || "",
              recipient: address || "",
              amount: state7.amount ?? 0
            },
            currentPayment: {
              type: "exchange",
              exchangeId: state7.currentPayment?.exchangeId,
              sessionId: state7.currentPayment?.sessionId,
              result: status.txHash
            }
          }
        });
      }
      return status;
    } catch (error) {
      return {
        status: "UNKNOWN",
        txHash: ""
      };
    }
  },
  reset() {
    state7.currentPayment = void 0;
    state7.isPaymentInProgress = false;
    state7.paymentId = "";
    state7.paymentAsset = null;
    state7.amount = 0;
    state7.tokenAmount = 0;
    state7.priceLoading = false;
    state7.error = null;
    state7.exchanges = [];
    state7.isLoading = false;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ModalUtil.js
var ModalUtil = {
  isUnsupportedChainView() {
    return RouterController.state.view === "UnsupportedChain" || RouterController.state.view === "SwitchNetwork" && RouterController.state.history.includes("UnsupportedChain");
  },
  async safeClose() {
    if (this.isUnsupportedChainView()) {
      ModalController.shake();
      return;
    }
    const isSIWXCloseDisabled = await SIWXUtil.isSIWXCloseDisabled();
    if (isSIWXCloseDisabled) {
      ModalController.shake();
      return;
    }
    if (RouterController.state.view === "DataCapture" || RouterController.state.view === "DataCaptureOtpConfirm") {
      ConnectionController.disconnect();
    }
    ModalController.close();
  }
};

export {
  OnRampController,
  N2 as N,
  EnsController,
  WcHelpersUtil,
  AdapterBlueprint,
  SIWXUtil,
  WalletConnectConnector,
  AlertController,
  SwapController,
  TooltipController,
  OptionsStateController,
  baseUSDC,
  baseSepoliaUSDC,
  ExchangeController,
  ModalUtil
};
/*! Bundled license information:

@noble/curves/esm/abstract/utils.js:
@noble/curves/esm/abstract/modular.js:
@noble/curves/esm/abstract/curve.js:
@noble/curves/esm/abstract/weierstrass.js:
@noble/curves/esm/_shortw_utils.js:
@noble/curves/esm/secp256k1.js:
@noble/curves/esm/abstract/bls.js:
@noble/curves/esm/abstract/tower.js:
@noble/curves/esm/bls12-381.js:
@noble/curves/esm/abstract/edwards.js:
@noble/curves/esm/abstract/montgomery.js:
@noble/curves/esm/ed25519.js:
@noble/curves/esm/nist.js:
@noble/curves/esm/p256.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/ciphers/esm/utils.js:
@walletconnect/utils/dist/index.js:
  (*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=chunk-AVC7L62Q.js.map
