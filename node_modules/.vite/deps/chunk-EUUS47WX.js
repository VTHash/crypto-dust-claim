import {
  require_events
} from "./chunk-4Z2ZRXRP.js";
import {
  ApiController,
  BalanceUtil,
  BlockchainApiController,
  ChainController,
  ConnectionController,
  ConnectorController,
  ConstantsUtil as ConstantsUtil2,
  CoreHelperUtil,
  D,
  EventsController,
  MELD_PUBLIC_KEY,
  ModalController,
  ONRAMP_PROVIDERS,
  OptionsController,
  ProviderController,
  RouterController,
  SnackController,
  StorageUtil,
  SwapApiUtil,
  W3mFrameRpcConstants,
  X,
  Y,
  getActiveCaipNetwork,
  getActiveNetworkTokenAddress,
  getPreferredAccountType,
  proxy,
  safeJsonParse,
  safeJsonStringify,
  subscribe,
  subscribeKey,
  w,
  withErrorBoundary
} from "./chunk-3SZNDMDM.js";
import {
  hmac
} from "./chunk-MKHIKSHD.js";
import {
  ConstantsUtil,
  DateUtil,
  NumberUtil,
  ParseUtil,
  UserRejectedRequestError
} from "./chunk-FXZREKKU.js";
import {
  SHA256_IV,
  sha256,
  sha384,
  sha512
} from "./chunk-3NIYQQ3T.js";
import {
  keccak_256
} from "./chunk-ZKD6ANST.js";
import {
  Hash,
  abytes,
  add,
  add3H,
  add3L,
  aexists,
  ahash,
  anumber,
  aoutput,
  bytesToHex,
  clean,
  concatBytes,
  createOptHasher,
  createXOFer,
  fromBig,
  hexToBytes,
  isBytes,
  randomBytes,
  rotr,
  rotr32H,
  rotr32L,
  rotrBH,
  rotrBL,
  rotrSH,
  rotrSL,
  swap32IfBE,
  swap8IfBE,
  toBytes,
  u32,
  u8,
  utf8ToBytes
} from "./chunk-VKJLEXYM.js";
import {
  __commonJS,
  __esm,
  __export,
  __reExport,
  __toCommonJS,
  __toESM
} from "./chunk-DI52DQAC.js";

// node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __read: () => __read,
  __rest: () => __rest,
  __spread: () => __spread,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d7, b4) {
  extendStatics(d7, b4);
  function __() {
    this.constructor = d7;
  }
  d7.prototype = b4 === null ? Object.create(b4) : (__.prototype = b4.prototype, new __());
}
function __rest(s2, e2) {
  var t = {};
  for (var p4 in s2) if (Object.prototype.hasOwnProperty.call(s2, p4) && e2.indexOf(p4) < 0)
    t[p4] = s2[p4];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i3 = 0, p4 = Object.getOwnPropertySymbols(s2); i3 < p4.length; i3++) {
      if (e2.indexOf(p4[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p4[i3]))
        t[p4[i3]] = s2[p4[i3]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c6 = arguments.length, r3 = c6 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d7;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r3 = Reflect.decorate(decorators, target, key, desc);
  else for (var i3 = decorators.length - 1; i3 >= 0; i3--) if (d7 = decorators[i3]) r3 = (c6 < 3 ? d7(r3) : c6 > 3 ? d7(target, key, r3) : d7(target, key)) || r3;
  return c6 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P6, generator) {
  function adopt(value) {
    return value instanceof P6 ? value : new P6(function(resolve) {
      resolve(value);
    });
  }
  return new (P6 || (P6 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _3 = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f6, y4, t, g4;
  return g4 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g4[Symbol.iterator] = function() {
    return this;
  }), g4;
  function verb(n4) {
    return function(v6) {
      return step([n4, v6]);
    };
  }
  function step(op) {
    if (f6) throw new TypeError("Generator is already executing.");
    while (_3) try {
      if (f6 = 1, y4 && (t = op[0] & 2 ? y4["return"] : op[0] ? y4["throw"] || ((t = y4["return"]) && t.call(y4), 0) : y4.next) && !(t = t.call(y4, op[1])).done) return t;
      if (y4 = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _3.label++;
          return { value: op[1], done: false };
        case 5:
          _3.label++;
          y4 = op[1];
          op = [0];
          continue;
        case 7:
          op = _3.ops.pop();
          _3.trys.pop();
          continue;
        default:
          if (!(t = _3.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _3 = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _3.label = op[1];
            break;
          }
          if (op[0] === 6 && _3.label < t[1]) {
            _3.label = t[1];
            t = op;
            break;
          }
          if (t && _3.label < t[2]) {
            _3.label = t[2];
            _3.ops.push(op);
            break;
          }
          if (t[2]) _3.ops.pop();
          _3.trys.pop();
          continue;
      }
      op = body.call(thisArg, _3);
    } catch (e2) {
      op = [6, e2];
      y4 = 0;
    } finally {
      f6 = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding(o5, m4, k4, k22) {
  if (k22 === void 0) k22 = k4;
  o5[k22] = m4[k4];
}
function __exportStar(m4, exports) {
  for (var p4 in m4) if (p4 !== "default" && !exports.hasOwnProperty(p4)) exports[p4] = m4[p4];
}
function __values(o5) {
  var s2 = typeof Symbol === "function" && Symbol.iterator, m4 = s2 && o5[s2], i3 = 0;
  if (m4) return m4.call(o5);
  if (o5 && typeof o5.length === "number") return {
    next: function() {
      if (o5 && i3 >= o5.length) o5 = void 0;
      return { value: o5 && o5[i3++], done: !o5 };
    }
  };
  throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o5, n4) {
  var m4 = typeof Symbol === "function" && o5[Symbol.iterator];
  if (!m4) return o5;
  var i3 = m4.call(o5), r3, ar4 = [], e2;
  try {
    while ((n4 === void 0 || n4-- > 0) && !(r3 = i3.next()).done) ar4.push(r3.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m4 = i3["return"])) m4.call(i3);
    } finally {
      if (e2) throw e2.error;
    }
  }
  return ar4;
}
function __spread() {
  for (var ar4 = [], i3 = 0; i3 < arguments.length; i3++)
    ar4 = ar4.concat(__read(arguments[i3]));
  return ar4;
}
function __spreadArrays() {
  for (var s2 = 0, i3 = 0, il = arguments.length; i3 < il; i3++) s2 += arguments[i3].length;
  for (var r3 = Array(s2), k4 = 0, i3 = 0; i3 < il; i3++)
    for (var a3 = arguments[i3], j6 = 0, jl = a3.length; j6 < jl; j6++, k4++)
      r3[k4] = a3[j6];
  return r3;
}
function __await(v6) {
  return this instanceof __await ? (this.v = v6, this) : new __await(v6);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g4 = generator.apply(thisArg, _arguments || []), i3, q2 = [];
  return i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
    return this;
  }, i3;
  function verb(n4) {
    if (g4[n4]) i3[n4] = function(v6) {
      return new Promise(function(a3, b4) {
        q2.push([n4, v6, a3, b4]) > 1 || resume(n4, v6);
      });
    };
  }
  function resume(n4, v6) {
    try {
      step(g4[n4](v6));
    } catch (e2) {
      settle(q2[0][3], e2);
    }
  }
  function step(r3) {
    r3.value instanceof __await ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q2[0][2], r3);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f6, v6) {
    if (f6(v6), q2.shift(), q2.length) resume(q2[0][0], q2[0][1]);
  }
}
function __asyncDelegator(o5) {
  var i3, p4;
  return i3 = {}, verb("next"), verb("throw", function(e2) {
    throw e2;
  }), verb("return"), i3[Symbol.iterator] = function() {
    return this;
  }, i3;
  function verb(n4, f6) {
    i3[n4] = o5[n4] ? function(v6) {
      return (p4 = !p4) ? { value: __await(o5[n4](v6)), done: n4 === "return" } : f6 ? f6(v6) : v6;
    } : f6;
  }
}
function __asyncValues(o5) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m4 = o5[Symbol.asyncIterator], i3;
  return m4 ? m4.call(o5) : (o5 = typeof __values === "function" ? __values(o5) : o5[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
    return this;
  }, i3);
  function verb(n4) {
    i3[n4] = o5[n4] && function(v6) {
      return new Promise(function(resolve, reject) {
        v6 = o5[n4](v6), settle(resolve, reject, v6.done, v6.value);
      });
    };
  }
  function settle(resolve, reject, d7, v6) {
    Promise.resolve(v6).then(function(v7) {
      resolve({ value: v7, done: d7 });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod3) {
  if (mod3 && mod3.__esModule) return mod3;
  var result = {};
  if (mod3 != null) {
    for (var k4 in mod3) if (Object.hasOwnProperty.call(mod3, k4)) result[k4] = mod3[k4];
  }
  result.default = mod3;
  return result;
}
function __importDefault(mod3) {
  return mod3 && mod3.__esModule ? mod3 : { default: mod3 };
}
function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics, __assign;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.js"() {
    extendStatics = function(d7, b4) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d8, b5) {
        d8.__proto__ = b5;
      } || function(d8, b5) {
        for (var p4 in b5) if (b5.hasOwnProperty(p4)) d8[p4] = b5[p4];
      };
      return extendStatics(d7, b4);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s2, i3 = 1, n4 = arguments.length; i3 < n4; i3++) {
          s2 = arguments[i3];
          for (var p4 in s2) if (Object.prototype.hasOwnProperty.call(s2, p4)) t[p4] = s2[p4];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/delay.js
var require_delay = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/delay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delay = void 0;
    function delay(timeout) {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve(true);
        }, timeout);
      });
    }
    exports.delay = delay;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/misc.js
var require_misc = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/misc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_THOUSAND = exports.ONE_HUNDRED = void 0;
    exports.ONE_HUNDRED = 100;
    exports.ONE_THOUSAND = 1e3;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/time.js
var require_time = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/time.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_YEAR = exports.FOUR_WEEKS = exports.THREE_WEEKS = exports.TWO_WEEKS = exports.ONE_WEEK = exports.THIRTY_DAYS = exports.SEVEN_DAYS = exports.FIVE_DAYS = exports.THREE_DAYS = exports.ONE_DAY = exports.TWENTY_FOUR_HOURS = exports.TWELVE_HOURS = exports.SIX_HOURS = exports.THREE_HOURS = exports.ONE_HOUR = exports.SIXTY_MINUTES = exports.THIRTY_MINUTES = exports.TEN_MINUTES = exports.FIVE_MINUTES = exports.ONE_MINUTE = exports.SIXTY_SECONDS = exports.THIRTY_SECONDS = exports.TEN_SECONDS = exports.FIVE_SECONDS = exports.ONE_SECOND = void 0;
    exports.ONE_SECOND = 1;
    exports.FIVE_SECONDS = 5;
    exports.TEN_SECONDS = 10;
    exports.THIRTY_SECONDS = 30;
    exports.SIXTY_SECONDS = 60;
    exports.ONE_MINUTE = exports.SIXTY_SECONDS;
    exports.FIVE_MINUTES = exports.ONE_MINUTE * 5;
    exports.TEN_MINUTES = exports.ONE_MINUTE * 10;
    exports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;
    exports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;
    exports.ONE_HOUR = exports.SIXTY_MINUTES;
    exports.THREE_HOURS = exports.ONE_HOUR * 3;
    exports.SIX_HOURS = exports.ONE_HOUR * 6;
    exports.TWELVE_HOURS = exports.ONE_HOUR * 12;
    exports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;
    exports.ONE_DAY = exports.TWENTY_FOUR_HOURS;
    exports.THREE_DAYS = exports.ONE_DAY * 3;
    exports.FIVE_DAYS = exports.ONE_DAY * 5;
    exports.SEVEN_DAYS = exports.ONE_DAY * 7;
    exports.THIRTY_DAYS = exports.ONE_DAY * 30;
    exports.ONE_WEEK = exports.SEVEN_DAYS;
    exports.TWO_WEEKS = exports.ONE_WEEK * 2;
    exports.THREE_WEEKS = exports.ONE_WEEK * 3;
    exports.FOUR_WEEKS = exports.ONE_WEEK * 4;
    exports.ONE_YEAR = exports.ONE_DAY * 365;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/index.js
var require_constants = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_misc(), exports);
    tslib_1.__exportStar(require_time(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/convert.js
var require_convert = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/convert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromMiliseconds = exports.toMiliseconds = void 0;
    var constants_1 = require_constants();
    function toMiliseconds(seconds) {
      return seconds * constants_1.ONE_THOUSAND;
    }
    exports.toMiliseconds = toMiliseconds;
    function fromMiliseconds(miliseconds) {
      return Math.floor(miliseconds / constants_1.ONE_THOUSAND);
    }
    exports.fromMiliseconds = fromMiliseconds;
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/index.js
var require_utils = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_delay(), exports);
    tslib_1.__exportStar(require_convert(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/watch.js
var require_watch = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Watch = void 0;
    var Watch = class {
      constructor() {
        this.timestamps = /* @__PURE__ */ new Map();
      }
      start(label) {
        if (this.timestamps.has(label)) {
          throw new Error(`Watch already started for label: ${label}`);
        }
        this.timestamps.set(label, { started: Date.now() });
      }
      stop(label) {
        const timestamp = this.get(label);
        if (typeof timestamp.elapsed !== "undefined") {
          throw new Error(`Watch already stopped for label: ${label}`);
        }
        const elapsed = Date.now() - timestamp.started;
        this.timestamps.set(label, { started: timestamp.started, elapsed });
      }
      get(label) {
        const timestamp = this.timestamps.get(label);
        if (typeof timestamp === "undefined") {
          throw new Error(`No timestamp found for label: ${label}`);
        }
        return timestamp;
      }
      elapsed(label) {
        const timestamp = this.get(label);
        const elapsed = timestamp.elapsed || Date.now() - timestamp.started;
        return elapsed;
      }
    };
    exports.Watch = Watch;
    exports.default = Watch;
  }
});

// node_modules/@walletconnect/time/dist/cjs/types/watch.js
var require_watch2 = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/types/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IWatch = void 0;
    var IWatch = class {
    };
    exports.IWatch = IWatch;
  }
});

// node_modules/@walletconnect/time/dist/cjs/types/index.js
var require_types = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/types/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_watch2(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_utils(), exports);
    tslib_1.__exportStar(require_watch(), exports);
    tslib_1.__exportStar(require_types(), exports);
    tslib_1.__exportStar(require_constants(), exports);
  }
});

// node_modules/@walletconnect/window-getters/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/@walletconnect/window-getters/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
    function getFromWindow(name2) {
      let res = void 0;
      if (typeof window !== "undefined" && typeof window[name2] !== "undefined") {
        res = window[name2];
      }
      return res;
    }
    exports.getFromWindow = getFromWindow;
    function getFromWindowOrThrow(name2) {
      const res = getFromWindow(name2);
      if (!res) {
        throw new Error(`${name2} is not defined in Window`);
      }
      return res;
    }
    exports.getFromWindowOrThrow = getFromWindowOrThrow;
    function getDocumentOrThrow() {
      return getFromWindowOrThrow("document");
    }
    exports.getDocumentOrThrow = getDocumentOrThrow;
    function getDocument() {
      return getFromWindow("document");
    }
    exports.getDocument = getDocument;
    function getNavigatorOrThrow() {
      return getFromWindowOrThrow("navigator");
    }
    exports.getNavigatorOrThrow = getNavigatorOrThrow;
    function getNavigator() {
      return getFromWindow("navigator");
    }
    exports.getNavigator = getNavigator;
    function getLocationOrThrow() {
      return getFromWindowOrThrow("location");
    }
    exports.getLocationOrThrow = getLocationOrThrow;
    function getLocation() {
      return getFromWindow("location");
    }
    exports.getLocation = getLocation;
    function getCryptoOrThrow() {
      return getFromWindowOrThrow("crypto");
    }
    exports.getCryptoOrThrow = getCryptoOrThrow;
    function getCrypto() {
      return getFromWindow("crypto");
    }
    exports.getCrypto = getCrypto;
    function getLocalStorageOrThrow() {
      return getFromWindowOrThrow("localStorage");
    }
    exports.getLocalStorageOrThrow = getLocalStorageOrThrow;
    function getLocalStorage() {
      return getFromWindow("localStorage");
    }
    exports.getLocalStorage = getLocalStorage;
  }
});

// node_modules/@walletconnect/window-metadata/dist/cjs/index.js
var require_cjs3 = __commonJS({
  "node_modules/@walletconnect/window-metadata/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWindowMetadata = void 0;
    var window_getters_1 = require_cjs2();
    function getWindowMetadata() {
      let doc;
      let loc;
      try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
      } catch (e2) {
        return null;
      }
      function getIcons() {
        const links = doc.getElementsByTagName("link");
        const icons2 = [];
        for (let i3 = 0; i3 < links.length; i3++) {
          const link = links[i3];
          const rel = link.getAttribute("rel");
          if (rel) {
            if (rel.toLowerCase().indexOf("icon") > -1) {
              const href = link.getAttribute("href");
              if (href) {
                if (href.toLowerCase().indexOf("https:") === -1 && href.toLowerCase().indexOf("http:") === -1 && href.indexOf("//") !== 0) {
                  let absoluteHref = loc.protocol + "//" + loc.host;
                  if (href.indexOf("/") === 0) {
                    absoluteHref += href;
                  } else {
                    const path2 = loc.pathname.split("/");
                    path2.pop();
                    const finalPath = path2.join("/");
                    absoluteHref += finalPath + "/" + href;
                  }
                  icons2.push(absoluteHref);
                } else if (href.indexOf("//") === 0) {
                  const absoluteUrl = loc.protocol + href;
                  icons2.push(absoluteUrl);
                } else {
                  icons2.push(href);
                }
              }
            }
          }
        }
        return icons2;
      }
      function getWindowMetadataOfAny(...args) {
        const metaTags = doc.getElementsByTagName("meta");
        for (let i3 = 0; i3 < metaTags.length; i3++) {
          const tag2 = metaTags[i3];
          const attributes = ["itemprop", "property", "name"].map((target) => tag2.getAttribute(target)).filter((attr) => {
            if (attr) {
              return args.includes(attr);
            }
            return false;
          });
          if (attributes.length && attributes) {
            const content = tag2.getAttribute("content");
            if (content) {
              return content;
            }
          }
        }
        return "";
      }
      function getName() {
        let name3 = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
        if (!name3) {
          name3 = doc.title;
        }
        return name3;
      }
      function getDescription() {
        const description2 = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
        return description2;
      }
      const name2 = getName();
      const description = getDescription();
      const url = loc.origin;
      const icons = getIcons();
      const meta = {
        description,
        url,
        icons,
        name: name2
      };
      return meta;
    }
    exports.getWindowMetadata = getWindowMetadata;
  }
});

// node_modules/blakejs/util.js
var require_util = __commonJS({
  "node_modules/blakejs/util.js"(exports, module) {
    var ERROR_MSG_INPUT = "Input must be an string, Buffer or Uint8Array";
    function normalizeInput(input) {
      let ret;
      if (input instanceof Uint8Array) {
        ret = input;
      } else if (typeof input === "string") {
        const encoder4 = new TextEncoder();
        ret = encoder4.encode(input);
      } else {
        throw new Error(ERROR_MSG_INPUT);
      }
      return ret;
    }
    function toHex5(bytes) {
      return Array.prototype.map.call(bytes, function(n4) {
        return (n4 < 16 ? "0" : "") + n4.toString(16);
      }).join("");
    }
    function uint32ToHex(val) {
      return (4294967296 + val).toString(16).substring(1);
    }
    function debugPrint(label, arr, size3) {
      let msg = "\n" + label + " = ";
      for (let i3 = 0; i3 < arr.length; i3 += 2) {
        if (size3 === 32) {
          msg += uint32ToHex(arr[i3]).toUpperCase();
          msg += " ";
          msg += uint32ToHex(arr[i3 + 1]).toUpperCase();
        } else if (size3 === 64) {
          msg += uint32ToHex(arr[i3 + 1]).toUpperCase();
          msg += uint32ToHex(arr[i3]).toUpperCase();
        } else throw new Error("Invalid size " + size3);
        if (i3 % 6 === 4) {
          msg += "\n" + new Array(label.length + 4).join(" ");
        } else if (i3 < arr.length - 2) {
          msg += " ";
        }
      }
      console.log(msg);
    }
    function testSpeed(hashFn, N12, M5) {
      let startMs = (/* @__PURE__ */ new Date()).getTime();
      const input = new Uint8Array(N12);
      for (let i3 = 0; i3 < N12; i3++) {
        input[i3] = i3 % 256;
      }
      const genMs = (/* @__PURE__ */ new Date()).getTime();
      console.log("Generated random input in " + (genMs - startMs) + "ms");
      startMs = genMs;
      for (let i3 = 0; i3 < M5; i3++) {
        const hashHex = hashFn(input);
        const hashMs = (/* @__PURE__ */ new Date()).getTime();
        const ms3 = hashMs - startMs;
        startMs = hashMs;
        console.log("Hashed in " + ms3 + "ms: " + hashHex.substring(0, 20) + "...");
        console.log(
          Math.round(N12 / (1 << 20) / (ms3 / 1e3) * 100) / 100 + " MB PER SECOND"
        );
      }
    }
    module.exports = {
      normalizeInput,
      toHex: toHex5,
      debugPrint,
      testSpeed
    };
  }
});

// node_modules/blakejs/blake2b.js
var require_blake2b = __commonJS({
  "node_modules/blakejs/blake2b.js"(exports, module) {
    var util = require_util();
    function ADD64AA(v7, a3, b4) {
      const o0 = v7[a3] + v7[b4];
      let o1 = v7[a3 + 1] + v7[b4 + 1];
      if (o0 >= 4294967296) {
        o1++;
      }
      v7[a3] = o0;
      v7[a3 + 1] = o1;
    }
    function ADD64AC(v7, a3, b0, b1) {
      let o0 = v7[a3] + b0;
      if (b0 < 0) {
        o0 += 4294967296;
      }
      let o1 = v7[a3 + 1] + b1;
      if (o0 >= 4294967296) {
        o1++;
      }
      v7[a3] = o0;
      v7[a3 + 1] = o1;
    }
    function B2B_GET32(arr, i3) {
      return arr[i3] ^ arr[i3 + 1] << 8 ^ arr[i3 + 2] << 16 ^ arr[i3 + 3] << 24;
    }
    function B2B_G(a3, b4, c6, d7, ix, iy) {
      const x0 = m4[ix];
      const x1 = m4[ix + 1];
      const y0 = m4[iy];
      const y1 = m4[iy + 1];
      ADD64AA(v6, a3, b4);
      ADD64AC(v6, a3, x0, x1);
      let xor0 = v6[d7] ^ v6[a3];
      let xor1 = v6[d7 + 1] ^ v6[a3 + 1];
      v6[d7] = xor1;
      v6[d7 + 1] = xor0;
      ADD64AA(v6, c6, d7);
      xor0 = v6[b4] ^ v6[c6];
      xor1 = v6[b4 + 1] ^ v6[c6 + 1];
      v6[b4] = xor0 >>> 24 ^ xor1 << 8;
      v6[b4 + 1] = xor1 >>> 24 ^ xor0 << 8;
      ADD64AA(v6, a3, b4);
      ADD64AC(v6, a3, y0, y1);
      xor0 = v6[d7] ^ v6[a3];
      xor1 = v6[d7 + 1] ^ v6[a3 + 1];
      v6[d7] = xor0 >>> 16 ^ xor1 << 16;
      v6[d7 + 1] = xor1 >>> 16 ^ xor0 << 16;
      ADD64AA(v6, c6, d7);
      xor0 = v6[b4] ^ v6[c6];
      xor1 = v6[b4 + 1] ^ v6[c6 + 1];
      v6[b4] = xor1 >>> 31 ^ xor0 << 1;
      v6[b4 + 1] = xor0 >>> 31 ^ xor1 << 1;
    }
    var BLAKE2B_IV32 = new Uint32Array([
      4089235720,
      1779033703,
      2227873595,
      3144134277,
      4271175723,
      1013904242,
      1595750129,
      2773480762,
      2917565137,
      1359893119,
      725511199,
      2600822924,
      4215389547,
      528734635,
      327033209,
      1541459225
    ]);
    var SIGMA8 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3
    ];
    var SIGMA82 = new Uint8Array(
      SIGMA8.map(function(x5) {
        return x5 * 2;
      })
    );
    var v6 = new Uint32Array(32);
    var m4 = new Uint32Array(32);
    function blake2bCompress(ctx, last) {
      let i3 = 0;
      for (i3 = 0; i3 < 16; i3++) {
        v6[i3] = ctx.h[i3];
        v6[i3 + 16] = BLAKE2B_IV32[i3];
      }
      v6[24] = v6[24] ^ ctx.t;
      v6[25] = v6[25] ^ ctx.t / 4294967296;
      if (last) {
        v6[28] = ~v6[28];
        v6[29] = ~v6[29];
      }
      for (i3 = 0; i3 < 32; i3++) {
        m4[i3] = B2B_GET32(ctx.b, 4 * i3);
      }
      for (i3 = 0; i3 < 12; i3++) {
        B2B_G(0, 8, 16, 24, SIGMA82[i3 * 16 + 0], SIGMA82[i3 * 16 + 1]);
        B2B_G(2, 10, 18, 26, SIGMA82[i3 * 16 + 2], SIGMA82[i3 * 16 + 3]);
        B2B_G(4, 12, 20, 28, SIGMA82[i3 * 16 + 4], SIGMA82[i3 * 16 + 5]);
        B2B_G(6, 14, 22, 30, SIGMA82[i3 * 16 + 6], SIGMA82[i3 * 16 + 7]);
        B2B_G(0, 10, 20, 30, SIGMA82[i3 * 16 + 8], SIGMA82[i3 * 16 + 9]);
        B2B_G(2, 12, 22, 24, SIGMA82[i3 * 16 + 10], SIGMA82[i3 * 16 + 11]);
        B2B_G(4, 14, 16, 26, SIGMA82[i3 * 16 + 12], SIGMA82[i3 * 16 + 13]);
        B2B_G(6, 8, 18, 28, SIGMA82[i3 * 16 + 14], SIGMA82[i3 * 16 + 15]);
      }
      for (i3 = 0; i3 < 16; i3++) {
        ctx.h[i3] = ctx.h[i3] ^ v6[i3] ^ v6[i3 + 16];
      }
    }
    var parameterBlock = new Uint8Array([
      0,
      0,
      0,
      0,
      //  0: outlen, keylen, fanout, depth
      0,
      0,
      0,
      0,
      //  4: leaf length, sequential mode
      0,
      0,
      0,
      0,
      //  8: node offset
      0,
      0,
      0,
      0,
      // 12: node offset
      0,
      0,
      0,
      0,
      // 16: node depth, inner length, rfu
      0,
      0,
      0,
      0,
      // 20: rfu
      0,
      0,
      0,
      0,
      // 24: rfu
      0,
      0,
      0,
      0,
      // 28: rfu
      0,
      0,
      0,
      0,
      // 32: salt
      0,
      0,
      0,
      0,
      // 36: salt
      0,
      0,
      0,
      0,
      // 40: salt
      0,
      0,
      0,
      0,
      // 44: salt
      0,
      0,
      0,
      0,
      // 48: personal
      0,
      0,
      0,
      0,
      // 52: personal
      0,
      0,
      0,
      0,
      // 56: personal
      0,
      0,
      0,
      0
      // 60: personal
    ]);
    function blake2bInit(outlen, key, salt, personal) {
      if (outlen === 0 || outlen > 64) {
        throw new Error("Illegal output length, expected 0 < length <= 64");
      }
      if (key && key.length > 64) {
        throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");
      }
      if (salt && salt.length !== 16) {
        throw new Error("Illegal salt, expected Uint8Array with length is 16");
      }
      if (personal && personal.length !== 16) {
        throw new Error("Illegal personal, expected Uint8Array with length is 16");
      }
      const ctx = {
        b: new Uint8Array(128),
        h: new Uint32Array(16),
        t: 0,
        // input count
        c: 0,
        // pointer within buffer
        outlen
        // output length in bytes
      };
      parameterBlock.fill(0);
      parameterBlock[0] = outlen;
      if (key) parameterBlock[1] = key.length;
      parameterBlock[2] = 1;
      parameterBlock[3] = 1;
      if (salt) parameterBlock.set(salt, 32);
      if (personal) parameterBlock.set(personal, 48);
      for (let i3 = 0; i3 < 16; i3++) {
        ctx.h[i3] = BLAKE2B_IV32[i3] ^ B2B_GET32(parameterBlock, i3 * 4);
      }
      if (key) {
        blake2bUpdate(ctx, key);
        ctx.c = 128;
      }
      return ctx;
    }
    function blake2bUpdate(ctx, input) {
      for (let i3 = 0; i3 < input.length; i3++) {
        if (ctx.c === 128) {
          ctx.t += ctx.c;
          blake2bCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i3];
      }
    }
    function blake2bFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 128) {
        ctx.b[ctx.c++] = 0;
      }
      blake2bCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i3 = 0; i3 < ctx.outlen; i3++) {
        out[i3] = ctx.h[i3 >> 2] >> 8 * (i3 & 3);
      }
      return out;
    }
    function blake2b2(input, key, outlen, salt, personal) {
      outlen = outlen || 64;
      input = util.normalizeInput(input);
      if (salt) {
        salt = util.normalizeInput(salt);
      }
      if (personal) {
        personal = util.normalizeInput(personal);
      }
      const ctx = blake2bInit(outlen, key, salt, personal);
      blake2bUpdate(ctx, input);
      return blake2bFinal(ctx);
    }
    function blake2bHex(input, key, outlen, salt, personal) {
      const output = blake2b2(input, key, outlen, salt, personal);
      return util.toHex(output);
    }
    module.exports = {
      blake2b: blake2b2,
      blake2bHex,
      blake2bInit,
      blake2bUpdate,
      blake2bFinal
    };
  }
});

// node_modules/blakejs/blake2s.js
var require_blake2s = __commonJS({
  "node_modules/blakejs/blake2s.js"(exports, module) {
    var util = require_util();
    function B2S_GET32(v7, i3) {
      return v7[i3] ^ v7[i3 + 1] << 8 ^ v7[i3 + 2] << 16 ^ v7[i3 + 3] << 24;
    }
    function B2S_G(a3, b4, c6, d7, x5, y4) {
      v6[a3] = v6[a3] + v6[b4] + x5;
      v6[d7] = ROTR32(v6[d7] ^ v6[a3], 16);
      v6[c6] = v6[c6] + v6[d7];
      v6[b4] = ROTR32(v6[b4] ^ v6[c6], 12);
      v6[a3] = v6[a3] + v6[b4] + y4;
      v6[d7] = ROTR32(v6[d7] ^ v6[a3], 8);
      v6[c6] = v6[c6] + v6[d7];
      v6[b4] = ROTR32(v6[b4] ^ v6[c6], 7);
    }
    function ROTR32(x5, y4) {
      return x5 >>> y4 ^ x5 << 32 - y4;
    }
    var BLAKE2S_IV = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SIGMA = new Uint8Array([
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0
    ]);
    var v6 = new Uint32Array(16);
    var m4 = new Uint32Array(16);
    function blake2sCompress(ctx, last) {
      let i3 = 0;
      for (i3 = 0; i3 < 8; i3++) {
        v6[i3] = ctx.h[i3];
        v6[i3 + 8] = BLAKE2S_IV[i3];
      }
      v6[12] ^= ctx.t;
      v6[13] ^= ctx.t / 4294967296;
      if (last) {
        v6[14] = ~v6[14];
      }
      for (i3 = 0; i3 < 16; i3++) {
        m4[i3] = B2S_GET32(ctx.b, 4 * i3);
      }
      for (i3 = 0; i3 < 10; i3++) {
        B2S_G(0, 4, 8, 12, m4[SIGMA[i3 * 16 + 0]], m4[SIGMA[i3 * 16 + 1]]);
        B2S_G(1, 5, 9, 13, m4[SIGMA[i3 * 16 + 2]], m4[SIGMA[i3 * 16 + 3]]);
        B2S_G(2, 6, 10, 14, m4[SIGMA[i3 * 16 + 4]], m4[SIGMA[i3 * 16 + 5]]);
        B2S_G(3, 7, 11, 15, m4[SIGMA[i3 * 16 + 6]], m4[SIGMA[i3 * 16 + 7]]);
        B2S_G(0, 5, 10, 15, m4[SIGMA[i3 * 16 + 8]], m4[SIGMA[i3 * 16 + 9]]);
        B2S_G(1, 6, 11, 12, m4[SIGMA[i3 * 16 + 10]], m4[SIGMA[i3 * 16 + 11]]);
        B2S_G(2, 7, 8, 13, m4[SIGMA[i3 * 16 + 12]], m4[SIGMA[i3 * 16 + 13]]);
        B2S_G(3, 4, 9, 14, m4[SIGMA[i3 * 16 + 14]], m4[SIGMA[i3 * 16 + 15]]);
      }
      for (i3 = 0; i3 < 8; i3++) {
        ctx.h[i3] ^= v6[i3] ^ v6[i3 + 8];
      }
    }
    function blake2sInit(outlen, key) {
      if (!(outlen > 0 && outlen <= 32)) {
        throw new Error("Incorrect output length, should be in [1, 32]");
      }
      const keylen = key ? key.length : 0;
      if (key && !(keylen > 0 && keylen <= 32)) {
        throw new Error("Incorrect key length, should be in [1, 32]");
      }
      const ctx = {
        h: new Uint32Array(BLAKE2S_IV),
        // hash state
        b: new Uint8Array(64),
        // input block
        c: 0,
        // pointer within block
        t: 0,
        // input count
        outlen
        // output length in bytes
      };
      ctx.h[0] ^= 16842752 ^ keylen << 8 ^ outlen;
      if (keylen > 0) {
        blake2sUpdate(ctx, key);
        ctx.c = 64;
      }
      return ctx;
    }
    function blake2sUpdate(ctx, input) {
      for (let i3 = 0; i3 < input.length; i3++) {
        if (ctx.c === 64) {
          ctx.t += ctx.c;
          blake2sCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i3];
      }
    }
    function blake2sFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 64) {
        ctx.b[ctx.c++] = 0;
      }
      blake2sCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i3 = 0; i3 < ctx.outlen; i3++) {
        out[i3] = ctx.h[i3 >> 2] >> 8 * (i3 & 3) & 255;
      }
      return out;
    }
    function blake2s2(input, key, outlen) {
      outlen = outlen || 32;
      input = util.normalizeInput(input);
      const ctx = blake2sInit(outlen, key);
      blake2sUpdate(ctx, input);
      return blake2sFinal(ctx);
    }
    function blake2sHex(input, key, outlen) {
      const output = blake2s2(input, key, outlen);
      return util.toHex(output);
    }
    module.exports = {
      blake2s: blake2s2,
      blake2sHex,
      blake2sInit,
      blake2sUpdate,
      blake2sFinal
    };
  }
});

// node_modules/blakejs/index.js
var require_blakejs = __commonJS({
  "node_modules/blakejs/index.js"(exports, module) {
    var b2b = require_blake2b();
    var b2s = require_blake2s();
    module.exports = {
      blake2b: b2b.blake2b,
      blake2bHex: b2b.blake2bHex,
      blake2bInit: b2b.blake2bInit,
      blake2bUpdate: b2b.blake2bUpdate,
      blake2bFinal: b2b.blake2bFinal,
      blake2s: b2s.blake2s,
      blake2sHex: b2s.blake2sHex,
      blake2sInit: b2s.blake2sInit,
      blake2sUpdate: b2s.blake2sUpdate,
      blake2sFinal: b2s.blake2sFinal
    };
  }
});

// node_modules/@walletconnect/environment/dist/cjs/crypto.js
var require_crypto = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;
    function getBrowerCrypto() {
      return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};
    }
    exports.getBrowerCrypto = getBrowerCrypto;
    function getSubtleCrypto() {
      const browserCrypto = getBrowerCrypto();
      return browserCrypto.subtle || browserCrypto.webkitSubtle;
    }
    exports.getSubtleCrypto = getSubtleCrypto;
    function isBrowserCryptoAvailable() {
      return !!getBrowerCrypto() && !!getSubtleCrypto();
    }
    exports.isBrowserCryptoAvailable = isBrowserCryptoAvailable;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/env.js
var require_env = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/env.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowser = exports.isNode = exports.isReactNative = void 0;
    function isReactNative() {
      return typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative";
    }
    exports.isReactNative = isReactNative;
    function isNode2() {
      return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    }
    exports.isNode = isNode2;
    function isBrowser() {
      return !isReactNative() && !isNode2();
    }
    exports.isBrowser = isBrowser;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/index.js
var require_cjs4 = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_crypto(), exports);
    tslib_1.__exportStar(require_env(), exports);
  }
});

// node_modules/ws/browser.js
var require_browser = __commonJS({
  "node_modules/ws/browser.js"(exports, module) {
    "use strict";
    module.exports = function() {
      throw new Error(
        "ws does not work in the browser. Browser clients must use the native WebSocket object"
      );
    };
  }
});

// node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({
  "node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module) {
    var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global !== "undefined" && global;
    var __globalThis__ = (function() {
      function F2() {
        this.fetch = false;
        this.DOMException = __global__.DOMException;
      }
      F2.prototype = __global__;
      return new F2();
    })();
    (function(globalThis2) {
      var irrelevant = (function(exports2) {
        var g4 = typeof globalThis2 !== "undefined" && globalThis2 || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
        typeof global !== "undefined" && global || {};
        var support = {
          searchParams: "URLSearchParams" in g4,
          iterable: "Symbol" in g4 && "iterator" in Symbol,
          blob: "FileReader" in g4 && "Blob" in g4 && (function() {
            try {
              new Blob();
              return true;
            } catch (e2) {
              return false;
            }
          })(),
          formData: "FormData" in g4,
          arrayBuffer: "ArrayBuffer" in g4
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name2) {
          if (typeof name2 !== "string") {
            name2 = String(name2);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name2) || name2 === "") {
            throw new TypeError('Invalid character in header field name: "' + name2 + '"');
          }
          return name2.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers(headers) {
          this.map = {};
          if (headers instanceof Headers) {
            headers.forEach(function(value, name2) {
              this.append(name2, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              if (header.length != 2) {
                throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
              }
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name2) {
              this.append(name2, headers[name2]);
            }, this);
          }
        }
        Headers.prototype.append = function(name2, value) {
          name2 = normalizeName(name2);
          value = normalizeValue(value);
          var oldValue = this.map[name2];
          this.map[name2] = oldValue ? oldValue + ", " + value : value;
        };
        Headers.prototype["delete"] = function(name2) {
          delete this.map[normalizeName(name2)];
        };
        Headers.prototype.get = function(name2) {
          name2 = normalizeName(name2);
          return this.has(name2) ? this.map[name2] : null;
        };
        Headers.prototype.has = function(name2) {
          return this.map.hasOwnProperty(normalizeName(name2));
        };
        Headers.prototype.set = function(name2, value) {
          this.map[normalizeName(name2)] = normalizeValue(value);
        };
        Headers.prototype.forEach = function(callback, thisArg) {
          for (var name2 in this.map) {
            if (this.map.hasOwnProperty(name2)) {
              callback.call(thisArg, this.map[name2], name2, this);
            }
          }
        };
        Headers.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name2) {
            items.push(name2);
          });
          return iteratorFor(items);
        };
        Headers.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name2) {
            items.push([name2, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        }
        function consumed(body) {
          if (body._noBody) return;
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
          var encoding = match ? match[1] : "utf-8";
          reader.readAsText(blob, encoding);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i3 = 0; i3 < view.length; i3++) {
            chars[i3] = String.fromCharCode(view[i3]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
              this._noBody = true;
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
          }
          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              var isConsumed = consumed(this);
              if (isConsumed) {
                return isConsumed;
              } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                return Promise.resolve(
                  this._bodyArrayBuffer.buffer.slice(
                    this._bodyArrayBuffer.byteOffset,
                    this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                  )
                );
              } else {
                return Promise.resolve(this._bodyArrayBuffer);
              }
            } else if (support.blob) {
              return this.blob().then(readBlobAsArrayBuffer);
            } else {
              throw new Error("could not read as ArrayBuffer");
            }
          };
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode8);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request2(input, options) {
          if (!(this instanceof Request2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          options = options || {};
          var body = options.body;
          if (input instanceof Request2) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal || (function() {
            if ("AbortController" in g4) {
              var ctrl = new AbortController();
              return ctrl.signal;
            }
          })();
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
          if (this.method === "GET" || this.method === "HEAD") {
            if (options.cache === "no-store" || options.cache === "no-cache") {
              var reParamSearch = /([?&])_=[^&]*/;
              if (reParamSearch.test(this.url)) {
                this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
              } else {
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
              }
            }
          }
        }
        Request2.prototype.clone = function() {
          return new Request2(this, { body: this._bodyInit });
        };
        function decode8(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name2 = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name2), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split("\r").map(function(header) {
            return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
          }).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              try {
                headers.append(key, value);
              } catch (error) {
                console.warn("Response " + error.message);
              }
            }
          });
          return headers;
        }
        Body.call(Request2.prototype);
        function Response(bodyInit, options) {
          if (!(this instanceof Response)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
          }
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
          this.headers = new Headers(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response.prototype);
        Response.prototype.clone = function() {
          return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          });
        };
        Response.error = function() {
          var response = new Response(null, { status: 200, statusText: "" });
          response.ok = false;
          response.status = 0;
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response(null, { status, headers: { location: url } });
        };
        exports2.DOMException = g4.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name2) {
            this.message = message;
            this.name = name2;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request2(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              if (request.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
                options.status = 200;
              } else {
                options.status = xhr.status;
              }
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              setTimeout(function() {
                resolve(new Response(body, options));
              }, 0);
            };
            xhr.onerror = function() {
              setTimeout(function() {
                reject(new TypeError("Network request failed"));
              }, 0);
            };
            xhr.ontimeout = function() {
              setTimeout(function() {
                reject(new TypeError("Network request timed out"));
              }, 0);
            };
            xhr.onabort = function() {
              setTimeout(function() {
                reject(new exports2.DOMException("Aborted", "AbortError"));
              }, 0);
            };
            function fixUrl(url) {
              try {
                return url === "" && g4.location.href ? g4.location.href : url;
              } catch (e2) {
                return url;
              }
            }
            xhr.open(request.method, fixUrl(request.url), true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr) {
              if (support.blob) {
                xhr.responseType = "blob";
              } else if (support.arrayBuffer) {
                xhr.responseType = "arraybuffer";
              }
            }
            if (init && typeof init.headers === "object" && !(init.headers instanceof Headers || g4.Headers && init.headers instanceof g4.Headers)) {
              var names = [];
              Object.getOwnPropertyNames(init.headers).forEach(function(name2) {
                names.push(normalizeName(name2));
                xhr.setRequestHeader(name2, normalizeValue(init.headers[name2]));
              });
              request.headers.forEach(function(value, name2) {
                if (names.indexOf(name2) === -1) {
                  xhr.setRequestHeader(name2, value);
                }
              });
            } else {
              request.headers.forEach(function(value, name2) {
                xhr.setRequestHeader(name2, value);
              });
            }
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!g4.fetch) {
          g4.fetch = fetch2;
          g4.Headers = Headers;
          g4.Request = Request2;
          g4.Response = Response;
        }
        exports2.Headers = Headers;
        exports2.Request = Request2;
        exports2.Response = Response;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      })({});
    })(__globalThis__);
    __globalThis__.fetch.ponyfill = true;
    delete __globalThis__.fetch.polyfill;
    var ctx = __global__.fetch ? __global__ : __globalThis__;
    exports = ctx.fetch;
    exports.default = ctx.fetch;
    exports.fetch = ctx.fetch;
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
  }
});

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OnRampController.js
var USDC_CURRENCY_DEFAULT = {
  id: "2b92315d-eab7-5bef-84fa-089a131333f5",
  name: "USD Coin",
  symbol: "USDC",
  networks: [
    {
      name: "ethereum-mainnet",
      display_name: "Ethereum",
      chain_id: "1",
      contract_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
    },
    {
      name: "polygon-mainnet",
      display_name: "Polygon",
      chain_id: "137",
      contract_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
    }
  ]
};
var USD_CURRENCY_DEFAULT = {
  id: "USD",
  payment_method_limits: [
    {
      id: "card",
      min: "10.00",
      max: "7500.00"
    },
    {
      id: "ach_bank_account",
      min: "10.00",
      max: "25000.00"
    }
  ]
};
var defaultState = {
  providers: ONRAMP_PROVIDERS,
  selectedProvider: null,
  error: null,
  purchaseCurrency: USDC_CURRENCY_DEFAULT,
  paymentCurrency: USD_CURRENCY_DEFAULT,
  purchaseCurrencies: [USDC_CURRENCY_DEFAULT],
  paymentCurrencies: [],
  quotesLoading: false
};
var state = proxy(defaultState);
var controller = {
  state,
  subscribe(callback) {
    return subscribe(state, () => callback(state));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state, key, callback);
  },
  setSelectedProvider(provider) {
    if (provider && provider.name === "meld") {
      const activeChain = ChainController.state.activeChain;
      const currency = activeChain === ConstantsUtil.CHAIN.SOLANA ? "SOL" : "USDC";
      const address = activeChain ? ChainController.state.chains.get(activeChain)?.accountState?.address ?? "" : "";
      const url = new URL(provider.url);
      url.searchParams.append("publicKey", MELD_PUBLIC_KEY);
      url.searchParams.append("destinationCurrencyCode", currency);
      url.searchParams.append("walletAddress", address);
      url.searchParams.append("externalCustomerId", OptionsController.state.projectId);
      state.selectedProvider = { ...provider, url: url.toString() };
    } else {
      state.selectedProvider = provider;
    }
  },
  setOnrampProviders(providers) {
    if (Array.isArray(providers) && providers.every((item) => typeof item === "string")) {
      const validOnramp = providers;
      const newProviders = ONRAMP_PROVIDERS.filter((provider) => validOnramp.includes(provider.name));
      state.providers = newProviders;
    } else {
      state.providers = [];
    }
  },
  setPurchaseCurrency(currency) {
    state.purchaseCurrency = currency;
  },
  setPaymentCurrency(currency) {
    state.paymentCurrency = currency;
  },
  setPurchaseAmount(amount) {
    OnRampController.state.purchaseAmount = amount;
  },
  setPaymentAmount(amount) {
    OnRampController.state.paymentAmount = amount;
  },
  async getAvailableCurrencies() {
    const options = await BlockchainApiController.getOnrampOptions();
    state.purchaseCurrencies = options.purchaseCurrencies;
    state.paymentCurrencies = options.paymentCurrencies;
    state.paymentCurrency = options.paymentCurrencies[0] || USD_CURRENCY_DEFAULT;
    state.purchaseCurrency = options.purchaseCurrencies[0] || USDC_CURRENCY_DEFAULT;
    await ApiController.fetchCurrencyImages(options.paymentCurrencies.map((currency) => currency.id));
    await ApiController.fetchTokenImages(options.purchaseCurrencies.map((currency) => currency.symbol));
  },
  async getQuote() {
    state.quotesLoading = true;
    try {
      const quote = await BlockchainApiController.getOnrampQuote({
        purchaseCurrency: state.purchaseCurrency,
        paymentCurrency: state.paymentCurrency,
        amount: state.paymentAmount?.toString() || "0",
        network: state.purchaseCurrency?.symbol
      });
      state.quotesLoading = false;
      state.purchaseAmount = Number(quote?.purchaseAmount.amount);
      return quote;
    } catch (error) {
      state.error = error.message;
      state.quotesLoading = false;
      return null;
    } finally {
      state.quotesLoading = false;
    }
  },
  resetState() {
    state.selectedProvider = null;
    state.error = null;
    state.purchaseCurrency = USDC_CURRENCY_DEFAULT;
    state.paymentCurrency = USD_CURRENCY_DEFAULT;
    state.purchaseCurrencies = [USDC_CURRENCY_DEFAULT];
    state.paymentCurrencies = [];
    state.paymentAmount = void 0;
    state.purchaseAmount = void 0;
    state.quotesLoading = false;
  }
};
var OnRampController = withErrorBoundary(controller);

// node_modules/@walletconnect/sign-client/dist/index.js
var import_events8 = __toESM(require_events());

// node_modules/@walletconnect/core/dist/index.js
var import_events7 = __toESM(require_events());

// node_modules/@walletconnect/heartbeat/dist/index.es.js
var import_events = __toESM(require_events());
var import_time = __toESM(require_cjs());

// node_modules/@walletconnect/events/dist/esm/events.js
var IEvents = class {
};

// node_modules/@walletconnect/heartbeat/dist/index.es.js
var n = class extends IEvents {
  constructor(e2) {
    super();
  }
};
var s = import_time.FIVE_SECONDS;
var r = { pulse: "heartbeat_pulse" };
var i = class _i3 extends n {
  constructor(e2) {
    super(e2), this.events = new import_events.EventEmitter(), this.interval = s, this.interval = e2?.interval || s;
  }
  static async init(e2) {
    const t = new _i3(e2);
    return await t.init(), t;
  }
  async init() {
    await this.initialize();
  }
  stop() {
    clearInterval(this.intervalRef);
  }
  on(e2, t) {
    this.events.on(e2, t);
  }
  once(e2, t) {
    this.events.once(e2, t);
  }
  off(e2, t) {
    this.events.off(e2, t);
  }
  removeListener(e2, t) {
    this.events.removeListener(e2, t);
  }
  async initialize() {
    this.intervalRef = setInterval(() => this.pulse(), (0, import_time.toMiliseconds)(this.interval));
  }
  pulse() {
    this.events.emit(r.pulse);
  }
};

// node_modules/destr/dist/index.mjs
var suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/;
var suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
var JsonSigRx = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
function jsonParseTransform(key, value) {
  if (key === "__proto__" || key === "constructor" && value && typeof value === "object" && "prototype" in value) {
    warnKeyDropped(key);
    return;
  }
  return value;
}
function warnKeyDropped(key) {
  console.warn(`[destr] Dropping "${key}" key to prevent prototype pollution.`);
}
function destr(value, options = {}) {
  if (typeof value !== "string") {
    return value;
  }
  if (value[0] === '"' && value[value.length - 1] === '"' && value.indexOf("\\") === -1) {
    return value.slice(1, -1);
  }
  const _value = value.trim();
  if (_value.length <= 9) {
    switch (_value.toLowerCase()) {
      case "true": {
        return true;
      }
      case "false": {
        return false;
      }
      case "undefined": {
        return void 0;
      }
      case "null": {
        return null;
      }
      case "nan": {
        return Number.NaN;
      }
      case "infinity": {
        return Number.POSITIVE_INFINITY;
      }
      case "-infinity": {
        return Number.NEGATIVE_INFINITY;
      }
    }
  }
  if (!JsonSigRx.test(value)) {
    if (options.strict) {
      throw new SyntaxError("[destr] Invalid JSON");
    }
    return value;
  }
  try {
    if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {
      if (options.strict) {
        throw new Error("[destr] Possible prototype pollution");
      }
      return JSON.parse(value, jsonParseTransform);
    }
    return JSON.parse(value);
  } catch (error) {
    if (options.strict) {
      throw error;
    }
    return value;
  }
}

// node_modules/unstorage/dist/shared/unstorage.zVDD2mZo.mjs
function wrapToPromise(value) {
  if (!value || typeof value.then !== "function") {
    return Promise.resolve(value);
  }
  return value;
}
function asyncCall(function_, ...arguments_) {
  try {
    return wrapToPromise(function_(...arguments_));
  } catch (error) {
    return Promise.reject(error);
  }
}
function isPrimitive(value) {
  const type = typeof value;
  return value === null || type !== "object" && type !== "function";
}
function isPureObject(value) {
  const proto = Object.getPrototypeOf(value);
  return !proto || proto.isPrototypeOf(Object);
}
function stringify(value) {
  if (isPrimitive(value)) {
    return String(value);
  }
  if (isPureObject(value) || Array.isArray(value)) {
    return JSON.stringify(value);
  }
  if (typeof value.toJSON === "function") {
    return stringify(value.toJSON());
  }
  throw new Error("[unstorage] Cannot stringify value!");
}
var BASE64_PREFIX = "base64:";
function serializeRaw(value) {
  if (typeof value === "string") {
    return value;
  }
  return BASE64_PREFIX + base64Encode(value);
}
function deserializeRaw(value) {
  if (typeof value !== "string") {
    return value;
  }
  if (!value.startsWith(BASE64_PREFIX)) {
    return value;
  }
  return base64Decode(value.slice(BASE64_PREFIX.length));
}
function base64Decode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input, "base64");
  }
  return Uint8Array.from(
    globalThis.atob(input),
    (c6) => c6.codePointAt(0)
  );
}
function base64Encode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input).toString("base64");
  }
  return globalThis.btoa(String.fromCodePoint(...input));
}
function normalizeKey(key) {
  if (!key) {
    return "";
  }
  return key.split("?")[0]?.replace(/[/\\]/g, ":").replace(/:+/g, ":").replace(/^:|:$/g, "") || "";
}
function joinKeys(...keys2) {
  return normalizeKey(keys2.join(":"));
}
function normalizeBaseKey(base3) {
  base3 = normalizeKey(base3);
  return base3 ? base3 + ":" : "";
}
function filterKeyByDepth(key, depth) {
  if (depth === void 0) {
    return true;
  }
  let substrCount = 0;
  let index = key.indexOf(":");
  while (index > -1) {
    substrCount++;
    index = key.indexOf(":", index + 1);
  }
  return substrCount <= depth;
}
function filterKeyByBase(key, base3) {
  if (base3) {
    return key.startsWith(base3) && key[key.length - 1] !== "$";
  }
  return key[key.length - 1] !== "$";
}

// node_modules/unstorage/dist/index.mjs
function defineDriver(factory) {
  return factory;
}
var DRIVER_NAME = "memory";
var memory = defineDriver(() => {
  const data = /* @__PURE__ */ new Map();
  return {
    name: DRIVER_NAME,
    getInstance: () => data,
    hasItem(key) {
      return data.has(key);
    },
    getItem(key) {
      return data.get(key) ?? null;
    },
    getItemRaw(key) {
      return data.get(key) ?? null;
    },
    setItem(key, value) {
      data.set(key, value);
    },
    setItemRaw(key, value) {
      data.set(key, value);
    },
    removeItem(key) {
      data.delete(key);
    },
    getKeys() {
      return [...data.keys()];
    },
    clear() {
      data.clear();
    },
    dispose() {
      data.clear();
    }
  };
});
function createStorage(options = {}) {
  const context = {
    mounts: { "": options.driver || memory() },
    mountpoints: [""],
    watching: false,
    watchListeners: [],
    unwatch: {}
  };
  const getMount = (key) => {
    for (const base3 of context.mountpoints) {
      if (key.startsWith(base3)) {
        return {
          base: base3,
          relativeKey: key.slice(base3.length),
          driver: context.mounts[base3]
        };
      }
    }
    return {
      base: "",
      relativeKey: key,
      driver: context.mounts[""]
    };
  };
  const getMounts = (base3, includeParent) => {
    return context.mountpoints.filter(
      (mountpoint) => mountpoint.startsWith(base3) || includeParent && base3.startsWith(mountpoint)
    ).map((mountpoint) => ({
      relativeBase: base3.length > mountpoint.length ? base3.slice(mountpoint.length) : void 0,
      mountpoint,
      driver: context.mounts[mountpoint]
    }));
  };
  const onChange = (event, key) => {
    if (!context.watching) {
      return;
    }
    key = normalizeKey(key);
    for (const listener of context.watchListeners) {
      listener(event, key);
    }
  };
  const startWatch = async () => {
    if (context.watching) {
      return;
    }
    context.watching = true;
    for (const mountpoint in context.mounts) {
      context.unwatch[mountpoint] = await watch(
        context.mounts[mountpoint],
        onChange,
        mountpoint
      );
    }
  };
  const stopWatch = async () => {
    if (!context.watching) {
      return;
    }
    for (const mountpoint in context.unwatch) {
      await context.unwatch[mountpoint]();
    }
    context.unwatch = {};
    context.watching = false;
  };
  const runBatch = (items, commonOptions, cb) => {
    const batches = /* @__PURE__ */ new Map();
    const getBatch = (mount) => {
      let batch = batches.get(mount.base);
      if (!batch) {
        batch = {
          driver: mount.driver,
          base: mount.base,
          items: []
        };
        batches.set(mount.base, batch);
      }
      return batch;
    };
    for (const item of items) {
      const isStringItem = typeof item === "string";
      const key = normalizeKey(isStringItem ? item : item.key);
      const value = isStringItem ? void 0 : item.value;
      const options2 = isStringItem || !item.options ? commonOptions : { ...commonOptions, ...item.options };
      const mount = getMount(key);
      getBatch(mount).items.push({
        key,
        value,
        relativeKey: mount.relativeKey,
        options: options2
      });
    }
    return Promise.all([...batches.values()].map((batch) => cb(batch))).then(
      (r3) => r3.flat()
    );
  };
  const storage = {
    // Item
    hasItem(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      return asyncCall(driver.hasItem, relativeKey, opts);
    },
    getItem(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => destr(value)
      );
    },
    getItems(items, commonOptions = {}) {
      return runBatch(items, commonOptions, (batch) => {
        if (batch.driver.getItems) {
          return asyncCall(
            batch.driver.getItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              options: item.options
            })),
            commonOptions
          ).then(
            (r3) => r3.map((item) => ({
              key: joinKeys(batch.base, item.key),
              value: destr(item.value)
            }))
          );
        }
        return Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.getItem,
              item.relativeKey,
              item.options
            ).then((value) => ({
              key: item.key,
              value: destr(value)
            }));
          })
        );
      });
    },
    getItemRaw(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (driver.getItemRaw) {
        return asyncCall(driver.getItemRaw, relativeKey, opts);
      }
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => deserializeRaw(value)
      );
    },
    async setItem(key, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key);
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (!driver.setItem) {
        return;
      }
      await asyncCall(driver.setItem, relativeKey, stringify(value), opts);
      if (!driver.watch) {
        onChange("update", key);
      }
    },
    async setItems(items, commonOptions) {
      await runBatch(items, commonOptions, async (batch) => {
        if (batch.driver.setItems) {
          return asyncCall(
            batch.driver.setItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              value: stringify(item.value),
              options: item.options
            })),
            commonOptions
          );
        }
        if (!batch.driver.setItem) {
          return;
        }
        await Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.setItem,
              item.relativeKey,
              stringify(item.value),
              item.options
            );
          })
        );
      });
    },
    async setItemRaw(key, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key, opts);
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (driver.setItemRaw) {
        await asyncCall(driver.setItemRaw, relativeKey, value, opts);
      } else if (driver.setItem) {
        await asyncCall(driver.setItem, relativeKey, serializeRaw(value), opts);
      } else {
        return;
      }
      if (!driver.watch) {
        onChange("update", key);
      }
    },
    async removeItem(key, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { removeMeta: opts };
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (!driver.removeItem) {
        return;
      }
      await asyncCall(driver.removeItem, relativeKey, opts);
      if (opts.removeMeta || opts.removeMata) {
        await asyncCall(driver.removeItem, relativeKey + "$", opts);
      }
      if (!driver.watch) {
        onChange("remove", key);
      }
    },
    // Meta
    async getMeta(key, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { nativeOnly: opts };
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      const meta = /* @__PURE__ */ Object.create(null);
      if (driver.getMeta) {
        Object.assign(meta, await asyncCall(driver.getMeta, relativeKey, opts));
      }
      if (!opts.nativeOnly) {
        const value = await asyncCall(
          driver.getItem,
          relativeKey + "$",
          opts
        ).then((value_) => destr(value_));
        if (value && typeof value === "object") {
          if (typeof value.atime === "string") {
            value.atime = new Date(value.atime);
          }
          if (typeof value.mtime === "string") {
            value.mtime = new Date(value.mtime);
          }
          Object.assign(meta, value);
        }
      }
      return meta;
    },
    setMeta(key, value, opts = {}) {
      return this.setItem(key + "$", value, opts);
    },
    removeMeta(key, opts = {}) {
      return this.removeItem(key + "$", opts);
    },
    // Keys
    async getKeys(base3, opts = {}) {
      base3 = normalizeBaseKey(base3);
      const mounts = getMounts(base3, true);
      let maskedMounts = [];
      const allKeys = [];
      let allMountsSupportMaxDepth = true;
      for (const mount of mounts) {
        if (!mount.driver.flags?.maxDepth) {
          allMountsSupportMaxDepth = false;
        }
        const rawKeys = await asyncCall(
          mount.driver.getKeys,
          mount.relativeBase,
          opts
        );
        for (const key of rawKeys) {
          const fullKey = mount.mountpoint + normalizeKey(key);
          if (!maskedMounts.some((p4) => fullKey.startsWith(p4))) {
            allKeys.push(fullKey);
          }
        }
        maskedMounts = [
          mount.mountpoint,
          ...maskedMounts.filter((p4) => !p4.startsWith(mount.mountpoint))
        ];
      }
      const shouldFilterByDepth = opts.maxDepth !== void 0 && !allMountsSupportMaxDepth;
      return allKeys.filter(
        (key) => (!shouldFilterByDepth || filterKeyByDepth(key, opts.maxDepth)) && filterKeyByBase(key, base3)
      );
    },
    // Utils
    async clear(base3, opts = {}) {
      base3 = normalizeBaseKey(base3);
      await Promise.all(
        getMounts(base3, false).map(async (m4) => {
          if (m4.driver.clear) {
            return asyncCall(m4.driver.clear, m4.relativeBase, opts);
          }
          if (m4.driver.removeItem) {
            const keys2 = await m4.driver.getKeys(m4.relativeBase || "", opts);
            return Promise.all(
              keys2.map((key) => m4.driver.removeItem(key, opts))
            );
          }
        })
      );
    },
    async dispose() {
      await Promise.all(
        Object.values(context.mounts).map((driver) => dispose(driver))
      );
    },
    async watch(callback) {
      await startWatch();
      context.watchListeners.push(callback);
      return async () => {
        context.watchListeners = context.watchListeners.filter(
          (listener) => listener !== callback
        );
        if (context.watchListeners.length === 0) {
          await stopWatch();
        }
      };
    },
    async unwatch() {
      context.watchListeners = [];
      await stopWatch();
    },
    // Mount
    mount(base3, driver) {
      base3 = normalizeBaseKey(base3);
      if (base3 && context.mounts[base3]) {
        throw new Error(`already mounted at ${base3}`);
      }
      if (base3) {
        context.mountpoints.push(base3);
        context.mountpoints.sort((a3, b4) => b4.length - a3.length);
      }
      context.mounts[base3] = driver;
      if (context.watching) {
        Promise.resolve(watch(driver, onChange, base3)).then((unwatcher) => {
          context.unwatch[base3] = unwatcher;
        }).catch(console.error);
      }
      return storage;
    },
    async unmount(base3, _dispose = true) {
      base3 = normalizeBaseKey(base3);
      if (!base3 || !context.mounts[base3]) {
        return;
      }
      if (context.watching && base3 in context.unwatch) {
        context.unwatch[base3]?.();
        delete context.unwatch[base3];
      }
      if (_dispose) {
        await dispose(context.mounts[base3]);
      }
      context.mountpoints = context.mountpoints.filter((key) => key !== base3);
      delete context.mounts[base3];
    },
    getMount(key = "") {
      key = normalizeKey(key) + ":";
      const m4 = getMount(key);
      return {
        driver: m4.driver,
        base: m4.base
      };
    },
    getMounts(base3 = "", opts = {}) {
      base3 = normalizeKey(base3);
      const mounts = getMounts(base3, opts.parents);
      return mounts.map((m4) => ({
        driver: m4.driver,
        base: m4.mountpoint
      }));
    },
    // Aliases
    keys: (base3, opts = {}) => storage.getKeys(base3, opts),
    get: (key, opts = {}) => storage.getItem(key, opts),
    set: (key, value, opts = {}) => storage.setItem(key, value, opts),
    has: (key, opts = {}) => storage.hasItem(key, opts),
    del: (key, opts = {}) => storage.removeItem(key, opts),
    remove: (key, opts = {}) => storage.removeItem(key, opts)
  };
  return storage;
}
function watch(driver, onChange, base3) {
  return driver.watch ? driver.watch((event, key) => onChange(event, base3 + key)) : () => {
  };
}
async function dispose(driver) {
  if (typeof driver.dispose === "function") {
    await asyncCall(driver.dispose);
  }
}

// node_modules/idb-keyval/dist/index.js
function promisifyRequest(request) {
  return new Promise((resolve, reject) => {
    request.oncomplete = request.onsuccess = () => resolve(request.result);
    request.onabort = request.onerror = () => reject(request.error);
  });
}
function createStore(dbName, storeName) {
  let dbp;
  const getDB = () => {
    if (dbp)
      return dbp;
    const request = indexedDB.open(dbName);
    request.onupgradeneeded = () => request.result.createObjectStore(storeName);
    dbp = promisifyRequest(request);
    dbp.then((db) => {
      db.onclose = () => dbp = void 0;
    }, () => {
    });
    return dbp;
  };
  return (txMode, callback) => getDB().then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
}
var defaultGetStoreFunc;
function defaultGetStore() {
  if (!defaultGetStoreFunc) {
    defaultGetStoreFunc = createStore("keyval-store", "keyval");
  }
  return defaultGetStoreFunc;
}
function get(key, customStore = defaultGetStore()) {
  return customStore("readonly", (store) => promisifyRequest(store.get(key)));
}
function set(key, value, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.put(value, key);
    return promisifyRequest(store.transaction);
  });
}
function del(key, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.delete(key);
    return promisifyRequest(store.transaction);
  });
}
function clear(customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.clear();
    return promisifyRequest(store.transaction);
  });
}
function eachCursor(store, callback) {
  store.openCursor().onsuccess = function() {
    if (!this.result)
      return;
    callback(this.result);
    this.result.continue();
  };
  return promisifyRequest(store.transaction);
}
function keys(customStore = defaultGetStore()) {
  return customStore("readonly", (store) => {
    if (store.getAllKeys) {
      return promisifyRequest(store.getAllKeys());
    }
    const items = [];
    return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);
  });
}

// node_modules/@walletconnect/keyvaluestorage/dist/index.es.js
var x = "idb-keyval";
var z = (i3 = {}) => {
  const t = i3.base && i3.base.length > 0 ? `${i3.base}:` : "", e2 = (s2) => t + s2;
  let n4;
  return i3.dbName && i3.storeName && (n4 = createStore(i3.dbName, i3.storeName)), { name: x, options: i3, async hasItem(s2) {
    return !(typeof await get(e2(s2), n4) > "u");
  }, async getItem(s2) {
    return await get(e2(s2), n4) ?? null;
  }, setItem(s2, a3) {
    return set(e2(s2), a3, n4);
  }, removeItem(s2) {
    return del(e2(s2), n4);
  }, getKeys() {
    return keys(n4);
  }, clear() {
    return clear(n4);
  } };
};
var D2 = "WALLET_CONNECT_V2_INDEXED_DB";
var E = "keyvaluestorage";
var _ = class {
  constructor() {
    this.indexedDb = createStorage({ driver: z({ dbName: D2, storeName: E }) });
  }
  async getKeys() {
    return this.indexedDb.getKeys();
  }
  async getEntries() {
    return (await this.indexedDb.getItems(await this.indexedDb.getKeys())).map((t) => [t.key, t.value]);
  }
  async getItem(t) {
    const e2 = await this.indexedDb.getItem(t);
    if (e2 !== null) return e2;
  }
  async setItem(t, e2) {
    await this.indexedDb.setItem(t, safeJsonStringify(e2));
  }
  async removeItem(t) {
    await this.indexedDb.removeItem(t);
  }
};
var l2 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
var c = { exports: {} };
(function() {
  let i3;
  function t() {
  }
  i3 = t, i3.prototype.getItem = function(e2) {
    return this.hasOwnProperty(e2) ? String(this[e2]) : null;
  }, i3.prototype.setItem = function(e2, n4) {
    this[e2] = String(n4);
  }, i3.prototype.removeItem = function(e2) {
    delete this[e2];
  }, i3.prototype.clear = function() {
    const e2 = this;
    Object.keys(e2).forEach(function(n4) {
      e2[n4] = void 0, delete e2[n4];
    });
  }, i3.prototype.key = function(e2) {
    return e2 = e2 || 0, Object.keys(this)[e2];
  }, i3.prototype.__defineGetter__("length", function() {
    return Object.keys(this).length;
  }), typeof l2 < "u" && l2.localStorage ? c.exports = l2.localStorage : typeof window < "u" && window.localStorage ? c.exports = window.localStorage : c.exports = new t();
})();
function k(i3) {
  var t;
  return [i3[0], safeJsonParse((t = i3[1]) != null ? t : "")];
}
var K = class {
  constructor() {
    this.localStorage = c.exports;
  }
  async getKeys() {
    return Object.keys(this.localStorage);
  }
  async getEntries() {
    return Object.entries(this.localStorage).map(k);
  }
  async getItem(t) {
    const e2 = this.localStorage.getItem(t);
    if (e2 !== null) return safeJsonParse(e2);
  }
  async setItem(t, e2) {
    this.localStorage.setItem(t, safeJsonStringify(e2));
  }
  async removeItem(t) {
    this.localStorage.removeItem(t);
  }
};
var N = "wc_storage_version";
var y = 1;
var O = async (i3, t, e2) => {
  const n4 = N, s2 = await t.getItem(n4);
  if (s2 && s2 >= y) {
    e2(t);
    return;
  }
  const a3 = await i3.getKeys();
  if (!a3.length) {
    e2(t);
    return;
  }
  const m4 = [];
  for (; a3.length; ) {
    const r3 = a3.shift();
    if (!r3) continue;
    const o5 = r3.toLowerCase();
    if (o5.includes("wc@") || o5.includes("walletconnect") || o5.includes("wc_") || o5.includes("wallet_connect")) {
      const f6 = await i3.getItem(r3);
      await t.setItem(r3, f6), m4.push(r3);
    }
  }
  await t.setItem(n4, y), e2(t), j(i3, m4);
};
var j = async (i3, t) => {
  t.length && t.forEach(async (e2) => {
    await i3.removeItem(e2);
  });
};
var h = class {
  constructor() {
    this.initialized = false, this.setInitialized = (e2) => {
      this.storage = e2, this.initialized = true;
    };
    const t = new K();
    this.storage = t;
    try {
      const e2 = new _();
      O(t, e2, this.setInitialized);
    } catch {
      this.initialized = true;
    }
  }
  async getKeys() {
    return await this.initialize(), this.storage.getKeys();
  }
  async getEntries() {
    return await this.initialize(), this.storage.getEntries();
  }
  async getItem(t) {
    return await this.initialize(), this.storage.getItem(t);
  }
  async setItem(t, e2) {
    return await this.initialize(), this.storage.setItem(t, e2);
  }
  async removeItem(t) {
    return await this.initialize(), this.storage.removeItem(t);
  }
  async initialize() {
    this.initialized || await new Promise((t) => {
      const e2 = setInterval(() => {
        this.initialized && (clearInterval(e2), t());
      }, 20);
    });
  }
};

// node_modules/@walletconnect/types/dist/index.js
var import_events4 = __toESM(require_events());
var a2 = Object.defineProperty;
var u = (e2, s2, r3) => s2 in e2 ? a2(e2, s2, { enumerable: true, configurable: true, writable: true, value: r3 }) : e2[s2] = r3;
var c2 = (e2, s2, r3) => u(e2, typeof s2 != "symbol" ? s2 + "" : s2, r3);
var h2 = class extends IEvents {
  constructor(s2) {
    super(), this.opts = s2, c2(this, "protocol", "wc"), c2(this, "version", 2);
  }
};
var p = Object.defineProperty;
var b = (e2, s2, r3) => s2 in e2 ? p(e2, s2, { enumerable: true, configurable: true, writable: true, value: r3 }) : e2[s2] = r3;
var v = (e2, s2, r3) => b(e2, typeof s2 != "symbol" ? s2 + "" : s2, r3);
var I = class extends IEvents {
  constructor(s2, r3) {
    super(), this.core = s2, this.logger = r3, v(this, "records", /* @__PURE__ */ new Map());
  }
};
var y2 = class {
  constructor(s2, r3) {
    this.logger = s2, this.core = r3;
  }
};
var m = class extends IEvents {
  constructor(s2, r3) {
    super(), this.relayer = s2, this.logger = r3;
  }
};
var d = class extends IEvents {
  constructor(s2) {
    super();
  }
};
var f = class {
  constructor(s2, r3, t, q2) {
    this.core = s2, this.logger = r3, this.name = t;
  }
};
var P = class extends IEvents {
  constructor(s2, r3) {
    super(), this.relayer = s2, this.logger = r3;
  }
};
var S = class extends IEvents {
  constructor(s2, r3) {
    super(), this.core = s2, this.logger = r3;
  }
};
var M = class {
  constructor(s2, r3, t) {
    this.core = s2, this.logger = r3, this.store = t;
  }
};
var O2 = class {
  constructor(s2, r3) {
    this.projectId = s2, this.logger = r3;
  }
};
var R = class {
  constructor(s2, r3, t) {
    this.core = s2, this.logger = r3, this.telemetryEnabled = t;
  }
};
var T = Object.defineProperty;
var k2 = (e2, s2, r3) => s2 in e2 ? T(e2, s2, { enumerable: true, configurable: true, writable: true, value: r3 }) : e2[s2] = r3;
var i2 = (e2, s2, r3) => k2(e2, typeof s2 != "symbol" ? s2 + "" : s2, r3);
var J = class {
  constructor(s2) {
    this.opts = s2, i2(this, "protocol", "wc"), i2(this, "version", 2);
  }
};
var V = class {
  constructor(s2) {
    this.client = s2;
  }
};

// node_modules/@walletconnect/core/dist/index.js
var import_time4 = __toESM(require_cjs());

// node_modules/@walletconnect/relay-auth/dist/index.es.js
var import_time2 = __toESM(require_cjs());
function En(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function fe(t, ...e2) {
  if (!En(t)) throw new Error("Uint8Array expected");
  if (e2.length > 0 && !e2.includes(t.length)) throw new Error("Uint8Array expected of length " + e2 + ", got length=" + t.length);
}
function De(t, e2 = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e2 && t.finished) throw new Error("Hash#digest() has already been called");
}
function gn(t, e2) {
  fe(t);
  const n4 = e2.outputLen;
  if (t.length < n4) throw new Error("digestInto() expects output buffer of length at least " + n4);
}
var it = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
var _t = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength);
function yn(t) {
  if (typeof t != "string") throw new Error("utf8ToBytes expected string, got " + typeof t);
  return new Uint8Array(new TextEncoder().encode(t));
}
function de(t) {
  return typeof t == "string" && (t = yn(t)), fe(t), t;
}
var xn = class {
  clone() {
    return this._cloneInto();
  }
};
function Bn(t) {
  const e2 = (r3) => t().update(de(r3)).digest(), n4 = t();
  return e2.outputLen = n4.outputLen, e2.blockLen = n4.blockLen, e2.create = () => t(), e2;
}
function he(t = 32) {
  if (it && typeof it.getRandomValues == "function") return it.getRandomValues(new Uint8Array(t));
  if (it && typeof it.randomBytes == "function") return it.randomBytes(t);
  throw new Error("crypto.getRandomValues must be defined");
}
function Cn(t, e2, n4, r3) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e2, n4, r3);
  const o5 = BigInt(32), s2 = BigInt(4294967295), a3 = Number(n4 >> o5 & s2), u2 = Number(n4 & s2), i3 = r3 ? 4 : 0, D3 = r3 ? 0 : 4;
  t.setUint32(e2 + i3, a3, r3), t.setUint32(e2 + D3, u2, r3);
}
var An = class extends xn {
  constructor(e2, n4, r3, o5) {
    super(), this.blockLen = e2, this.outputLen = n4, this.padOffset = r3, this.isLE = o5, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(e2), this.view = _t(this.buffer);
  }
  update(e2) {
    De(this);
    const { view: n4, buffer: r3, blockLen: o5 } = this;
    e2 = de(e2);
    const s2 = e2.length;
    for (let a3 = 0; a3 < s2; ) {
      const u2 = Math.min(o5 - this.pos, s2 - a3);
      if (u2 === o5) {
        const i3 = _t(e2);
        for (; o5 <= s2 - a3; a3 += o5) this.process(i3, a3);
        continue;
      }
      r3.set(e2.subarray(a3, a3 + u2), this.pos), this.pos += u2, a3 += u2, this.pos === o5 && (this.process(n4, 0), this.pos = 0);
    }
    return this.length += e2.length, this.roundClean(), this;
  }
  digestInto(e2) {
    De(this), gn(e2, this), this.finished = true;
    const { buffer: n4, view: r3, blockLen: o5, isLE: s2 } = this;
    let { pos: a3 } = this;
    n4[a3++] = 128, this.buffer.subarray(a3).fill(0), this.padOffset > o5 - a3 && (this.process(r3, 0), a3 = 0);
    for (let l6 = a3; l6 < o5; l6++) n4[l6] = 0;
    Cn(r3, o5 - 8, BigInt(this.length * 8), s2), this.process(r3, 0);
    const u2 = _t(e2), i3 = this.outputLen;
    if (i3 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const D3 = i3 / 4, c6 = this.get();
    if (D3 > c6.length) throw new Error("_sha2: outputLen bigger than state");
    for (let l6 = 0; l6 < D3; l6++) u2.setUint32(4 * l6, c6[l6], s2);
  }
  digest() {
    const { buffer: e2, outputLen: n4 } = this;
    this.digestInto(e2);
    const r3 = e2.slice(0, n4);
    return this.destroy(), r3;
  }
  _cloneInto(e2) {
    e2 || (e2 = new this.constructor()), e2.set(...this.get());
    const { blockLen: n4, buffer: r3, length: o5, finished: s2, destroyed: a3, pos: u2 } = this;
    return e2.length = o5, e2.pos = u2, e2.finished = s2, e2.destroyed = a3, o5 % n4 && e2.buffer.set(r3), e2;
  }
};
var wt = BigInt(2 ** 32 - 1);
var St = BigInt(32);
function le(t, e2 = false) {
  return e2 ? { h: Number(t & wt), l: Number(t >> St & wt) } : { h: Number(t >> St & wt) | 0, l: Number(t & wt) | 0 };
}
function mn(t, e2 = false) {
  let n4 = new Uint32Array(t.length), r3 = new Uint32Array(t.length);
  for (let o5 = 0; o5 < t.length; o5++) {
    const { h: s2, l: a3 } = le(t[o5], e2);
    [n4[o5], r3[o5]] = [s2, a3];
  }
  return [n4, r3];
}
var _n = (t, e2) => BigInt(t >>> 0) << St | BigInt(e2 >>> 0);
var Sn = (t, e2, n4) => t >>> n4;
var vn = (t, e2, n4) => t << 32 - n4 | e2 >>> n4;
var In = (t, e2, n4) => t >>> n4 | e2 << 32 - n4;
var Un = (t, e2, n4) => t << 32 - n4 | e2 >>> n4;
var Tn = (t, e2, n4) => t << 64 - n4 | e2 >>> n4 - 32;
var Fn = (t, e2, n4) => t >>> n4 - 32 | e2 << 64 - n4;
var Nn = (t, e2) => e2;
var Ln = (t, e2) => t;
var On = (t, e2, n4) => t << n4 | e2 >>> 32 - n4;
var Hn = (t, e2, n4) => e2 << n4 | t >>> 32 - n4;
var zn = (t, e2, n4) => e2 << n4 - 32 | t >>> 64 - n4;
var Mn = (t, e2, n4) => t << n4 - 32 | e2 >>> 64 - n4;
function qn(t, e2, n4, r3) {
  const o5 = (e2 >>> 0) + (r3 >>> 0);
  return { h: t + n4 + (o5 / 2 ** 32 | 0) | 0, l: o5 | 0 };
}
var $n = (t, e2, n4) => (t >>> 0) + (e2 >>> 0) + (n4 >>> 0);
var kn = (t, e2, n4, r3) => e2 + n4 + r3 + (t / 2 ** 32 | 0) | 0;
var Rn = (t, e2, n4, r3) => (t >>> 0) + (e2 >>> 0) + (n4 >>> 0) + (r3 >>> 0);
var jn = (t, e2, n4, r3, o5) => e2 + n4 + r3 + o5 + (t / 2 ** 32 | 0) | 0;
var Zn = (t, e2, n4, r3, o5) => (t >>> 0) + (e2 >>> 0) + (n4 >>> 0) + (r3 >>> 0) + (o5 >>> 0);
var Gn = (t, e2, n4, r3, o5, s2) => e2 + n4 + r3 + o5 + s2 + (t / 2 ** 32 | 0) | 0;
var x2 = { fromBig: le, split: mn, toBig: _n, shrSH: Sn, shrSL: vn, rotrSH: In, rotrSL: Un, rotrBH: Tn, rotrBL: Fn, rotr32H: Nn, rotr32L: Ln, rotlSH: On, rotlSL: Hn, rotlBH: zn, rotlBL: Mn, add: qn, add3L: $n, add3H: kn, add4L: Rn, add4H: jn, add5H: Gn, add5L: Zn };
var [Vn, Yn] = (() => x2.split(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t) => BigInt(t))))();
var P2 = new Uint32Array(80);
var Q = new Uint32Array(80);
var Jn = class extends An {
  constructor() {
    super(128, 64, 16, false), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  get() {
    const { Ah: e2, Al: n4, Bh: r3, Bl: o5, Ch: s2, Cl: a3, Dh: u2, Dl: i3, Eh: D3, El: c6, Fh: l6, Fl: p4, Gh: w5, Gl: h4, Hh: g4, Hl: S4 } = this;
    return [e2, n4, r3, o5, s2, a3, u2, i3, D3, c6, l6, p4, w5, h4, g4, S4];
  }
  set(e2, n4, r3, o5, s2, a3, u2, i3, D3, c6, l6, p4, w5, h4, g4, S4) {
    this.Ah = e2 | 0, this.Al = n4 | 0, this.Bh = r3 | 0, this.Bl = o5 | 0, this.Ch = s2 | 0, this.Cl = a3 | 0, this.Dh = u2 | 0, this.Dl = i3 | 0, this.Eh = D3 | 0, this.El = c6 | 0, this.Fh = l6 | 0, this.Fl = p4 | 0, this.Gh = w5 | 0, this.Gl = h4 | 0, this.Hh = g4 | 0, this.Hl = S4 | 0;
  }
  process(e2, n4) {
    for (let d7 = 0; d7 < 16; d7++, n4 += 4) P2[d7] = e2.getUint32(n4), Q[d7] = e2.getUint32(n4 += 4);
    for (let d7 = 16; d7 < 80; d7++) {
      const m4 = P2[d7 - 15] | 0, F2 = Q[d7 - 15] | 0, q2 = x2.rotrSH(m4, F2, 1) ^ x2.rotrSH(m4, F2, 8) ^ x2.shrSH(m4, F2, 7), z5 = x2.rotrSL(m4, F2, 1) ^ x2.rotrSL(m4, F2, 8) ^ x2.shrSL(m4, F2, 7), I2 = P2[d7 - 2] | 0, O5 = Q[d7 - 2] | 0, ot3 = x2.rotrSH(I2, O5, 19) ^ x2.rotrBH(I2, O5, 61) ^ x2.shrSH(I2, O5, 6), tt4 = x2.rotrSL(I2, O5, 19) ^ x2.rotrBL(I2, O5, 61) ^ x2.shrSL(I2, O5, 6), st4 = x2.add4L(z5, tt4, Q[d7 - 7], Q[d7 - 16]), at2 = x2.add4H(st4, q2, ot3, P2[d7 - 7], P2[d7 - 16]);
      P2[d7] = at2 | 0, Q[d7] = st4 | 0;
    }
    let { Ah: r3, Al: o5, Bh: s2, Bl: a3, Ch: u2, Cl: i3, Dh: D3, Dl: c6, Eh: l6, El: p4, Fh: w5, Fl: h4, Gh: g4, Gl: S4, Hh: v6, Hl: L3 } = this;
    for (let d7 = 0; d7 < 80; d7++) {
      const m4 = x2.rotrSH(l6, p4, 14) ^ x2.rotrSH(l6, p4, 18) ^ x2.rotrBH(l6, p4, 41), F2 = x2.rotrSL(l6, p4, 14) ^ x2.rotrSL(l6, p4, 18) ^ x2.rotrBL(l6, p4, 41), q2 = l6 & w5 ^ ~l6 & g4, z5 = p4 & h4 ^ ~p4 & S4, I2 = x2.add5L(L3, F2, z5, Yn[d7], Q[d7]), O5 = x2.add5H(I2, v6, m4, q2, Vn[d7], P2[d7]), ot3 = I2 | 0, tt4 = x2.rotrSH(r3, o5, 28) ^ x2.rotrBH(r3, o5, 34) ^ x2.rotrBH(r3, o5, 39), st4 = x2.rotrSL(r3, o5, 28) ^ x2.rotrBL(r3, o5, 34) ^ x2.rotrBL(r3, o5, 39), at2 = r3 & s2 ^ r3 & u2 ^ s2 & u2, Ct4 = o5 & a3 ^ o5 & i3 ^ a3 & i3;
      v6 = g4 | 0, L3 = S4 | 0, g4 = w5 | 0, S4 = h4 | 0, w5 = l6 | 0, h4 = p4 | 0, { h: l6, l: p4 } = x2.add(D3 | 0, c6 | 0, O5 | 0, ot3 | 0), D3 = u2 | 0, c6 = i3 | 0, u2 = s2 | 0, i3 = a3 | 0, s2 = r3 | 0, a3 = o5 | 0;
      const At4 = x2.add3L(ot3, st4, Ct4);
      r3 = x2.add3H(At4, O5, tt4, at2), o5 = At4 | 0;
    }
    ({ h: r3, l: o5 } = x2.add(this.Ah | 0, this.Al | 0, r3 | 0, o5 | 0)), { h: s2, l: a3 } = x2.add(this.Bh | 0, this.Bl | 0, s2 | 0, a3 | 0), { h: u2, l: i3 } = x2.add(this.Ch | 0, this.Cl | 0, u2 | 0, i3 | 0), { h: D3, l: c6 } = x2.add(this.Dh | 0, this.Dl | 0, D3 | 0, c6 | 0), { h: l6, l: p4 } = x2.add(this.Eh | 0, this.El | 0, l6 | 0, p4 | 0), { h: w5, l: h4 } = x2.add(this.Fh | 0, this.Fl | 0, w5 | 0, h4 | 0), { h: g4, l: S4 } = x2.add(this.Gh | 0, this.Gl | 0, g4 | 0, S4 | 0), { h: v6, l: L3 } = x2.add(this.Hh | 0, this.Hl | 0, v6 | 0, L3 | 0), this.set(r3, o5, s2, a3, u2, i3, D3, c6, l6, p4, w5, h4, g4, S4, v6, L3);
  }
  roundClean() {
    P2.fill(0), Q.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Kn = Bn(() => new Jn());
var vt = BigInt(0);
var be = BigInt(1);
var Wn = BigInt(2);
function It(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function Ut(t) {
  if (!It(t)) throw new Error("Uint8Array expected");
}
function Tt(t, e2) {
  if (typeof e2 != "boolean") throw new Error(t + " boolean expected, got " + e2);
}
var Xn = Array.from({ length: 256 }, (t, e2) => e2.toString(16).padStart(2, "0"));
function Ft(t) {
  Ut(t);
  let e2 = "";
  for (let n4 = 0; n4 < t.length; n4++) e2 += Xn[t[n4]];
  return e2;
}
function pe(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  return t === "" ? vt : BigInt("0x" + t);
}
var K2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function we(t) {
  if (t >= K2._0 && t <= K2._9) return t - K2._0;
  if (t >= K2.A && t <= K2.F) return t - (K2.A - 10);
  if (t >= K2.a && t <= K2.f) return t - (K2.a - 10);
}
function Ee(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  const e2 = t.length, n4 = e2 / 2;
  if (e2 % 2) throw new Error("hex string expected, got unpadded hex of length " + e2);
  const r3 = new Uint8Array(n4);
  for (let o5 = 0, s2 = 0; o5 < n4; o5++, s2 += 2) {
    const a3 = we(t.charCodeAt(s2)), u2 = we(t.charCodeAt(s2 + 1));
    if (a3 === void 0 || u2 === void 0) {
      const i3 = t[s2] + t[s2 + 1];
      throw new Error('hex string expected, got non-hex character "' + i3 + '" at index ' + s2);
    }
    r3[o5] = a3 * 16 + u2;
  }
  return r3;
}
function Pn(t) {
  return pe(Ft(t));
}
function Et(t) {
  return Ut(t), pe(Ft(Uint8Array.from(t).reverse()));
}
function ge(t, e2) {
  return Ee(t.toString(16).padStart(e2 * 2, "0"));
}
function Nt(t, e2) {
  return ge(t, e2).reverse();
}
function W(t, e2, n4) {
  let r3;
  if (typeof e2 == "string") try {
    r3 = Ee(e2);
  } catch (s2) {
    throw new Error(t + " must be hex string or Uint8Array, cause: " + s2);
  }
  else if (It(e2)) r3 = Uint8Array.from(e2);
  else throw new Error(t + " must be hex string or Uint8Array");
  const o5 = r3.length;
  if (typeof n4 == "number" && o5 !== n4) throw new Error(t + " of length " + n4 + " expected, got " + o5);
  return r3;
}
function ye(...t) {
  let e2 = 0;
  for (let r3 = 0; r3 < t.length; r3++) {
    const o5 = t[r3];
    Ut(o5), e2 += o5.length;
  }
  const n4 = new Uint8Array(e2);
  for (let r3 = 0, o5 = 0; r3 < t.length; r3++) {
    const s2 = t[r3];
    n4.set(s2, o5), o5 += s2.length;
  }
  return n4;
}
var Lt = (t) => typeof t == "bigint" && vt <= t;
function Qn(t, e2, n4) {
  return Lt(t) && Lt(e2) && Lt(n4) && e2 <= t && t < n4;
}
function ft(t, e2, n4, r3) {
  if (!Qn(e2, n4, r3)) throw new Error("expected valid " + t + ": " + n4 + " <= n < " + r3 + ", got " + e2);
}
function tr(t) {
  let e2;
  for (e2 = 0; t > vt; t >>= be, e2 += 1) ;
  return e2;
}
var er = (t) => (Wn << BigInt(t - 1)) - be;
var nr = { bigint: (t) => typeof t == "bigint", function: (t) => typeof t == "function", boolean: (t) => typeof t == "boolean", string: (t) => typeof t == "string", stringOrUint8Array: (t) => typeof t == "string" || It(t), isSafeInteger: (t) => Number.isSafeInteger(t), array: (t) => Array.isArray(t), field: (t, e2) => e2.Fp.isValid(t), hash: (t) => typeof t == "function" && Number.isSafeInteger(t.outputLen) };
function Ot(t, e2, n4 = {}) {
  const r3 = (o5, s2, a3) => {
    const u2 = nr[s2];
    if (typeof u2 != "function") throw new Error("invalid validator function");
    const i3 = t[o5];
    if (!(a3 && i3 === void 0) && !u2(i3, t)) throw new Error("param " + String(o5) + " is invalid. Expected " + s2 + ", got " + i3);
  };
  for (const [o5, s2] of Object.entries(e2)) r3(o5, s2, false);
  for (const [o5, s2] of Object.entries(n4)) r3(o5, s2, true);
  return t;
}
function xe(t) {
  const e2 = /* @__PURE__ */ new WeakMap();
  return (n4, ...r3) => {
    const o5 = e2.get(n4);
    if (o5 !== void 0) return o5;
    const s2 = t(n4, ...r3);
    return e2.set(n4, s2), s2;
  };
}
var M2 = BigInt(0);
var N2 = BigInt(1);
var nt = BigInt(2);
var rr = BigInt(3);
var Ht = BigInt(4);
var Be = BigInt(5);
var Ce = BigInt(8);
function H(t, e2) {
  const n4 = t % e2;
  return n4 >= M2 ? n4 : e2 + n4;
}
function or(t, e2, n4) {
  if (e2 < M2) throw new Error("invalid exponent, negatives unsupported");
  if (n4 <= M2) throw new Error("invalid modulus");
  if (n4 === N2) return M2;
  let r3 = N2;
  for (; e2 > M2; ) e2 & N2 && (r3 = r3 * t % n4), t = t * t % n4, e2 >>= N2;
  return r3;
}
function J2(t, e2, n4) {
  let r3 = t;
  for (; e2-- > M2; ) r3 *= r3, r3 %= n4;
  return r3;
}
function Ae(t, e2) {
  if (t === M2) throw new Error("invert: expected non-zero number");
  if (e2 <= M2) throw new Error("invert: expected positive modulus, got " + e2);
  let n4 = H(t, e2), r3 = e2, o5 = M2, s2 = N2;
  for (; n4 !== M2; ) {
    const u2 = r3 / n4, i3 = r3 % n4, D3 = o5 - s2 * u2;
    r3 = n4, n4 = i3, o5 = s2, s2 = D3;
  }
  if (r3 !== N2) throw new Error("invert: does not exist");
  return H(o5, e2);
}
function sr(t) {
  const e2 = (t - N2) / nt;
  let n4, r3, o5;
  for (n4 = t - N2, r3 = 0; n4 % nt === M2; n4 /= nt, r3++) ;
  for (o5 = nt; o5 < t && or(o5, e2, t) !== t - N2; o5++) if (o5 > 1e3) throw new Error("Cannot find square root: likely non-prime P");
  if (r3 === 1) {
    const a3 = (t + N2) / Ht;
    return function(i3, D3) {
      const c6 = i3.pow(D3, a3);
      if (!i3.eql(i3.sqr(c6), D3)) throw new Error("Cannot find square root");
      return c6;
    };
  }
  const s2 = (n4 + N2) / nt;
  return function(u2, i3) {
    if (u2.pow(i3, e2) === u2.neg(u2.ONE)) throw new Error("Cannot find square root");
    let D3 = r3, c6 = u2.pow(u2.mul(u2.ONE, o5), n4), l6 = u2.pow(i3, s2), p4 = u2.pow(i3, n4);
    for (; !u2.eql(p4, u2.ONE); ) {
      if (u2.eql(p4, u2.ZERO)) return u2.ZERO;
      let w5 = 1;
      for (let g4 = u2.sqr(p4); w5 < D3 && !u2.eql(g4, u2.ONE); w5++) g4 = u2.sqr(g4);
      const h4 = u2.pow(c6, N2 << BigInt(D3 - w5 - 1));
      c6 = u2.sqr(h4), l6 = u2.mul(l6, h4), p4 = u2.mul(p4, c6), D3 = w5;
    }
    return l6;
  };
}
function ir(t) {
  if (t % Ht === rr) {
    const e2 = (t + N2) / Ht;
    return function(r3, o5) {
      const s2 = r3.pow(o5, e2);
      if (!r3.eql(r3.sqr(s2), o5)) throw new Error("Cannot find square root");
      return s2;
    };
  }
  if (t % Ce === Be) {
    const e2 = (t - Be) / Ce;
    return function(r3, o5) {
      const s2 = r3.mul(o5, nt), a3 = r3.pow(s2, e2), u2 = r3.mul(o5, a3), i3 = r3.mul(r3.mul(u2, nt), a3), D3 = r3.mul(u2, r3.sub(i3, r3.ONE));
      if (!r3.eql(r3.sqr(D3), o5)) throw new Error("Cannot find square root");
      return D3;
    };
  }
  return sr(t);
}
var ur = (t, e2) => (H(t, e2) & N2) === N2;
var cr = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function ar(t) {
  const e2 = { ORDER: "bigint", MASK: "bigint", BYTES: "isSafeInteger", BITS: "isSafeInteger" }, n4 = cr.reduce((r3, o5) => (r3[o5] = "function", r3), e2);
  return Ot(t, n4);
}
function fr(t, e2, n4) {
  if (n4 < M2) throw new Error("invalid exponent, negatives unsupported");
  if (n4 === M2) return t.ONE;
  if (n4 === N2) return e2;
  let r3 = t.ONE, o5 = e2;
  for (; n4 > M2; ) n4 & N2 && (r3 = t.mul(r3, o5)), o5 = t.sqr(o5), n4 >>= N2;
  return r3;
}
function Dr(t, e2) {
  const n4 = new Array(e2.length), r3 = e2.reduce((s2, a3, u2) => t.is0(a3) ? s2 : (n4[u2] = s2, t.mul(s2, a3)), t.ONE), o5 = t.inv(r3);
  return e2.reduceRight((s2, a3, u2) => t.is0(a3) ? s2 : (n4[u2] = t.mul(s2, n4[u2]), t.mul(s2, a3)), o5), n4;
}
function me(t, e2) {
  const n4 = e2 !== void 0 ? e2 : t.toString(2).length, r3 = Math.ceil(n4 / 8);
  return { nBitLength: n4, nByteLength: r3 };
}
function _e(t, e2, n4 = false, r3 = {}) {
  if (t <= M2) throw new Error("invalid field: expected ORDER > 0, got " + t);
  const { nBitLength: o5, nByteLength: s2 } = me(t, e2);
  if (s2 > 2048) throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a3;
  const u2 = Object.freeze({ ORDER: t, isLE: n4, BITS: o5, BYTES: s2, MASK: er(o5), ZERO: M2, ONE: N2, create: (i3) => H(i3, t), isValid: (i3) => {
    if (typeof i3 != "bigint") throw new Error("invalid field element: expected bigint, got " + typeof i3);
    return M2 <= i3 && i3 < t;
  }, is0: (i3) => i3 === M2, isOdd: (i3) => (i3 & N2) === N2, neg: (i3) => H(-i3, t), eql: (i3, D3) => i3 === D3, sqr: (i3) => H(i3 * i3, t), add: (i3, D3) => H(i3 + D3, t), sub: (i3, D3) => H(i3 - D3, t), mul: (i3, D3) => H(i3 * D3, t), pow: (i3, D3) => fr(u2, i3, D3), div: (i3, D3) => H(i3 * Ae(D3, t), t), sqrN: (i3) => i3 * i3, addN: (i3, D3) => i3 + D3, subN: (i3, D3) => i3 - D3, mulN: (i3, D3) => i3 * D3, inv: (i3) => Ae(i3, t), sqrt: r3.sqrt || ((i3) => (a3 || (a3 = ir(t)), a3(u2, i3))), invertBatch: (i3) => Dr(u2, i3), cmov: (i3, D3, c6) => c6 ? D3 : i3, toBytes: (i3) => n4 ? Nt(i3, s2) : ge(i3, s2), fromBytes: (i3) => {
    if (i3.length !== s2) throw new Error("Field.fromBytes: expected " + s2 + " bytes, got " + i3.length);
    return n4 ? Et(i3) : Pn(i3);
  } });
  return Object.freeze(u2);
}
var Se = BigInt(0);
var gt = BigInt(1);
function zt(t, e2) {
  const n4 = e2.negate();
  return t ? n4 : e2;
}
function ve(t, e2) {
  if (!Number.isSafeInteger(t) || t <= 0 || t > e2) throw new Error("invalid window size, expected [1.." + e2 + "], got W=" + t);
}
function Mt(t, e2) {
  ve(t, e2);
  const n4 = Math.ceil(e2 / t) + 1, r3 = 2 ** (t - 1);
  return { windows: n4, windowSize: r3 };
}
function dr(t, e2) {
  if (!Array.isArray(t)) throw new Error("array expected");
  t.forEach((n4, r3) => {
    if (!(n4 instanceof e2)) throw new Error("invalid point at index " + r3);
  });
}
function hr(t, e2) {
  if (!Array.isArray(t)) throw new Error("array of scalars expected");
  t.forEach((n4, r3) => {
    if (!e2.isValid(n4)) throw new Error("invalid scalar at index " + r3);
  });
}
var qt = /* @__PURE__ */ new WeakMap();
var Ie = /* @__PURE__ */ new WeakMap();
function $t(t) {
  return Ie.get(t) || 1;
}
function lr(t, e2) {
  return { constTimeNegate: zt, hasPrecomputes(n4) {
    return $t(n4) !== 1;
  }, unsafeLadder(n4, r3, o5 = t.ZERO) {
    let s2 = n4;
    for (; r3 > Se; ) r3 & gt && (o5 = o5.add(s2)), s2 = s2.double(), r3 >>= gt;
    return o5;
  }, precomputeWindow(n4, r3) {
    const { windows: o5, windowSize: s2 } = Mt(r3, e2), a3 = [];
    let u2 = n4, i3 = u2;
    for (let D3 = 0; D3 < o5; D3++) {
      i3 = u2, a3.push(i3);
      for (let c6 = 1; c6 < s2; c6++) i3 = i3.add(u2), a3.push(i3);
      u2 = i3.double();
    }
    return a3;
  }, wNAF(n4, r3, o5) {
    const { windows: s2, windowSize: a3 } = Mt(n4, e2);
    let u2 = t.ZERO, i3 = t.BASE;
    const D3 = BigInt(2 ** n4 - 1), c6 = 2 ** n4, l6 = BigInt(n4);
    for (let p4 = 0; p4 < s2; p4++) {
      const w5 = p4 * a3;
      let h4 = Number(o5 & D3);
      o5 >>= l6, h4 > a3 && (h4 -= c6, o5 += gt);
      const g4 = w5, S4 = w5 + Math.abs(h4) - 1, v6 = p4 % 2 !== 0, L3 = h4 < 0;
      h4 === 0 ? i3 = i3.add(zt(v6, r3[g4])) : u2 = u2.add(zt(L3, r3[S4]));
    }
    return { p: u2, f: i3 };
  }, wNAFUnsafe(n4, r3, o5, s2 = t.ZERO) {
    const { windows: a3, windowSize: u2 } = Mt(n4, e2), i3 = BigInt(2 ** n4 - 1), D3 = 2 ** n4, c6 = BigInt(n4);
    for (let l6 = 0; l6 < a3; l6++) {
      const p4 = l6 * u2;
      if (o5 === Se) break;
      let w5 = Number(o5 & i3);
      if (o5 >>= c6, w5 > u2 && (w5 -= D3, o5 += gt), w5 === 0) continue;
      let h4 = r3[p4 + Math.abs(w5) - 1];
      w5 < 0 && (h4 = h4.negate()), s2 = s2.add(h4);
    }
    return s2;
  }, getPrecomputes(n4, r3, o5) {
    let s2 = qt.get(r3);
    return s2 || (s2 = this.precomputeWindow(r3, n4), n4 !== 1 && qt.set(r3, o5(s2))), s2;
  }, wNAFCached(n4, r3, o5) {
    const s2 = $t(n4);
    return this.wNAF(s2, this.getPrecomputes(s2, n4, o5), r3);
  }, wNAFCachedUnsafe(n4, r3, o5, s2) {
    const a3 = $t(n4);
    return a3 === 1 ? this.unsafeLadder(n4, r3, s2) : this.wNAFUnsafe(a3, this.getPrecomputes(a3, n4, o5), r3, s2);
  }, setWindowSize(n4, r3) {
    ve(r3, e2), Ie.set(n4, r3), qt.delete(n4);
  } };
}
function br(t, e2, n4, r3) {
  if (dr(n4, t), hr(r3, e2), n4.length !== r3.length) throw new Error("arrays of points and scalars must have equal length");
  const o5 = t.ZERO, s2 = tr(BigInt(n4.length)), a3 = s2 > 12 ? s2 - 3 : s2 > 4 ? s2 - 2 : s2 ? 2 : 1, u2 = (1 << a3) - 1, i3 = new Array(u2 + 1).fill(o5), D3 = Math.floor((e2.BITS - 1) / a3) * a3;
  let c6 = o5;
  for (let l6 = D3; l6 >= 0; l6 -= a3) {
    i3.fill(o5);
    for (let w5 = 0; w5 < r3.length; w5++) {
      const h4 = r3[w5], g4 = Number(h4 >> BigInt(l6) & BigInt(u2));
      i3[g4] = i3[g4].add(n4[w5]);
    }
    let p4 = o5;
    for (let w5 = i3.length - 1, h4 = o5; w5 > 0; w5--) h4 = h4.add(i3[w5]), p4 = p4.add(h4);
    if (c6 = c6.add(p4), l6 !== 0) for (let w5 = 0; w5 < a3; w5++) c6 = c6.double();
  }
  return c6;
}
function pr(t) {
  return ar(t.Fp), Ot(t, { n: "bigint", h: "bigint", Gx: "field", Gy: "field" }, { nBitLength: "isSafeInteger", nByteLength: "isSafeInteger" }), Object.freeze({ ...me(t.n, t.nBitLength), ...t, p: t.Fp.ORDER });
}
var G = BigInt(0);
var j2 = BigInt(1);
var yt = BigInt(2);
var wr = BigInt(8);
var Er = { zip215: true };
function gr(t) {
  const e2 = pr(t);
  return Ot(t, { hash: "function", a: "bigint", d: "bigint", randomBytes: "function" }, { adjustScalarBytes: "function", domain: "function", uvRatio: "function", mapToCurve: "function" }), Object.freeze({ ...e2 });
}
function yr(t) {
  const e2 = gr(t), { Fp: n4, n: r3, prehash: o5, hash: s2, randomBytes: a3, nByteLength: u2, h: i3 } = e2, D3 = yt << BigInt(u2 * 8) - j2, c6 = n4.create, l6 = _e(e2.n, e2.nBitLength), p4 = e2.uvRatio || ((y4, f6) => {
    try {
      return { isValid: true, value: n4.sqrt(y4 * n4.inv(f6)) };
    } catch {
      return { isValid: false, value: G };
    }
  }), w5 = e2.adjustScalarBytes || ((y4) => y4), h4 = e2.domain || ((y4, f6, b4) => {
    if (Tt("phflag", b4), f6.length || b4) throw new Error("Contexts/pre-hash are not supported");
    return y4;
  });
  function g4(y4, f6) {
    ft("coordinate " + y4, f6, G, D3);
  }
  function S4(y4) {
    if (!(y4 instanceof d7)) throw new Error("ExtendedPoint expected");
  }
  const v6 = xe((y4, f6) => {
    const { ex: b4, ey: E4, ez: B2 } = y4, C5 = y4.is0();
    f6 == null && (f6 = C5 ? wr : n4.inv(B2));
    const A3 = c6(b4 * f6), U3 = c6(E4 * f6), _3 = c6(B2 * f6);
    if (C5) return { x: G, y: j2 };
    if (_3 !== j2) throw new Error("invZ was invalid");
    return { x: A3, y: U3 };
  }), L3 = xe((y4) => {
    const { a: f6, d: b4 } = e2;
    if (y4.is0()) throw new Error("bad point: ZERO");
    const { ex: E4, ey: B2, ez: C5, et: A3 } = y4, U3 = c6(E4 * E4), _3 = c6(B2 * B2), T4 = c6(C5 * C5), $4 = c6(T4 * T4), R4 = c6(U3 * f6), V3 = c6(T4 * c6(R4 + _3)), Y3 = c6($4 + c6(b4 * c6(U3 * _3)));
    if (V3 !== Y3) throw new Error("bad point: equation left != right (1)");
    const Z2 = c6(E4 * B2), X4 = c6(C5 * A3);
    if (Z2 !== X4) throw new Error("bad point: equation left != right (2)");
    return true;
  });
  class d7 {
    constructor(f6, b4, E4, B2) {
      this.ex = f6, this.ey = b4, this.ez = E4, this.et = B2, g4("x", f6), g4("y", b4), g4("z", E4), g4("t", B2), Object.freeze(this);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(f6) {
      if (f6 instanceof d7) throw new Error("extended point not allowed");
      const { x: b4, y: E4 } = f6 || {};
      return g4("x", b4), g4("y", E4), new d7(b4, E4, j2, c6(b4 * E4));
    }
    static normalizeZ(f6) {
      const b4 = n4.invertBatch(f6.map((E4) => E4.ez));
      return f6.map((E4, B2) => E4.toAffine(b4[B2])).map(d7.fromAffine);
    }
    static msm(f6, b4) {
      return br(d7, l6, f6, b4);
    }
    _setWindowSize(f6) {
      q2.setWindowSize(this, f6);
    }
    assertValidity() {
      L3(this);
    }
    equals(f6) {
      S4(f6);
      const { ex: b4, ey: E4, ez: B2 } = this, { ex: C5, ey: A3, ez: U3 } = f6, _3 = c6(b4 * U3), T4 = c6(C5 * B2), $4 = c6(E4 * U3), R4 = c6(A3 * B2);
      return _3 === T4 && $4 === R4;
    }
    is0() {
      return this.equals(d7.ZERO);
    }
    negate() {
      return new d7(c6(-this.ex), this.ey, this.ez, c6(-this.et));
    }
    double() {
      const { a: f6 } = e2, { ex: b4, ey: E4, ez: B2 } = this, C5 = c6(b4 * b4), A3 = c6(E4 * E4), U3 = c6(yt * c6(B2 * B2)), _3 = c6(f6 * C5), T4 = b4 + E4, $4 = c6(c6(T4 * T4) - C5 - A3), R4 = _3 + A3, V3 = R4 - U3, Y3 = _3 - A3, Z2 = c6($4 * V3), X4 = c6(R4 * Y3), et4 = c6($4 * Y3), pt4 = c6(V3 * R4);
      return new d7(Z2, X4, pt4, et4);
    }
    add(f6) {
      S4(f6);
      const { a: b4, d: E4 } = e2, { ex: B2, ey: C5, ez: A3, et: U3 } = this, { ex: _3, ey: T4, ez: $4, et: R4 } = f6;
      if (b4 === BigInt(-1)) {
        const re4 = c6((C5 - B2) * (T4 + _3)), oe4 = c6((C5 + B2) * (T4 - _3)), mt4 = c6(oe4 - re4);
        if (mt4 === G) return this.double();
        const se3 = c6(A3 * yt * R4), ie4 = c6(U3 * yt * $4), ue2 = ie4 + se3, ce3 = oe4 + re4, ae4 = ie4 - se3, Dn3 = c6(ue2 * mt4), dn3 = c6(ce3 * ae4), hn3 = c6(ue2 * ae4), ln3 = c6(mt4 * ce3);
        return new d7(Dn3, dn3, ln3, hn3);
      }
      const V3 = c6(B2 * _3), Y3 = c6(C5 * T4), Z2 = c6(U3 * E4 * R4), X4 = c6(A3 * $4), et4 = c6((B2 + C5) * (_3 + T4) - V3 - Y3), pt4 = X4 - Z2, ee4 = X4 + Z2, ne3 = c6(Y3 - b4 * V3), un3 = c6(et4 * pt4), cn3 = c6(ee4 * ne3), an3 = c6(et4 * ne3), fn3 = c6(pt4 * ee4);
      return new d7(un3, cn3, fn3, an3);
    }
    subtract(f6) {
      return this.add(f6.negate());
    }
    wNAF(f6) {
      return q2.wNAFCached(this, f6, d7.normalizeZ);
    }
    multiply(f6) {
      const b4 = f6;
      ft("scalar", b4, j2, r3);
      const { p: E4, f: B2 } = this.wNAF(b4);
      return d7.normalizeZ([E4, B2])[0];
    }
    multiplyUnsafe(f6, b4 = d7.ZERO) {
      const E4 = f6;
      return ft("scalar", E4, G, r3), E4 === G ? F2 : this.is0() || E4 === j2 ? this : q2.wNAFCachedUnsafe(this, E4, d7.normalizeZ, b4);
    }
    isSmallOrder() {
      return this.multiplyUnsafe(i3).is0();
    }
    isTorsionFree() {
      return q2.unsafeLadder(this, r3).is0();
    }
    toAffine(f6) {
      return v6(this, f6);
    }
    clearCofactor() {
      const { h: f6 } = e2;
      return f6 === j2 ? this : this.multiplyUnsafe(f6);
    }
    static fromHex(f6, b4 = false) {
      const { d: E4, a: B2 } = e2, C5 = n4.BYTES;
      f6 = W("pointHex", f6, C5), Tt("zip215", b4);
      const A3 = f6.slice(), U3 = f6[C5 - 1];
      A3[C5 - 1] = U3 & -129;
      const _3 = Et(A3), T4 = b4 ? D3 : n4.ORDER;
      ft("pointHex.y", _3, G, T4);
      const $4 = c6(_3 * _3), R4 = c6($4 - j2), V3 = c6(E4 * $4 - B2);
      let { isValid: Y3, value: Z2 } = p4(R4, V3);
      if (!Y3) throw new Error("Point.fromHex: invalid y coordinate");
      const X4 = (Z2 & j2) === j2, et4 = (U3 & 128) !== 0;
      if (!b4 && Z2 === G && et4) throw new Error("Point.fromHex: x=0 and x_0=1");
      return et4 !== X4 && (Z2 = c6(-Z2)), d7.fromAffine({ x: Z2, y: _3 });
    }
    static fromPrivateKey(f6) {
      return O5(f6).point;
    }
    toRawBytes() {
      const { x: f6, y: b4 } = this.toAffine(), E4 = Nt(b4, n4.BYTES);
      return E4[E4.length - 1] |= f6 & j2 ? 128 : 0, E4;
    }
    toHex() {
      return Ft(this.toRawBytes());
    }
  }
  d7.BASE = new d7(e2.Gx, e2.Gy, j2, c6(e2.Gx * e2.Gy)), d7.ZERO = new d7(G, j2, j2, G);
  const { BASE: m4, ZERO: F2 } = d7, q2 = lr(d7, u2 * 8);
  function z5(y4) {
    return H(y4, r3);
  }
  function I2(y4) {
    return z5(Et(y4));
  }
  function O5(y4) {
    const f6 = n4.BYTES;
    y4 = W("private key", y4, f6);
    const b4 = W("hashed private key", s2(y4), 2 * f6), E4 = w5(b4.slice(0, f6)), B2 = b4.slice(f6, 2 * f6), C5 = I2(E4), A3 = m4.multiply(C5), U3 = A3.toRawBytes();
    return { head: E4, prefix: B2, scalar: C5, point: A3, pointBytes: U3 };
  }
  function ot3(y4) {
    return O5(y4).pointBytes;
  }
  function tt4(y4 = new Uint8Array(), ...f6) {
    const b4 = ye(...f6);
    return I2(s2(h4(b4, W("context", y4), !!o5)));
  }
  function st4(y4, f6, b4 = {}) {
    y4 = W("message", y4), o5 && (y4 = o5(y4));
    const { prefix: E4, scalar: B2, pointBytes: C5 } = O5(f6), A3 = tt4(b4.context, E4, y4), U3 = m4.multiply(A3).toRawBytes(), _3 = tt4(b4.context, U3, C5, y4), T4 = z5(A3 + _3 * B2);
    ft("signature.s", T4, G, r3);
    const $4 = ye(U3, Nt(T4, n4.BYTES));
    return W("result", $4, n4.BYTES * 2);
  }
  const at2 = Er;
  function Ct4(y4, f6, b4, E4 = at2) {
    const { context: B2, zip215: C5 } = E4, A3 = n4.BYTES;
    y4 = W("signature", y4, 2 * A3), f6 = W("message", f6), b4 = W("publicKey", b4, A3), C5 !== void 0 && Tt("zip215", C5), o5 && (f6 = o5(f6));
    const U3 = Et(y4.slice(A3, 2 * A3));
    let _3, T4, $4;
    try {
      _3 = d7.fromHex(b4, C5), T4 = d7.fromHex(y4.slice(0, A3), C5), $4 = m4.multiplyUnsafe(U3);
    } catch {
      return false;
    }
    if (!C5 && _3.isSmallOrder()) return false;
    const R4 = tt4(B2, T4.toRawBytes(), _3.toRawBytes(), f6);
    return T4.add(_3.multiplyUnsafe(R4)).subtract($4).clearCofactor().equals(d7.ZERO);
  }
  return m4._setWindowSize(8), { CURVE: e2, getPublicKey: ot3, sign: st4, verify: Ct4, ExtendedPoint: d7, utils: { getExtendedPublicKey: O5, randomPrivateKey: () => a3(n4.BYTES), precompute(y4 = 8, f6 = d7.BASE) {
    return f6._setWindowSize(y4), f6.multiply(BigInt(3)), f6;
  } } };
}
BigInt(0), BigInt(1);
var kt = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
var Ue = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
BigInt(0);
var xr = BigInt(1);
var Te = BigInt(2);
BigInt(3);
var Br = BigInt(5);
var Cr = BigInt(8);
function Ar(t) {
  const e2 = BigInt(10), n4 = BigInt(20), r3 = BigInt(40), o5 = BigInt(80), s2 = kt, u2 = t * t % s2 * t % s2, i3 = J2(u2, Te, s2) * u2 % s2, D3 = J2(i3, xr, s2) * t % s2, c6 = J2(D3, Br, s2) * D3 % s2, l6 = J2(c6, e2, s2) * c6 % s2, p4 = J2(l6, n4, s2) * l6 % s2, w5 = J2(p4, r3, s2) * p4 % s2, h4 = J2(w5, o5, s2) * w5 % s2, g4 = J2(h4, o5, s2) * w5 % s2, S4 = J2(g4, e2, s2) * c6 % s2;
  return { pow_p_5_8: J2(S4, Te, s2) * t % s2, b2: u2 };
}
function mr(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
function _r(t, e2) {
  const n4 = kt, r3 = H(e2 * e2 * e2, n4), o5 = H(r3 * r3 * e2, n4), s2 = Ar(t * o5).pow_p_5_8;
  let a3 = H(t * r3 * s2, n4);
  const u2 = H(e2 * a3 * a3, n4), i3 = a3, D3 = H(a3 * Ue, n4), c6 = u2 === t, l6 = u2 === H(-t, n4), p4 = u2 === H(-t * Ue, n4);
  return c6 && (a3 = i3), (l6 || p4) && (a3 = D3), ur(a3, n4) && (a3 = H(-a3, n4)), { isValid: c6 || l6, value: a3 };
}
var Sr = (() => _e(kt, void 0, true))();
var vr = (() => ({ a: BigInt(-1), d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"), Fp: Sr, n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"), h: Cr, Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"), Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"), hash: Kn, randomBytes: he, adjustScalarBytes: mr, uvRatio: _r }))();
var Rt = (() => yr(vr))();
var jt = "EdDSA";
var Zt = "JWT";
var ut = ".";
var Dt = "base64url";
var Gt = "utf8";
var xt = "utf8";
var Vt = ":";
var Yt = "did";
var Jt = "key";
var dt = "base58btc";
var Kt = "z";
var Wt = "K36";
var Ne = 32;
function Xt(t) {
  return globalThis.Buffer != null ? new Uint8Array(t.buffer, t.byteOffset, t.byteLength) : t;
}
function Le(t = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Xt(globalThis.Buffer.allocUnsafe(t)) : new Uint8Array(t);
}
function Oe(t, e2) {
  e2 || (e2 = t.reduce((o5, s2) => o5 + s2.length, 0));
  const n4 = Le(e2);
  let r3 = 0;
  for (const o5 of t) n4.set(o5, r3), r3 += o5.length;
  return Xt(n4);
}
function Ir(t, e2) {
  if (t.length >= 255) throw new TypeError("Alphabet too long");
  for (var n4 = new Uint8Array(256), r3 = 0; r3 < n4.length; r3++) n4[r3] = 255;
  for (var o5 = 0; o5 < t.length; o5++) {
    var s2 = t.charAt(o5), a3 = s2.charCodeAt(0);
    if (n4[a3] !== 255) throw new TypeError(s2 + " is ambiguous");
    n4[a3] = o5;
  }
  var u2 = t.length, i3 = t.charAt(0), D3 = Math.log(u2) / Math.log(256), c6 = Math.log(256) / Math.log(u2);
  function l6(h4) {
    if (h4 instanceof Uint8Array || (ArrayBuffer.isView(h4) ? h4 = new Uint8Array(h4.buffer, h4.byteOffset, h4.byteLength) : Array.isArray(h4) && (h4 = Uint8Array.from(h4))), !(h4 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (h4.length === 0) return "";
    for (var g4 = 0, S4 = 0, v6 = 0, L3 = h4.length; v6 !== L3 && h4[v6] === 0; ) v6++, g4++;
    for (var d7 = (L3 - v6) * c6 + 1 >>> 0, m4 = new Uint8Array(d7); v6 !== L3; ) {
      for (var F2 = h4[v6], q2 = 0, z5 = d7 - 1; (F2 !== 0 || q2 < S4) && z5 !== -1; z5--, q2++) F2 += 256 * m4[z5] >>> 0, m4[z5] = F2 % u2 >>> 0, F2 = F2 / u2 >>> 0;
      if (F2 !== 0) throw new Error("Non-zero carry");
      S4 = q2, v6++;
    }
    for (var I2 = d7 - S4; I2 !== d7 && m4[I2] === 0; ) I2++;
    for (var O5 = i3.repeat(g4); I2 < d7; ++I2) O5 += t.charAt(m4[I2]);
    return O5;
  }
  function p4(h4) {
    if (typeof h4 != "string") throw new TypeError("Expected String");
    if (h4.length === 0) return new Uint8Array();
    var g4 = 0;
    if (h4[g4] !== " ") {
      for (var S4 = 0, v6 = 0; h4[g4] === i3; ) S4++, g4++;
      for (var L3 = (h4.length - g4) * D3 + 1 >>> 0, d7 = new Uint8Array(L3); h4[g4]; ) {
        var m4 = n4[h4.charCodeAt(g4)];
        if (m4 === 255) return;
        for (var F2 = 0, q2 = L3 - 1; (m4 !== 0 || F2 < v6) && q2 !== -1; q2--, F2++) m4 += u2 * d7[q2] >>> 0, d7[q2] = m4 % 256 >>> 0, m4 = m4 / 256 >>> 0;
        if (m4 !== 0) throw new Error("Non-zero carry");
        v6 = F2, g4++;
      }
      if (h4[g4] !== " ") {
        for (var z5 = L3 - v6; z5 !== L3 && d7[z5] === 0; ) z5++;
        for (var I2 = new Uint8Array(S4 + (L3 - z5)), O5 = S4; z5 !== L3; ) I2[O5++] = d7[z5++];
        return I2;
      }
    }
  }
  function w5(h4) {
    var g4 = p4(h4);
    if (g4) return g4;
    throw new Error(`Non-${e2} character`);
  }
  return { encode: l6, decodeUnsafe: p4, decode: w5 };
}
var Ur = Ir;
var Tr = Ur;
var He = (t) => {
  if (t instanceof Uint8Array && t.constructor.name === "Uint8Array") return t;
  if (t instanceof ArrayBuffer) return new Uint8Array(t);
  if (ArrayBuffer.isView(t)) return new Uint8Array(t.buffer, t.byteOffset, t.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var Fr = (t) => new TextEncoder().encode(t);
var Nr = (t) => new TextDecoder().decode(t);
var Lr = class {
  constructor(e2, n4, r3) {
    this.name = e2, this.prefix = n4, this.baseEncode = r3;
  }
  encode(e2) {
    if (e2 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e2)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var Or = class {
  constructor(e2, n4, r3) {
    if (this.name = e2, this.prefix = n4, n4.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = n4.codePointAt(0), this.baseDecode = r3;
  }
  decode(e2) {
    if (typeof e2 == "string") {
      if (e2.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e2)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e2.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e2) {
    return ze(this, e2);
  }
};
var Hr = class {
  constructor(e2) {
    this.decoders = e2;
  }
  or(e2) {
    return ze(this, e2);
  }
  decode(e2) {
    const n4 = e2[0], r3 = this.decoders[n4];
    if (r3) return r3.decode(e2);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e2)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ze = (t, e2) => new Hr({ ...t.decoders || { [t.prefix]: t }, ...e2.decoders || { [e2.prefix]: e2 } });
var zr = class {
  constructor(e2, n4, r3, o5) {
    this.name = e2, this.prefix = n4, this.baseEncode = r3, this.baseDecode = o5, this.encoder = new Lr(e2, n4, r3), this.decoder = new Or(e2, n4, o5);
  }
  encode(e2) {
    return this.encoder.encode(e2);
  }
  decode(e2) {
    return this.decoder.decode(e2);
  }
};
var Bt = ({ name: t, prefix: e2, encode: n4, decode: r3 }) => new zr(t, e2, n4, r3);
var ht = ({ prefix: t, name: e2, alphabet: n4 }) => {
  const { encode: r3, decode: o5 } = Tr(n4, e2);
  return Bt({ prefix: t, name: e2, encode: r3, decode: (s2) => He(o5(s2)) });
};
var Mr = (t, e2, n4, r3) => {
  const o5 = {};
  for (let c6 = 0; c6 < e2.length; ++c6) o5[e2[c6]] = c6;
  let s2 = t.length;
  for (; t[s2 - 1] === "="; ) --s2;
  const a3 = new Uint8Array(s2 * n4 / 8 | 0);
  let u2 = 0, i3 = 0, D3 = 0;
  for (let c6 = 0; c6 < s2; ++c6) {
    const l6 = o5[t[c6]];
    if (l6 === void 0) throw new SyntaxError(`Non-${r3} character`);
    i3 = i3 << n4 | l6, u2 += n4, u2 >= 8 && (u2 -= 8, a3[D3++] = 255 & i3 >> u2);
  }
  if (u2 >= n4 || 255 & i3 << 8 - u2) throw new SyntaxError("Unexpected end of data");
  return a3;
};
var qr = (t, e2, n4) => {
  const r3 = e2[e2.length - 1] === "=", o5 = (1 << n4) - 1;
  let s2 = "", a3 = 0, u2 = 0;
  for (let i3 = 0; i3 < t.length; ++i3) for (u2 = u2 << 8 | t[i3], a3 += 8; a3 > n4; ) a3 -= n4, s2 += e2[o5 & u2 >> a3];
  if (a3 && (s2 += e2[o5 & u2 << n4 - a3]), r3) for (; s2.length * n4 & 7; ) s2 += "=";
  return s2;
};
var k3 = ({ name: t, prefix: e2, bitsPerChar: n4, alphabet: r3 }) => Bt({ prefix: e2, name: t, encode(o5) {
  return qr(o5, r3, n4);
}, decode(o5) {
  return Mr(o5, r3, n4, t);
} });
var $r = Bt({ prefix: "\0", name: "identity", encode: (t) => Nr(t), decode: (t) => Fr(t) });
var kr = Object.freeze({ __proto__: null, identity: $r });
var Rr = k3({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var jr = Object.freeze({ __proto__: null, base2: Rr });
var Zr = k3({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Gr = Object.freeze({ __proto__: null, base8: Zr });
var Vr = ht({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Yr = Object.freeze({ __proto__: null, base10: Vr });
var Jr = k3({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Kr = k3({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Wr = Object.freeze({ __proto__: null, base16: Jr, base16upper: Kr });
var Xr = k3({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Pr = k3({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Qr = k3({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var to = k3({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var eo = k3({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var no = k3({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var ro = k3({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var oo = k3({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var so = k3({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var io = Object.freeze({ __proto__: null, base32: Xr, base32upper: Pr, base32pad: Qr, base32padupper: to, base32hex: eo, base32hexupper: no, base32hexpad: ro, base32hexpadupper: oo, base32z: so });
var uo = ht({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var co = ht({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var ao = Object.freeze({ __proto__: null, base36: uo, base36upper: co });
var fo = ht({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Do = ht({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var ho = Object.freeze({ __proto__: null, base58btc: fo, base58flickr: Do });
var lo = k3({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var bo = k3({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var po = k3({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var wo = k3({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Eo = Object.freeze({ __proto__: null, base64: lo, base64pad: bo, base64url: po, base64urlpad: wo });
var Me = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var go = Me.reduce((t, e2, n4) => (t[n4] = e2, t), []);
var yo = Me.reduce((t, e2, n4) => (t[e2.codePointAt(0)] = n4, t), []);
function xo(t) {
  return t.reduce((e2, n4) => (e2 += go[n4], e2), "");
}
function Bo(t) {
  const e2 = [];
  for (const n4 of t) {
    const r3 = yo[n4.codePointAt(0)];
    if (r3 === void 0) throw new Error(`Non-base256emoji character: ${n4}`);
    e2.push(r3);
  }
  return new Uint8Array(e2);
}
var Co = Bt({ prefix: "🚀", name: "base256emoji", encode: xo, decode: Bo });
var Ao = Object.freeze({ __proto__: null, base256emoji: Co });
var mo = $e;
var qe = 128;
var _o = 127;
var So = ~_o;
var vo = Math.pow(2, 31);
function $e(t, e2, n4) {
  e2 = e2 || [], n4 = n4 || 0;
  for (var r3 = n4; t >= vo; ) e2[n4++] = t & 255 | qe, t /= 128;
  for (; t & So; ) e2[n4++] = t & 255 | qe, t >>>= 7;
  return e2[n4] = t | 0, $e.bytes = n4 - r3 + 1, e2;
}
var Io = Pt;
var Uo = 128;
var ke = 127;
function Pt(t, r3) {
  var n4 = 0, r3 = r3 || 0, o5 = 0, s2 = r3, a3, u2 = t.length;
  do {
    if (s2 >= u2) throw Pt.bytes = 0, new RangeError("Could not decode varint");
    a3 = t[s2++], n4 += o5 < 28 ? (a3 & ke) << o5 : (a3 & ke) * Math.pow(2, o5), o5 += 7;
  } while (a3 >= Uo);
  return Pt.bytes = s2 - r3, n4;
}
var To = Math.pow(2, 7);
var Fo = Math.pow(2, 14);
var No = Math.pow(2, 21);
var Lo = Math.pow(2, 28);
var Oo = Math.pow(2, 35);
var Ho = Math.pow(2, 42);
var zo = Math.pow(2, 49);
var Mo = Math.pow(2, 56);
var qo = Math.pow(2, 63);
var $o = function(t) {
  return t < To ? 1 : t < Fo ? 2 : t < No ? 3 : t < Lo ? 4 : t < Oo ? 5 : t < Ho ? 6 : t < zo ? 7 : t < Mo ? 8 : t < qo ? 9 : 10;
};
var ko = { encode: mo, decode: Io, encodingLength: $o };
var Re = ko;
var je = (t, e2, n4 = 0) => (Re.encode(t, e2, n4), e2);
var Ze = (t) => Re.encodingLength(t);
var Qt = (t, e2) => {
  const n4 = e2.byteLength, r3 = Ze(t), o5 = r3 + Ze(n4), s2 = new Uint8Array(o5 + n4);
  return je(t, s2, 0), je(n4, s2, r3), s2.set(e2, o5), new Ro(t, n4, e2, s2);
};
var Ro = class {
  constructor(e2, n4, r3, o5) {
    this.code = e2, this.size = n4, this.digest = r3, this.bytes = o5;
  }
};
var Ge = ({ name: t, code: e2, encode: n4 }) => new jo(t, e2, n4);
var jo = class {
  constructor(e2, n4, r3) {
    this.name = e2, this.code = n4, this.encode = r3;
  }
  digest(e2) {
    if (e2 instanceof Uint8Array) {
      const n4 = this.encode(e2);
      return n4 instanceof Uint8Array ? Qt(this.code, n4) : n4.then((r3) => Qt(this.code, r3));
    } else throw Error("Unknown type, must be binary type");
  }
};
var Ve = (t) => async (e2) => new Uint8Array(await crypto.subtle.digest(t, e2));
var Zo = Ge({ name: "sha2-256", code: 18, encode: Ve("SHA-256") });
var Go = Ge({ name: "sha2-512", code: 19, encode: Ve("SHA-512") });
var Vo = Object.freeze({ __proto__: null, sha256: Zo, sha512: Go });
var Ye = 0;
var Yo = "identity";
var Je = He;
var Jo = (t) => Qt(Ye, Je(t));
var Ko = { code: Ye, name: Yo, encode: Je, digest: Jo };
var Wo = Object.freeze({ __proto__: null, identity: Ko });
new TextEncoder(), new TextDecoder();
var Ke = { ...kr, ...jr, ...Gr, ...Yr, ...Wr, ...io, ...ao, ...ho, ...Eo, ...Ao };
({ ...Vo, ...Wo });
function We(t, e2, n4, r3) {
  return { name: t, prefix: e2, encoder: { name: t, prefix: e2, encode: n4 }, decoder: { decode: r3 } };
}
var Xe = We("utf8", "u", (t) => "u" + new TextDecoder("utf8").decode(t), (t) => new TextEncoder().encode(t.substring(1)));
var te = We("ascii", "a", (t) => {
  let e2 = "a";
  for (let n4 = 0; n4 < t.length; n4++) e2 += String.fromCharCode(t[n4]);
  return e2;
}, (t) => {
  t = t.substring(1);
  const e2 = Le(t.length);
  for (let n4 = 0; n4 < t.length; n4++) e2[n4] = t.charCodeAt(n4);
  return e2;
});
var Pe = { utf8: Xe, "utf-8": Xe, hex: Ke.base16, latin1: te, ascii: te, binary: te, ...Ke };
function ct(t, e2 = "utf8") {
  const n4 = Pe[e2];
  if (!n4) throw new Error(`Unsupported encoding "${e2}"`);
  return (e2 === "utf8" || e2 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(t.buffer, t.byteOffset, t.byteLength).toString("utf8") : n4.encoder.encode(t).substring(1);
}
function rt(t, e2 = "utf8") {
  const n4 = Pe[e2];
  if (!n4) throw new Error(`Unsupported encoding "${e2}"`);
  return (e2 === "utf8" || e2 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Xt(globalThis.Buffer.from(t, "utf-8")) : n4.decoder.decode(`${n4.prefix}${t}`);
}
function lt(t) {
  return safeJsonParse(ct(rt(t, Dt), Gt));
}
function bt(t) {
  return ct(rt(safeJsonStringify(t), Gt), Dt);
}
function Qe(t) {
  const e2 = rt(Wt, dt), n4 = Kt + ct(Oe([e2, t]), dt);
  return [Yt, Jt, n4].join(Vt);
}
function en(t) {
  return ct(t, Dt);
}
function nn(t) {
  return rt(t, Dt);
}
function rn(t) {
  return rt([bt(t.header), bt(t.payload)].join(ut), xt);
}
function on(t) {
  return [bt(t.header), bt(t.payload), en(t.signature)].join(ut);
}
function sn(t) {
  const e2 = t.split(ut), n4 = lt(e2[0]), r3 = lt(e2[1]), o5 = nn(e2[2]), s2 = rt(e2.slice(0, 2).join(ut), xt);
  return { header: n4, payload: r3, signature: o5, data: s2 };
}
function Po(t = he(Ne)) {
  const e2 = Rt.getPublicKey(t);
  return { secretKey: Oe([t, e2]), publicKey: e2 };
}
async function Qo(t, e2, n4, r3, o5 = (0, import_time2.fromMiliseconds)(Date.now())) {
  const s2 = { alg: jt, typ: Zt }, a3 = Qe(r3.publicKey), u2 = o5 + n4, i3 = { iss: a3, sub: t, aud: e2, iat: o5, exp: u2 }, D3 = rn({ header: s2, payload: i3 }), c6 = Rt.sign(D3, r3.secretKey.slice(0, 32));
  return on({ header: s2, payload: i3, signature: c6 });
}

// node_modules/detect-browser/es/index.js
var __spreadArray = function(to4, from11, pack) {
  if (pack || arguments.length === 2) for (var i3 = 0, l6 = from11.length, ar4; i3 < l6; i3++) {
    if (ar4 || !(i3 in from11)) {
      if (!ar4) ar4 = Array.prototype.slice.call(from11, 0, i3);
      ar4[i3] = from11[i3];
    }
  }
  return to4.concat(ar4 || Array.prototype.slice.call(from11));
};
var BrowserInfo = (
  /** @class */
  /* @__PURE__ */ (function() {
    function BrowserInfo2(name2, version4, os2) {
      this.name = name2;
      this.version = version4;
      this.os = os2;
      this.type = "browser";
    }
    return BrowserInfo2;
  })()
);
var NodeInfo = (
  /** @class */
  /* @__PURE__ */ (function() {
    function NodeInfo2(version4) {
      this.version = version4;
      this.type = "node";
      this.name = "node";
      this.os = process.platform;
    }
    return NodeInfo2;
  })()
);
var SearchBotDeviceInfo = (
  /** @class */
  /* @__PURE__ */ (function() {
    function SearchBotDeviceInfo2(name2, version4, os2, bot) {
      this.name = name2;
      this.version = version4;
      this.os = os2;
      this.bot = bot;
      this.type = "bot-device";
    }
    return SearchBotDeviceInfo2;
  })()
);
var BotInfo = (
  /** @class */
  /* @__PURE__ */ (function() {
    function BotInfo2() {
      this.type = "bot";
      this.bot = true;
      this.name = "bot";
      this.version = null;
      this.os = null;
    }
    return BotInfo2;
  })()
);
var ReactNativeInfo = (
  /** @class */
  /* @__PURE__ */ (function() {
    function ReactNativeInfo2() {
      this.type = "react-native";
      this.name = "react-native";
      this.version = null;
      this.os = null;
    }
    return ReactNativeInfo2;
  })()
);
var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
var SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
var REQUIRED_VERSION_PARTS = 3;
var userAgentRules = [
  ["aol", /AOLShield\/([0-9\._]+)/],
  ["edge", /Edge\/([0-9\._]+)/],
  ["edge-ios", /EdgiOS\/([0-9\._]+)/],
  ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
  ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
  ["samsung", /SamsungBrowser\/([0-9\.]+)/],
  ["silk", /\bSilk\/([0-9._-]+)\b/],
  ["miui", /MiuiBrowser\/([0-9\.]+)$/],
  ["beaker", /BeakerBrowser\/([0-9\.]+)/],
  ["edge-chromium", /EdgA?\/([0-9\.]+)/],
  [
    "chromium-webview",
    /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
  ],
  ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
  ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
  ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
  ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
  ["fxios", /FxiOS\/([0-9\.]+)/],
  ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
  ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
  ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
  ["pie", /^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],
  ["pie", /^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],
  ["netfront", /^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],
  ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
  ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
  ["ie", /MSIE\s(7\.0)/],
  ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
  ["android", /Android\s([0-9\.]+)/],
  ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
  ["safari", /Version\/([0-9\._]+).*Safari/],
  ["facebook", /FB[AS]V\/([0-9\.]+)/],
  ["instagram", /Instagram\s([0-9\.]+)/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
  ["curl", /^curl\/([0-9\.]+)$/],
  ["searchbot", SEARCHBOX_UA_REGEX]
];
var operatingSystemRules = [
  ["iOS", /iP(hone|od|ad)/],
  ["Android OS", /Android/],
  ["BlackBerry OS", /BlackBerry|BB10/],
  ["Windows Mobile", /IEMobile/],
  ["Amazon OS", /Kindle/],
  ["Windows 3.11", /Win16/],
  ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
  ["Windows 98", /(Windows 98)|(Win98)/],
  ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
  ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
  ["Windows Server 2003", /(Windows NT 5.2)/],
  ["Windows Vista", /(Windows NT 6.0)/],
  ["Windows 7", /(Windows NT 6.1)/],
  ["Windows 8", /(Windows NT 6.2)/],
  ["Windows 8.1", /(Windows NT 6.3)/],
  ["Windows 10", /(Windows NT 10.0)/],
  ["Windows ME", /Windows ME/],
  ["Windows CE", /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],
  ["Open BSD", /OpenBSD/],
  ["Sun OS", /SunOS/],
  ["Chrome OS", /CrOS/],
  ["Linux", /(Linux)|(X11)/],
  ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
  ["QNX", /QNX/],
  ["BeOS", /BeOS/],
  ["OS/2", /OS\/2/]
];
function detect(userAgent) {
  if (!!userAgent) {
    return parseUserAgent(userAgent);
  }
  if (typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative") {
    return new ReactNativeInfo();
  }
  if (typeof navigator !== "undefined") {
    return parseUserAgent(navigator.userAgent);
  }
  return getNodeVersion();
}
function matchUserAgent(ua2) {
  return ua2 !== "" && userAgentRules.reduce(function(matched, _a2) {
    var browser = _a2[0], regex = _a2[1];
    if (matched) {
      return matched;
    }
    var uaMatch = regex.exec(ua2);
    return !!uaMatch && [browser, uaMatch];
  }, false);
}
function parseUserAgent(ua2) {
  var matchedRule = matchUserAgent(ua2);
  if (!matchedRule) {
    return null;
  }
  var name2 = matchedRule[0], match = matchedRule[1];
  if (name2 === "searchbot") {
    return new BotInfo();
  }
  var versionParts = match[1] && match[1].split(".").join("_").split("_").slice(0, 3);
  if (versionParts) {
    if (versionParts.length < REQUIRED_VERSION_PARTS) {
      versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);
    }
  } else {
    versionParts = [];
  }
  var version4 = versionParts.join(".");
  var os2 = detectOS(ua2);
  var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua2);
  if (searchBotMatch && searchBotMatch[1]) {
    return new SearchBotDeviceInfo(name2, version4, os2, searchBotMatch[1]);
  }
  return new BrowserInfo(name2, version4, os2);
}
function detectOS(ua2) {
  for (var ii3 = 0, count = operatingSystemRules.length; ii3 < count; ii3++) {
    var _a2 = operatingSystemRules[ii3], os2 = _a2[0], regex = _a2[1];
    var match = regex.exec(ua2);
    if (match) {
      return os2;
    }
  }
  return null;
}
function getNodeVersion() {
  var isNode2 = typeof process !== "undefined" && process.version;
  return isNode2 ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count) {
  var output = [];
  for (var ii3 = 0; ii3 < count; ii3++) {
    output.push("0");
  }
  return output;
}

// node_modules/@walletconnect/utils/dist/index.js
var import_time3 = __toESM(require_cjs());
var import_window_getters = __toESM(require_cjs2());
var import_window_metadata = __toESM(require_cjs3());

// node_modules/abitype/dist/esm/version.js
var version = "1.1.1";

// node_modules/abitype/dist/esm/errors.js
var BaseError = class _BaseError extends Error {
  constructor(shortMessage, args = {}) {
    const details = args.cause instanceof _BaseError ? args.cause.details : args.cause?.message ? args.cause.message : args.details;
    const docsPath = args.cause instanceof _BaseError ? args.cause.docsPath || args.docsPath : args.docsPath;
    const message = [
      shortMessage || "An error occurred.",
      "",
      ...args.metaMessages ? [...args.metaMessages, ""] : [],
      ...docsPath ? [`Docs: https://abitype.dev${docsPath}`] : [],
      ...details ? [`Details: ${details}`] : [],
      `Version: abitype@${version}`
    ].join("\n");
    super(message);
    Object.defineProperty(this, "details", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docsPath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "metaMessages", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shortMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiTypeError"
    });
    if (args.cause)
      this.cause = args.cause;
    this.details = details;
    this.docsPath = docsPath;
    this.metaMessages = args.metaMessages;
    this.shortMessage = shortMessage;
  }
};

// node_modules/abitype/dist/esm/regex.js
function execTyped(regex, string2) {
  const match = regex.exec(string2);
  return match?.groups;
}
var bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var isTupleRegex = /^\(.+?\).*?$/;

// node_modules/abitype/dist/esm/human-readable/formatAbiParameter.js
var tupleRegex = /^tuple(?<array>(\[(\d*)\])*)$/;
function formatAbiParameter(abiParameter) {
  let type = abiParameter.type;
  if (tupleRegex.test(abiParameter.type) && "components" in abiParameter) {
    type = "(";
    const length2 = abiParameter.components.length;
    for (let i3 = 0; i3 < length2; i3++) {
      const component = abiParameter.components[i3];
      type += formatAbiParameter(component);
      if (i3 < length2 - 1)
        type += ", ";
    }
    const result = execTyped(tupleRegex, abiParameter.type);
    type += `)${result?.array ?? ""}`;
    return formatAbiParameter({
      ...abiParameter,
      type
    });
  }
  if ("indexed" in abiParameter && abiParameter.indexed)
    type = `${type} indexed`;
  if (abiParameter.name)
    return `${type} ${abiParameter.name}`;
  return type;
}

// node_modules/abitype/dist/esm/human-readable/formatAbiParameters.js
function formatAbiParameters(abiParameters) {
  let params = "";
  const length2 = abiParameters.length;
  for (let i3 = 0; i3 < length2; i3++) {
    const abiParameter = abiParameters[i3];
    params += formatAbiParameter(abiParameter);
    if (i3 !== length2 - 1)
      params += ", ";
  }
  return params;
}

// node_modules/abitype/dist/esm/human-readable/formatAbiItem.js
function formatAbiItem(abiItem) {
  if (abiItem.type === "function")
    return `function ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})${abiItem.stateMutability && abiItem.stateMutability !== "nonpayable" ? ` ${abiItem.stateMutability}` : ""}${abiItem.outputs?.length ? ` returns (${formatAbiParameters(abiItem.outputs)})` : ""}`;
  if (abiItem.type === "event")
    return `event ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})`;
  if (abiItem.type === "error")
    return `error ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})`;
  if (abiItem.type === "constructor")
    return `constructor(${formatAbiParameters(abiItem.inputs)})${abiItem.stateMutability === "payable" ? " payable" : ""}`;
  if (abiItem.type === "fallback")
    return `fallback() external${abiItem.stateMutability === "payable" ? " payable" : ""}`;
  return "receive() external payable";
}

// node_modules/abitype/dist/esm/human-readable/runtime/signatures.js
var errorSignatureRegex = /^error (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)$/;
function isErrorSignature(signature) {
  return errorSignatureRegex.test(signature);
}
function execErrorSignature(signature) {
  return execTyped(errorSignatureRegex, signature);
}
var eventSignatureRegex = /^event (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)$/;
function isEventSignature(signature) {
  return eventSignatureRegex.test(signature);
}
function execEventSignature(signature) {
  return execTyped(eventSignatureRegex, signature);
}
var functionSignatureRegex = /^function (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns\s?\((?<returns>.*?)\))?$/;
function isFunctionSignature(signature) {
  return functionSignatureRegex.test(signature);
}
function execFunctionSignature(signature) {
  return execTyped(functionSignatureRegex, signature);
}
var structSignatureRegex = /^struct (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*) \{(?<properties>.*?)\}$/;
function isStructSignature(signature) {
  return structSignatureRegex.test(signature);
}
function execStructSignature(signature) {
  return execTyped(structSignatureRegex, signature);
}
var constructorSignatureRegex = /^constructor\((?<parameters>.*?)\)(?:\s(?<stateMutability>payable{1}))?$/;
function isConstructorSignature(signature) {
  return constructorSignatureRegex.test(signature);
}
function execConstructorSignature(signature) {
  return execTyped(constructorSignatureRegex, signature);
}
var fallbackSignatureRegex = /^fallback\(\) external(?:\s(?<stateMutability>payable{1}))?$/;
function isFallbackSignature(signature) {
  return fallbackSignatureRegex.test(signature);
}
function execFallbackSignature(signature) {
  return execTyped(fallbackSignatureRegex, signature);
}
var receiveSignatureRegex = /^receive\(\) external payable$/;
function isReceiveSignature(signature) {
  return receiveSignatureRegex.test(signature);
}
var eventModifiers = /* @__PURE__ */ new Set(["indexed"]);
var functionModifiers = /* @__PURE__ */ new Set([
  "calldata",
  "memory",
  "storage"
]);

// node_modules/abitype/dist/esm/human-readable/errors/abiItem.js
var InvalidAbiItemError = class extends BaseError {
  constructor({ signature }) {
    super("Failed to parse ABI item.", {
      details: `parseAbiItem(${JSON.stringify(signature, null, 2)})`,
      docsPath: "/api/human#parseabiitem-1"
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "InvalidAbiItemError"
    });
  }
};
var UnknownTypeError = class extends BaseError {
  constructor({ type }) {
    super("Unknown type.", {
      metaMessages: [
        `Type "${type}" is not a valid ABI type. Perhaps you forgot to include a struct signature?`
      ]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "UnknownTypeError"
    });
  }
};
var UnknownSolidityTypeError = class extends BaseError {
  constructor({ type }) {
    super("Unknown type.", {
      metaMessages: [`Type "${type}" is not a valid ABI type.`]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "UnknownSolidityTypeError"
    });
  }
};

// node_modules/abitype/dist/esm/human-readable/errors/abiParameter.js
var InvalidParameterError = class extends BaseError {
  constructor({ param }) {
    super("Invalid ABI parameter.", {
      details: param
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "InvalidParameterError"
    });
  }
};
var SolidityProtectedKeywordError = class extends BaseError {
  constructor({ param, name: name2 }) {
    super("Invalid ABI parameter.", {
      details: param,
      metaMessages: [
        `"${name2}" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`
      ]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "SolidityProtectedKeywordError"
    });
  }
};
var InvalidModifierError = class extends BaseError {
  constructor({ param, type, modifier }) {
    super("Invalid ABI parameter.", {
      details: param,
      metaMessages: [
        `Modifier "${modifier}" not allowed${type ? ` in "${type}" type` : ""}.`
      ]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "InvalidModifierError"
    });
  }
};
var InvalidFunctionModifierError = class extends BaseError {
  constructor({ param, type, modifier }) {
    super("Invalid ABI parameter.", {
      details: param,
      metaMessages: [
        `Modifier "${modifier}" not allowed${type ? ` in "${type}" type` : ""}.`,
        `Data location can only be specified for array, struct, or mapping types, but "${modifier}" was given.`
      ]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "InvalidFunctionModifierError"
    });
  }
};
var InvalidAbiTypeParameterError = class extends BaseError {
  constructor({ abiParameter }) {
    super("Invalid ABI parameter.", {
      details: JSON.stringify(abiParameter, null, 2),
      metaMessages: ["ABI parameter type is invalid."]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "InvalidAbiTypeParameterError"
    });
  }
};

// node_modules/abitype/dist/esm/human-readable/errors/signature.js
var InvalidSignatureError = class extends BaseError {
  constructor({ signature, type }) {
    super(`Invalid ${type} signature.`, {
      details: signature
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "InvalidSignatureError"
    });
  }
};
var UnknownSignatureError = class extends BaseError {
  constructor({ signature }) {
    super("Unknown signature.", {
      details: signature
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "UnknownSignatureError"
    });
  }
};
var InvalidStructSignatureError = class extends BaseError {
  constructor({ signature }) {
    super("Invalid struct signature.", {
      details: signature,
      metaMessages: ["No properties exist."]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "InvalidStructSignatureError"
    });
  }
};

// node_modules/abitype/dist/esm/human-readable/errors/struct.js
var CircularReferenceError = class extends BaseError {
  constructor({ type }) {
    super("Circular reference detected.", {
      metaMessages: [`Struct "${type}" is a circular reference.`]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "CircularReferenceError"
    });
  }
};

// node_modules/abitype/dist/esm/human-readable/errors/splitParameters.js
var InvalidParenthesisError = class extends BaseError {
  constructor({ current, depth }) {
    super("Unbalanced parentheses.", {
      metaMessages: [
        `"${current.trim()}" has too many ${depth > 0 ? "opening" : "closing"} parentheses.`
      ],
      details: `Depth "${depth}"`
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "InvalidParenthesisError"
    });
  }
};

// node_modules/abitype/dist/esm/human-readable/runtime/cache.js
function getParameterCacheKey(param, type, structs) {
  let structKey = "";
  if (structs)
    for (const struct of Object.entries(structs)) {
      if (!struct)
        continue;
      let propertyKey = "";
      for (const property of struct[1]) {
        propertyKey += `[${property.type}${property.name ? `:${property.name}` : ""}]`;
      }
      structKey += `(${struct[0]}{${propertyKey}})`;
    }
  if (type)
    return `${type}:${param}${structKey}`;
  return param;
}
var parameterCache = /* @__PURE__ */ new Map([
  // Unnamed
  ["address", { type: "address" }],
  ["bool", { type: "bool" }],
  ["bytes", { type: "bytes" }],
  ["bytes32", { type: "bytes32" }],
  ["int", { type: "int256" }],
  ["int256", { type: "int256" }],
  ["string", { type: "string" }],
  ["uint", { type: "uint256" }],
  ["uint8", { type: "uint8" }],
  ["uint16", { type: "uint16" }],
  ["uint24", { type: "uint24" }],
  ["uint32", { type: "uint32" }],
  ["uint64", { type: "uint64" }],
  ["uint96", { type: "uint96" }],
  ["uint112", { type: "uint112" }],
  ["uint160", { type: "uint160" }],
  ["uint192", { type: "uint192" }],
  ["uint256", { type: "uint256" }],
  // Named
  ["address owner", { type: "address", name: "owner" }],
  ["address to", { type: "address", name: "to" }],
  ["bool approved", { type: "bool", name: "approved" }],
  ["bytes _data", { type: "bytes", name: "_data" }],
  ["bytes data", { type: "bytes", name: "data" }],
  ["bytes signature", { type: "bytes", name: "signature" }],
  ["bytes32 hash", { type: "bytes32", name: "hash" }],
  ["bytes32 r", { type: "bytes32", name: "r" }],
  ["bytes32 root", { type: "bytes32", name: "root" }],
  ["bytes32 s", { type: "bytes32", name: "s" }],
  ["string name", { type: "string", name: "name" }],
  ["string symbol", { type: "string", name: "symbol" }],
  ["string tokenURI", { type: "string", name: "tokenURI" }],
  ["uint tokenId", { type: "uint256", name: "tokenId" }],
  ["uint8 v", { type: "uint8", name: "v" }],
  ["uint256 balance", { type: "uint256", name: "balance" }],
  ["uint256 tokenId", { type: "uint256", name: "tokenId" }],
  ["uint256 value", { type: "uint256", name: "value" }],
  // Indexed
  [
    "event:address indexed from",
    { type: "address", name: "from", indexed: true }
  ],
  ["event:address indexed to", { type: "address", name: "to", indexed: true }],
  [
    "event:uint indexed tokenId",
    { type: "uint256", name: "tokenId", indexed: true }
  ],
  [
    "event:uint256 indexed tokenId",
    { type: "uint256", name: "tokenId", indexed: true }
  ]
]);

// node_modules/abitype/dist/esm/human-readable/runtime/utils.js
function parseSignature(signature, structs = {}) {
  if (isFunctionSignature(signature))
    return parseFunctionSignature(signature, structs);
  if (isEventSignature(signature))
    return parseEventSignature(signature, structs);
  if (isErrorSignature(signature))
    return parseErrorSignature(signature, structs);
  if (isConstructorSignature(signature))
    return parseConstructorSignature(signature, structs);
  if (isFallbackSignature(signature))
    return parseFallbackSignature(signature);
  if (isReceiveSignature(signature))
    return {
      type: "receive",
      stateMutability: "payable"
    };
  throw new UnknownSignatureError({ signature });
}
function parseFunctionSignature(signature, structs = {}) {
  const match = execFunctionSignature(signature);
  if (!match)
    throw new InvalidSignatureError({ signature, type: "function" });
  const inputParams = splitParameters(match.parameters);
  const inputs = [];
  const inputLength = inputParams.length;
  for (let i3 = 0; i3 < inputLength; i3++) {
    inputs.push(parseAbiParameter(inputParams[i3], {
      modifiers: functionModifiers,
      structs,
      type: "function"
    }));
  }
  const outputs = [];
  if (match.returns) {
    const outputParams = splitParameters(match.returns);
    const outputLength = outputParams.length;
    for (let i3 = 0; i3 < outputLength; i3++) {
      outputs.push(parseAbiParameter(outputParams[i3], {
        modifiers: functionModifiers,
        structs,
        type: "function"
      }));
    }
  }
  return {
    name: match.name,
    type: "function",
    stateMutability: match.stateMutability ?? "nonpayable",
    inputs,
    outputs
  };
}
function parseEventSignature(signature, structs = {}) {
  const match = execEventSignature(signature);
  if (!match)
    throw new InvalidSignatureError({ signature, type: "event" });
  const params = splitParameters(match.parameters);
  const abiParameters = [];
  const length2 = params.length;
  for (let i3 = 0; i3 < length2; i3++)
    abiParameters.push(parseAbiParameter(params[i3], {
      modifiers: eventModifiers,
      structs,
      type: "event"
    }));
  return { name: match.name, type: "event", inputs: abiParameters };
}
function parseErrorSignature(signature, structs = {}) {
  const match = execErrorSignature(signature);
  if (!match)
    throw new InvalidSignatureError({ signature, type: "error" });
  const params = splitParameters(match.parameters);
  const abiParameters = [];
  const length2 = params.length;
  for (let i3 = 0; i3 < length2; i3++)
    abiParameters.push(parseAbiParameter(params[i3], { structs, type: "error" }));
  return { name: match.name, type: "error", inputs: abiParameters };
}
function parseConstructorSignature(signature, structs = {}) {
  const match = execConstructorSignature(signature);
  if (!match)
    throw new InvalidSignatureError({ signature, type: "constructor" });
  const params = splitParameters(match.parameters);
  const abiParameters = [];
  const length2 = params.length;
  for (let i3 = 0; i3 < length2; i3++)
    abiParameters.push(parseAbiParameter(params[i3], { structs, type: "constructor" }));
  return {
    type: "constructor",
    stateMutability: match.stateMutability ?? "nonpayable",
    inputs: abiParameters
  };
}
function parseFallbackSignature(signature) {
  const match = execFallbackSignature(signature);
  if (!match)
    throw new InvalidSignatureError({ signature, type: "fallback" });
  return {
    type: "fallback",
    stateMutability: match.stateMutability ?? "nonpayable"
  };
}
var abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*(?:\spayable)?)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;
var abiParameterWithTupleRegex = /^\((?<type>.+?)\)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;
var dynamicIntegerRegex = /^u?int$/;
function parseAbiParameter(param, options) {
  const parameterCacheKey = getParameterCacheKey(param, options?.type, options?.structs);
  if (parameterCache.has(parameterCacheKey))
    return parameterCache.get(parameterCacheKey);
  const isTuple = isTupleRegex.test(param);
  const match = execTyped(isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex, param);
  if (!match)
    throw new InvalidParameterError({ param });
  if (match.name && isSolidityKeyword(match.name))
    throw new SolidityProtectedKeywordError({ param, name: match.name });
  const name2 = match.name ? { name: match.name } : {};
  const indexed = match.modifier === "indexed" ? { indexed: true } : {};
  const structs = options?.structs ?? {};
  let type;
  let components = {};
  if (isTuple) {
    type = "tuple";
    const params = splitParameters(match.type);
    const components_ = [];
    const length2 = params.length;
    for (let i3 = 0; i3 < length2; i3++) {
      components_.push(parseAbiParameter(params[i3], { structs }));
    }
    components = { components: components_ };
  } else if (match.type in structs) {
    type = "tuple";
    components = { components: structs[match.type] };
  } else if (dynamicIntegerRegex.test(match.type)) {
    type = `${match.type}256`;
  } else if (match.type === "address payable") {
    type = "address";
  } else {
    type = match.type;
    if (!(options?.type === "struct") && !isSolidityType(type))
      throw new UnknownSolidityTypeError({ type });
  }
  if (match.modifier) {
    if (!options?.modifiers?.has?.(match.modifier))
      throw new InvalidModifierError({
        param,
        type: options?.type,
        modifier: match.modifier
      });
    if (functionModifiers.has(match.modifier) && !isValidDataLocation(type, !!match.array))
      throw new InvalidFunctionModifierError({
        param,
        type: options?.type,
        modifier: match.modifier
      });
  }
  const abiParameter = {
    type: `${type}${match.array ?? ""}`,
    ...name2,
    ...indexed,
    ...components
  };
  parameterCache.set(parameterCacheKey, abiParameter);
  return abiParameter;
}
function splitParameters(params, result = [], current = "", depth = 0) {
  const length2 = params.trim().length;
  for (let i3 = 0; i3 < length2; i3++) {
    const char = params[i3];
    const tail = params.slice(i3 + 1);
    switch (char) {
      case ",":
        return depth === 0 ? splitParameters(tail, [...result, current.trim()]) : splitParameters(tail, result, `${current}${char}`, depth);
      case "(":
        return splitParameters(tail, result, `${current}${char}`, depth + 1);
      case ")":
        return splitParameters(tail, result, `${current}${char}`, depth - 1);
      default:
        return splitParameters(tail, result, `${current}${char}`, depth);
    }
  }
  if (current === "")
    return result;
  if (depth !== 0)
    throw new InvalidParenthesisError({ current, depth });
  result.push(current.trim());
  return result;
}
function isSolidityType(type) {
  return type === "address" || type === "bool" || type === "function" || type === "string" || bytesRegex.test(type) || integerRegex.test(type);
}
var protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;
function isSolidityKeyword(name2) {
  return name2 === "address" || name2 === "bool" || name2 === "function" || name2 === "string" || name2 === "tuple" || bytesRegex.test(name2) || integerRegex.test(name2) || protectedKeywordsRegex.test(name2);
}
function isValidDataLocation(type, isArray2) {
  return isArray2 || type === "bytes" || type === "string" || type === "tuple";
}

// node_modules/abitype/dist/esm/human-readable/runtime/structs.js
function parseStructs(signatures) {
  const shallowStructs = {};
  const signaturesLength = signatures.length;
  for (let i3 = 0; i3 < signaturesLength; i3++) {
    const signature = signatures[i3];
    if (!isStructSignature(signature))
      continue;
    const match = execStructSignature(signature);
    if (!match)
      throw new InvalidSignatureError({ signature, type: "struct" });
    const properties = match.properties.split(";");
    const components = [];
    const propertiesLength = properties.length;
    for (let k4 = 0; k4 < propertiesLength; k4++) {
      const property = properties[k4];
      const trimmed = property.trim();
      if (!trimmed)
        continue;
      const abiParameter = parseAbiParameter(trimmed, {
        type: "struct"
      });
      components.push(abiParameter);
    }
    if (!components.length)
      throw new InvalidStructSignatureError({ signature });
    shallowStructs[match.name] = components;
  }
  const resolvedStructs = {};
  const entries = Object.entries(shallowStructs);
  const entriesLength = entries.length;
  for (let i3 = 0; i3 < entriesLength; i3++) {
    const [name2, parameters] = entries[i3];
    resolvedStructs[name2] = resolveStructs(parameters, shallowStructs);
  }
  return resolvedStructs;
}
var typeWithoutTupleRegex = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\[\d*?\])+?)?$/;
function resolveStructs(abiParameters, structs, ancestors = /* @__PURE__ */ new Set()) {
  const components = [];
  const length2 = abiParameters.length;
  for (let i3 = 0; i3 < length2; i3++) {
    const abiParameter = abiParameters[i3];
    const isTuple = isTupleRegex.test(abiParameter.type);
    if (isTuple)
      components.push(abiParameter);
    else {
      const match = execTyped(typeWithoutTupleRegex, abiParameter.type);
      if (!match?.type)
        throw new InvalidAbiTypeParameterError({ abiParameter });
      const { array, type } = match;
      if (type in structs) {
        if (ancestors.has(type))
          throw new CircularReferenceError({ type });
        components.push({
          ...abiParameter,
          type: `tuple${array ?? ""}`,
          components: resolveStructs(structs[type] ?? [], structs, /* @__PURE__ */ new Set([...ancestors, type]))
        });
      } else {
        if (isSolidityType(type))
          components.push(abiParameter);
        else
          throw new UnknownTypeError({ type });
      }
    }
  }
  return components;
}

// node_modules/abitype/dist/esm/human-readable/parseAbiItem.js
function parseAbiItem(signature) {
  let abiItem;
  if (typeof signature === "string")
    abiItem = parseSignature(signature);
  else {
    const structs = parseStructs(signature);
    const length2 = signature.length;
    for (let i3 = 0; i3 < length2; i3++) {
      const signature_ = signature[i3];
      if (isStructSignature(signature_))
        continue;
      abiItem = parseSignature(signature_, structs);
      break;
    }
  }
  if (!abiItem)
    throw new InvalidAbiItemError({ signature });
  return abiItem;
}

// node_modules/ox/_esm/core/version.js
var version2 = "0.1.1";

// node_modules/ox/_esm/core/internal/errors.js
function getVersion() {
  return version2;
}

// node_modules/ox/_esm/core/Errors.js
var BaseError2 = class _BaseError extends Error {
  constructor(shortMessage, options = {}) {
    const details = (() => {
      if (options.cause instanceof _BaseError) {
        if (options.cause.details)
          return options.cause.details;
        if (options.cause.shortMessage)
          return options.cause.shortMessage;
      }
      if (options.cause && "details" in options.cause && typeof options.cause.details === "string")
        return options.cause.details;
      if (options.cause?.message)
        return options.cause.message;
      return options.details;
    })();
    const docsPath = (() => {
      if (options.cause instanceof _BaseError)
        return options.cause.docsPath || options.docsPath;
      return options.docsPath;
    })();
    const docsBaseUrl = "https://oxlib.sh";
    const docs = `${docsBaseUrl}${docsPath ?? ""}`;
    const message = [
      shortMessage || "An error occurred.",
      ...options.metaMessages ? ["", ...options.metaMessages] : [],
      ...details || docsPath ? [
        "",
        details ? `Details: ${details}` : void 0,
        docsPath ? `See: ${docs}` : void 0
      ] : []
    ].filter((x5) => typeof x5 === "string").join("\n");
    super(message, options.cause ? { cause: options.cause } : void 0);
    Object.defineProperty(this, "details", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docsPath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shortMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cause", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "BaseError"
    });
    Object.defineProperty(this, "version", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: `ox@${getVersion()}`
    });
    this.cause = options.cause;
    this.details = details;
    this.docs = docs;
    this.docsPath = docsPath;
    this.shortMessage = shortMessage;
  }
  walk(fn3) {
    return walk(this, fn3);
  }
};
function walk(err, fn3) {
  if (fn3?.(err))
    return err;
  if (err && typeof err === "object" && "cause" in err && err.cause)
    return walk(err.cause, fn3);
  return fn3 ? null : err;
}

// node_modules/ox/node_modules/@noble/curves/esm/abstract/utils.js
var _0n = BigInt(0);
var _1n = BigInt(1);
function isBytes2(a3) {
  return a3 instanceof Uint8Array || ArrayBuffer.isView(a3) && a3.constructor.name === "Uint8Array";
}
function abytes2(item) {
  if (!isBytes2(item))
    throw new Error("Uint8Array expected");
}
function abool(title, value) {
  if (typeof value !== "boolean")
    throw new Error(title + " boolean expected, got " + value);
}
function numberToHexUnpadded(num3) {
  const hex2 = num3.toString(16);
  return hex2.length & 1 ? "0" + hex2 : hex2;
}
function hexToNumber(hex2) {
  if (typeof hex2 !== "string")
    throw new Error("hex string expected, got " + typeof hex2);
  return hex2 === "" ? _0n : BigInt("0x" + hex2);
}
var hasHexBuiltin = (
  // @ts-ignore
  typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
);
var hexes = Array.from({ length: 256 }, (_3, i3) => i3.toString(16).padStart(2, "0"));
function bytesToHex2(bytes) {
  abytes2(bytes);
  if (hasHexBuiltin)
    return bytes.toHex();
  let hex2 = "";
  for (let i3 = 0; i3 < bytes.length; i3++) {
    hex2 += hexes[bytes[i3]];
  }
  return hex2;
}
var asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function asciiToBase16(ch) {
  if (ch >= asciis._0 && ch <= asciis._9)
    return ch - asciis._0;
  if (ch >= asciis.A && ch <= asciis.F)
    return ch - (asciis.A - 10);
  if (ch >= asciis.a && ch <= asciis.f)
    return ch - (asciis.a - 10);
  return;
}
function hexToBytes2(hex2) {
  if (typeof hex2 !== "string")
    throw new Error("hex string expected, got " + typeof hex2);
  if (hasHexBuiltin)
    return Uint8Array.fromHex(hex2);
  const hl = hex2.length;
  const al = hl / 2;
  if (hl % 2)
    throw new Error("hex string expected, got unpadded hex of length " + hl);
  const array = new Uint8Array(al);
  for (let ai3 = 0, hi2 = 0; ai3 < al; ai3++, hi2 += 2) {
    const n1 = asciiToBase16(hex2.charCodeAt(hi2));
    const n22 = asciiToBase16(hex2.charCodeAt(hi2 + 1));
    if (n1 === void 0 || n22 === void 0) {
      const char = hex2[hi2] + hex2[hi2 + 1];
      throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi2);
    }
    array[ai3] = n1 * 16 + n22;
  }
  return array;
}
function bytesToNumberBE(bytes) {
  return hexToNumber(bytesToHex2(bytes));
}
function bytesToNumberLE(bytes) {
  abytes2(bytes);
  return hexToNumber(bytesToHex2(Uint8Array.from(bytes).reverse()));
}
function numberToBytesBE(n4, len) {
  return hexToBytes2(n4.toString(16).padStart(len * 2, "0"));
}
function numberToBytesLE(n4, len) {
  return numberToBytesBE(n4, len).reverse();
}
function ensureBytes(title, hex2, expectedLength) {
  let res;
  if (typeof hex2 === "string") {
    try {
      res = hexToBytes2(hex2);
    } catch (e2) {
      throw new Error(title + " must be hex string or Uint8Array, cause: " + e2);
    }
  } else if (isBytes2(hex2)) {
    res = Uint8Array.from(hex2);
  } else {
    throw new Error(title + " must be hex string or Uint8Array");
  }
  const len = res.length;
  if (typeof expectedLength === "number" && len !== expectedLength)
    throw new Error(title + " of length " + expectedLength + " expected, got " + len);
  return res;
}
function concatBytes2(...arrays) {
  let sum = 0;
  for (let i3 = 0; i3 < arrays.length; i3++) {
    const a3 = arrays[i3];
    abytes2(a3);
    sum += a3.length;
  }
  const res = new Uint8Array(sum);
  for (let i3 = 0, pad3 = 0; i3 < arrays.length; i3++) {
    const a3 = arrays[i3];
    res.set(a3, pad3);
    pad3 += a3.length;
  }
  return res;
}
function equalBytes(a3, b4) {
  if (a3.length !== b4.length)
    return false;
  let diff = 0;
  for (let i3 = 0; i3 < a3.length; i3++)
    diff |= a3[i3] ^ b4[i3];
  return diff === 0;
}
function utf8ToBytes2(str) {
  if (typeof str !== "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(str));
}
var isPosBig = (n4) => typeof n4 === "bigint" && _0n <= n4;
function inRange(n4, min, max) {
  return isPosBig(n4) && isPosBig(min) && isPosBig(max) && min <= n4 && n4 < max;
}
function aInRange(title, n4, min, max) {
  if (!inRange(n4, min, max))
    throw new Error("expected valid " + title + ": " + min + " <= n < " + max + ", got " + n4);
}
function bitLen(n4) {
  let len;
  for (len = 0; n4 > _0n; n4 >>= _1n, len += 1)
    ;
  return len;
}
function bitGet(n4, pos) {
  return n4 >> BigInt(pos) & _1n;
}
var bitMask = (n4) => (_1n << BigInt(n4)) - _1n;
var u8n = (len) => new Uint8Array(len);
var u8fr = (arr) => Uint8Array.from(arr);
function createHmacDrbg(hashLen, qByteLen, hmacFn) {
  if (typeof hashLen !== "number" || hashLen < 2)
    throw new Error("hashLen must be a number");
  if (typeof qByteLen !== "number" || qByteLen < 2)
    throw new Error("qByteLen must be a number");
  if (typeof hmacFn !== "function")
    throw new Error("hmacFn must be a function");
  let v6 = u8n(hashLen);
  let k4 = u8n(hashLen);
  let i3 = 0;
  const reset = () => {
    v6.fill(1);
    k4.fill(0);
    i3 = 0;
  };
  const h4 = (...b4) => hmacFn(k4, v6, ...b4);
  const reseed = (seed = u8n(0)) => {
    k4 = h4(u8fr([0]), seed);
    v6 = h4();
    if (seed.length === 0)
      return;
    k4 = h4(u8fr([1]), seed);
    v6 = h4();
  };
  const gen = () => {
    if (i3++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let len = 0;
    const out = [];
    while (len < qByteLen) {
      v6 = h4();
      const sl = v6.slice();
      out.push(sl);
      len += v6.length;
    }
    return concatBytes2(...out);
  };
  const genUntil = (seed, pred) => {
    reset();
    reseed(seed);
    let res = void 0;
    while (!(res = pred(gen())))
      reseed();
    reset();
    return res;
  };
  return genUntil;
}
var validatorFns = {
  bigint: (val) => typeof val === "bigint",
  function: (val) => typeof val === "function",
  boolean: (val) => typeof val === "boolean",
  string: (val) => typeof val === "string",
  stringOrUint8Array: (val) => typeof val === "string" || isBytes2(val),
  isSafeInteger: (val) => Number.isSafeInteger(val),
  array: (val) => Array.isArray(val),
  field: (val, object) => object.Fp.isValid(val),
  hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
};
function validateObject(object, validators, optValidators = {}) {
  const checkField = (fieldName, type, isOptional) => {
    const checkVal = validatorFns[type];
    if (typeof checkVal !== "function")
      throw new Error("invalid validator function");
    const val = object[fieldName];
    if (isOptional && val === void 0)
      return;
    if (!checkVal(val, object)) {
      throw new Error("param " + String(fieldName) + " is invalid. Expected " + type + ", got " + val);
    }
  };
  for (const [fieldName, type] of Object.entries(validators))
    checkField(fieldName, type, false);
  for (const [fieldName, type] of Object.entries(optValidators))
    checkField(fieldName, type, true);
  return object;
}
var notImplemented = () => {
  throw new Error("not implemented");
};
function memoized(fn3) {
  const map = /* @__PURE__ */ new WeakMap();
  return (arg, ...args) => {
    const val = map.get(arg);
    if (val !== void 0)
      return val;
    const computed = fn3(arg, ...args);
    map.set(arg, computed);
    return computed;
  };
}

// node_modules/ox/_esm/core/internal/bytes.js
function assertSize(bytes, size_) {
  if (size(bytes) > size_)
    throw new SizeOverflowError({
      givenSize: size(bytes),
      maxSize: size_
    });
}
var charCodeMap = {
  zero: 48,
  nine: 57,
  A: 65,
  F: 70,
  a: 97,
  f: 102
};
function charCodeToBase16(char) {
  if (char >= charCodeMap.zero && char <= charCodeMap.nine)
    return char - charCodeMap.zero;
  if (char >= charCodeMap.A && char <= charCodeMap.F)
    return char - (charCodeMap.A - 10);
  if (char >= charCodeMap.a && char <= charCodeMap.f)
    return char - (charCodeMap.a - 10);
  return void 0;
}
function pad(bytes, options = {}) {
  const { dir, size: size3 = 32 } = options;
  if (size3 === 0)
    return bytes;
  if (bytes.length > size3)
    throw new SizeExceedsPaddingSizeError({
      size: bytes.length,
      targetSize: size3,
      type: "Bytes"
    });
  const paddedBytes = new Uint8Array(size3);
  for (let i3 = 0; i3 < size3; i3++) {
    const padEnd = dir === "right";
    paddedBytes[padEnd ? i3 : size3 - i3 - 1] = bytes[padEnd ? i3 : bytes.length - i3 - 1];
  }
  return paddedBytes;
}

// node_modules/ox/_esm/core/internal/hex.js
function assertSize2(hex2, size_) {
  if (size2(hex2) > size_)
    throw new SizeOverflowError2({
      givenSize: size2(hex2),
      maxSize: size_
    });
}
function assertStartOffset(value, start) {
  if (typeof start === "number" && start > 0 && start > size2(value) - 1)
    throw new SliceOffsetOutOfBoundsError2({
      offset: start,
      position: "start",
      size: size2(value)
    });
}
function assertEndOffset(value, start, end) {
  if (typeof start === "number" && typeof end === "number" && size2(value) !== end - start) {
    throw new SliceOffsetOutOfBoundsError2({
      offset: end,
      position: "end",
      size: size2(value)
    });
  }
}
function pad2(hex_, options = {}) {
  const { dir, size: size3 = 32 } = options;
  if (size3 === 0)
    return hex_;
  const hex2 = hex_.replace("0x", "");
  if (hex2.length > size3 * 2)
    throw new SizeExceedsPaddingSizeError2({
      size: Math.ceil(hex2.length / 2),
      targetSize: size3,
      type: "Hex"
    });
  return `0x${hex2[dir === "right" ? "padEnd" : "padStart"](size3 * 2, "0")}`;
}
function trim(value, options = {}) {
  const { dir = "left" } = options;
  let data = value.replace("0x", "");
  let sliceLength = 0;
  for (let i3 = 0; i3 < data.length - 1; i3++) {
    if (data[dir === "left" ? i3 : data.length - i3 - 1].toString() === "0")
      sliceLength++;
    else
      break;
  }
  data = dir === "left" ? data.slice(sliceLength) : data.slice(0, data.length - sliceLength);
  if (data === "0")
    return "0x";
  if (dir === "right" && data.length % 2 === 1)
    return `0x${data}0`;
  return `0x${data}`;
}

// node_modules/ox/_esm/core/Json.js
var bigIntSuffix = "#__bigint";
function stringify2(value, replacer, space) {
  return JSON.stringify(value, (key, value2) => {
    if (typeof replacer === "function")
      return replacer(key, value2);
    if (typeof value2 === "bigint")
      return value2.toString() + bigIntSuffix;
    return value2;
  }, space);
}

// node_modules/ox/_esm/core/Hex.js
var encoder = new TextEncoder();
var hexes2 = Array.from({ length: 256 }, (_v, i3) => i3.toString(16).padStart(2, "0"));
function assert(value, options = {}) {
  const { strict = false } = options;
  if (!value)
    throw new InvalidHexTypeError(value);
  if (typeof value !== "string")
    throw new InvalidHexTypeError(value);
  if (strict) {
    if (!/^0x[0-9a-fA-F]*$/.test(value))
      throw new InvalidHexValueError(value);
  }
  if (!value.startsWith("0x"))
    throw new InvalidHexValueError(value);
}
function concat(...values) {
  return `0x${values.reduce((acc, x5) => acc + x5.replace("0x", ""), "")}`;
}
function from(value) {
  if (value instanceof Uint8Array)
    return fromBytes(value);
  if (Array.isArray(value))
    return fromBytes(new Uint8Array(value));
  return value;
}
function fromBoolean(value, options = {}) {
  const hex2 = `0x${Number(value)}`;
  if (typeof options.size === "number") {
    assertSize2(hex2, options.size);
    return padLeft(hex2, options.size);
  }
  return hex2;
}
function fromBytes(value, options = {}) {
  let string2 = "";
  for (let i3 = 0; i3 < value.length; i3++)
    string2 += hexes2[value[i3]];
  const hex2 = `0x${string2}`;
  if (typeof options.size === "number") {
    assertSize2(hex2, options.size);
    return padRight(hex2, options.size);
  }
  return hex2;
}
function fromNumber(value, options = {}) {
  const { signed, size: size3 } = options;
  const value_ = BigInt(value);
  let maxValue;
  if (size3) {
    if (signed)
      maxValue = (1n << BigInt(size3) * 8n - 1n) - 1n;
    else
      maxValue = 2n ** (BigInt(size3) * 8n) - 1n;
  } else if (typeof value === "number") {
    maxValue = BigInt(Number.MAX_SAFE_INTEGER);
  }
  const minValue = typeof maxValue === "bigint" && signed ? -maxValue - 1n : 0;
  if (maxValue && value_ > maxValue || value_ < minValue) {
    const suffix = typeof value === "bigint" ? "n" : "";
    throw new IntegerOutOfRangeError({
      max: maxValue ? `${maxValue}${suffix}` : void 0,
      min: `${minValue}${suffix}`,
      signed,
      size: size3,
      value: `${value}${suffix}`
    });
  }
  const stringValue = (signed && value_ < 0 ? (1n << BigInt(size3 * 8)) + BigInt(value_) : value_).toString(16);
  const hex2 = `0x${stringValue}`;
  if (size3)
    return padLeft(hex2, size3);
  return hex2;
}
function fromString(value, options = {}) {
  return fromBytes(encoder.encode(value), options);
}
function padLeft(value, size3) {
  return pad2(value, { dir: "left", size: size3 });
}
function padRight(value, size3) {
  return pad2(value, { dir: "right", size: size3 });
}
function slice(value, start, end, options = {}) {
  const { strict } = options;
  assertStartOffset(value, start);
  const value_ = `0x${value.replace("0x", "").slice((start ?? 0) * 2, (end ?? value.length) * 2)}`;
  if (strict)
    assertEndOffset(value_, start, end);
  return value_;
}
function size2(value) {
  return Math.ceil((value.length - 2) / 2);
}
function trimLeft(value) {
  return trim(value, { dir: "left" });
}
function validate(value, options = {}) {
  const { strict = false } = options;
  try {
    assert(value, { strict });
    return true;
  } catch {
    return false;
  }
}
var IntegerOutOfRangeError = class extends BaseError2 {
  constructor({ max, min, signed, size: size3, value }) {
    super(`Number \`${value}\` is not in safe${size3 ? ` ${size3 * 8}-bit` : ""}${signed ? " signed" : " unsigned"} integer range ${max ? `(\`${min}\` to \`${max}\`)` : `(above \`${min}\`)`}`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.IntegerOutOfRangeError"
    });
  }
};
var InvalidHexTypeError = class extends BaseError2 {
  constructor(value) {
    super(`Value \`${typeof value === "object" ? stringify2(value) : value}\` of type \`${typeof value}\` is an invalid hex type.`, {
      metaMessages: ['Hex types must be represented as `"0x${string}"`.']
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.InvalidHexTypeError"
    });
  }
};
var InvalidHexValueError = class extends BaseError2 {
  constructor(value) {
    super(`Value \`${value}\` is an invalid hex value.`, {
      metaMessages: [
        'Hex values must start with `"0x"` and contain only hexadecimal characters (0-9, a-f, A-F).'
      ]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.InvalidHexValueError"
    });
  }
};
var SizeOverflowError2 = class extends BaseError2 {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeOverflowError"
    });
  }
};
var SliceOffsetOutOfBoundsError2 = class extends BaseError2 {
  constructor({ offset, position, size: size3 }) {
    super(`Slice ${position === "start" ? "starting" : "ending"} at offset \`${offset}\` is out-of-bounds (size: \`${size3}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SliceOffsetOutOfBoundsError"
    });
  }
};
var SizeExceedsPaddingSizeError2 = class extends BaseError2 {
  constructor({ size: size3, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size3}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeExceedsPaddingSizeError"
    });
  }
};

// node_modules/ox/_esm/core/Bytes.js
var decoder = new TextDecoder();
var encoder2 = new TextEncoder();
function assert2(value) {
  if (value instanceof Uint8Array)
    return;
  if (!value)
    throw new InvalidBytesTypeError(value);
  if (typeof value !== "object")
    throw new InvalidBytesTypeError(value);
  if (!("BYTES_PER_ELEMENT" in value))
    throw new InvalidBytesTypeError(value);
  if (value.BYTES_PER_ELEMENT !== 1 || value.constructor.name !== "Uint8Array")
    throw new InvalidBytesTypeError(value);
}
function from2(value) {
  if (value instanceof Uint8Array)
    return value;
  if (typeof value === "string")
    return fromHex(value);
  return fromArray(value);
}
function fromArray(value) {
  return value instanceof Uint8Array ? value : new Uint8Array(value);
}
function fromHex(value, options = {}) {
  const { size: size3 } = options;
  let hex2 = value;
  if (size3) {
    assertSize2(value, size3);
    hex2 = padRight(value, size3);
  }
  let hexString = hex2.slice(2);
  if (hexString.length % 2)
    hexString = `0${hexString}`;
  const length2 = hexString.length / 2;
  const bytes = new Uint8Array(length2);
  for (let index = 0, j6 = 0; index < length2; index++) {
    const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j6++));
    const nibbleRight = charCodeToBase16(hexString.charCodeAt(j6++));
    if (nibbleLeft === void 0 || nibbleRight === void 0) {
      throw new BaseError2(`Invalid byte sequence ("${hexString[j6 - 2]}${hexString[j6 - 1]}" in "${hexString}").`);
    }
    bytes[index] = nibbleLeft * 16 + nibbleRight;
  }
  return bytes;
}
function fromString2(value, options = {}) {
  const { size: size3 } = options;
  const bytes = encoder2.encode(value);
  if (typeof size3 === "number") {
    assertSize(bytes, size3);
    return padRight2(bytes, size3);
  }
  return bytes;
}
function padRight2(value, size3) {
  return pad(value, { dir: "right", size: size3 });
}
function size(value) {
  return value.length;
}
function validate2(value) {
  try {
    assert2(value);
    return true;
  } catch {
    return false;
  }
}
var InvalidBytesTypeError = class extends BaseError2 {
  constructor(value) {
    super(`Value \`${typeof value === "object" ? stringify2(value) : value}\` of type \`${typeof value}\` is an invalid Bytes value.`, {
      metaMessages: ["Bytes values must be of type `Bytes`."]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.InvalidBytesTypeError"
    });
  }
};
var SizeOverflowError = class extends BaseError2 {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeOverflowError"
    });
  }
};
var SizeExceedsPaddingSizeError = class extends BaseError2 {
  constructor({ size: size3, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size3}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeExceedsPaddingSizeError"
    });
  }
};

// node_modules/ox/_esm/core/Hash.js
function keccak256(value, options = {}) {
  const { as: as2 = typeof value === "string" ? "Hex" : "Bytes" } = options;
  const bytes = keccak_256(from2(value));
  if (as2 === "Bytes")
    return bytes;
  return fromBytes(bytes);
}

// node_modules/ox/_esm/core/internal/lru.js
var LruMap = class extends Map {
  constructor(size3) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size3;
  }
  get(key) {
    const value = super.get(key);
    if (super.has(key) && value !== void 0) {
      this.delete(key);
      super.set(key, value);
    }
    return value;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      const firstKey = this.keys().next().value;
      if (firstKey)
        this.delete(firstKey);
    }
    return this;
  }
};

// node_modules/ox/_esm/core/Caches.js
var caches = {
  checksum: new LruMap(8192)
};
var checksum = caches.checksum;

// node_modules/ox/_esm/core/PublicKey.js
function assert3(publicKey, options = {}) {
  const { compressed } = options;
  const { prefix, x: x5, y: y4 } = publicKey;
  if (compressed === false || typeof x5 === "bigint" && typeof y4 === "bigint") {
    if (prefix !== 4)
      throw new InvalidPrefixError({
        prefix,
        cause: new InvalidUncompressedPrefixError()
      });
    return;
  }
  if (compressed === true || typeof x5 === "bigint" && typeof y4 === "undefined") {
    if (prefix !== 3 && prefix !== 2)
      throw new InvalidPrefixError({
        prefix,
        cause: new InvalidCompressedPrefixError()
      });
    return;
  }
  throw new InvalidError({ publicKey });
}
function from3(value) {
  const publicKey = (() => {
    if (validate(value))
      return fromHex2(value);
    if (validate2(value))
      return fromBytes2(value);
    const { prefix, x: x5, y: y4 } = value;
    if (typeof x5 === "bigint" && typeof y4 === "bigint")
      return { prefix: prefix ?? 4, x: x5, y: y4 };
    return { prefix, x: x5 };
  })();
  assert3(publicKey);
  return publicKey;
}
function fromBytes2(publicKey) {
  return fromHex2(fromBytes(publicKey));
}
function fromHex2(publicKey) {
  if (publicKey.length !== 132 && publicKey.length !== 130 && publicKey.length !== 68)
    throw new InvalidSerializedSizeError({ publicKey });
  if (publicKey.length === 130) {
    const x6 = BigInt(slice(publicKey, 0, 32));
    const y4 = BigInt(slice(publicKey, 32, 64));
    return {
      prefix: 4,
      x: x6,
      y: y4
    };
  }
  if (publicKey.length === 132) {
    const prefix2 = Number(slice(publicKey, 0, 1));
    const x6 = BigInt(slice(publicKey, 1, 33));
    const y4 = BigInt(slice(publicKey, 33, 65));
    return {
      prefix: prefix2,
      x: x6,
      y: y4
    };
  }
  const prefix = Number(slice(publicKey, 0, 1));
  const x5 = BigInt(slice(publicKey, 1, 33));
  return {
    prefix,
    x: x5
  };
}
function toBytes2(publicKey, options = {}) {
  return fromHex(toHex(publicKey, options));
}
function toHex(publicKey, options = {}) {
  assert3(publicKey);
  const { prefix, x: x5, y: y4 } = publicKey;
  const { includePrefix = true } = options;
  const publicKey_ = concat(
    includePrefix ? fromNumber(prefix, { size: 1 }) : "0x",
    fromNumber(x5, { size: 32 }),
    // If the public key is not compressed, add the y coordinate.
    typeof y4 === "bigint" ? fromNumber(y4, { size: 32 }) : "0x"
  );
  return publicKey_;
}
var InvalidError = class extends BaseError2 {
  constructor({ publicKey }) {
    super(`Value \`${stringify2(publicKey)}\` is not a valid public key.`, {
      metaMessages: [
        "Public key must contain:",
        "- an `x` and `prefix` value (compressed)",
        "- an `x`, `y`, and `prefix` value (uncompressed)"
      ]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "PublicKey.InvalidError"
    });
  }
};
var InvalidPrefixError = class extends BaseError2 {
  constructor({ prefix, cause }) {
    super(`Prefix "${prefix}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "PublicKey.InvalidPrefixError"
    });
  }
};
var InvalidCompressedPrefixError = class extends BaseError2 {
  constructor() {
    super("Prefix must be 2 or 3 for compressed public keys.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "PublicKey.InvalidCompressedPrefixError"
    });
  }
};
var InvalidUncompressedPrefixError = class extends BaseError2 {
  constructor() {
    super("Prefix must be 4 for uncompressed public keys.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "PublicKey.InvalidUncompressedPrefixError"
    });
  }
};
var InvalidSerializedSizeError = class extends BaseError2 {
  constructor({ publicKey }) {
    super(`Value \`${publicKey}\` is an invalid public key size.`, {
      metaMessages: [
        "Expected: 33 bytes (compressed + prefix), 64 bytes (uncompressed) or 65 bytes (uncompressed + prefix).",
        `Received ${size2(from(publicKey))} bytes.`
      ]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "PublicKey.InvalidSerializedSizeError"
    });
  }
};

// node_modules/ox/_esm/core/Address.js
var addressRegex = /^0x[a-fA-F0-9]{40}$/;
function assert4(value, options = {}) {
  const { strict = true } = options;
  if (!addressRegex.test(value))
    throw new InvalidAddressError({
      address: value,
      cause: new InvalidInputError()
    });
  if (strict) {
    if (value.toLowerCase() === value)
      return;
    if (checksum2(value) !== value)
      throw new InvalidAddressError({
        address: value,
        cause: new InvalidChecksumError()
      });
  }
}
function checksum2(address) {
  if (checksum.has(address))
    return checksum.get(address);
  assert4(address, { strict: false });
  const hexAddress = address.substring(2).toLowerCase();
  const hash = keccak256(fromString2(hexAddress), { as: "Bytes" });
  const characters = hexAddress.split("");
  for (let i3 = 0; i3 < 40; i3 += 2) {
    if (hash[i3 >> 1] >> 4 >= 8 && characters[i3]) {
      characters[i3] = characters[i3].toUpperCase();
    }
    if ((hash[i3 >> 1] & 15) >= 8 && characters[i3 + 1]) {
      characters[i3 + 1] = characters[i3 + 1].toUpperCase();
    }
  }
  const result = `0x${characters.join("")}`;
  checksum.set(address, result);
  return result;
}
function from4(address, options = {}) {
  const { checksum: checksumVal = false } = options;
  assert4(address);
  if (checksumVal)
    return checksum2(address);
  return address;
}
function fromPublicKey(publicKey, options = {}) {
  const address = keccak256(`0x${toHex(publicKey).slice(4)}`).substring(26);
  return from4(`0x${address}`, options);
}
function isEqual(addressA, addressB) {
  assert4(addressA, { strict: false });
  assert4(addressB, { strict: false });
  return addressA.toLowerCase() === addressB.toLowerCase();
}
var InvalidAddressError = class extends BaseError2 {
  constructor({ address, cause }) {
    super(`Address "${address}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidAddressError"
    });
  }
};
var InvalidInputError = class extends BaseError2 {
  constructor() {
    super("Address is not a 20 byte (40 hexadecimal character) value.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidInputError"
    });
  }
};
var InvalidChecksumError = class extends BaseError2 {
  constructor() {
    super("Address does not match its checksum counterpart.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidChecksumError"
    });
  }
};

// node_modules/ox/_esm/core/internal/abiItem.js
function normalizeSignature(signature) {
  let active = true;
  let current = "";
  let level = 0;
  let result = "";
  let valid = false;
  for (let i3 = 0; i3 < signature.length; i3++) {
    const char = signature[i3];
    if (["(", ")", ","].includes(char))
      active = true;
    if (char === "(")
      level++;
    if (char === ")")
      level--;
    if (!active)
      continue;
    if (level === 0) {
      if (char === " " && ["event", "function", "error", ""].includes(result))
        result = "";
      else {
        result += char;
        if (char === ")") {
          valid = true;
          break;
        }
      }
      continue;
    }
    if (char === " ") {
      if (signature[i3 - 1] !== "," && current !== "," && current !== ",(") {
        current = "";
        active = false;
      }
      continue;
    }
    result += char;
    current += char;
  }
  if (!valid)
    throw new BaseError2("Unable to normalize signature.");
  return result;
}

// node_modules/ox/_esm/core/AbiItem.js
function from5(abiItem, options = {}) {
  const { prepare = true } = options;
  const item = (() => {
    if (Array.isArray(abiItem))
      return parseAbiItem(abiItem);
    if (typeof abiItem === "string")
      return parseAbiItem(abiItem);
    return abiItem;
  })();
  return {
    ...item,
    ...prepare ? { hash: getSignatureHash(item) } : {}
  };
}
function getSignature(abiItem) {
  const signature = (() => {
    if (typeof abiItem === "string")
      return abiItem;
    return formatAbiItem(abiItem);
  })();
  return normalizeSignature(signature);
}
function getSignatureHash(abiItem) {
  if (typeof abiItem !== "string" && "hash" in abiItem && abiItem.hash)
    return abiItem.hash;
  return keccak256(fromString(getSignature(abiItem)));
}

// node_modules/ox/_esm/core/Solidity.js
var arrayRegex = /^(.*)\[([0-9]*)\]$/;
var bytesRegex2 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex2 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var maxInt8 = 2n ** (8n - 1n) - 1n;
var maxInt16 = 2n ** (16n - 1n) - 1n;
var maxInt24 = 2n ** (24n - 1n) - 1n;
var maxInt32 = 2n ** (32n - 1n) - 1n;
var maxInt40 = 2n ** (40n - 1n) - 1n;
var maxInt48 = 2n ** (48n - 1n) - 1n;
var maxInt56 = 2n ** (56n - 1n) - 1n;
var maxInt64 = 2n ** (64n - 1n) - 1n;
var maxInt72 = 2n ** (72n - 1n) - 1n;
var maxInt80 = 2n ** (80n - 1n) - 1n;
var maxInt88 = 2n ** (88n - 1n) - 1n;
var maxInt96 = 2n ** (96n - 1n) - 1n;
var maxInt104 = 2n ** (104n - 1n) - 1n;
var maxInt112 = 2n ** (112n - 1n) - 1n;
var maxInt120 = 2n ** (120n - 1n) - 1n;
var maxInt128 = 2n ** (128n - 1n) - 1n;
var maxInt136 = 2n ** (136n - 1n) - 1n;
var maxInt144 = 2n ** (144n - 1n) - 1n;
var maxInt152 = 2n ** (152n - 1n) - 1n;
var maxInt160 = 2n ** (160n - 1n) - 1n;
var maxInt168 = 2n ** (168n - 1n) - 1n;
var maxInt176 = 2n ** (176n - 1n) - 1n;
var maxInt184 = 2n ** (184n - 1n) - 1n;
var maxInt192 = 2n ** (192n - 1n) - 1n;
var maxInt200 = 2n ** (200n - 1n) - 1n;
var maxInt208 = 2n ** (208n - 1n) - 1n;
var maxInt216 = 2n ** (216n - 1n) - 1n;
var maxInt224 = 2n ** (224n - 1n) - 1n;
var maxInt232 = 2n ** (232n - 1n) - 1n;
var maxInt240 = 2n ** (240n - 1n) - 1n;
var maxInt248 = 2n ** (248n - 1n) - 1n;
var maxInt256 = 2n ** (256n - 1n) - 1n;
var minInt8 = -(2n ** (8n - 1n));
var minInt16 = -(2n ** (16n - 1n));
var minInt24 = -(2n ** (24n - 1n));
var minInt32 = -(2n ** (32n - 1n));
var minInt40 = -(2n ** (40n - 1n));
var minInt48 = -(2n ** (48n - 1n));
var minInt56 = -(2n ** (56n - 1n));
var minInt64 = -(2n ** (64n - 1n));
var minInt72 = -(2n ** (72n - 1n));
var minInt80 = -(2n ** (80n - 1n));
var minInt88 = -(2n ** (88n - 1n));
var minInt96 = -(2n ** (96n - 1n));
var minInt104 = -(2n ** (104n - 1n));
var minInt112 = -(2n ** (112n - 1n));
var minInt120 = -(2n ** (120n - 1n));
var minInt128 = -(2n ** (128n - 1n));
var minInt136 = -(2n ** (136n - 1n));
var minInt144 = -(2n ** (144n - 1n));
var minInt152 = -(2n ** (152n - 1n));
var minInt160 = -(2n ** (160n - 1n));
var minInt168 = -(2n ** (168n - 1n));
var minInt176 = -(2n ** (176n - 1n));
var minInt184 = -(2n ** (184n - 1n));
var minInt192 = -(2n ** (192n - 1n));
var minInt200 = -(2n ** (200n - 1n));
var minInt208 = -(2n ** (208n - 1n));
var minInt216 = -(2n ** (216n - 1n));
var minInt224 = -(2n ** (224n - 1n));
var minInt232 = -(2n ** (232n - 1n));
var minInt240 = -(2n ** (240n - 1n));
var minInt248 = -(2n ** (248n - 1n));
var minInt256 = -(2n ** (256n - 1n));
var maxUint8 = 2n ** 8n - 1n;
var maxUint16 = 2n ** 16n - 1n;
var maxUint24 = 2n ** 24n - 1n;
var maxUint32 = 2n ** 32n - 1n;
var maxUint40 = 2n ** 40n - 1n;
var maxUint48 = 2n ** 48n - 1n;
var maxUint56 = 2n ** 56n - 1n;
var maxUint64 = 2n ** 64n - 1n;
var maxUint72 = 2n ** 72n - 1n;
var maxUint80 = 2n ** 80n - 1n;
var maxUint88 = 2n ** 88n - 1n;
var maxUint96 = 2n ** 96n - 1n;
var maxUint104 = 2n ** 104n - 1n;
var maxUint112 = 2n ** 112n - 1n;
var maxUint120 = 2n ** 120n - 1n;
var maxUint128 = 2n ** 128n - 1n;
var maxUint136 = 2n ** 136n - 1n;
var maxUint144 = 2n ** 144n - 1n;
var maxUint152 = 2n ** 152n - 1n;
var maxUint160 = 2n ** 160n - 1n;
var maxUint168 = 2n ** 168n - 1n;
var maxUint176 = 2n ** 176n - 1n;
var maxUint184 = 2n ** 184n - 1n;
var maxUint192 = 2n ** 192n - 1n;
var maxUint200 = 2n ** 200n - 1n;
var maxUint208 = 2n ** 208n - 1n;
var maxUint216 = 2n ** 216n - 1n;
var maxUint224 = 2n ** 224n - 1n;
var maxUint232 = 2n ** 232n - 1n;
var maxUint240 = 2n ** 240n - 1n;
var maxUint248 = 2n ** 248n - 1n;
var maxUint256 = 2n ** 256n - 1n;

// node_modules/ox/_esm/core/internal/cursor.js
var staticCursor = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new RecursiveReadLimitExceededError({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(position) {
    if (position < 0 || position > this.bytes.length - 1)
      throw new PositionOutOfBoundsError({
        length: this.bytes.length,
        position
      });
  },
  decrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position - offset;
    this.assertPosition(position);
    this.position = position;
  },
  getReadCount(position) {
    return this.positionReadCount.get(position || this.position) || 0;
  },
  incrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position + offset;
    this.assertPosition(position);
    this.position = position;
  },
  inspectByte(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectBytes(length2, position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + length2 - 1);
    return this.bytes.subarray(position, position + length2);
  },
  inspectUint8(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectUint16(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 1);
    return this.dataView.getUint16(position);
  },
  inspectUint24(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 2);
    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
  },
  inspectUint32(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 3);
    return this.dataView.getUint32(position);
  },
  pushByte(byte) {
    this.assertPosition(this.position);
    this.bytes[this.position] = byte;
    this.position++;
  },
  pushBytes(bytes) {
    this.assertPosition(this.position + bytes.length - 1);
    this.bytes.set(bytes, this.position);
    this.position += bytes.length;
  },
  pushUint8(value) {
    this.assertPosition(this.position);
    this.bytes[this.position] = value;
    this.position++;
  },
  pushUint16(value) {
    this.assertPosition(this.position + 1);
    this.dataView.setUint16(this.position, value);
    this.position += 2;
  },
  pushUint24(value) {
    this.assertPosition(this.position + 2);
    this.dataView.setUint16(this.position, value >> 8);
    this.dataView.setUint8(this.position + 2, value & ~4294967040);
    this.position += 3;
  },
  pushUint32(value) {
    this.assertPosition(this.position + 3);
    this.dataView.setUint32(this.position, value);
    this.position += 4;
  },
  readByte() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectByte();
    this.position++;
    return value;
  },
  readBytes(length2, size3) {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectBytes(length2);
    this.position += size3 ?? length2;
    return value;
  },
  readUint8() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint8();
    this.position += 1;
    return value;
  },
  readUint16() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint16();
    this.position += 2;
    return value;
  },
  readUint24() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint24();
    this.position += 3;
    return value;
  },
  readUint32() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint32();
    this.position += 4;
    return value;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(position) {
    const oldPosition = this.position;
    this.assertPosition(position);
    this.position = position;
    return () => this.position = oldPosition;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const count = this.getReadCount();
    this.positionReadCount.set(this.position, count + 1);
    if (count > 0)
      this.recursiveReadCount++;
  }
};
var NegativeOffsetError = class extends BaseError2 {
  constructor({ offset }) {
    super(`Offset \`${offset}\` cannot be negative.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.NegativeOffsetError"
    });
  }
};
var PositionOutOfBoundsError = class extends BaseError2 {
  constructor({ length: length2, position }) {
    super(`Position \`${position}\` is out of bounds (\`0 < position < ${length2}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.PositionOutOfBoundsError"
    });
  }
};
var RecursiveReadLimitExceededError = class extends BaseError2 {
  constructor({ count, limit: limit2 }) {
    super(`Recursive read limit of \`${limit2}\` exceeded (recursive read count: \`${count}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.RecursiveReadLimitExceededError"
    });
  }
};

// node_modules/ox/_esm/core/AbiParameters.js
function encodePacked(types, values) {
  if (types.length !== values.length)
    throw new LengthMismatchError({
      expectedLength: types.length,
      givenLength: values.length
    });
  const data = [];
  for (let i3 = 0; i3 < types.length; i3++) {
    const type = types[i3];
    const value = values[i3];
    data.push(encodePacked.encode(type, value));
  }
  return concat(...data);
}
(function(encodePacked2) {
  function encode8(type, value, isArray2 = false) {
    if (type === "address") {
      const address = value;
      assert4(address);
      return padLeft(address.toLowerCase(), isArray2 ? 32 : 0);
    }
    if (type === "string")
      return fromString(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return padLeft(fromBoolean(value), isArray2 ? 32 : 1);
    const intMatch = type.match(integerRegex2);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size3 = Number.parseInt(bits, 10) / 8;
      return fromNumber(value, {
        size: isArray2 ? 32 : size3,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex2);
    if (bytesMatch) {
      const [_type, size3] = bytesMatch;
      if (Number.parseInt(size3, 10) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError({
          expectedSize: Number.parseInt(size3, 10),
          value
        });
      return padRight(value, isArray2 ? 32 : 0);
    }
    const arrayMatch = type.match(arrayRegex);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i3 = 0; i3 < value.length; i3++) {
        data.push(encode8(childType, value[i3], true));
      }
      if (data.length === 0)
        return "0x";
      return concat(...data);
    }
    throw new InvalidTypeError(type);
  }
  encodePacked2.encode = encode8;
})(encodePacked || (encodePacked = {}));
var BytesSizeMismatchError = class extends BaseError2 {
  constructor({ expectedSize, value }) {
    super(`Size of bytes "${value}" (bytes${size2(value)}) does not match expected size (bytes${expectedSize}).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.BytesSizeMismatchError"
    });
  }
};
var LengthMismatchError = class extends BaseError2 {
  constructor({ expectedLength, givenLength }) {
    super([
      "ABI encoding parameters/values length mismatch.",
      `Expected length (parameters): ${expectedLength}`,
      `Given length (values): ${givenLength}`
    ].join("\n"));
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.LengthMismatchError"
    });
  }
};
var InvalidTypeError = class extends BaseError2 {
  constructor(type) {
    super(`Type \`${type}\` is not a valid ABI Type.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidTypeError"
    });
  }
};

// node_modules/ox/_esm/core/AbiError.js
function from6(abiError, options = {}) {
  return from5(abiError, options);
}
var solidityError = from6({
  inputs: [
    {
      name: "message",
      type: "string"
    }
  ],
  name: "Error",
  type: "error"
});
var solidityPanic = from6({
  inputs: [
    {
      name: "reason",
      type: "uint8"
    }
  ],
  name: "Panic",
  type: "error"
});

// node_modules/ox/_esm/core/Signature.js
var Signature_exports = {};
__export(Signature_exports, {
  InvalidRError: () => InvalidRError,
  InvalidSError: () => InvalidSError,
  InvalidSerializedSizeError: () => InvalidSerializedSizeError2,
  InvalidVError: () => InvalidVError,
  InvalidYParityError: () => InvalidYParityError,
  MissingPropertiesError: () => MissingPropertiesError,
  assert: () => assert5,
  extract: () => extract,
  from: () => from7,
  fromBytes: () => fromBytes3,
  fromDerBytes: () => fromDerBytes,
  fromDerHex: () => fromDerHex,
  fromHex: () => fromHex3,
  fromLegacy: () => fromLegacy,
  fromRpc: () => fromRpc,
  fromTuple: () => fromTuple,
  toBytes: () => toBytes3,
  toDerBytes: () => toDerBytes,
  toDerHex: () => toDerHex,
  toHex: () => toHex2,
  toLegacy: () => toLegacy,
  toRpc: () => toRpc,
  toTuple: () => toTuple,
  vToYParity: () => vToYParity,
  validate: () => validate5,
  yParityToV: () => yParityToV
});

// node_modules/ox/node_modules/@noble/curves/esm/abstract/modular.js
var _0n2 = BigInt(0);
var _1n2 = BigInt(1);
var _2n = BigInt(2);
var _3n = BigInt(3);
var _4n = BigInt(4);
var _5n = BigInt(5);
var _8n = BigInt(8);
function mod(a3, b4) {
  const result = a3 % b4;
  return result >= _0n2 ? result : b4 + result;
}
function pow2(x5, power, modulo) {
  let res = x5;
  while (power-- > _0n2) {
    res *= res;
    res %= modulo;
  }
  return res;
}
function invert(number, modulo) {
  if (number === _0n2)
    throw new Error("invert: expected non-zero number");
  if (modulo <= _0n2)
    throw new Error("invert: expected positive modulus, got " + modulo);
  let a3 = mod(number, modulo);
  let b4 = modulo;
  let x5 = _0n2, y4 = _1n2, u2 = _1n2, v6 = _0n2;
  while (a3 !== _0n2) {
    const q2 = b4 / a3;
    const r3 = b4 % a3;
    const m4 = x5 - u2 * q2;
    const n4 = y4 - v6 * q2;
    b4 = a3, a3 = r3, x5 = u2, y4 = v6, u2 = m4, v6 = n4;
  }
  const gcd2 = b4;
  if (gcd2 !== _1n2)
    throw new Error("invert: does not exist");
  return mod(x5, modulo);
}
function sqrt3mod4(Fp4, n4) {
  const p1div4 = (Fp4.ORDER + _1n2) / _4n;
  const root = Fp4.pow(n4, p1div4);
  if (!Fp4.eql(Fp4.sqr(root), n4))
    throw new Error("Cannot find square root");
  return root;
}
function sqrt5mod8(Fp4, n4) {
  const p5div8 = (Fp4.ORDER - _5n) / _8n;
  const n22 = Fp4.mul(n4, _2n);
  const v6 = Fp4.pow(n22, p5div8);
  const nv = Fp4.mul(n4, v6);
  const i3 = Fp4.mul(Fp4.mul(nv, _2n), v6);
  const root = Fp4.mul(nv, Fp4.sub(i3, Fp4.ONE));
  if (!Fp4.eql(Fp4.sqr(root), n4))
    throw new Error("Cannot find square root");
  return root;
}
function tonelliShanks(P6) {
  if (P6 < BigInt(3))
    throw new Error("sqrt is not defined for small field");
  let Q4 = P6 - _1n2;
  let S4 = 0;
  while (Q4 % _2n === _0n2) {
    Q4 /= _2n;
    S4++;
  }
  let Z2 = _2n;
  const _Fp = Field(P6);
  while (FpLegendre(_Fp, Z2) === 1) {
    if (Z2++ > 1e3)
      throw new Error("Cannot find square root: probably non-prime P");
  }
  if (S4 === 1)
    return sqrt3mod4;
  let cc2 = _Fp.pow(Z2, Q4);
  const Q1div2 = (Q4 + _1n2) / _2n;
  return function tonelliSlow(Fp4, n4) {
    if (Fp4.is0(n4))
      return n4;
    if (FpLegendre(Fp4, n4) !== 1)
      throw new Error("Cannot find square root");
    let M5 = S4;
    let c6 = Fp4.mul(Fp4.ONE, cc2);
    let t = Fp4.pow(n4, Q4);
    let R4 = Fp4.pow(n4, Q1div2);
    while (!Fp4.eql(t, Fp4.ONE)) {
      if (Fp4.is0(t))
        return Fp4.ZERO;
      let i3 = 1;
      let t_tmp = Fp4.sqr(t);
      while (!Fp4.eql(t_tmp, Fp4.ONE)) {
        i3++;
        t_tmp = Fp4.sqr(t_tmp);
        if (i3 === M5)
          throw new Error("Cannot find square root");
      }
      const exponent = _1n2 << BigInt(M5 - i3 - 1);
      const b4 = Fp4.pow(c6, exponent);
      M5 = i3;
      c6 = Fp4.sqr(b4);
      t = Fp4.mul(t, c6);
      R4 = Fp4.mul(R4, b4);
    }
    return R4;
  };
}
function FpSqrt(P6) {
  if (P6 % _4n === _3n)
    return sqrt3mod4;
  if (P6 % _8n === _5n)
    return sqrt5mod8;
  return tonelliShanks(P6);
}
var isNegativeLE = (num3, modulo) => (mod(num3, modulo) & _1n2) === _1n2;
var FIELD_FIELDS = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField(field) {
  const initial = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  };
  const opts = FIELD_FIELDS.reduce((map, val) => {
    map[val] = "function";
    return map;
  }, initial);
  return validateObject(field, opts);
}
function FpPow(Fp4, num3, power) {
  if (power < _0n2)
    throw new Error("invalid exponent, negatives unsupported");
  if (power === _0n2)
    return Fp4.ONE;
  if (power === _1n2)
    return num3;
  let p4 = Fp4.ONE;
  let d7 = num3;
  while (power > _0n2) {
    if (power & _1n2)
      p4 = Fp4.mul(p4, d7);
    d7 = Fp4.sqr(d7);
    power >>= _1n2;
  }
  return p4;
}
function FpInvertBatch(Fp4, nums, passZero = false) {
  const inverted = new Array(nums.length).fill(passZero ? Fp4.ZERO : void 0);
  const multipliedAcc = nums.reduce((acc, num3, i3) => {
    if (Fp4.is0(num3))
      return acc;
    inverted[i3] = acc;
    return Fp4.mul(acc, num3);
  }, Fp4.ONE);
  const invertedAcc = Fp4.inv(multipliedAcc);
  nums.reduceRight((acc, num3, i3) => {
    if (Fp4.is0(num3))
      return acc;
    inverted[i3] = Fp4.mul(acc, inverted[i3]);
    return Fp4.mul(acc, num3);
  }, invertedAcc);
  return inverted;
}
function FpLegendre(Fp4, n4) {
  const p1mod2 = (Fp4.ORDER - _1n2) / _2n;
  const powered = Fp4.pow(n4, p1mod2);
  const yes = Fp4.eql(powered, Fp4.ONE);
  const zero = Fp4.eql(powered, Fp4.ZERO);
  const no3 = Fp4.eql(powered, Fp4.neg(Fp4.ONE));
  if (!yes && !zero && !no3)
    throw new Error("invalid Legendre symbol result");
  return yes ? 1 : zero ? 0 : -1;
}
function nLength(n4, nBitLength) {
  if (nBitLength !== void 0)
    anumber(nBitLength);
  const _nBitLength = nBitLength !== void 0 ? nBitLength : n4.toString(2).length;
  const nByteLength = Math.ceil(_nBitLength / 8);
  return { nBitLength: _nBitLength, nByteLength };
}
function Field(ORDER, bitLen3, isLE2 = false, redef = {}) {
  if (ORDER <= _0n2)
    throw new Error("invalid field: expected ORDER > 0, got " + ORDER);
  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen3);
  if (BYTES > 2048)
    throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let sqrtP;
  const f6 = Object.freeze({
    ORDER,
    isLE: isLE2,
    BITS,
    BYTES,
    MASK: bitMask(BITS),
    ZERO: _0n2,
    ONE: _1n2,
    create: (num3) => mod(num3, ORDER),
    isValid: (num3) => {
      if (typeof num3 !== "bigint")
        throw new Error("invalid field element: expected bigint, got " + typeof num3);
      return _0n2 <= num3 && num3 < ORDER;
    },
    is0: (num3) => num3 === _0n2,
    isOdd: (num3) => (num3 & _1n2) === _1n2,
    neg: (num3) => mod(-num3, ORDER),
    eql: (lhs, rhs) => lhs === rhs,
    sqr: (num3) => mod(num3 * num3, ORDER),
    add: (lhs, rhs) => mod(lhs + rhs, ORDER),
    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
    pow: (num3, power) => FpPow(f6, num3, power),
    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
    // Same as above, but doesn't normalize
    sqrN: (num3) => num3 * num3,
    addN: (lhs, rhs) => lhs + rhs,
    subN: (lhs, rhs) => lhs - rhs,
    mulN: (lhs, rhs) => lhs * rhs,
    inv: (num3) => invert(num3, ORDER),
    sqrt: redef.sqrt || ((n4) => {
      if (!sqrtP)
        sqrtP = FpSqrt(ORDER);
      return sqrtP(f6, n4);
    }),
    toBytes: (num3) => isLE2 ? numberToBytesLE(num3, BYTES) : numberToBytesBE(num3, BYTES),
    fromBytes: (bytes) => {
      if (bytes.length !== BYTES)
        throw new Error("Field.fromBytes: expected " + BYTES + " bytes, got " + bytes.length);
      return isLE2 ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);
    },
    // TODO: we don't need it here, move out to separate fn
    invertBatch: (lst) => FpInvertBatch(f6, lst),
    // We can't move this out because Fp6, Fp12 implement it
    // and it's unclear what to return in there.
    cmov: (a3, b4, c6) => c6 ? b4 : a3
  });
  return Object.freeze(f6);
}
function FpSqrtEven(Fp4, elm) {
  if (!Fp4.isOdd)
    throw new Error("Field doesn't have isOdd");
  const root = Fp4.sqrt(elm);
  return Fp4.isOdd(root) ? Fp4.neg(root) : root;
}
function getFieldBytesLength(fieldOrder) {
  if (typeof fieldOrder !== "bigint")
    throw new Error("field order must be bigint");
  const bitLength = fieldOrder.toString(2).length;
  return Math.ceil(bitLength / 8);
}
function getMinHashLength(fieldOrder) {
  const length2 = getFieldBytesLength(fieldOrder);
  return length2 + Math.ceil(length2 / 2);
}
function mapHashToField(key, fieldOrder, isLE2 = false) {
  const len = key.length;
  const fieldLen = getFieldBytesLength(fieldOrder);
  const minLen = getMinHashLength(fieldOrder);
  if (len < 16 || len < minLen || len > 1024)
    throw new Error("expected " + minLen + "-1024 bytes of input, got " + len);
  const num3 = isLE2 ? bytesToNumberLE(key) : bytesToNumberBE(key);
  const reduced = mod(num3, fieldOrder - _1n2) + _1n2;
  return isLE2 ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
}

// node_modules/ox/node_modules/@noble/curves/esm/abstract/curve.js
var _0n3 = BigInt(0);
var _1n3 = BigInt(1);
function constTimeNegate(condition, item) {
  const neg = item.negate();
  return condition ? neg : item;
}
function validateW(W6, bits) {
  if (!Number.isSafeInteger(W6) || W6 <= 0 || W6 > bits)
    throw new Error("invalid window size, expected [1.." + bits + "], got W=" + W6);
}
function calcWOpts(W6, scalarBits) {
  validateW(W6, scalarBits);
  const windows = Math.ceil(scalarBits / W6) + 1;
  const windowSize = 2 ** (W6 - 1);
  const maxNumber = 2 ** W6;
  const mask = bitMask(W6);
  const shiftBy = BigInt(W6);
  return { windows, windowSize, mask, maxNumber, shiftBy };
}
function calcOffsets(n4, window2, wOpts) {
  const { windowSize, mask, maxNumber, shiftBy } = wOpts;
  let wbits = Number(n4 & mask);
  let nextN = n4 >> shiftBy;
  if (wbits > windowSize) {
    wbits -= maxNumber;
    nextN += _1n3;
  }
  const offsetStart = window2 * windowSize;
  const offset = offsetStart + Math.abs(wbits) - 1;
  const isZero = wbits === 0;
  const isNeg = wbits < 0;
  const isNegF = window2 % 2 !== 0;
  const offsetF = offsetStart;
  return { nextN, offset, isZero, isNeg, isNegF, offsetF };
}
function validateMSMPoints(points, c6) {
  if (!Array.isArray(points))
    throw new Error("array expected");
  points.forEach((p4, i3) => {
    if (!(p4 instanceof c6))
      throw new Error("invalid point at index " + i3);
  });
}
function validateMSMScalars(scalars, field) {
  if (!Array.isArray(scalars))
    throw new Error("array of scalars expected");
  scalars.forEach((s2, i3) => {
    if (!field.isValid(s2))
      throw new Error("invalid scalar at index " + i3);
  });
}
var pointPrecomputes = /* @__PURE__ */ new WeakMap();
var pointWindowSizes = /* @__PURE__ */ new WeakMap();
function getW(P6) {
  return pointWindowSizes.get(P6) || 1;
}
function wNAF(c6, bits) {
  return {
    constTimeNegate,
    hasPrecomputes(elm) {
      return getW(elm) !== 1;
    },
    // non-const time multiplication ladder
    unsafeLadder(elm, n4, p4 = c6.ZERO) {
      let d7 = elm;
      while (n4 > _0n3) {
        if (n4 & _1n3)
          p4 = p4.add(d7);
        d7 = d7.double();
        n4 >>= _1n3;
      }
      return p4;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @param elm Point instance
     * @param W window size
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(elm, W6) {
      const { windows, windowSize } = calcWOpts(W6, bits);
      const points = [];
      let p4 = elm;
      let base3 = p4;
      for (let window2 = 0; window2 < windows; window2++) {
        base3 = p4;
        points.push(base3);
        for (let i3 = 1; i3 < windowSize; i3++) {
          base3 = base3.add(p4);
          points.push(base3);
        }
        p4 = base3.double();
      }
      return points;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(W6, precomputes, n4) {
      let p4 = c6.ZERO;
      let f6 = c6.BASE;
      const wo4 = calcWOpts(W6, bits);
      for (let window2 = 0; window2 < wo4.windows; window2++) {
        const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n4, window2, wo4);
        n4 = nextN;
        if (isZero) {
          f6 = f6.add(constTimeNegate(isNegF, precomputes[offsetF]));
        } else {
          p4 = p4.add(constTimeNegate(isNeg, precomputes[offset]));
        }
      }
      return { p: p4, f: f6 };
    },
    /**
     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @param acc accumulator point to add result of multiplication
     * @returns point
     */
    wNAFUnsafe(W6, precomputes, n4, acc = c6.ZERO) {
      const wo4 = calcWOpts(W6, bits);
      for (let window2 = 0; window2 < wo4.windows; window2++) {
        if (n4 === _0n3)
          break;
        const { nextN, offset, isZero, isNeg } = calcOffsets(n4, window2, wo4);
        n4 = nextN;
        if (isZero) {
          continue;
        } else {
          const item = precomputes[offset];
          acc = acc.add(isNeg ? item.negate() : item);
        }
      }
      return acc;
    },
    getPrecomputes(W6, P6, transform) {
      let comp = pointPrecomputes.get(P6);
      if (!comp) {
        comp = this.precomputeWindow(P6, W6);
        if (W6 !== 1)
          pointPrecomputes.set(P6, transform(comp));
      }
      return comp;
    },
    wNAFCached(P6, n4, transform) {
      const W6 = getW(P6);
      return this.wNAF(W6, this.getPrecomputes(W6, P6, transform), n4);
    },
    wNAFCachedUnsafe(P6, n4, transform, prev) {
      const W6 = getW(P6);
      if (W6 === 1)
        return this.unsafeLadder(P6, n4, prev);
      return this.wNAFUnsafe(W6, this.getPrecomputes(W6, P6, transform), n4, prev);
    },
    // We calculate precomputes for elliptic curve point multiplication
    // using windowed method. This specifies window size and
    // stores precomputed values. Usually only base point would be precomputed.
    setWindowSize(P6, W6) {
      validateW(W6, bits);
      pointWindowSizes.set(P6, W6);
      pointPrecomputes.delete(P6);
    }
  };
}
function pippenger(c6, fieldN, points, scalars) {
  validateMSMPoints(points, c6);
  validateMSMScalars(scalars, fieldN);
  const plength = points.length;
  const slength = scalars.length;
  if (plength !== slength)
    throw new Error("arrays of points and scalars must have equal length");
  const zero = c6.ZERO;
  const wbits = bitLen(BigInt(plength));
  let windowSize = 1;
  if (wbits > 12)
    windowSize = wbits - 3;
  else if (wbits > 4)
    windowSize = wbits - 2;
  else if (wbits > 0)
    windowSize = 2;
  const MASK = bitMask(windowSize);
  const buckets = new Array(Number(MASK) + 1).fill(zero);
  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;
  let sum = zero;
  for (let i3 = lastBits; i3 >= 0; i3 -= windowSize) {
    buckets.fill(zero);
    for (let j6 = 0; j6 < slength; j6++) {
      const scalar = scalars[j6];
      const wbits2 = Number(scalar >> BigInt(i3) & MASK);
      buckets[wbits2] = buckets[wbits2].add(points[j6]);
    }
    let resI = zero;
    for (let j6 = buckets.length - 1, sumI = zero; j6 > 0; j6--) {
      sumI = sumI.add(buckets[j6]);
      resI = resI.add(sumI);
    }
    sum = sum.add(resI);
    if (i3 !== 0)
      for (let j6 = 0; j6 < windowSize; j6++)
        sum = sum.double();
  }
  return sum;
}
function validateBasic(curve) {
  validateField(curve.Fp);
  validateObject(curve, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  });
  return Object.freeze({
    ...nLength(curve.n, curve.nBitLength),
    ...curve,
    ...{ p: curve.Fp.ORDER }
  });
}

// node_modules/ox/node_modules/@noble/curves/esm/abstract/weierstrass.js
function validateSigVerOpts(opts) {
  if (opts.lowS !== void 0)
    abool("lowS", opts.lowS);
  if (opts.prehash !== void 0)
    abool("prehash", opts.prehash);
}
function validatePointOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    a: "field",
    b: "field"
  }, {
    allowInfinityPoint: "boolean",
    allowedPrivateKeyLengths: "array",
    clearCofactor: "function",
    fromBytes: "function",
    isTorsionFree: "function",
    toBytes: "function",
    wrapPrivateKey: "boolean"
  });
  const { endo, Fp: Fp4, a: a3 } = opts;
  if (endo) {
    if (!Fp4.eql(a3, Fp4.ZERO)) {
      throw new Error("invalid endo: CURVE.a must be 0");
    }
    if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
      throw new Error('invalid endo: expected "beta": bigint and "splitScalar": function');
    }
  }
  return Object.freeze({ ...opts });
}
var DERErr = class extends Error {
  constructor(m4 = "") {
    super(m4);
  }
};
var DER = {
  // asn.1 DER encoding utils
  Err: DERErr,
  // Basic building block is TLV (Tag-Length-Value)
  _tlv: {
    encode: (tag2, data) => {
      const { Err: E4 } = DER;
      if (tag2 < 0 || tag2 > 256)
        throw new E4("tlv.encode: wrong tag");
      if (data.length & 1)
        throw new E4("tlv.encode: unpadded data");
      const dataLen = data.length / 2;
      const len = numberToHexUnpadded(dataLen);
      if (len.length / 2 & 128)
        throw new E4("tlv.encode: long form length too big");
      const lenLen = dataLen > 127 ? numberToHexUnpadded(len.length / 2 | 128) : "";
      const t = numberToHexUnpadded(tag2);
      return t + lenLen + len + data;
    },
    // v - value, l - left bytes (unparsed)
    decode(tag2, data) {
      const { Err: E4 } = DER;
      let pos = 0;
      if (tag2 < 0 || tag2 > 256)
        throw new E4("tlv.encode: wrong tag");
      if (data.length < 2 || data[pos++] !== tag2)
        throw new E4("tlv.decode: wrong tlv");
      const first = data[pos++];
      const isLong = !!(first & 128);
      let length2 = 0;
      if (!isLong)
        length2 = first;
      else {
        const lenLen = first & 127;
        if (!lenLen)
          throw new E4("tlv.decode(long): indefinite length not supported");
        if (lenLen > 4)
          throw new E4("tlv.decode(long): byte length is too big");
        const lengthBytes = data.subarray(pos, pos + lenLen);
        if (lengthBytes.length !== lenLen)
          throw new E4("tlv.decode: length bytes not complete");
        if (lengthBytes[0] === 0)
          throw new E4("tlv.decode(long): zero leftmost byte");
        for (const b4 of lengthBytes)
          length2 = length2 << 8 | b4;
        pos += lenLen;
        if (length2 < 128)
          throw new E4("tlv.decode(long): not minimal encoding");
      }
      const v6 = data.subarray(pos, pos + length2);
      if (v6.length !== length2)
        throw new E4("tlv.decode: wrong value length");
      return { v: v6, l: data.subarray(pos + length2) };
    }
  },
  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
  // since we always use positive integers here. It must always be empty:
  // - add zero byte if exists
  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
  _int: {
    encode(num3) {
      const { Err: E4 } = DER;
      if (num3 < _0n4)
        throw new E4("integer: negative integers are not allowed");
      let hex2 = numberToHexUnpadded(num3);
      if (Number.parseInt(hex2[0], 16) & 8)
        hex2 = "00" + hex2;
      if (hex2.length & 1)
        throw new E4("unexpected DER parsing assertion: unpadded hex");
      return hex2;
    },
    decode(data) {
      const { Err: E4 } = DER;
      if (data[0] & 128)
        throw new E4("invalid signature integer: negative");
      if (data[0] === 0 && !(data[1] & 128))
        throw new E4("invalid signature integer: unnecessary leading zero");
      return bytesToNumberBE(data);
    }
  },
  toSig(hex2) {
    const { Err: E4, _int: int, _tlv: tlv } = DER;
    const data = ensureBytes("signature", hex2);
    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(48, data);
    if (seqLeftBytes.length)
      throw new E4("invalid signature: left bytes after parsing");
    const { v: rBytes, l: rLeftBytes } = tlv.decode(2, seqBytes);
    const { v: sBytes, l: sLeftBytes } = tlv.decode(2, rLeftBytes);
    if (sLeftBytes.length)
      throw new E4("invalid signature: left bytes after parsing");
    return { r: int.decode(rBytes), s: int.decode(sBytes) };
  },
  hexFromSig(sig) {
    const { _tlv: tlv, _int: int } = DER;
    const rs2 = tlv.encode(2, int.encode(sig.r));
    const ss3 = tlv.encode(2, int.encode(sig.s));
    const seq = rs2 + ss3;
    return tlv.encode(48, seq);
  }
};
function numToSizedHex(num3, size3) {
  return bytesToHex2(numberToBytesBE(num3, size3));
}
var _0n4 = BigInt(0);
var _1n4 = BigInt(1);
var _2n2 = BigInt(2);
var _3n2 = BigInt(3);
var _4n2 = BigInt(4);
function weierstrassPoints(opts) {
  const CURVE = validatePointOpts(opts);
  const { Fp: Fp4 } = CURVE;
  const Fn4 = Field(CURVE.n, CURVE.nBitLength);
  const toBytes7 = CURVE.toBytes || ((_c2, point, _isCompressed) => {
    const a3 = point.toAffine();
    return concatBytes2(Uint8Array.from([4]), Fp4.toBytes(a3.x), Fp4.toBytes(a3.y));
  });
  const fromBytes5 = CURVE.fromBytes || ((bytes) => {
    const tail = bytes.subarray(1);
    const x5 = Fp4.fromBytes(tail.subarray(0, Fp4.BYTES));
    const y4 = Fp4.fromBytes(tail.subarray(Fp4.BYTES, 2 * Fp4.BYTES));
    return { x: x5, y: y4 };
  });
  function weierstrassEquation(x5) {
    const { a: a3, b: b4 } = CURVE;
    const x22 = Fp4.sqr(x5);
    const x32 = Fp4.mul(x22, x5);
    return Fp4.add(Fp4.add(x32, Fp4.mul(x5, a3)), b4);
  }
  function isValidXY(x5, y4) {
    const left = Fp4.sqr(y4);
    const right = weierstrassEquation(x5);
    return Fp4.eql(left, right);
  }
  if (!isValidXY(CURVE.Gx, CURVE.Gy))
    throw new Error("bad curve params: generator point");
  const _4a3 = Fp4.mul(Fp4.pow(CURVE.a, _3n2), _4n2);
  const _27b2 = Fp4.mul(Fp4.sqr(CURVE.b), BigInt(27));
  if (Fp4.is0(Fp4.add(_4a3, _27b2)))
    throw new Error("bad curve params: a or b");
  function isWithinCurveOrder(num3) {
    return inRange(num3, _1n4, CURVE.n);
  }
  function normPrivateKeyToScalar(key) {
    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N12 } = CURVE;
    if (lengths && typeof key !== "bigint") {
      if (isBytes2(key))
        key = bytesToHex2(key);
      if (typeof key !== "string" || !lengths.includes(key.length))
        throw new Error("invalid private key");
      key = key.padStart(nByteLength * 2, "0");
    }
    let num3;
    try {
      num3 = typeof key === "bigint" ? key : bytesToNumberBE(ensureBytes("private key", key, nByteLength));
    } catch (error) {
      throw new Error("invalid private key, expected hex or " + nByteLength + " bytes, got " + typeof key);
    }
    if (wrapPrivateKey)
      num3 = mod(num3, N12);
    aInRange("private key", num3, _1n4, N12);
    return num3;
  }
  function aprjpoint(other) {
    if (!(other instanceof Point3))
      throw new Error("ProjectivePoint expected");
  }
  const toAffineMemo = memoized((p4, iz) => {
    const { px: x5, py: y4, pz: z5 } = p4;
    if (Fp4.eql(z5, Fp4.ONE))
      return { x: x5, y: y4 };
    const is0 = p4.is0();
    if (iz == null)
      iz = is0 ? Fp4.ONE : Fp4.inv(z5);
    const ax = Fp4.mul(x5, iz);
    const ay = Fp4.mul(y4, iz);
    const zz = Fp4.mul(z5, iz);
    if (is0)
      return { x: Fp4.ZERO, y: Fp4.ZERO };
    if (!Fp4.eql(zz, Fp4.ONE))
      throw new Error("invZ was invalid");
    return { x: ax, y: ay };
  });
  const assertValidMemo = memoized((p4) => {
    if (p4.is0()) {
      if (CURVE.allowInfinityPoint && !Fp4.is0(p4.py))
        return;
      throw new Error("bad point: ZERO");
    }
    const { x: x5, y: y4 } = p4.toAffine();
    if (!Fp4.isValid(x5) || !Fp4.isValid(y4))
      throw new Error("bad point: x or y not FE");
    if (!isValidXY(x5, y4))
      throw new Error("bad point: equation left != right");
    if (!p4.isTorsionFree())
      throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  class Point3 {
    constructor(px, py, pz) {
      if (px == null || !Fp4.isValid(px))
        throw new Error("x required");
      if (py == null || !Fp4.isValid(py) || Fp4.is0(py))
        throw new Error("y required");
      if (pz == null || !Fp4.isValid(pz))
        throw new Error("z required");
      this.px = px;
      this.py = py;
      this.pz = pz;
      Object.freeze(this);
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(p4) {
      const { x: x5, y: y4 } = p4 || {};
      if (!p4 || !Fp4.isValid(x5) || !Fp4.isValid(y4))
        throw new Error("invalid affine point");
      if (p4 instanceof Point3)
        throw new Error("projective point not allowed");
      const is0 = (i3) => Fp4.eql(i3, Fp4.ZERO);
      if (is0(x5) && is0(y4))
        return Point3.ZERO;
      return new Point3(x5, y4, Fp4.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(points) {
      const toInv = FpInvertBatch(Fp4, points.map((p4) => p4.pz));
      return points.map((p4, i3) => p4.toAffine(toInv[i3])).map(Point3.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(hex2) {
      const P6 = Point3.fromAffine(fromBytes5(ensureBytes("pointHex", hex2)));
      P6.assertValidity();
      return P6;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(privateKey) {
      return Point3.BASE.multiply(normPrivateKeyToScalar(privateKey));
    }
    // Multiscalar Multiplication
    static msm(points, scalars) {
      return pippenger(Point3, Fn4, points, scalars);
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      wnaf.setWindowSize(this, windowSize);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      assertValidMemo(this);
    }
    hasEvenY() {
      const { y: y4 } = this.toAffine();
      if (Fp4.isOdd)
        return !Fp4.isOdd(y4);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(other) {
      aprjpoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X22, py: Y22, pz: Z2 } = other;
      const U1 = Fp4.eql(Fp4.mul(X1, Z2), Fp4.mul(X22, Z1));
      const U22 = Fp4.eql(Fp4.mul(Y1, Z2), Fp4.mul(Y22, Z1));
      return U1 && U22;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new Point3(this.px, Fp4.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: a3, b: b4 } = CURVE;
      const b32 = Fp4.mul(b4, _3n2);
      const { px: X1, py: Y1, pz: Z1 } = this;
      let X32 = Fp4.ZERO, Y3 = Fp4.ZERO, Z3 = Fp4.ZERO;
      let t0 = Fp4.mul(X1, X1);
      let t1 = Fp4.mul(Y1, Y1);
      let t2 = Fp4.mul(Z1, Z1);
      let t3 = Fp4.mul(X1, Y1);
      t3 = Fp4.add(t3, t3);
      Z3 = Fp4.mul(X1, Z1);
      Z3 = Fp4.add(Z3, Z3);
      X32 = Fp4.mul(a3, Z3);
      Y3 = Fp4.mul(b32, t2);
      Y3 = Fp4.add(X32, Y3);
      X32 = Fp4.sub(t1, Y3);
      Y3 = Fp4.add(t1, Y3);
      Y3 = Fp4.mul(X32, Y3);
      X32 = Fp4.mul(t3, X32);
      Z3 = Fp4.mul(b32, Z3);
      t2 = Fp4.mul(a3, t2);
      t3 = Fp4.sub(t0, t2);
      t3 = Fp4.mul(a3, t3);
      t3 = Fp4.add(t3, Z3);
      Z3 = Fp4.add(t0, t0);
      t0 = Fp4.add(Z3, t0);
      t0 = Fp4.add(t0, t2);
      t0 = Fp4.mul(t0, t3);
      Y3 = Fp4.add(Y3, t0);
      t2 = Fp4.mul(Y1, Z1);
      t2 = Fp4.add(t2, t2);
      t0 = Fp4.mul(t2, t3);
      X32 = Fp4.sub(X32, t0);
      Z3 = Fp4.mul(t2, t1);
      Z3 = Fp4.add(Z3, Z3);
      Z3 = Fp4.add(Z3, Z3);
      return new Point3(X32, Y3, Z3);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(other) {
      aprjpoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X22, py: Y22, pz: Z2 } = other;
      let X32 = Fp4.ZERO, Y3 = Fp4.ZERO, Z3 = Fp4.ZERO;
      const a3 = CURVE.a;
      const b32 = Fp4.mul(CURVE.b, _3n2);
      let t0 = Fp4.mul(X1, X22);
      let t1 = Fp4.mul(Y1, Y22);
      let t2 = Fp4.mul(Z1, Z2);
      let t3 = Fp4.add(X1, Y1);
      let t4 = Fp4.add(X22, Y22);
      t3 = Fp4.mul(t3, t4);
      t4 = Fp4.add(t0, t1);
      t3 = Fp4.sub(t3, t4);
      t4 = Fp4.add(X1, Z1);
      let t5 = Fp4.add(X22, Z2);
      t4 = Fp4.mul(t4, t5);
      t5 = Fp4.add(t0, t2);
      t4 = Fp4.sub(t4, t5);
      t5 = Fp4.add(Y1, Z1);
      X32 = Fp4.add(Y22, Z2);
      t5 = Fp4.mul(t5, X32);
      X32 = Fp4.add(t1, t2);
      t5 = Fp4.sub(t5, X32);
      Z3 = Fp4.mul(a3, t4);
      X32 = Fp4.mul(b32, t2);
      Z3 = Fp4.add(X32, Z3);
      X32 = Fp4.sub(t1, Z3);
      Z3 = Fp4.add(t1, Z3);
      Y3 = Fp4.mul(X32, Z3);
      t1 = Fp4.add(t0, t0);
      t1 = Fp4.add(t1, t0);
      t2 = Fp4.mul(a3, t2);
      t4 = Fp4.mul(b32, t4);
      t1 = Fp4.add(t1, t2);
      t2 = Fp4.sub(t0, t2);
      t2 = Fp4.mul(a3, t2);
      t4 = Fp4.add(t4, t2);
      t0 = Fp4.mul(t1, t4);
      Y3 = Fp4.add(Y3, t0);
      t0 = Fp4.mul(t5, t4);
      X32 = Fp4.mul(t3, X32);
      X32 = Fp4.sub(X32, t0);
      t0 = Fp4.mul(t3, t1);
      Z3 = Fp4.mul(t5, Z3);
      Z3 = Fp4.add(Z3, t0);
      return new Point3(X32, Y3, Z3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    is0() {
      return this.equals(Point3.ZERO);
    }
    wNAF(n4) {
      return wnaf.wNAFCached(this, n4, Point3.normalizeZ);
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(sc2) {
      const { endo: endo2, n: N12 } = CURVE;
      aInRange("scalar", sc2, _0n4, N12);
      const I2 = Point3.ZERO;
      if (sc2 === _0n4)
        return I2;
      if (this.is0() || sc2 === _1n4)
        return this;
      if (!endo2 || wnaf.hasPrecomputes(this))
        return wnaf.wNAFCachedUnsafe(this, sc2, Point3.normalizeZ);
      let { k1neg, k1, k2neg, k2: k22 } = endo2.splitScalar(sc2);
      let k1p = I2;
      let k2p = I2;
      let d7 = this;
      while (k1 > _0n4 || k22 > _0n4) {
        if (k1 & _1n4)
          k1p = k1p.add(d7);
        if (k22 & _1n4)
          k2p = k2p.add(d7);
        d7 = d7.double();
        k1 >>= _1n4;
        k22 >>= _1n4;
      }
      if (k1neg)
        k1p = k1p.negate();
      if (k2neg)
        k2p = k2p.negate();
      k2p = new Point3(Fp4.mul(k2p.px, endo2.beta), k2p.py, k2p.pz);
      return k1p.add(k2p);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(scalar) {
      const { endo: endo2, n: N12 } = CURVE;
      aInRange("scalar", scalar, _1n4, N12);
      let point, fake;
      if (endo2) {
        const { k1neg, k1, k2neg, k2: k22 } = endo2.splitScalar(scalar);
        let { p: k1p, f: f1p } = this.wNAF(k1);
        let { p: k2p, f: f2p } = this.wNAF(k22);
        k1p = wnaf.constTimeNegate(k1neg, k1p);
        k2p = wnaf.constTimeNegate(k2neg, k2p);
        k2p = new Point3(Fp4.mul(k2p.px, endo2.beta), k2p.py, k2p.pz);
        point = k1p.add(k2p);
        fake = f1p.add(f2p);
      } else {
        const { p: p4, f: f6 } = this.wNAF(scalar);
        point = p4;
        fake = f6;
      }
      return Point3.normalizeZ([point, fake])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(Q4, a3, b4) {
      const G5 = Point3.BASE;
      const mul3 = (P6, a4) => a4 === _0n4 || a4 === _1n4 || !P6.equals(G5) ? P6.multiplyUnsafe(a4) : P6.multiply(a4);
      const sum = mul3(this, a3).add(mul3(Q4, b4));
      return sum.is0() ? void 0 : sum;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(iz) {
      return toAffineMemo(this, iz);
    }
    isTorsionFree() {
      const { h: cofactor, isTorsionFree } = CURVE;
      if (cofactor === _1n4)
        return true;
      if (isTorsionFree)
        return isTorsionFree(Point3, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: cofactor, clearCofactor } = CURVE;
      if (cofactor === _1n4)
        return this;
      if (clearCofactor)
        return clearCofactor(Point3, this);
      return this.multiplyUnsafe(CURVE.h);
    }
    toRawBytes(isCompressed = true) {
      abool("isCompressed", isCompressed);
      this.assertValidity();
      return toBytes7(Point3, this, isCompressed);
    }
    toHex(isCompressed = true) {
      abool("isCompressed", isCompressed);
      return bytesToHex2(this.toRawBytes(isCompressed));
    }
  }
  Point3.BASE = new Point3(CURVE.Gx, CURVE.Gy, Fp4.ONE);
  Point3.ZERO = new Point3(Fp4.ZERO, Fp4.ONE, Fp4.ZERO);
  const { endo, nBitLength } = CURVE;
  const wnaf = wNAF(Point3, endo ? Math.ceil(nBitLength / 2) : nBitLength);
  return {
    CURVE,
    ProjectivePoint: Point3,
    normPrivateKeyToScalar,
    weierstrassEquation,
    isWithinCurveOrder
  };
}
function validateOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  });
  return Object.freeze({ lowS: true, ...opts });
}
function weierstrass(curveDef) {
  const CURVE = validateOpts(curveDef);
  const { Fp: Fp4, n: CURVE_ORDER, nByteLength, nBitLength } = CURVE;
  const compressedLen = Fp4.BYTES + 1;
  const uncompressedLen = 2 * Fp4.BYTES + 1;
  function modN2(a3) {
    return mod(a3, CURVE_ORDER);
  }
  function invN(a3) {
    return invert(a3, CURVE_ORDER);
  }
  const { ProjectivePoint: Point3, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
    ...CURVE,
    toBytes(_c2, point, isCompressed) {
      const a3 = point.toAffine();
      const x5 = Fp4.toBytes(a3.x);
      const cat = concatBytes2;
      abool("isCompressed", isCompressed);
      if (isCompressed) {
        return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x5);
      } else {
        return cat(Uint8Array.from([4]), x5, Fp4.toBytes(a3.y));
      }
    },
    fromBytes(bytes) {
      const len = bytes.length;
      const head = bytes[0];
      const tail = bytes.subarray(1);
      if (len === compressedLen && (head === 2 || head === 3)) {
        const x5 = bytesToNumberBE(tail);
        if (!inRange(x5, _1n4, Fp4.ORDER))
          throw new Error("Point is not on curve");
        const y22 = weierstrassEquation(x5);
        let y4;
        try {
          y4 = Fp4.sqrt(y22);
        } catch (sqrtError) {
          const suffix = sqrtError instanceof Error ? ": " + sqrtError.message : "";
          throw new Error("Point is not on curve" + suffix);
        }
        const isYOdd = (y4 & _1n4) === _1n4;
        const isHeadOdd = (head & 1) === 1;
        if (isHeadOdd !== isYOdd)
          y4 = Fp4.neg(y4);
        return { x: x5, y: y4 };
      } else if (len === uncompressedLen && head === 4) {
        const x5 = Fp4.fromBytes(tail.subarray(0, Fp4.BYTES));
        const y4 = Fp4.fromBytes(tail.subarray(Fp4.BYTES, 2 * Fp4.BYTES));
        return { x: x5, y: y4 };
      } else {
        const cl = compressedLen;
        const ul = uncompressedLen;
        throw new Error("invalid Point, expected length of " + cl + ", or uncompressed " + ul + ", got " + len);
      }
    }
  });
  function isBiggerThanHalfOrder(number) {
    const HALF = CURVE_ORDER >> _1n4;
    return number > HALF;
  }
  function normalizeS(s2) {
    return isBiggerThanHalfOrder(s2) ? modN2(-s2) : s2;
  }
  const slcNum = (b4, from11, to4) => bytesToNumberBE(b4.slice(from11, to4));
  class Signature {
    constructor(r3, s2, recovery) {
      aInRange("r", r3, _1n4, CURVE_ORDER);
      aInRange("s", s2, _1n4, CURVE_ORDER);
      this.r = r3;
      this.s = s2;
      if (recovery != null)
        this.recovery = recovery;
      Object.freeze(this);
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(hex2) {
      const l6 = nByteLength;
      hex2 = ensureBytes("compactSignature", hex2, l6 * 2);
      return new Signature(slcNum(hex2, 0, l6), slcNum(hex2, l6, 2 * l6));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(hex2) {
      const { r: r3, s: s2 } = DER.toSig(ensureBytes("DER", hex2));
      return new Signature(r3, s2);
    }
    /**
     * @todo remove
     * @deprecated
     */
    assertValidity() {
    }
    addRecoveryBit(recovery) {
      return new Signature(this.r, this.s, recovery);
    }
    recoverPublicKey(msgHash) {
      const { r: r3, s: s2, recovery: rec } = this;
      const h4 = bits2int_modN(ensureBytes("msgHash", msgHash));
      if (rec == null || ![0, 1, 2, 3].includes(rec))
        throw new Error("recovery id invalid");
      const radj = rec === 2 || rec === 3 ? r3 + CURVE.n : r3;
      if (radj >= Fp4.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const prefix = (rec & 1) === 0 ? "02" : "03";
      const R4 = Point3.fromHex(prefix + numToSizedHex(radj, Fp4.BYTES));
      const ir3 = invN(radj);
      const u1 = modN2(-h4 * ir3);
      const u2 = modN2(s2 * ir3);
      const Q4 = Point3.BASE.multiplyAndAddUnsafe(R4, u1, u2);
      if (!Q4)
        throw new Error("point at infinify");
      Q4.assertValidity();
      return Q4;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return isBiggerThanHalfOrder(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new Signature(this.r, modN2(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return hexToBytes2(this.toDERHex());
    }
    toDERHex() {
      return DER.hexFromSig(this);
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return hexToBytes2(this.toCompactHex());
    }
    toCompactHex() {
      const l6 = nByteLength;
      return numToSizedHex(this.r, l6) + numToSizedHex(this.s, l6);
    }
  }
  const utils2 = {
    isValidPrivateKey(privateKey) {
      try {
        normPrivateKeyToScalar(privateKey);
        return true;
      } catch (error) {
        return false;
      }
    },
    normPrivateKeyToScalar,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const length2 = getMinHashLength(CURVE.n);
      return mapHashToField(CURVE.randomBytes(length2), CURVE.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(windowSize = 8, point = Point3.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  function getPublicKey2(privateKey, isCompressed = true) {
    return Point3.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  function isProbPub(item) {
    if (typeof item === "bigint")
      return false;
    if (item instanceof Point3)
      return true;
    const arr = ensureBytes("key", item);
    const len = arr.length;
    const fpl = Fp4.BYTES;
    const compLen = fpl + 1;
    const uncompLen = 2 * fpl + 1;
    if (CURVE.allowedPrivateKeyLengths || nByteLength === compLen) {
      return void 0;
    } else {
      return len === compLen || len === uncompLen;
    }
  }
  function getSharedSecret2(privateA, publicB, isCompressed = true) {
    if (isProbPub(privateA) === true)
      throw new Error("first arg must be private key");
    if (isProbPub(publicB) === false)
      throw new Error("second arg must be public key");
    const b4 = Point3.fromHex(publicB);
    return b4.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
  }
  const bits2int = CURVE.bits2int || function(bytes) {
    if (bytes.length > 8192)
      throw new Error("input is too large");
    const num3 = bytesToNumberBE(bytes);
    const delta = bytes.length * 8 - nBitLength;
    return delta > 0 ? num3 >> BigInt(delta) : num3;
  };
  const bits2int_modN = CURVE.bits2int_modN || function(bytes) {
    return modN2(bits2int(bytes));
  };
  const ORDER_MASK = bitMask(nBitLength);
  function int2octets(num3) {
    aInRange("num < 2^" + nBitLength, num3, _0n4, ORDER_MASK);
    return numberToBytesBE(num3, nByteLength);
  }
  function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
    if (["recovered", "canonical"].some((k4) => k4 in opts))
      throw new Error("sign() legacy options not supported");
    const { hash, randomBytes: randomBytes2 } = CURVE;
    let { lowS, prehash, extraEntropy: ent } = opts;
    if (lowS == null)
      lowS = true;
    msgHash = ensureBytes("msgHash", msgHash);
    validateSigVerOpts(opts);
    if (prehash)
      msgHash = ensureBytes("prehashed msgHash", hash(msgHash));
    const h1int = bits2int_modN(msgHash);
    const d7 = normPrivateKeyToScalar(privateKey);
    const seedArgs = [int2octets(d7), int2octets(h1int)];
    if (ent != null && ent !== false) {
      const e2 = ent === true ? randomBytes2(Fp4.BYTES) : ent;
      seedArgs.push(ensureBytes("extraEntropy", e2));
    }
    const seed = concatBytes2(...seedArgs);
    const m4 = h1int;
    function k2sig(kBytes) {
      const k4 = bits2int(kBytes);
      if (!isWithinCurveOrder(k4))
        return;
      const ik = invN(k4);
      const q2 = Point3.BASE.multiply(k4).toAffine();
      const r3 = modN2(q2.x);
      if (r3 === _0n4)
        return;
      const s2 = modN2(ik * modN2(m4 + r3 * d7));
      if (s2 === _0n4)
        return;
      let recovery = (q2.x === r3 ? 0 : 2) | Number(q2.y & _1n4);
      let normS = s2;
      if (lowS && isBiggerThanHalfOrder(s2)) {
        normS = normalizeS(s2);
        recovery ^= 1;
      }
      return new Signature(r3, normS, recovery);
    }
    return { seed, k2sig };
  }
  const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
  const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
  function sign2(msgHash, privKey, opts = defaultSigOpts) {
    const { seed, k2sig } = prepSig(msgHash, privKey, opts);
    const C5 = CURVE;
    const drbg = createHmacDrbg(C5.hash.outputLen, C5.nByteLength, C5.hmac);
    return drbg(seed, k2sig);
  }
  Point3.BASE._setWindowSize(8);
  function verify3(signature, msgHash, publicKey, opts = defaultVerOpts) {
    const sg = signature;
    msgHash = ensureBytes("msgHash", msgHash);
    publicKey = ensureBytes("publicKey", publicKey);
    const { lowS, prehash, format: format2 } = opts;
    validateSigVerOpts(opts);
    if ("strict" in opts)
      throw new Error("options.strict was renamed to lowS");
    if (format2 !== void 0 && format2 !== "compact" && format2 !== "der")
      throw new Error("format must be compact or der");
    const isHex = typeof sg === "string" || isBytes2(sg);
    const isObj = !isHex && !format2 && typeof sg === "object" && sg !== null && typeof sg.r === "bigint" && typeof sg.s === "bigint";
    if (!isHex && !isObj)
      throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    let _sig = void 0;
    let P6;
    try {
      if (isObj)
        _sig = new Signature(sg.r, sg.s);
      if (isHex) {
        try {
          if (format2 !== "compact")
            _sig = Signature.fromDER(sg);
        } catch (derError) {
          if (!(derError instanceof DER.Err))
            throw derError;
        }
        if (!_sig && format2 !== "der")
          _sig = Signature.fromCompact(sg);
      }
      P6 = Point3.fromHex(publicKey);
    } catch (error) {
      return false;
    }
    if (!_sig)
      return false;
    if (lowS && _sig.hasHighS())
      return false;
    if (prehash)
      msgHash = CURVE.hash(msgHash);
    const { r: r3, s: s2 } = _sig;
    const h4 = bits2int_modN(msgHash);
    const is4 = invN(s2);
    const u1 = modN2(h4 * is4);
    const u2 = modN2(r3 * is4);
    const R4 = Point3.BASE.multiplyAndAddUnsafe(P6, u1, u2)?.toAffine();
    if (!R4)
      return false;
    const v6 = modN2(R4.x);
    return v6 === r3;
  }
  return {
    CURVE,
    getPublicKey: getPublicKey2,
    getSharedSecret: getSharedSecret2,
    sign: sign2,
    verify: verify3,
    ProjectivePoint: Point3,
    Signature,
    utils: utils2
  };
}
function SWUFpSqrtRatio(Fp4, Z2) {
  const q2 = Fp4.ORDER;
  let l6 = _0n4;
  for (let o5 = q2 - _1n4; o5 % _2n2 === _0n4; o5 /= _2n2)
    l6 += _1n4;
  const c1 = l6;
  const _2n_pow_c1_1 = _2n2 << c1 - _1n4 - _1n4;
  const _2n_pow_c1 = _2n_pow_c1_1 * _2n2;
  const c22 = (q2 - _1n4) / _2n_pow_c1;
  const c32 = (c22 - _1n4) / _2n2;
  const c42 = _2n_pow_c1 - _1n4;
  const c52 = _2n_pow_c1_1;
  const c6 = Fp4.pow(Z2, c22);
  const c7 = Fp4.pow(Z2, (c22 + _1n4) / _2n2);
  let sqrtRatio = (u2, v6) => {
    let tv1 = c6;
    let tv2 = Fp4.pow(v6, c42);
    let tv3 = Fp4.sqr(tv2);
    tv3 = Fp4.mul(tv3, v6);
    let tv5 = Fp4.mul(u2, tv3);
    tv5 = Fp4.pow(tv5, c32);
    tv5 = Fp4.mul(tv5, tv2);
    tv2 = Fp4.mul(tv5, v6);
    tv3 = Fp4.mul(tv5, u2);
    let tv4 = Fp4.mul(tv3, tv2);
    tv5 = Fp4.pow(tv4, c52);
    let isQR = Fp4.eql(tv5, Fp4.ONE);
    tv2 = Fp4.mul(tv3, c7);
    tv5 = Fp4.mul(tv4, tv1);
    tv3 = Fp4.cmov(tv2, tv3, isQR);
    tv4 = Fp4.cmov(tv5, tv4, isQR);
    for (let i3 = c1; i3 > _1n4; i3--) {
      let tv52 = i3 - _2n2;
      tv52 = _2n2 << tv52 - _1n4;
      let tvv5 = Fp4.pow(tv4, tv52);
      const e1 = Fp4.eql(tvv5, Fp4.ONE);
      tv2 = Fp4.mul(tv3, tv1);
      tv1 = Fp4.mul(tv1, tv1);
      tvv5 = Fp4.mul(tv4, tv1);
      tv3 = Fp4.cmov(tv2, tv3, e1);
      tv4 = Fp4.cmov(tvv5, tv4, e1);
    }
    return { isValid: isQR, value: tv3 };
  };
  if (Fp4.ORDER % _4n2 === _3n2) {
    const c12 = (Fp4.ORDER - _3n2) / _4n2;
    const c23 = Fp4.sqrt(Fp4.neg(Z2));
    sqrtRatio = (u2, v6) => {
      let tv1 = Fp4.sqr(v6);
      const tv2 = Fp4.mul(u2, v6);
      tv1 = Fp4.mul(tv1, tv2);
      let y1 = Fp4.pow(tv1, c12);
      y1 = Fp4.mul(y1, tv2);
      const y22 = Fp4.mul(y1, c23);
      const tv3 = Fp4.mul(Fp4.sqr(y1), v6);
      const isQR = Fp4.eql(tv3, u2);
      let y4 = Fp4.cmov(y22, y1, isQR);
      return { isValid: isQR, value: y4 };
    };
  }
  return sqrtRatio;
}
function mapToCurveSimpleSWU(Fp4, opts) {
  validateField(Fp4);
  if (!Fp4.isValid(opts.A) || !Fp4.isValid(opts.B) || !Fp4.isValid(opts.Z))
    throw new Error("mapToCurveSimpleSWU: invalid opts");
  const sqrtRatio = SWUFpSqrtRatio(Fp4, opts.Z);
  if (!Fp4.isOdd)
    throw new Error("Fp.isOdd is not implemented!");
  return (u2) => {
    let tv1, tv2, tv3, tv4, tv5, tv6, x5, y4;
    tv1 = Fp4.sqr(u2);
    tv1 = Fp4.mul(tv1, opts.Z);
    tv2 = Fp4.sqr(tv1);
    tv2 = Fp4.add(tv2, tv1);
    tv3 = Fp4.add(tv2, Fp4.ONE);
    tv3 = Fp4.mul(tv3, opts.B);
    tv4 = Fp4.cmov(opts.Z, Fp4.neg(tv2), !Fp4.eql(tv2, Fp4.ZERO));
    tv4 = Fp4.mul(tv4, opts.A);
    tv2 = Fp4.sqr(tv3);
    tv6 = Fp4.sqr(tv4);
    tv5 = Fp4.mul(tv6, opts.A);
    tv2 = Fp4.add(tv2, tv5);
    tv2 = Fp4.mul(tv2, tv3);
    tv6 = Fp4.mul(tv6, tv4);
    tv5 = Fp4.mul(tv6, opts.B);
    tv2 = Fp4.add(tv2, tv5);
    x5 = Fp4.mul(tv1, tv3);
    const { isValid, value } = sqrtRatio(tv2, tv6);
    y4 = Fp4.mul(tv1, u2);
    y4 = Fp4.mul(y4, value);
    x5 = Fp4.cmov(x5, tv3, isValid);
    y4 = Fp4.cmov(y4, value, isValid);
    const e1 = Fp4.isOdd(u2) === Fp4.isOdd(y4);
    y4 = Fp4.cmov(Fp4.neg(y4), y4, e1);
    const tv4_inv = FpInvertBatch(Fp4, [tv4], true)[0];
    x5 = Fp4.mul(x5, tv4_inv);
    return { x: x5, y: y4 };
  };
}

// node_modules/ox/node_modules/@noble/curves/esm/_shortw_utils.js
function getHash(hash) {
  return {
    hash,
    hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),
    randomBytes
  };
}
function createCurve(curveDef, defHash) {
  const create4 = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });
  return { ...create4(defHash), create: create4 };
}

// node_modules/ox/node_modules/@noble/curves/esm/abstract/hash-to-curve.js
var os2ip = bytesToNumberBE;
function i2osp(value, length2) {
  anum(value);
  anum(length2);
  if (value < 0 || value >= 1 << 8 * length2)
    throw new Error("invalid I2OSP input: " + value);
  const res = Array.from({ length: length2 }).fill(0);
  for (let i3 = length2 - 1; i3 >= 0; i3--) {
    res[i3] = value & 255;
    value >>>= 8;
  }
  return new Uint8Array(res);
}
function strxor(a3, b4) {
  const arr = new Uint8Array(a3.length);
  for (let i3 = 0; i3 < a3.length; i3++) {
    arr[i3] = a3[i3] ^ b4[i3];
  }
  return arr;
}
function anum(item) {
  if (!Number.isSafeInteger(item))
    throw new Error("number expected");
}
function expand_message_xmd(msg, DST, lenInBytes, H3) {
  abytes2(msg);
  abytes2(DST);
  anum(lenInBytes);
  if (DST.length > 255)
    DST = H3(concatBytes2(utf8ToBytes2("H2C-OVERSIZE-DST-"), DST));
  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H3;
  const ell = Math.ceil(lenInBytes / b_in_bytes);
  if (lenInBytes > 65535 || ell > 255)
    throw new Error("expand_message_xmd: invalid lenInBytes");
  const DST_prime = concatBytes2(DST, i2osp(DST.length, 1));
  const Z_pad = i2osp(0, r_in_bytes);
  const l_i_b_str = i2osp(lenInBytes, 2);
  const b4 = new Array(ell);
  const b_0 = H3(concatBytes2(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
  b4[0] = H3(concatBytes2(b_0, i2osp(1, 1), DST_prime));
  for (let i3 = 1; i3 <= ell; i3++) {
    const args = [strxor(b_0, b4[i3 - 1]), i2osp(i3 + 1, 1), DST_prime];
    b4[i3] = H3(concatBytes2(...args));
  }
  const pseudo_random_bytes = concatBytes2(...b4);
  return pseudo_random_bytes.slice(0, lenInBytes);
}
function expand_message_xof(msg, DST, lenInBytes, k4, H3) {
  abytes2(msg);
  abytes2(DST);
  anum(lenInBytes);
  if (DST.length > 255) {
    const dkLen = Math.ceil(2 * k4 / 8);
    DST = H3.create({ dkLen }).update(utf8ToBytes2("H2C-OVERSIZE-DST-")).update(DST).digest();
  }
  if (lenInBytes > 65535 || DST.length > 255)
    throw new Error("expand_message_xof: invalid lenInBytes");
  return H3.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
}
function hash_to_field(msg, count, options) {
  validateObject(options, {
    DST: "stringOrUint8Array",
    p: "bigint",
    m: "isSafeInteger",
    k: "isSafeInteger",
    hash: "hash"
  });
  const { p: p4, k: k4, m: m4, hash, expand, DST: _DST } = options;
  abytes2(msg);
  anum(count);
  const DST = typeof _DST === "string" ? utf8ToBytes2(_DST) : _DST;
  const log2p = p4.toString(2).length;
  const L3 = Math.ceil((log2p + k4) / 8);
  const len_in_bytes = count * m4 * L3;
  let prb;
  if (expand === "xmd") {
    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);
  } else if (expand === "xof") {
    prb = expand_message_xof(msg, DST, len_in_bytes, k4, hash);
  } else if (expand === "_internal_pass") {
    prb = msg;
  } else {
    throw new Error('expand must be "xmd" or "xof"');
  }
  const u2 = new Array(count);
  for (let i3 = 0; i3 < count; i3++) {
    const e2 = new Array(m4);
    for (let j6 = 0; j6 < m4; j6++) {
      const elm_offset = L3 * (j6 + i3 * m4);
      const tv = prb.subarray(elm_offset, elm_offset + L3);
      e2[j6] = mod(os2ip(tv), p4);
    }
    u2[i3] = e2;
  }
  return u2;
}
function isogenyMap(field, map) {
  const coeff = map.map((i3) => Array.from(i3).reverse());
  return (x5, y4) => {
    const [xn4, xd, yn4, yd] = coeff.map((val) => val.reduce((acc, i3) => field.add(field.mul(acc, x5), i3)));
    const [xd_inv, yd_inv] = FpInvertBatch(field, [xd, yd], true);
    x5 = field.mul(xn4, xd_inv);
    y4 = field.mul(y4, field.mul(yn4, yd_inv));
    return { x: x5, y: y4 };
  };
}
function createHasher(Point3, mapToCurve, defaults) {
  if (typeof mapToCurve !== "function")
    throw new Error("mapToCurve() must be defined");
  function map(num3) {
    return Point3.fromAffine(mapToCurve(num3));
  }
  function clear2(initial) {
    const P6 = initial.clearCofactor();
    if (P6.equals(Point3.ZERO))
      return Point3.ZERO;
    P6.assertValidity();
    return P6;
  }
  return {
    defaults,
    // Encodes byte string to elliptic curve.
    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    hashToCurve(msg, options) {
      const u2 = hash_to_field(msg, 2, { ...defaults, DST: defaults.DST, ...options });
      const u0 = map(u2[0]);
      const u1 = map(u2[1]);
      return clear2(u0.add(u1));
    },
    // Encodes byte string to elliptic curve.
    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    encodeToCurve(msg, options) {
      const u2 = hash_to_field(msg, 1, { ...defaults, DST: defaults.encodeDST, ...options });
      return clear2(map(u2[0]));
    },
    // Same as encodeToCurve, but without hash
    mapToCurve(scalars) {
      if (!Array.isArray(scalars))
        throw new Error("expected array of bigints");
      for (const i3 of scalars)
        if (typeof i3 !== "bigint")
          throw new Error("expected array of bigints");
      return clear2(map(scalars));
    }
  };
}

// node_modules/ox/node_modules/@noble/curves/esm/secp256k1.js
var secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
var secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
var _0n5 = BigInt(0);
var _1n5 = BigInt(1);
var _2n3 = BigInt(2);
var divNearest = (a3, b4) => (a3 + b4 / _2n3) / b4;
function sqrtMod(y4) {
  const P6 = secp256k1P;
  const _3n9 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
  const b22 = y4 * y4 * y4 % P6;
  const b32 = b22 * b22 * y4 % P6;
  const b6 = pow2(b32, _3n9, P6) * b32 % P6;
  const b9 = pow2(b6, _3n9, P6) * b32 % P6;
  const b11 = pow2(b9, _2n3, P6) * b22 % P6;
  const b222 = pow2(b11, _11n, P6) * b11 % P6;
  const b44 = pow2(b222, _22n, P6) * b222 % P6;
  const b88 = pow2(b44, _44n, P6) * b44 % P6;
  const b176 = pow2(b88, _88n, P6) * b88 % P6;
  const b220 = pow2(b176, _44n, P6) * b44 % P6;
  const b223 = pow2(b220, _3n9, P6) * b32 % P6;
  const t1 = pow2(b223, _23n, P6) * b222 % P6;
  const t2 = pow2(t1, _6n, P6) * b22 % P6;
  const root = pow2(t2, _2n3, P6);
  if (!Fpk1.eql(Fpk1.sqr(root), y4))
    throw new Error("Cannot find square root");
  return root;
}
var Fpk1 = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
var secp256k1 = createCurve({
  a: _0n5,
  b: BigInt(7),
  Fp: Fpk1,
  n: secp256k1N,
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: true,
  // Allow only low-S signatures by default in sign() and verify()
  endo: {
    // Endomorphism, see above
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (k4) => {
      const n4 = secp256k1N;
      const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
      const b1 = -_1n5 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
      const a22 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
      const b22 = a1;
      const POW_2_128 = BigInt("0x100000000000000000000000000000000");
      const c1 = divNearest(b22 * k4, n4);
      const c22 = divNearest(-b1 * k4, n4);
      let k1 = mod(k4 - c1 * a1 - c22 * a22, n4);
      let k22 = mod(-c1 * b1 - c22 * b22, n4);
      const k1neg = k1 > POW_2_128;
      const k2neg = k22 > POW_2_128;
      if (k1neg)
        k1 = n4 - k1;
      if (k2neg)
        k22 = n4 - k22;
      if (k1 > POW_2_128 || k22 > POW_2_128) {
        throw new Error("splitScalar: Endomorphism failed, k=" + k4);
      }
      return { k1neg, k1, k2neg, k2: k22 };
    }
  }
}, sha256);
var TAGGED_HASH_PREFIXES = {};
function taggedHash(tag2, ...messages) {
  let tagP = TAGGED_HASH_PREFIXES[tag2];
  if (tagP === void 0) {
    const tagH = sha256(Uint8Array.from(tag2, (c6) => c6.charCodeAt(0)));
    tagP = concatBytes2(tagH, tagH);
    TAGGED_HASH_PREFIXES[tag2] = tagP;
  }
  return sha256(concatBytes2(tagP, ...messages));
}
var pointToBytes = (point) => point.toRawBytes(true).slice(1);
var numTo32b = (n4) => numberToBytesBE(n4, 32);
var modP = (x5) => mod(x5, secp256k1P);
var modN = (x5) => mod(x5, secp256k1N);
var Point = (() => secp256k1.ProjectivePoint)();
var GmulAdd = (Q4, a3, b4) => Point.BASE.multiplyAndAddUnsafe(Q4, a3, b4);
function schnorrGetExtPubKey(priv) {
  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv);
  let p4 = Point.fromPrivateKey(d_);
  const scalar = p4.hasEvenY() ? d_ : modN(-d_);
  return { scalar, bytes: pointToBytes(p4) };
}
function lift_x(x5) {
  aInRange("x", x5, _1n5, secp256k1P);
  const xx = modP(x5 * x5);
  const c6 = modP(xx * x5 + BigInt(7));
  let y4 = sqrtMod(c6);
  if (y4 % _2n3 !== _0n5)
    y4 = modP(-y4);
  const p4 = new Point(x5, y4, _1n5);
  p4.assertValidity();
  return p4;
}
var num = bytesToNumberBE;
function challenge(...args) {
  return modN(num(taggedHash("BIP0340/challenge", ...args)));
}
function schnorrGetPublicKey(privateKey) {
  return schnorrGetExtPubKey(privateKey).bytes;
}
function schnorrSign(message, privateKey, auxRand = randomBytes(32)) {
  const m4 = ensureBytes("message", message);
  const { bytes: px, scalar: d7 } = schnorrGetExtPubKey(privateKey);
  const a3 = ensureBytes("auxRand", auxRand, 32);
  const t = numTo32b(d7 ^ num(taggedHash("BIP0340/aux", a3)));
  const rand = taggedHash("BIP0340/nonce", t, px, m4);
  const k_ = modN(num(rand));
  if (k_ === _0n5)
    throw new Error("sign failed: k is zero");
  const { bytes: rx, scalar: k4 } = schnorrGetExtPubKey(k_);
  const e2 = challenge(rx, px, m4);
  const sig = new Uint8Array(64);
  sig.set(rx, 0);
  sig.set(numTo32b(modN(k4 + e2 * d7)), 32);
  if (!schnorrVerify(sig, m4, px))
    throw new Error("sign: Invalid signature produced");
  return sig;
}
function schnorrVerify(signature, message, publicKey) {
  const sig = ensureBytes("signature", signature, 64);
  const m4 = ensureBytes("message", message);
  const pub = ensureBytes("publicKey", publicKey, 32);
  try {
    const P6 = lift_x(num(pub));
    const r3 = num(sig.subarray(0, 32));
    if (!inRange(r3, _1n5, secp256k1P))
      return false;
    const s2 = num(sig.subarray(32, 64));
    if (!inRange(s2, _1n5, secp256k1N))
      return false;
    const e2 = challenge(numTo32b(r3), pointToBytes(P6), m4);
    const R4 = GmulAdd(P6, s2, modN(-e2));
    if (!R4 || !R4.hasEvenY() || R4.toAffine().x !== r3)
      return false;
    return true;
  } catch (error) {
    return false;
  }
}
var schnorr = (() => ({
  getPublicKey: schnorrGetPublicKey,
  sign: schnorrSign,
  verify: schnorrVerify,
  utils: {
    randomPrivateKey: secp256k1.utils.randomPrivateKey,
    lift_x,
    pointToBytes,
    numberToBytesBE,
    bytesToNumberBE,
    taggedHash,
    mod
  }
}))();
var isoMap = (() => isogenyMap(Fpk1, [
  // xNum
  [
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
    "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
    "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
  ],
  // xDen
  [
    "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
    "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ],
  // yNum
  [
    "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
    "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
    "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
    "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
  ],
  // yDen
  [
    "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
    "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
    "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ]
].map((i3) => i3.map((j6) => BigInt(j6)))))();
var mapSWU = (() => mapToCurveSimpleSWU(Fpk1, {
  A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
  B: BigInt("1771"),
  Z: Fpk1.create(BigInt("-11"))
}))();
var secp256k1_hasher = (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {
  const { x: x5, y: y4 } = mapSWU(Fpk1.create(scalars[0]));
  return isoMap(x5, y4);
}, {
  DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
  encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
  p: Fpk1.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha256
}))();
var hashToCurve = (() => secp256k1_hasher.hashToCurve)();
var encodeToCurve = (() => secp256k1_hasher.encodeToCurve)();

// node_modules/ox/_esm/core/Signature.js
function assert5(signature, options = {}) {
  const { recovered } = options;
  if (typeof signature.r === "undefined")
    throw new MissingPropertiesError({ signature });
  if (typeof signature.s === "undefined")
    throw new MissingPropertiesError({ signature });
  if (recovered && typeof signature.yParity === "undefined")
    throw new MissingPropertiesError({ signature });
  if (signature.r < 0n || signature.r > maxUint256)
    throw new InvalidRError({ value: signature.r });
  if (signature.s < 0n || signature.s > maxUint256)
    throw new InvalidSError({ value: signature.s });
  if (typeof signature.yParity === "number" && signature.yParity !== 0 && signature.yParity !== 1)
    throw new InvalidYParityError({ value: signature.yParity });
}
function fromBytes3(signature) {
  return fromHex3(fromBytes(signature));
}
function fromHex3(signature) {
  if (signature.length !== 130 && signature.length !== 132)
    throw new InvalidSerializedSizeError2({ signature });
  const r3 = BigInt(slice(signature, 0, 32));
  const s2 = BigInt(slice(signature, 32, 64));
  const yParity = (() => {
    const yParity2 = Number(`0x${signature.slice(130)}`);
    if (Number.isNaN(yParity2))
      return void 0;
    try {
      return vToYParity(yParity2);
    } catch {
      throw new InvalidYParityError({ value: yParity2 });
    }
  })();
  if (typeof yParity === "undefined")
    return {
      r: r3,
      s: s2
    };
  return {
    r: r3,
    s: s2,
    yParity
  };
}
function extract(value) {
  if (typeof value.r === "undefined")
    return void 0;
  if (typeof value.s === "undefined")
    return void 0;
  return from7(value);
}
function from7(signature) {
  const signature_ = (() => {
    if (typeof signature === "string")
      return fromHex3(signature);
    if (signature instanceof Uint8Array)
      return fromBytes3(signature);
    if (typeof signature.r === "string")
      return fromRpc(signature);
    if (signature.v)
      return fromLegacy(signature);
    return {
      r: signature.r,
      s: signature.s,
      ...typeof signature.yParity !== "undefined" ? { yParity: signature.yParity } : {}
    };
  })();
  assert5(signature_);
  return signature_;
}
function fromDerBytes(signature) {
  return fromDerHex(fromBytes(signature));
}
function fromDerHex(signature) {
  const { r: r3, s: s2 } = secp256k1.Signature.fromDER(from(signature).slice(2));
  return { r: r3, s: s2 };
}
function fromLegacy(signature) {
  return {
    r: signature.r,
    s: signature.s,
    yParity: vToYParity(signature.v)
  };
}
function fromRpc(signature) {
  const yParity = (() => {
    const v6 = signature.v ? Number(signature.v) : void 0;
    let yParity2 = signature.yParity ? Number(signature.yParity) : void 0;
    if (typeof v6 === "number" && typeof yParity2 !== "number")
      yParity2 = vToYParity(v6);
    if (typeof yParity2 !== "number")
      throw new InvalidYParityError({ value: signature.yParity });
    return yParity2;
  })();
  return {
    r: BigInt(signature.r),
    s: BigInt(signature.s),
    yParity
  };
}
function fromTuple(tuple) {
  const [yParity, r3, s2] = tuple;
  return from7({
    r: r3 === "0x" ? 0n : BigInt(r3),
    s: s2 === "0x" ? 0n : BigInt(s2),
    yParity: yParity === "0x" ? 0 : Number(yParity)
  });
}
function toBytes3(signature) {
  return fromHex(toHex2(signature));
}
function toHex2(signature) {
  assert5(signature);
  const r3 = signature.r;
  const s2 = signature.s;
  const signature_ = concat(
    fromNumber(r3, { size: 32 }),
    fromNumber(s2, { size: 32 }),
    // If the signature is recovered, add the recovery byte to the signature.
    typeof signature.yParity === "number" ? fromNumber(yParityToV(signature.yParity), { size: 1 }) : "0x"
  );
  return signature_;
}
function toDerBytes(signature) {
  const sig = new secp256k1.Signature(signature.r, signature.s);
  return sig.toDERRawBytes();
}
function toDerHex(signature) {
  const sig = new secp256k1.Signature(signature.r, signature.s);
  return `0x${sig.toDERHex()}`;
}
function toLegacy(signature) {
  return {
    r: signature.r,
    s: signature.s,
    v: yParityToV(signature.yParity)
  };
}
function toRpc(signature) {
  const { r: r3, s: s2, yParity } = signature;
  return {
    r: fromNumber(r3, { size: 32 }),
    s: fromNumber(s2, { size: 32 }),
    yParity: yParity === 0 ? "0x0" : "0x1"
  };
}
function toTuple(signature) {
  const { r: r3, s: s2, yParity } = signature;
  return [
    yParity ? "0x01" : "0x",
    r3 === 0n ? "0x" : trimLeft(fromNumber(r3)),
    s2 === 0n ? "0x" : trimLeft(fromNumber(s2))
  ];
}
function validate5(signature, options = {}) {
  try {
    assert5(signature, options);
    return true;
  } catch {
    return false;
  }
}
function vToYParity(v6) {
  if (v6 === 0 || v6 === 27)
    return 0;
  if (v6 === 1 || v6 === 28)
    return 1;
  if (v6 >= 35)
    return v6 % 2 === 0 ? 1 : 0;
  throw new InvalidVError({ value: v6 });
}
function yParityToV(yParity) {
  if (yParity === 0)
    return 27;
  if (yParity === 1)
    return 28;
  throw new InvalidYParityError({ value: yParity });
}
var InvalidSerializedSizeError2 = class extends BaseError2 {
  constructor({ signature }) {
    super(`Value \`${signature}\` is an invalid signature size.`, {
      metaMessages: [
        "Expected: 64 bytes or 65 bytes.",
        `Received ${size2(from(signature))} bytes.`
      ]
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.InvalidSerializedSizeError"
    });
  }
};
var MissingPropertiesError = class extends BaseError2 {
  constructor({ signature }) {
    super(`Signature \`${stringify2(signature)}\` is missing either an \`r\`, \`s\`, or \`yParity\` property.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.MissingPropertiesError"
    });
  }
};
var InvalidRError = class extends BaseError2 {
  constructor({ value }) {
    super(`Value \`${value}\` is an invalid r value. r must be a positive integer less than 2^256.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.InvalidRError"
    });
  }
};
var InvalidSError = class extends BaseError2 {
  constructor({ value }) {
    super(`Value \`${value}\` is an invalid s value. s must be a positive integer less than 2^256.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.InvalidSError"
    });
  }
};
var InvalidYParityError = class extends BaseError2 {
  constructor({ value }) {
    super(`Value \`${value}\` is an invalid y-parity value. Y-parity must be 0 or 1.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.InvalidYParityError"
    });
  }
};
var InvalidVError = class extends BaseError2 {
  constructor({ value }) {
    super(`Value \`${value}\` is an invalid v value. v must be 27, 28 or >=35.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Signature.InvalidVError"
    });
  }
};

// node_modules/ox/_esm/core/internal/base58.js
var alphabetToInteger = (
  /* __PURE__ */
  Object.freeze({
    1: 0n,
    2: 1n,
    3: 2n,
    4: 3n,
    5: 4n,
    6: 5n,
    7: 6n,
    8: 7n,
    9: 8n,
    A: 9n,
    B: 10n,
    C: 11n,
    D: 12n,
    E: 13n,
    F: 14n,
    G: 15n,
    H: 16n,
    J: 17n,
    K: 18n,
    L: 19n,
    M: 20n,
    N: 21n,
    P: 22n,
    Q: 23n,
    R: 24n,
    S: 25n,
    T: 26n,
    U: 27n,
    V: 28n,
    W: 29n,
    X: 30n,
    Y: 31n,
    Z: 32n,
    a: 33n,
    b: 34n,
    c: 35n,
    d: 36n,
    e: 37n,
    f: 38n,
    g: 39n,
    h: 40n,
    i: 41n,
    j: 42n,
    k: 43n,
    m: 44n,
    n: 45n,
    o: 46n,
    p: 47n,
    q: 48n,
    r: 49n,
    s: 50n,
    t: 51n,
    u: 52n,
    v: 53n,
    w: 54n,
    x: 55n,
    y: 56n,
    z: 57n
  })
);

// node_modules/ox/_esm/core/Base64.js
var encoder3 = new TextEncoder();
var decoder2 = new TextDecoder();
var integerToCharacter = Object.fromEntries(Array.from("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").map((a3, i3) => [i3, a3.charCodeAt(0)]));
var characterToInteger = {
  ...Object.fromEntries(Array.from("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").map((a3, i3) => [a3.charCodeAt(0), i3])),
  ["=".charCodeAt(0)]: 0,
  ["-".charCodeAt(0)]: 62,
  ["_".charCodeAt(0)]: 63
};

// node_modules/@noble/hashes/esm/_blake.js
var BSIGMA = Uint8Array.from([
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3,
  11,
  8,
  12,
  0,
  5,
  2,
  15,
  13,
  10,
  14,
  3,
  6,
  7,
  1,
  9,
  4,
  7,
  9,
  3,
  1,
  13,
  12,
  11,
  14,
  2,
  6,
  5,
  10,
  4,
  0,
  15,
  8,
  9,
  0,
  5,
  7,
  2,
  4,
  10,
  15,
  14,
  1,
  11,
  12,
  6,
  8,
  3,
  13,
  2,
  12,
  6,
  10,
  0,
  11,
  8,
  3,
  4,
  13,
  7,
  5,
  15,
  14,
  1,
  9,
  12,
  5,
  1,
  15,
  14,
  13,
  4,
  10,
  0,
  7,
  6,
  3,
  9,
  2,
  8,
  11,
  13,
  11,
  7,
  14,
  12,
  1,
  3,
  9,
  5,
  0,
  15,
  4,
  8,
  6,
  2,
  10,
  6,
  15,
  14,
  9,
  11,
  3,
  0,
  8,
  12,
  2,
  13,
  7,
  1,
  4,
  10,
  5,
  10,
  2,
  8,
  4,
  7,
  6,
  1,
  5,
  15,
  11,
  9,
  14,
  3,
  12,
  13,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3,
  // Blake1, unused in others
  11,
  8,
  12,
  0,
  5,
  2,
  15,
  13,
  10,
  14,
  3,
  6,
  7,
  1,
  9,
  4,
  7,
  9,
  3,
  1,
  13,
  12,
  11,
  14,
  2,
  6,
  5,
  10,
  4,
  0,
  15,
  8,
  9,
  0,
  5,
  7,
  2,
  4,
  10,
  15,
  14,
  1,
  11,
  12,
  6,
  8,
  3,
  13,
  2,
  12,
  6,
  10,
  0,
  11,
  8,
  3,
  4,
  13,
  7,
  5,
  15,
  14,
  1,
  9
]);
function G1s(a3, b4, c6, d7, x5) {
  a3 = a3 + b4 + x5 | 0;
  d7 = rotr(d7 ^ a3, 16);
  c6 = c6 + d7 | 0;
  b4 = rotr(b4 ^ c6, 12);
  return { a: a3, b: b4, c: c6, d: d7 };
}
function G2s(a3, b4, c6, d7, x5) {
  a3 = a3 + b4 + x5 | 0;
  d7 = rotr(d7 ^ a3, 8);
  c6 = c6 + d7 | 0;
  b4 = rotr(b4 ^ c6, 7);
  return { a: a3, b: b4, c: c6, d: d7 };
}

// node_modules/@noble/hashes/esm/blake2.js
var B2B_IV = Uint32Array.from([
  4089235720,
  1779033703,
  2227873595,
  3144134277,
  4271175723,
  1013904242,
  1595750129,
  2773480762,
  2917565137,
  1359893119,
  725511199,
  2600822924,
  4215389547,
  528734635,
  327033209,
  1541459225
]);
var BBUF = new Uint32Array(32);
function G1b(a3, b4, c6, d7, msg, x5) {
  const Xl = msg[x5], Xh = msg[x5 + 1];
  let Al = BBUF[2 * a3], Ah = BBUF[2 * a3 + 1];
  let Bl = BBUF[2 * b4], Bh = BBUF[2 * b4 + 1];
  let Cl = BBUF[2 * c6], Ch = BBUF[2 * c6 + 1];
  let Dl = BBUF[2 * d7], Dh = BBUF[2 * d7 + 1];
  let ll = add3L(Al, Bl, Xl);
  Ah = add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: rotr32H(Dh, Dl), Dl: rotr32L(Dh, Dl) });
  ({ h: Ch, l: Cl } = add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: rotrSH(Bh, Bl, 24), Bl: rotrSL(Bh, Bl, 24) });
  BBUF[2 * a3] = Al, BBUF[2 * a3 + 1] = Ah;
  BBUF[2 * b4] = Bl, BBUF[2 * b4 + 1] = Bh;
  BBUF[2 * c6] = Cl, BBUF[2 * c6 + 1] = Ch;
  BBUF[2 * d7] = Dl, BBUF[2 * d7 + 1] = Dh;
}
function G2b(a3, b4, c6, d7, msg, x5) {
  const Xl = msg[x5], Xh = msg[x5 + 1];
  let Al = BBUF[2 * a3], Ah = BBUF[2 * a3 + 1];
  let Bl = BBUF[2 * b4], Bh = BBUF[2 * b4 + 1];
  let Cl = BBUF[2 * c6], Ch = BBUF[2 * c6 + 1];
  let Dl = BBUF[2 * d7], Dh = BBUF[2 * d7 + 1];
  let ll = add3L(Al, Bl, Xl);
  Ah = add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: rotrSH(Dh, Dl, 16), Dl: rotrSL(Dh, Dl, 16) });
  ({ h: Ch, l: Cl } = add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: rotrBH(Bh, Bl, 63), Bl: rotrBL(Bh, Bl, 63) });
  BBUF[2 * a3] = Al, BBUF[2 * a3 + 1] = Ah;
  BBUF[2 * b4] = Bl, BBUF[2 * b4 + 1] = Bh;
  BBUF[2 * c6] = Cl, BBUF[2 * c6 + 1] = Ch;
  BBUF[2 * d7] = Dl, BBUF[2 * d7 + 1] = Dh;
}
function checkBlake2Opts(outputLen, opts = {}, keyLen, saltLen, persLen) {
  anumber(keyLen);
  if (outputLen < 0 || outputLen > keyLen)
    throw new Error("outputLen bigger than keyLen");
  const { key, salt, personalization } = opts;
  if (key !== void 0 && (key.length < 1 || key.length > keyLen))
    throw new Error("key length must be undefined or 1.." + keyLen);
  if (salt !== void 0 && salt.length !== saltLen)
    throw new Error("salt must be undefined or " + saltLen);
  if (personalization !== void 0 && personalization.length !== persLen)
    throw new Error("personalization must be undefined or " + persLen);
}
var BLAKE2 = class extends Hash {
  constructor(blockLen, outputLen) {
    super();
    this.finished = false;
    this.destroyed = false;
    this.length = 0;
    this.pos = 0;
    anumber(blockLen);
    anumber(outputLen);
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.buffer = new Uint8Array(blockLen);
    this.buffer32 = u32(this.buffer);
  }
  update(data) {
    aexists(this);
    data = toBytes(data);
    abytes(data);
    const { blockLen, buffer, buffer32 } = this;
    const len = data.length;
    const offset = data.byteOffset;
    const buf = data.buffer;
    for (let pos = 0; pos < len; ) {
      if (this.pos === blockLen) {
        swap32IfBE(buffer32);
        this.compress(buffer32, 0, false);
        swap32IfBE(buffer32);
        this.pos = 0;
      }
      const take = Math.min(blockLen - this.pos, len - pos);
      const dataOffset = offset + pos;
      if (take === blockLen && !(dataOffset % 4) && pos + take < len) {
        const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
        swap32IfBE(data32);
        for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
          this.length += blockLen;
          this.compress(data32, pos32, false);
        }
        swap32IfBE(data32);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take), this.pos);
      this.pos += take;
      this.length += take;
      pos += take;
    }
    return this;
  }
  digestInto(out) {
    aexists(this);
    aoutput(out, this);
    const { pos, buffer32 } = this;
    this.finished = true;
    clean(this.buffer.subarray(pos));
    swap32IfBE(buffer32);
    this.compress(buffer32, 0, true);
    swap32IfBE(buffer32);
    const out32 = u32(out);
    this.get().forEach((v6, i3) => out32[i3] = swap8IfBE(v6));
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to4) {
    const { buffer, length: length2, finished, destroyed, outputLen, pos } = this;
    to4 || (to4 = new this.constructor({ dkLen: outputLen }));
    to4.set(...this.get());
    to4.buffer.set(buffer);
    to4.destroyed = destroyed;
    to4.finished = finished;
    to4.length = length2;
    to4.pos = pos;
    to4.outputLen = outputLen;
    return to4;
  }
  clone() {
    return this._cloneInto();
  }
};
var BLAKE2b = class extends BLAKE2 {
  constructor(opts = {}) {
    const olen = opts.dkLen === void 0 ? 64 : opts.dkLen;
    super(128, olen);
    this.v0l = B2B_IV[0] | 0;
    this.v0h = B2B_IV[1] | 0;
    this.v1l = B2B_IV[2] | 0;
    this.v1h = B2B_IV[3] | 0;
    this.v2l = B2B_IV[4] | 0;
    this.v2h = B2B_IV[5] | 0;
    this.v3l = B2B_IV[6] | 0;
    this.v3h = B2B_IV[7] | 0;
    this.v4l = B2B_IV[8] | 0;
    this.v4h = B2B_IV[9] | 0;
    this.v5l = B2B_IV[10] | 0;
    this.v5h = B2B_IV[11] | 0;
    this.v6l = B2B_IV[12] | 0;
    this.v6h = B2B_IV[13] | 0;
    this.v7l = B2B_IV[14] | 0;
    this.v7h = B2B_IV[15] | 0;
    checkBlake2Opts(olen, opts, 64, 16, 16);
    let { key, personalization, salt } = opts;
    let keyLength = 0;
    if (key !== void 0) {
      key = toBytes(key);
      keyLength = key.length;
    }
    this.v0l ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
    if (salt !== void 0) {
      salt = toBytes(salt);
      const slt = u32(salt);
      this.v4l ^= swap8IfBE(slt[0]);
      this.v4h ^= swap8IfBE(slt[1]);
      this.v5l ^= swap8IfBE(slt[2]);
      this.v5h ^= swap8IfBE(slt[3]);
    }
    if (personalization !== void 0) {
      personalization = toBytes(personalization);
      const pers = u32(personalization);
      this.v6l ^= swap8IfBE(pers[0]);
      this.v6h ^= swap8IfBE(pers[1]);
      this.v7l ^= swap8IfBE(pers[2]);
      this.v7h ^= swap8IfBE(pers[3]);
    }
    if (key !== void 0) {
      const tmp = new Uint8Array(this.blockLen);
      tmp.set(key);
      this.update(tmp);
    }
  }
  // prettier-ignore
  get() {
    let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
    return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
  }
  // prettier-ignore
  set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
    this.v0l = v0l | 0;
    this.v0h = v0h | 0;
    this.v1l = v1l | 0;
    this.v1h = v1h | 0;
    this.v2l = v2l | 0;
    this.v2h = v2h | 0;
    this.v3l = v3l | 0;
    this.v3h = v3h | 0;
    this.v4l = v4l | 0;
    this.v4h = v4h | 0;
    this.v5l = v5l | 0;
    this.v5h = v5h | 0;
    this.v6l = v6l | 0;
    this.v6h = v6h | 0;
    this.v7l = v7l | 0;
    this.v7h = v7h | 0;
  }
  compress(msg, offset, isLast) {
    this.get().forEach((v6, i3) => BBUF[i3] = v6);
    BBUF.set(B2B_IV, 16);
    let { h: h4, l: l6 } = fromBig(BigInt(this.length));
    BBUF[24] = B2B_IV[8] ^ l6;
    BBUF[25] = B2B_IV[9] ^ h4;
    if (isLast) {
      BBUF[28] = ~BBUF[28];
      BBUF[29] = ~BBUF[29];
    }
    let j6 = 0;
    const s2 = BSIGMA;
    for (let i3 = 0; i3 < 12; i3++) {
      G1b(0, 4, 8, 12, msg, offset + 2 * s2[j6++]);
      G2b(0, 4, 8, 12, msg, offset + 2 * s2[j6++]);
      G1b(1, 5, 9, 13, msg, offset + 2 * s2[j6++]);
      G2b(1, 5, 9, 13, msg, offset + 2 * s2[j6++]);
      G1b(2, 6, 10, 14, msg, offset + 2 * s2[j6++]);
      G2b(2, 6, 10, 14, msg, offset + 2 * s2[j6++]);
      G1b(3, 7, 11, 15, msg, offset + 2 * s2[j6++]);
      G2b(3, 7, 11, 15, msg, offset + 2 * s2[j6++]);
      G1b(0, 5, 10, 15, msg, offset + 2 * s2[j6++]);
      G2b(0, 5, 10, 15, msg, offset + 2 * s2[j6++]);
      G1b(1, 6, 11, 12, msg, offset + 2 * s2[j6++]);
      G2b(1, 6, 11, 12, msg, offset + 2 * s2[j6++]);
      G1b(2, 7, 8, 13, msg, offset + 2 * s2[j6++]);
      G2b(2, 7, 8, 13, msg, offset + 2 * s2[j6++]);
      G1b(3, 4, 9, 14, msg, offset + 2 * s2[j6++]);
      G2b(3, 4, 9, 14, msg, offset + 2 * s2[j6++]);
    }
    this.v0l ^= BBUF[0] ^ BBUF[16];
    this.v0h ^= BBUF[1] ^ BBUF[17];
    this.v1l ^= BBUF[2] ^ BBUF[18];
    this.v1h ^= BBUF[3] ^ BBUF[19];
    this.v2l ^= BBUF[4] ^ BBUF[20];
    this.v2h ^= BBUF[5] ^ BBUF[21];
    this.v3l ^= BBUF[6] ^ BBUF[22];
    this.v3h ^= BBUF[7] ^ BBUF[23];
    this.v4l ^= BBUF[8] ^ BBUF[24];
    this.v4h ^= BBUF[9] ^ BBUF[25];
    this.v5l ^= BBUF[10] ^ BBUF[26];
    this.v5h ^= BBUF[11] ^ BBUF[27];
    this.v6l ^= BBUF[12] ^ BBUF[28];
    this.v6h ^= BBUF[13] ^ BBUF[29];
    this.v7l ^= BBUF[14] ^ BBUF[30];
    this.v7h ^= BBUF[15] ^ BBUF[31];
    clean(BBUF);
  }
  destroy() {
    this.destroyed = true;
    clean(this.buffer32);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var blake2b = createOptHasher((opts) => new BLAKE2b(opts));
function compress(s2, offset, msg, rounds, v0, v1, v22, v32, v42, v52, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {
  let j6 = 0;
  for (let i3 = 0; i3 < rounds; i3++) {
    ({ a: v0, b: v42, c: v8, d: v12 } = G1s(v0, v42, v8, v12, msg[offset + s2[j6++]]));
    ({ a: v0, b: v42, c: v8, d: v12 } = G2s(v0, v42, v8, v12, msg[offset + s2[j6++]]));
    ({ a: v1, b: v52, c: v9, d: v13 } = G1s(v1, v52, v9, v13, msg[offset + s2[j6++]]));
    ({ a: v1, b: v52, c: v9, d: v13 } = G2s(v1, v52, v9, v13, msg[offset + s2[j6++]]));
    ({ a: v22, b: v6, c: v10, d: v14 } = G1s(v22, v6, v10, v14, msg[offset + s2[j6++]]));
    ({ a: v22, b: v6, c: v10, d: v14 } = G2s(v22, v6, v10, v14, msg[offset + s2[j6++]]));
    ({ a: v32, b: v7, c: v11, d: v15 } = G1s(v32, v7, v11, v15, msg[offset + s2[j6++]]));
    ({ a: v32, b: v7, c: v11, d: v15 } = G2s(v32, v7, v11, v15, msg[offset + s2[j6++]]));
    ({ a: v0, b: v52, c: v10, d: v15 } = G1s(v0, v52, v10, v15, msg[offset + s2[j6++]]));
    ({ a: v0, b: v52, c: v10, d: v15 } = G2s(v0, v52, v10, v15, msg[offset + s2[j6++]]));
    ({ a: v1, b: v6, c: v11, d: v12 } = G1s(v1, v6, v11, v12, msg[offset + s2[j6++]]));
    ({ a: v1, b: v6, c: v11, d: v12 } = G2s(v1, v6, v11, v12, msg[offset + s2[j6++]]));
    ({ a: v22, b: v7, c: v8, d: v13 } = G1s(v22, v7, v8, v13, msg[offset + s2[j6++]]));
    ({ a: v22, b: v7, c: v8, d: v13 } = G2s(v22, v7, v8, v13, msg[offset + s2[j6++]]));
    ({ a: v32, b: v42, c: v9, d: v14 } = G1s(v32, v42, v9, v14, msg[offset + s2[j6++]]));
    ({ a: v32, b: v42, c: v9, d: v14 } = G2s(v32, v42, v9, v14, msg[offset + s2[j6++]]));
  }
  return { v0, v1, v2: v22, v3: v32, v4: v42, v5: v52, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 };
}
var B2S_IV = SHA256_IV;
var BLAKE2s = class extends BLAKE2 {
  constructor(opts = {}) {
    const olen = opts.dkLen === void 0 ? 32 : opts.dkLen;
    super(64, olen);
    this.v0 = B2S_IV[0] | 0;
    this.v1 = B2S_IV[1] | 0;
    this.v2 = B2S_IV[2] | 0;
    this.v3 = B2S_IV[3] | 0;
    this.v4 = B2S_IV[4] | 0;
    this.v5 = B2S_IV[5] | 0;
    this.v6 = B2S_IV[6] | 0;
    this.v7 = B2S_IV[7] | 0;
    checkBlake2Opts(olen, opts, 32, 8, 8);
    let { key, personalization, salt } = opts;
    let keyLength = 0;
    if (key !== void 0) {
      key = toBytes(key);
      keyLength = key.length;
    }
    this.v0 ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
    if (salt !== void 0) {
      salt = toBytes(salt);
      const slt = u32(salt);
      this.v4 ^= swap8IfBE(slt[0]);
      this.v5 ^= swap8IfBE(slt[1]);
    }
    if (personalization !== void 0) {
      personalization = toBytes(personalization);
      const pers = u32(personalization);
      this.v6 ^= swap8IfBE(pers[0]);
      this.v7 ^= swap8IfBE(pers[1]);
    }
    if (key !== void 0) {
      abytes(key);
      const tmp = new Uint8Array(this.blockLen);
      tmp.set(key);
      this.update(tmp);
    }
  }
  get() {
    const { v0, v1, v2: v22, v3: v32, v4: v42, v5: v52, v6, v7 } = this;
    return [v0, v1, v22, v32, v42, v52, v6, v7];
  }
  // prettier-ignore
  set(v0, v1, v22, v32, v42, v52, v6, v7) {
    this.v0 = v0 | 0;
    this.v1 = v1 | 0;
    this.v2 = v22 | 0;
    this.v3 = v32 | 0;
    this.v4 = v42 | 0;
    this.v5 = v52 | 0;
    this.v6 = v6 | 0;
    this.v7 = v7 | 0;
  }
  compress(msg, offset, isLast) {
    const { h: h4, l: l6 } = fromBig(BigInt(this.length));
    const { v0, v1, v2: v22, v3: v32, v4: v42, v5: v52, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } = compress(BSIGMA, offset, msg, 10, this.v0, this.v1, this.v2, this.v3, this.v4, this.v5, this.v6, this.v7, B2S_IV[0], B2S_IV[1], B2S_IV[2], B2S_IV[3], l6 ^ B2S_IV[4], h4 ^ B2S_IV[5], isLast ? ~B2S_IV[6] : B2S_IV[6], B2S_IV[7]);
    this.v0 ^= v0 ^ v8;
    this.v1 ^= v1 ^ v9;
    this.v2 ^= v22 ^ v10;
    this.v3 ^= v32 ^ v11;
    this.v4 ^= v42 ^ v12;
    this.v5 ^= v52 ^ v13;
    this.v6 ^= v6 ^ v14;
    this.v7 ^= v7 ^ v15;
  }
  destroy() {
    this.destroyed = true;
    clean(this.buffer32);
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var blake2s = createOptHasher((opts) => new BLAKE2s(opts));

// node_modules/@noble/hashes/esm/blake3.js
var B3_Flags = {
  CHUNK_START: 1,
  CHUNK_END: 2,
  PARENT: 4,
  ROOT: 8,
  KEYED_HASH: 16,
  DERIVE_KEY_CONTEXT: 32,
  DERIVE_KEY_MATERIAL: 64
};
var B3_IV = SHA256_IV.slice();
var B3_SIGMA = (() => {
  const Id = Array.from({ length: 16 }, (_3, i3) => i3);
  const permute = (arr) => [2, 6, 3, 10, 7, 0, 4, 13, 1, 11, 12, 5, 9, 14, 15, 8].map((i3) => arr[i3]);
  const res = [];
  for (let i3 = 0, v6 = Id; i3 < 7; i3++, v6 = permute(v6))
    res.push(...v6);
  return Uint8Array.from(res);
})();
var BLAKE3 = class _BLAKE3 extends BLAKE2 {
  constructor(opts = {}, flags = 0) {
    super(64, opts.dkLen === void 0 ? 32 : opts.dkLen);
    this.chunkPos = 0;
    this.chunksDone = 0;
    this.flags = 0 | 0;
    this.stack = [];
    this.posOut = 0;
    this.bufferOut32 = new Uint32Array(16);
    this.chunkOut = 0;
    this.enableXOF = true;
    const { key, context } = opts;
    const hasContext = context !== void 0;
    if (key !== void 0) {
      if (hasContext)
        throw new Error('Only "key" or "context" can be specified at same time');
      const k4 = toBytes(key).slice();
      abytes(k4, 32);
      this.IV = u32(k4);
      swap32IfBE(this.IV);
      this.flags = flags | B3_Flags.KEYED_HASH;
    } else if (hasContext) {
      const ctx = toBytes(context);
      const contextKey = new _BLAKE3({ dkLen: 32 }, B3_Flags.DERIVE_KEY_CONTEXT).update(ctx).digest();
      this.IV = u32(contextKey);
      swap32IfBE(this.IV);
      this.flags = flags | B3_Flags.DERIVE_KEY_MATERIAL;
    } else {
      this.IV = B3_IV.slice();
      this.flags = flags;
    }
    this.state = this.IV.slice();
    this.bufferOut = u8(this.bufferOut32);
  }
  // Unused
  get() {
    return [];
  }
  set() {
  }
  b2Compress(counter, flags, buf, bufPos = 0) {
    const { state: s2, pos } = this;
    const { h: h4, l: l6 } = fromBig(BigInt(counter), true);
    const { v0, v1, v2: v22, v3: v32, v4: v42, v5: v52, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } = compress(B3_SIGMA, bufPos, buf, 7, s2[0], s2[1], s2[2], s2[3], s2[4], s2[5], s2[6], s2[7], B3_IV[0], B3_IV[1], B3_IV[2], B3_IV[3], h4, l6, pos, flags);
    s2[0] = v0 ^ v8;
    s2[1] = v1 ^ v9;
    s2[2] = v22 ^ v10;
    s2[3] = v32 ^ v11;
    s2[4] = v42 ^ v12;
    s2[5] = v52 ^ v13;
    s2[6] = v6 ^ v14;
    s2[7] = v7 ^ v15;
  }
  compress(buf, bufPos = 0, isLast = false) {
    let flags = this.flags;
    if (!this.chunkPos)
      flags |= B3_Flags.CHUNK_START;
    if (this.chunkPos === 15 || isLast)
      flags |= B3_Flags.CHUNK_END;
    if (!isLast)
      this.pos = this.blockLen;
    this.b2Compress(this.chunksDone, flags, buf, bufPos);
    this.chunkPos += 1;
    if (this.chunkPos === 16 || isLast) {
      let chunk = this.state;
      this.state = this.IV.slice();
      for (let last, chunks = this.chunksDone + 1; isLast || !(chunks & 1); chunks >>= 1) {
        if (!(last = this.stack.pop()))
          break;
        this.buffer32.set(last, 0);
        this.buffer32.set(chunk, 8);
        this.pos = this.blockLen;
        this.b2Compress(0, this.flags | B3_Flags.PARENT, this.buffer32, 0);
        chunk = this.state;
        this.state = this.IV.slice();
      }
      this.chunksDone++;
      this.chunkPos = 0;
      this.stack.push(chunk);
    }
    this.pos = 0;
  }
  _cloneInto(to4) {
    to4 = super._cloneInto(to4);
    const { IV, flags, state: state8, chunkPos, posOut, chunkOut, stack, chunksDone } = this;
    to4.state.set(state8.slice());
    to4.stack = stack.map((i3) => Uint32Array.from(i3));
    to4.IV.set(IV);
    to4.flags = flags;
    to4.chunkPos = chunkPos;
    to4.chunksDone = chunksDone;
    to4.posOut = posOut;
    to4.chunkOut = chunkOut;
    to4.enableXOF = this.enableXOF;
    to4.bufferOut32.set(this.bufferOut32);
    return to4;
  }
  destroy() {
    this.destroyed = true;
    clean(this.state, this.buffer32, this.IV, this.bufferOut32);
    clean(...this.stack);
  }
  // Same as b2Compress, but doesn't modify state and returns 16 u32 array (instead of 8)
  b2CompressOut() {
    const { state: s2, pos, flags, buffer32, bufferOut32: out32 } = this;
    const { h: h4, l: l6 } = fromBig(BigInt(this.chunkOut++));
    swap32IfBE(buffer32);
    const { v0, v1, v2: v22, v3: v32, v4: v42, v5: v52, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } = compress(B3_SIGMA, 0, buffer32, 7, s2[0], s2[1], s2[2], s2[3], s2[4], s2[5], s2[6], s2[7], B3_IV[0], B3_IV[1], B3_IV[2], B3_IV[3], l6, h4, pos, flags);
    out32[0] = v0 ^ v8;
    out32[1] = v1 ^ v9;
    out32[2] = v22 ^ v10;
    out32[3] = v32 ^ v11;
    out32[4] = v42 ^ v12;
    out32[5] = v52 ^ v13;
    out32[6] = v6 ^ v14;
    out32[7] = v7 ^ v15;
    out32[8] = s2[0] ^ v8;
    out32[9] = s2[1] ^ v9;
    out32[10] = s2[2] ^ v10;
    out32[11] = s2[3] ^ v11;
    out32[12] = s2[4] ^ v12;
    out32[13] = s2[5] ^ v13;
    out32[14] = s2[6] ^ v14;
    out32[15] = s2[7] ^ v15;
    swap32IfBE(buffer32);
    swap32IfBE(out32);
    this.posOut = 0;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    clean(this.buffer.subarray(this.pos));
    let flags = this.flags | B3_Flags.ROOT;
    if (this.stack.length) {
      flags |= B3_Flags.PARENT;
      swap32IfBE(this.buffer32);
      this.compress(this.buffer32, 0, true);
      swap32IfBE(this.buffer32);
      this.chunksDone = 0;
      this.pos = this.blockLen;
    } else {
      flags |= (!this.chunkPos ? B3_Flags.CHUNK_START : 0) | B3_Flags.CHUNK_END;
    }
    this.flags = flags;
    this.b2CompressOut();
  }
  writeInto(out) {
    aexists(this, false);
    abytes(out);
    this.finish();
    const { blockLen, bufferOut } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.b2CompressOut();
      const take = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
      this.posOut += take;
      pos += take;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible after digest call");
    return this.writeInto(out);
  }
  xof(bytes) {
    anumber(bytes);
    return this.xofInto(new Uint8Array(bytes));
  }
  digestInto(out) {
    aoutput(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.enableXOF = false;
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
};
var blake3 = createXOFer((opts) => new BLAKE3(opts));

// node_modules/ox/_esm/core/Blobs.js
var blobsPerTransaction = 6;
var bytesPerFieldElement = 32;
var fieldElementsPerBlob = 4096;
var bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;
var maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * fieldElementsPerBlob * blobsPerTransaction;

// node_modules/ox/node_modules/@noble/curves/esm/abstract/bls.js
var _0n6 = BigInt(0);
var _1n6 = BigInt(1);
var _2n4 = BigInt(2);
var _3n3 = BigInt(3);
function NAfDecomposition(a3) {
  const res = [];
  for (; a3 > _1n6; a3 >>= _1n6) {
    if ((a3 & _1n6) === _0n6)
      res.unshift(0);
    else if ((a3 & _3n3) === _3n3) {
      res.unshift(-1);
      a3 += _1n6;
    } else
      res.unshift(1);
  }
  return res;
}
function bls(CURVE) {
  const { Fp: Fp4, Fr: Fr5, Fp2: Fp22, Fp6: Fp62, Fp12: Fp122 } = CURVE.fields;
  const BLS_X_IS_NEGATIVE = CURVE.params.xNegative;
  const TWIST = CURVE.params.twistType;
  const G1_ = weierstrassPoints({ n: Fr5.ORDER, ...CURVE.G1 });
  const G1 = Object.assign(G1_, createHasher(G1_.ProjectivePoint, CURVE.G1.mapToCurve, {
    ...CURVE.htfDefaults,
    ...CURVE.G1.htfDefaults
  }));
  const G2_ = weierstrassPoints({ n: Fr5.ORDER, ...CURVE.G2 });
  const G22 = Object.assign(G2_, createHasher(G2_.ProjectivePoint, CURVE.G2.mapToCurve, {
    ...CURVE.htfDefaults,
    ...CURVE.G2.htfDefaults
  }));
  let lineFunction;
  if (TWIST === "multiplicative") {
    lineFunction = (c0, c1, c22, f6, Px, Py) => Fp122.mul014(f6, c0, Fp22.mul(c1, Px), Fp22.mul(c22, Py));
  } else if (TWIST === "divisive") {
    lineFunction = (c0, c1, c22, f6, Px, Py) => Fp122.mul034(f6, Fp22.mul(c22, Py), Fp22.mul(c1, Px), c0);
  } else
    throw new Error("bls: unknown twist type");
  const Fp2div2 = Fp22.div(Fp22.ONE, Fp22.mul(Fp22.ONE, _2n4));
  function pointDouble(ell, Rx, Ry, Rz) {
    const t0 = Fp22.sqr(Ry);
    const t1 = Fp22.sqr(Rz);
    const t2 = Fp22.mulByB(Fp22.mul(t1, _3n3));
    const t3 = Fp22.mul(t2, _3n3);
    const t4 = Fp22.sub(Fp22.sub(Fp22.sqr(Fp22.add(Ry, Rz)), t1), t0);
    const c0 = Fp22.sub(t2, t0);
    const c1 = Fp22.mul(Fp22.sqr(Rx), _3n3);
    const c22 = Fp22.neg(t4);
    ell.push([c0, c1, c22]);
    Rx = Fp22.mul(Fp22.mul(Fp22.mul(Fp22.sub(t0, t3), Rx), Ry), Fp2div2);
    Ry = Fp22.sub(Fp22.sqr(Fp22.mul(Fp22.add(t0, t3), Fp2div2)), Fp22.mul(Fp22.sqr(t2), _3n3));
    Rz = Fp22.mul(t0, t4);
    return { Rx, Ry, Rz };
  }
  function pointAdd(ell, Rx, Ry, Rz, Qx, Qy) {
    const t0 = Fp22.sub(Ry, Fp22.mul(Qy, Rz));
    const t1 = Fp22.sub(Rx, Fp22.mul(Qx, Rz));
    const c0 = Fp22.sub(Fp22.mul(t0, Qx), Fp22.mul(t1, Qy));
    const c1 = Fp22.neg(t0);
    const c22 = t1;
    ell.push([c0, c1, c22]);
    const t2 = Fp22.sqr(t1);
    const t3 = Fp22.mul(t2, t1);
    const t4 = Fp22.mul(t2, Rx);
    const t5 = Fp22.add(Fp22.sub(t3, Fp22.mul(t4, _2n4)), Fp22.mul(Fp22.sqr(t0), Rz));
    Rx = Fp22.mul(t1, t5);
    Ry = Fp22.sub(Fp22.mul(Fp22.sub(t4, t5), t0), Fp22.mul(t3, Ry));
    Rz = Fp22.mul(Rz, t3);
    return { Rx, Ry, Rz };
  }
  const ATE_NAF = NAfDecomposition(CURVE.params.ateLoopSize);
  const calcPairingPrecomputes = memoized((point) => {
    const p4 = point;
    const { x: x5, y: y4 } = p4.toAffine();
    const Qx = x5, Qy = y4, negQy = Fp22.neg(y4);
    let Rx = Qx, Ry = Qy, Rz = Fp22.ONE;
    const ell = [];
    for (const bit of ATE_NAF) {
      const cur = [];
      ({ Rx, Ry, Rz } = pointDouble(cur, Rx, Ry, Rz));
      if (bit)
        ({ Rx, Ry, Rz } = pointAdd(cur, Rx, Ry, Rz, Qx, bit === -1 ? negQy : Qy));
      ell.push(cur);
    }
    if (CURVE.postPrecompute) {
      const last = ell[ell.length - 1];
      CURVE.postPrecompute(Rx, Ry, Rz, Qx, Qy, pointAdd.bind(null, last));
    }
    return ell;
  });
  function millerLoopBatch(pairs, withFinalExponent = false) {
    let f12 = Fp122.ONE;
    if (pairs.length) {
      const ellLen = pairs[0][0].length;
      for (let i3 = 0; i3 < ellLen; i3++) {
        f12 = Fp122.sqr(f12);
        for (const [ell, Px, Py] of pairs) {
          for (const [c0, c1, c22] of ell[i3])
            f12 = lineFunction(c0, c1, c22, f12, Px, Py);
        }
      }
    }
    if (BLS_X_IS_NEGATIVE)
      f12 = Fp122.conjugate(f12);
    return withFinalExponent ? Fp122.finalExponentiate(f12) : f12;
  }
  function pairingBatch(pairs, withFinalExponent = true) {
    const res = [];
    G1.ProjectivePoint.normalizeZ(pairs.map(({ g1 }) => g1));
    G22.ProjectivePoint.normalizeZ(pairs.map(({ g2: g22 }) => g22));
    for (const { g1, g2: g22 } of pairs) {
      if (g1.equals(G1.ProjectivePoint.ZERO) || g22.equals(G22.ProjectivePoint.ZERO))
        throw new Error("pairing is not available for ZERO point");
      g1.assertValidity();
      g22.assertValidity();
      const Qa2 = g1.toAffine();
      res.push([calcPairingPrecomputes(g22), Qa2.x, Qa2.y]);
    }
    return millerLoopBatch(res, withFinalExponent);
  }
  function pairing(Q4, P6, withFinalExponent = true) {
    return pairingBatch([{ g1: Q4, g2: P6 }], withFinalExponent);
  }
  const utils2 = {
    randomPrivateKey: () => {
      const length2 = getMinHashLength(Fr5.ORDER);
      return mapHashToField(CURVE.randomBytes(length2), Fr5.ORDER);
    },
    calcPairingPrecomputes
  };
  const { ShortSignature } = CURVE.G1;
  const { Signature } = CURVE.G2;
  function normP1(point) {
    return point instanceof G1.ProjectivePoint ? point : G1.ProjectivePoint.fromHex(point);
  }
  function normP1Hash(point, htfOpts) {
    return point instanceof G1.ProjectivePoint ? point : G1.hashToCurve(ensureBytes("point", point), htfOpts);
  }
  function normP2(point) {
    return point instanceof G22.ProjectivePoint ? point : Signature.fromHex(point);
  }
  function normP2Hash(point, htfOpts) {
    return point instanceof G22.ProjectivePoint ? point : G22.hashToCurve(ensureBytes("point", point), htfOpts);
  }
  function getPublicKey2(privateKey) {
    return G1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);
  }
  function getPublicKeyForShortSignatures(privateKey) {
    return G22.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);
  }
  function sign2(message, privateKey, htfOpts) {
    const msgPoint = normP2Hash(message, htfOpts);
    msgPoint.assertValidity();
    const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));
    if (message instanceof G22.ProjectivePoint)
      return sigPoint;
    return Signature.toRawBytes(sigPoint);
  }
  function signShortSignature(message, privateKey, htfOpts) {
    const msgPoint = normP1Hash(message, htfOpts);
    msgPoint.assertValidity();
    const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));
    if (message instanceof G1.ProjectivePoint)
      return sigPoint;
    return ShortSignature.toRawBytes(sigPoint);
  }
  function verify3(signature, message, publicKey, htfOpts) {
    const P6 = normP1(publicKey);
    const Hm = normP2Hash(message, htfOpts);
    const G5 = G1.ProjectivePoint.BASE;
    const S4 = normP2(signature);
    const exp = pairingBatch([
      { g1: P6.negate(), g2: Hm },
      // ePHM = pairing(P.negate(), Hm, false);
      { g1: G5, g2: S4 }
      // eGS = pairing(G, S, false);
    ]);
    return Fp122.eql(exp, Fp122.ONE);
  }
  function verifyShortSignature(signature, message, publicKey, htfOpts) {
    const P6 = normP2(publicKey);
    const Hm = normP1Hash(message, htfOpts);
    const G5 = G22.ProjectivePoint.BASE;
    const S4 = normP1(signature);
    const exp = pairingBatch([
      { g1: Hm, g2: P6 },
      // eHmP = pairing(Hm, P, false);
      { g1: S4, g2: G5.negate() }
      // eSG = pairing(S, G.negate(), false);
    ]);
    return Fp122.eql(exp, Fp122.ONE);
  }
  function aNonEmpty(arr) {
    if (!Array.isArray(arr) || arr.length === 0)
      throw new Error("expected non-empty array");
  }
  function aggregatePublicKeys(publicKeys) {
    aNonEmpty(publicKeys);
    const agg = publicKeys.map(normP1).reduce((sum, p4) => sum.add(p4), G1.ProjectivePoint.ZERO);
    const aggAffine = agg;
    if (publicKeys[0] instanceof G1.ProjectivePoint) {
      aggAffine.assertValidity();
      return aggAffine;
    }
    return aggAffine.toRawBytes(true);
  }
  function aggregateSignatures(signatures) {
    aNonEmpty(signatures);
    const agg = signatures.map(normP2).reduce((sum, s2) => sum.add(s2), G22.ProjectivePoint.ZERO);
    const aggAffine = agg;
    if (signatures[0] instanceof G22.ProjectivePoint) {
      aggAffine.assertValidity();
      return aggAffine;
    }
    return Signature.toRawBytes(aggAffine);
  }
  function aggregateShortSignatures(signatures) {
    aNonEmpty(signatures);
    const agg = signatures.map(normP1).reduce((sum, s2) => sum.add(s2), G1.ProjectivePoint.ZERO);
    const aggAffine = agg;
    if (signatures[0] instanceof G1.ProjectivePoint) {
      aggAffine.assertValidity();
      return aggAffine;
    }
    return ShortSignature.toRawBytes(aggAffine);
  }
  function verifyBatch(signature, messages, publicKeys, htfOpts) {
    aNonEmpty(messages);
    if (publicKeys.length !== messages.length)
      throw new Error("amount of public keys and messages should be equal");
    const sig = normP2(signature);
    const nMessages = messages.map((i3) => normP2Hash(i3, htfOpts));
    const nPublicKeys = publicKeys.map(normP1);
    const messagePubKeyMap = /* @__PURE__ */ new Map();
    for (let i3 = 0; i3 < nPublicKeys.length; i3++) {
      const pub = nPublicKeys[i3];
      const msg = nMessages[i3];
      let keys2 = messagePubKeyMap.get(msg);
      if (keys2 === void 0) {
        keys2 = [];
        messagePubKeyMap.set(msg, keys2);
      }
      keys2.push(pub);
    }
    const paired = [];
    try {
      for (const [msg, keys2] of messagePubKeyMap) {
        const groupPublicKey = keys2.reduce((acc, msg2) => acc.add(msg2));
        paired.push({ g1: groupPublicKey, g2: msg });
      }
      paired.push({ g1: G1.ProjectivePoint.BASE.negate(), g2: sig });
      return Fp122.eql(pairingBatch(paired), Fp122.ONE);
    } catch {
      return false;
    }
  }
  G1.ProjectivePoint.BASE._setWindowSize(4);
  return {
    getPublicKey: getPublicKey2,
    getPublicKeyForShortSignatures,
    sign: sign2,
    signShortSignature,
    verify: verify3,
    verifyBatch,
    verifyShortSignature,
    aggregatePublicKeys,
    aggregateSignatures,
    aggregateShortSignatures,
    millerLoopBatch,
    pairing,
    pairingBatch,
    G1,
    G2: G22,
    Signature,
    ShortSignature,
    fields: {
      Fr: Fr5,
      Fp: Fp4,
      Fp2: Fp22,
      Fp6: Fp62,
      Fp12: Fp122
    },
    params: {
      ateLoopSize: CURVE.params.ateLoopSize,
      r: CURVE.params.r,
      G1b: CURVE.G1.b,
      G2b: CURVE.G2.b
    },
    utils: utils2
  };
}

// node_modules/ox/node_modules/@noble/curves/esm/abstract/tower.js
var _0n7 = BigInt(0);
var _1n7 = BigInt(1);
var _2n5 = BigInt(2);
var _3n4 = BigInt(3);
function calcFrobeniusCoefficients(Fp4, nonResidue, modulus, degree, num3 = 1, divisor) {
  const _divisor = BigInt(divisor === void 0 ? degree : divisor);
  const towerModulus = modulus ** BigInt(degree);
  const res = [];
  for (let i3 = 0; i3 < num3; i3++) {
    const a3 = BigInt(i3 + 1);
    const powers2 = [];
    for (let j6 = 0, qPower = _1n7; j6 < degree; j6++) {
      const power = (a3 * qPower - a3) / _divisor % towerModulus;
      powers2.push(Fp4.pow(nonResidue, power));
      qPower *= modulus;
    }
    res.push(powers2);
  }
  return res;
}
function psiFrobenius(Fp4, Fp22, base3) {
  const PSI_X = Fp22.pow(base3, (Fp4.ORDER - _1n7) / _3n4);
  const PSI_Y = Fp22.pow(base3, (Fp4.ORDER - _1n7) / _2n5);
  function psi(x5, y4) {
    const x22 = Fp22.mul(Fp22.frobeniusMap(x5, 1), PSI_X);
    const y22 = Fp22.mul(Fp22.frobeniusMap(y4, 1), PSI_Y);
    return [x22, y22];
  }
  const PSI2_X = Fp22.pow(base3, (Fp4.ORDER ** _2n5 - _1n7) / _3n4);
  const PSI2_Y = Fp22.pow(base3, (Fp4.ORDER ** _2n5 - _1n7) / _2n5);
  if (!Fp22.eql(PSI2_Y, Fp22.neg(Fp22.ONE)))
    throw new Error("psiFrobenius: PSI2_Y!==-1");
  function psi2(x5, y4) {
    return [Fp22.mul(x5, PSI2_X), Fp22.neg(y4)];
  }
  const mapAffine = (fn3) => (c6, P6) => {
    const affine = P6.toAffine();
    const p4 = fn3(affine.x, affine.y);
    return c6.fromAffine({ x: p4[0], y: p4[1] });
  };
  const G2psi3 = mapAffine(psi);
  const G2psi22 = mapAffine(psi2);
  return { psi, psi2, G2psi: G2psi3, G2psi2: G2psi22, PSI_X, PSI_Y, PSI2_X, PSI2_Y };
}
function tower12(opts) {
  const { ORDER } = opts;
  const Fp4 = Field(ORDER);
  const FpNONRESIDUE = Fp4.create(opts.NONRESIDUE || BigInt(-1));
  const Fpdiv2 = Fp4.div(Fp4.ONE, _2n5);
  const FP2_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp4, FpNONRESIDUE, Fp4.ORDER, 2)[0];
  const Fp2Add = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({
    c0: Fp4.add(c0, r0),
    c1: Fp4.add(c1, r1)
  });
  const Fp2Subtract = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({
    c0: Fp4.sub(c0, r0),
    c1: Fp4.sub(c1, r1)
  });
  const Fp2Multiply = ({ c0, c1 }, rhs) => {
    if (typeof rhs === "bigint")
      return { c0: Fp4.mul(c0, rhs), c1: Fp4.mul(c1, rhs) };
    const { c0: r0, c1: r1 } = rhs;
    let t1 = Fp4.mul(c0, r0);
    let t2 = Fp4.mul(c1, r1);
    const o0 = Fp4.sub(t1, t2);
    const o1 = Fp4.sub(Fp4.mul(Fp4.add(c0, c1), Fp4.add(r0, r1)), Fp4.add(t1, t2));
    return { c0: o0, c1: o1 };
  };
  const Fp2Square = ({ c0, c1 }) => {
    const a3 = Fp4.add(c0, c1);
    const b4 = Fp4.sub(c0, c1);
    const c6 = Fp4.add(c0, c0);
    return { c0: Fp4.mul(a3, b4), c1: Fp4.mul(c6, c1) };
  };
  const Fp2fromBigTuple = (tuple) => {
    if (tuple.length !== 2)
      throw new Error("invalid tuple");
    const fps = tuple.map((n4) => Fp4.create(n4));
    return { c0: fps[0], c1: fps[1] };
  };
  const FP2_ORDER = ORDER * ORDER;
  const Fp2Nonresidue = Fp2fromBigTuple(opts.FP2_NONRESIDUE);
  const Fp22 = {
    ORDER: FP2_ORDER,
    isLE: Fp4.isLE,
    NONRESIDUE: Fp2Nonresidue,
    BITS: bitLen(FP2_ORDER),
    BYTES: Math.ceil(bitLen(FP2_ORDER) / 8),
    MASK: bitMask(bitLen(FP2_ORDER)),
    ZERO: { c0: Fp4.ZERO, c1: Fp4.ZERO },
    ONE: { c0: Fp4.ONE, c1: Fp4.ZERO },
    create: (num3) => num3,
    isValid: ({ c0, c1 }) => typeof c0 === "bigint" && typeof c1 === "bigint",
    is0: ({ c0, c1 }) => Fp4.is0(c0) && Fp4.is0(c1),
    eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp4.eql(c0, r0) && Fp4.eql(c1, r1),
    neg: ({ c0, c1 }) => ({ c0: Fp4.neg(c0), c1: Fp4.neg(c1) }),
    pow: (num3, power) => FpPow(Fp22, num3, power),
    invertBatch: (nums) => FpInvertBatch(Fp22, nums),
    // Normalized
    add: Fp2Add,
    sub: Fp2Subtract,
    mul: Fp2Multiply,
    sqr: Fp2Square,
    // NonNormalized stuff
    addN: Fp2Add,
    subN: Fp2Subtract,
    mulN: Fp2Multiply,
    sqrN: Fp2Square,
    // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?
    div: (lhs, rhs) => Fp22.mul(lhs, typeof rhs === "bigint" ? Fp4.inv(Fp4.create(rhs)) : Fp22.inv(rhs)),
    inv: ({ c0: a3, c1: b4 }) => {
      const factor = Fp4.inv(Fp4.create(a3 * a3 + b4 * b4));
      return { c0: Fp4.mul(factor, Fp4.create(a3)), c1: Fp4.mul(factor, Fp4.create(-b4)) };
    },
    sqrt: (num3) => {
      if (opts.Fp2sqrt)
        return opts.Fp2sqrt(num3);
      const { c0, c1 } = num3;
      if (Fp4.is0(c1)) {
        if (FpLegendre(Fp4, c0) === 1)
          return Fp22.create({ c0: Fp4.sqrt(c0), c1: Fp4.ZERO });
        else
          return Fp22.create({ c0: Fp4.ZERO, c1: Fp4.sqrt(Fp4.div(c0, FpNONRESIDUE)) });
      }
      const a3 = Fp4.sqrt(Fp4.sub(Fp4.sqr(c0), Fp4.mul(Fp4.sqr(c1), FpNONRESIDUE)));
      let d7 = Fp4.mul(Fp4.add(a3, c0), Fpdiv2);
      const legendre = FpLegendre(Fp4, d7);
      if (legendre === -1)
        d7 = Fp4.sub(d7, a3);
      const a0 = Fp4.sqrt(d7);
      const candidateSqrt = Fp22.create({ c0: a0, c1: Fp4.div(Fp4.mul(c1, Fpdiv2), a0) });
      if (!Fp22.eql(Fp22.sqr(candidateSqrt), num3))
        throw new Error("Cannot find square root");
      const x1 = candidateSqrt;
      const x22 = Fp22.neg(x1);
      const { re: re1, im: im1 } = Fp22.reim(x1);
      const { re: re22, im: im2 } = Fp22.reim(x22);
      if (im1 > im2 || im1 === im2 && re1 > re22)
        return x1;
      return x22;
    },
    // Same as sgn0_m_eq_2 in RFC 9380
    isOdd: (x5) => {
      const { re: x0, im: x1 } = Fp22.reim(x5);
      const sign_0 = x0 % _2n5;
      const zero_0 = x0 === _0n7;
      const sign_1 = x1 % _2n5;
      return BigInt(sign_0 || zero_0 && sign_1) == _1n7;
    },
    // Bytes util
    fromBytes(b4) {
      if (b4.length !== Fp22.BYTES)
        throw new Error("fromBytes invalid length=" + b4.length);
      return { c0: Fp4.fromBytes(b4.subarray(0, Fp4.BYTES)), c1: Fp4.fromBytes(b4.subarray(Fp4.BYTES)) };
    },
    toBytes: ({ c0, c1 }) => concatBytes2(Fp4.toBytes(c0), Fp4.toBytes(c1)),
    cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c6) => ({
      c0: Fp4.cmov(c0, r0, c6),
      c1: Fp4.cmov(c1, r1, c6)
    }),
    reim: ({ c0, c1 }) => ({ re: c0, im: c1 }),
    // multiply by u + 1
    mulByNonresidue: ({ c0, c1 }) => Fp22.mul({ c0, c1 }, Fp2Nonresidue),
    mulByB: opts.Fp2mulByB,
    fromBigTuple: Fp2fromBigTuple,
    frobeniusMap: ({ c0, c1 }, power) => ({
      c0,
      c1: Fp4.mul(c1, FP2_FROBENIUS_COEFFICIENTS[power % 2])
    })
  };
  const Fp6Add = ({ c0, c1, c2: c22 }, { c0: r0, c1: r1, c2: r22 }) => ({
    c0: Fp22.add(c0, r0),
    c1: Fp22.add(c1, r1),
    c2: Fp22.add(c22, r22)
  });
  const Fp6Subtract = ({ c0, c1, c2: c22 }, { c0: r0, c1: r1, c2: r22 }) => ({
    c0: Fp22.sub(c0, r0),
    c1: Fp22.sub(c1, r1),
    c2: Fp22.sub(c22, r22)
  });
  const Fp6Multiply = ({ c0, c1, c2: c22 }, rhs) => {
    if (typeof rhs === "bigint") {
      return {
        c0: Fp22.mul(c0, rhs),
        c1: Fp22.mul(c1, rhs),
        c2: Fp22.mul(c22, rhs)
      };
    }
    const { c0: r0, c1: r1, c2: r22 } = rhs;
    const t0 = Fp22.mul(c0, r0);
    const t1 = Fp22.mul(c1, r1);
    const t2 = Fp22.mul(c22, r22);
    return {
      // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)
      c0: Fp22.add(t0, Fp22.mulByNonresidue(Fp22.sub(Fp22.mul(Fp22.add(c1, c22), Fp22.add(r1, r22)), Fp22.add(t1, t2)))),
      // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)
      c1: Fp22.add(Fp22.sub(Fp22.mul(Fp22.add(c0, c1), Fp22.add(r0, r1)), Fp22.add(t0, t1)), Fp22.mulByNonresidue(t2)),
      // T1 + (c0 + c2) * (r0 + r2) - T0 + T2
      c2: Fp22.sub(Fp22.add(t1, Fp22.mul(Fp22.add(c0, c22), Fp22.add(r0, r22))), Fp22.add(t0, t2))
    };
  };
  const Fp6Square = ({ c0, c1, c2: c22 }) => {
    let t0 = Fp22.sqr(c0);
    let t1 = Fp22.mul(Fp22.mul(c0, c1), _2n5);
    let t3 = Fp22.mul(Fp22.mul(c1, c22), _2n5);
    let t4 = Fp22.sqr(c22);
    return {
      c0: Fp22.add(Fp22.mulByNonresidue(t3), t0),
      // T3 * (u + 1) + T0
      c1: Fp22.add(Fp22.mulByNonresidue(t4), t1),
      // T4 * (u + 1) + T1
      // T1 + (c0 - c1 + c2)² + T3 - T0 - T4
      c2: Fp22.sub(Fp22.sub(Fp22.add(Fp22.add(t1, Fp22.sqr(Fp22.add(Fp22.sub(c0, c1), c22))), t3), t0), t4)
    };
  };
  const [FP6_FROBENIUS_COEFFICIENTS_1, FP6_FROBENIUS_COEFFICIENTS_2] = calcFrobeniusCoefficients(Fp22, Fp2Nonresidue, Fp4.ORDER, 6, 2, 3);
  const Fp62 = {
    ORDER: Fp22.ORDER,
    // TODO: unused, but need to verify
    isLE: Fp22.isLE,
    BITS: 3 * Fp22.BITS,
    BYTES: 3 * Fp22.BYTES,
    MASK: bitMask(3 * Fp22.BITS),
    ZERO: { c0: Fp22.ZERO, c1: Fp22.ZERO, c2: Fp22.ZERO },
    ONE: { c0: Fp22.ONE, c1: Fp22.ZERO, c2: Fp22.ZERO },
    create: (num3) => num3,
    isValid: ({ c0, c1, c2: c22 }) => Fp22.isValid(c0) && Fp22.isValid(c1) && Fp22.isValid(c22),
    is0: ({ c0, c1, c2: c22 }) => Fp22.is0(c0) && Fp22.is0(c1) && Fp22.is0(c22),
    neg: ({ c0, c1, c2: c22 }) => ({ c0: Fp22.neg(c0), c1: Fp22.neg(c1), c2: Fp22.neg(c22) }),
    eql: ({ c0, c1, c2: c22 }, { c0: r0, c1: r1, c2: r22 }) => Fp22.eql(c0, r0) && Fp22.eql(c1, r1) && Fp22.eql(c22, r22),
    sqrt: notImplemented,
    // Do we need division by bigint at all? Should be done via order:
    div: (lhs, rhs) => Fp62.mul(lhs, typeof rhs === "bigint" ? Fp4.inv(Fp4.create(rhs)) : Fp62.inv(rhs)),
    pow: (num3, power) => FpPow(Fp62, num3, power),
    invertBatch: (nums) => FpInvertBatch(Fp62, nums),
    // Normalized
    add: Fp6Add,
    sub: Fp6Subtract,
    mul: Fp6Multiply,
    sqr: Fp6Square,
    // NonNormalized stuff
    addN: Fp6Add,
    subN: Fp6Subtract,
    mulN: Fp6Multiply,
    sqrN: Fp6Square,
    inv: ({ c0, c1, c2: c22 }) => {
      let t0 = Fp22.sub(Fp22.sqr(c0), Fp22.mulByNonresidue(Fp22.mul(c22, c1)));
      let t1 = Fp22.sub(Fp22.mulByNonresidue(Fp22.sqr(c22)), Fp22.mul(c0, c1));
      let t2 = Fp22.sub(Fp22.sqr(c1), Fp22.mul(c0, c22));
      let t4 = Fp22.inv(Fp22.add(Fp22.mulByNonresidue(Fp22.add(Fp22.mul(c22, t1), Fp22.mul(c1, t2))), Fp22.mul(c0, t0)));
      return { c0: Fp22.mul(t4, t0), c1: Fp22.mul(t4, t1), c2: Fp22.mul(t4, t2) };
    },
    // Bytes utils
    fromBytes: (b4) => {
      if (b4.length !== Fp62.BYTES)
        throw new Error("fromBytes invalid length=" + b4.length);
      return {
        c0: Fp22.fromBytes(b4.subarray(0, Fp22.BYTES)),
        c1: Fp22.fromBytes(b4.subarray(Fp22.BYTES, 2 * Fp22.BYTES)),
        c2: Fp22.fromBytes(b4.subarray(2 * Fp22.BYTES))
      };
    },
    toBytes: ({ c0, c1, c2: c22 }) => concatBytes2(Fp22.toBytes(c0), Fp22.toBytes(c1), Fp22.toBytes(c22)),
    cmov: ({ c0, c1, c2: c22 }, { c0: r0, c1: r1, c2: r22 }, c6) => ({
      c0: Fp22.cmov(c0, r0, c6),
      c1: Fp22.cmov(c1, r1, c6),
      c2: Fp22.cmov(c22, r22, c6)
    }),
    fromBigSix: (t) => {
      if (!Array.isArray(t) || t.length !== 6)
        throw new Error("invalid Fp6 usage");
      return {
        c0: Fp22.fromBigTuple(t.slice(0, 2)),
        c1: Fp22.fromBigTuple(t.slice(2, 4)),
        c2: Fp22.fromBigTuple(t.slice(4, 6))
      };
    },
    frobeniusMap: ({ c0, c1, c2: c22 }, power) => ({
      c0: Fp22.frobeniusMap(c0, power),
      c1: Fp22.mul(Fp22.frobeniusMap(c1, power), FP6_FROBENIUS_COEFFICIENTS_1[power % 6]),
      c2: Fp22.mul(Fp22.frobeniusMap(c22, power), FP6_FROBENIUS_COEFFICIENTS_2[power % 6])
    }),
    mulByFp2: ({ c0, c1, c2: c22 }, rhs) => ({
      c0: Fp22.mul(c0, rhs),
      c1: Fp22.mul(c1, rhs),
      c2: Fp22.mul(c22, rhs)
    }),
    mulByNonresidue: ({ c0, c1, c2: c22 }) => ({ c0: Fp22.mulByNonresidue(c22), c1: c0, c2: c1 }),
    // Sparse multiplication
    mul1: ({ c0, c1, c2: c22 }, b1) => ({
      c0: Fp22.mulByNonresidue(Fp22.mul(c22, b1)),
      c1: Fp22.mul(c0, b1),
      c2: Fp22.mul(c1, b1)
    }),
    // Sparse multiplication
    mul01({ c0, c1, c2: c22 }, b0, b1) {
      let t0 = Fp22.mul(c0, b0);
      let t1 = Fp22.mul(c1, b1);
      return {
        // ((c1 + c2) * b1 - T1) * (u + 1) + T0
        c0: Fp22.add(Fp22.mulByNonresidue(Fp22.sub(Fp22.mul(Fp22.add(c1, c22), b1), t1)), t0),
        // (b0 + b1) * (c0 + c1) - T0 - T1
        c1: Fp22.sub(Fp22.sub(Fp22.mul(Fp22.add(b0, b1), Fp22.add(c0, c1)), t0), t1),
        // (c0 + c2) * b0 - T0 + T1
        c2: Fp22.add(Fp22.sub(Fp22.mul(Fp22.add(c0, c22), b0), t0), t1)
      };
    }
  };
  const FP12_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp22, Fp2Nonresidue, Fp4.ORDER, 12, 1, 6)[0];
  const Fp12Add = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({
    c0: Fp62.add(c0, r0),
    c1: Fp62.add(c1, r1)
  });
  const Fp12Subtract = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({
    c0: Fp62.sub(c0, r0),
    c1: Fp62.sub(c1, r1)
  });
  const Fp12Multiply = ({ c0, c1 }, rhs) => {
    if (typeof rhs === "bigint")
      return { c0: Fp62.mul(c0, rhs), c1: Fp62.mul(c1, rhs) };
    let { c0: r0, c1: r1 } = rhs;
    let t1 = Fp62.mul(c0, r0);
    let t2 = Fp62.mul(c1, r1);
    return {
      c0: Fp62.add(t1, Fp62.mulByNonresidue(t2)),
      // T1 + T2 * v
      // (c0 + c1) * (r0 + r1) - (T1 + T2)
      c1: Fp62.sub(Fp62.mul(Fp62.add(c0, c1), Fp62.add(r0, r1)), Fp62.add(t1, t2))
    };
  };
  const Fp12Square = ({ c0, c1 }) => {
    let ab = Fp62.mul(c0, c1);
    return {
      // (c1 * v + c0) * (c0 + c1) - AB - AB * v
      c0: Fp62.sub(Fp62.sub(Fp62.mul(Fp62.add(Fp62.mulByNonresidue(c1), c0), Fp62.add(c0, c1)), ab), Fp62.mulByNonresidue(ab)),
      c1: Fp62.add(ab, ab)
    };
  };
  function Fp4Square2(a3, b4) {
    const a22 = Fp22.sqr(a3);
    const b22 = Fp22.sqr(b4);
    return {
      first: Fp22.add(Fp22.mulByNonresidue(b22), a22),
      // b² * Nonresidue + a²
      second: Fp22.sub(Fp22.sub(Fp22.sqr(Fp22.add(a3, b4)), a22), b22)
      // (a + b)² - a² - b²
    };
  }
  const Fp122 = {
    ORDER: Fp22.ORDER,
    // TODO: unused, but need to verify
    isLE: Fp62.isLE,
    BITS: 2 * Fp62.BITS,
    BYTES: 2 * Fp62.BYTES,
    MASK: bitMask(2 * Fp62.BITS),
    ZERO: { c0: Fp62.ZERO, c1: Fp62.ZERO },
    ONE: { c0: Fp62.ONE, c1: Fp62.ZERO },
    create: (num3) => num3,
    isValid: ({ c0, c1 }) => Fp62.isValid(c0) && Fp62.isValid(c1),
    is0: ({ c0, c1 }) => Fp62.is0(c0) && Fp62.is0(c1),
    neg: ({ c0, c1 }) => ({ c0: Fp62.neg(c0), c1: Fp62.neg(c1) }),
    eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp62.eql(c0, r0) && Fp62.eql(c1, r1),
    sqrt: notImplemented,
    inv: ({ c0, c1 }) => {
      let t = Fp62.inv(Fp62.sub(Fp62.sqr(c0), Fp62.mulByNonresidue(Fp62.sqr(c1))));
      return { c0: Fp62.mul(c0, t), c1: Fp62.neg(Fp62.mul(c1, t)) };
    },
    div: (lhs, rhs) => Fp122.mul(lhs, typeof rhs === "bigint" ? Fp4.inv(Fp4.create(rhs)) : Fp122.inv(rhs)),
    pow: (num3, power) => FpPow(Fp122, num3, power),
    invertBatch: (nums) => FpInvertBatch(Fp122, nums),
    // Normalized
    add: Fp12Add,
    sub: Fp12Subtract,
    mul: Fp12Multiply,
    sqr: Fp12Square,
    // NonNormalized stuff
    addN: Fp12Add,
    subN: Fp12Subtract,
    mulN: Fp12Multiply,
    sqrN: Fp12Square,
    // Bytes utils
    fromBytes: (b4) => {
      if (b4.length !== Fp122.BYTES)
        throw new Error("fromBytes invalid length=" + b4.length);
      return {
        c0: Fp62.fromBytes(b4.subarray(0, Fp62.BYTES)),
        c1: Fp62.fromBytes(b4.subarray(Fp62.BYTES))
      };
    },
    toBytes: ({ c0, c1 }) => concatBytes2(Fp62.toBytes(c0), Fp62.toBytes(c1)),
    cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c6) => ({
      c0: Fp62.cmov(c0, r0, c6),
      c1: Fp62.cmov(c1, r1, c6)
    }),
    // Utils
    // toString() {
    //   return '' + 'Fp12(' + this.c0 + this.c1 + '* w');
    // },
    // fromTuple(c: [Fp6, Fp6]) {
    //   return new Fp12(...c);
    // }
    fromBigTwelve: (t) => ({
      c0: Fp62.fromBigSix(t.slice(0, 6)),
      c1: Fp62.fromBigSix(t.slice(6, 12))
    }),
    // Raises to q**i -th power
    frobeniusMap(lhs, power) {
      const { c0, c1, c2: c22 } = Fp62.frobeniusMap(lhs.c1, power);
      const coeff = FP12_FROBENIUS_COEFFICIENTS[power % 12];
      return {
        c0: Fp62.frobeniusMap(lhs.c0, power),
        c1: Fp62.create({
          c0: Fp22.mul(c0, coeff),
          c1: Fp22.mul(c1, coeff),
          c2: Fp22.mul(c22, coeff)
        })
      };
    },
    mulByFp2: ({ c0, c1 }, rhs) => ({
      c0: Fp62.mulByFp2(c0, rhs),
      c1: Fp62.mulByFp2(c1, rhs)
    }),
    conjugate: ({ c0, c1 }) => ({ c0, c1: Fp62.neg(c1) }),
    // Sparse multiplication
    mul014: ({ c0, c1 }, o0, o1, o42) => {
      let t0 = Fp62.mul01(c0, o0, o1);
      let t1 = Fp62.mul1(c1, o42);
      return {
        c0: Fp62.add(Fp62.mulByNonresidue(t1), t0),
        // T1 * v + T0
        // (c1 + c0) * [o0, o1+o4] - T0 - T1
        c1: Fp62.sub(Fp62.sub(Fp62.mul01(Fp62.add(c1, c0), o0, Fp22.add(o1, o42)), t0), t1)
      };
    },
    mul034: ({ c0, c1 }, o0, o32, o42) => {
      const a3 = Fp62.create({
        c0: Fp22.mul(c0.c0, o0),
        c1: Fp22.mul(c0.c1, o0),
        c2: Fp22.mul(c0.c2, o0)
      });
      const b4 = Fp62.mul01(c1, o32, o42);
      const e2 = Fp62.mul01(Fp62.add(c0, c1), Fp22.add(o0, o32), o42);
      return {
        c0: Fp62.add(Fp62.mulByNonresidue(b4), a3),
        c1: Fp62.sub(e2, Fp62.add(a3, b4))
      };
    },
    // A cyclotomic group is a subgroup of Fp^n defined by
    //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}
    // The result of any pairing is in a cyclotomic subgroup
    // https://eprint.iacr.org/2009/565.pdf
    _cyclotomicSquare: opts.Fp12cyclotomicSquare,
    _cyclotomicExp: opts.Fp12cyclotomicExp,
    // https://eprint.iacr.org/2010/354.pdf
    // https://eprint.iacr.org/2009/565.pdf
    finalExponentiate: opts.Fp12finalExponentiate
  };
  return { Fp: Fp4, Fp2: Fp22, Fp6: Fp62, Fp4Square: Fp4Square2, Fp12: Fp122 };
}

// node_modules/ox/node_modules/@noble/curves/esm/bls12-381.js
var _0n8 = BigInt(0);
var _1n8 = BigInt(1);
var _2n6 = BigInt(2);
var _3n5 = BigInt(3);
var _4n3 = BigInt(4);
var BLS_X = BigInt("0xd201000000010000");
var BLS_X_LEN = bitLen(BLS_X);
var { Fp, Fp2, Fp6, Fp4Square, Fp12 } = tower12({
  // Order of Fp
  ORDER: BigInt("0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab"),
  // Finite extension field over irreducible polynominal.
  // Fp(u) / (u² - β) where β = -1
  FP2_NONRESIDUE: [_1n8, _1n8],
  Fp2mulByB: ({ c0, c1 }) => {
    const t0 = Fp.mul(c0, _4n3);
    const t1 = Fp.mul(c1, _4n3);
    return { c0: Fp.sub(t0, t1), c1: Fp.add(t0, t1) };
  },
  // Fp12
  // A cyclotomic group is a subgroup of Fp^n defined by
  //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}
  // The result of any pairing is in a cyclotomic subgroup
  // https://eprint.iacr.org/2009/565.pdf
  Fp12cyclotomicSquare: ({ c0, c1 }) => {
    const { c0: c0c0, c1: c0c1, c2: c0c2 } = c0;
    const { c0: c1c0, c1: c1c1, c2: c1c2 } = c1;
    const { first: t3, second: t4 } = Fp4Square(c0c0, c1c1);
    const { first: t5, second: t6 } = Fp4Square(c1c0, c0c2);
    const { first: t7, second: t8 } = Fp4Square(c0c1, c1c2);
    const t9 = Fp2.mulByNonresidue(t8);
    return {
      c0: Fp6.create({
        c0: Fp2.add(Fp2.mul(Fp2.sub(t3, c0c0), _2n6), t3),
        // 2 * (T3 - c0c0)  + T3
        c1: Fp2.add(Fp2.mul(Fp2.sub(t5, c0c1), _2n6), t5),
        // 2 * (T5 - c0c1)  + T5
        c2: Fp2.add(Fp2.mul(Fp2.sub(t7, c0c2), _2n6), t7)
      }),
      // 2 * (T7 - c0c2)  + T7
      c1: Fp6.create({
        c0: Fp2.add(Fp2.mul(Fp2.add(t9, c1c0), _2n6), t9),
        // 2 * (T9 + c1c0) + T9
        c1: Fp2.add(Fp2.mul(Fp2.add(t4, c1c1), _2n6), t4),
        // 2 * (T4 + c1c1) + T4
        c2: Fp2.add(Fp2.mul(Fp2.add(t6, c1c2), _2n6), t6)
      })
    };
  },
  Fp12cyclotomicExp(num3, n4) {
    let z5 = Fp12.ONE;
    for (let i3 = BLS_X_LEN - 1; i3 >= 0; i3--) {
      z5 = Fp12._cyclotomicSquare(z5);
      if (bitGet(n4, i3))
        z5 = Fp12.mul(z5, num3);
    }
    return z5;
  },
  // https://eprint.iacr.org/2010/354.pdf
  // https://eprint.iacr.org/2009/565.pdf
  Fp12finalExponentiate: (num3) => {
    const x5 = BLS_X;
    const t0 = Fp12.div(Fp12.frobeniusMap(num3, 6), num3);
    const t1 = Fp12.mul(Fp12.frobeniusMap(t0, 2), t0);
    const t2 = Fp12.conjugate(Fp12._cyclotomicExp(t1, x5));
    const t3 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicSquare(t1)), t2);
    const t4 = Fp12.conjugate(Fp12._cyclotomicExp(t3, x5));
    const t5 = Fp12.conjugate(Fp12._cyclotomicExp(t4, x5));
    const t6 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicExp(t5, x5)), Fp12._cyclotomicSquare(t2));
    const t7 = Fp12.conjugate(Fp12._cyclotomicExp(t6, x5));
    const t2_t5_pow_q2 = Fp12.frobeniusMap(Fp12.mul(t2, t5), 2);
    const t4_t1_pow_q3 = Fp12.frobeniusMap(Fp12.mul(t4, t1), 3);
    const t6_t1c_pow_q1 = Fp12.frobeniusMap(Fp12.mul(t6, Fp12.conjugate(t1)), 1);
    const t7_t3c_t1 = Fp12.mul(Fp12.mul(t7, Fp12.conjugate(t3)), t1);
    return Fp12.mul(Fp12.mul(Fp12.mul(t2_t5_pow_q2, t4_t1_pow_q3), t6_t1c_pow_q1), t7_t3c_t1);
  }
});
var Fr2 = Field(BigInt("0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001"));
var isogenyMapG2 = isogenyMap(Fp2, [
  // xNum
  [
    [
      "0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6",
      "0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6"
    ],
    [
      "0x0",
      "0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71a"
    ],
    [
      "0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71e",
      "0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38d"
    ],
    [
      "0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1",
      "0x0"
    ]
  ],
  // xDen
  [
    [
      "0x0",
      "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63"
    ],
    [
      "0xc",
      "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f"
    ],
    ["0x1", "0x0"]
    // LAST 1
  ],
  // yNum
  [
    [
      "0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706",
      "0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706"
    ],
    [
      "0x0",
      "0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97be"
    ],
    [
      "0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71c",
      "0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38f"
    ],
    [
      "0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10",
      "0x0"
    ]
  ],
  // yDen
  [
    [
      "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb",
      "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb"
    ],
    [
      "0x0",
      "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3"
    ],
    [
      "0x12",
      "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99"
    ],
    ["0x1", "0x0"]
    // LAST 1
  ]
].map((i3) => i3.map((pair) => Fp2.fromBigTuple(pair.map(BigInt)))));
var isogenyMapG1 = isogenyMap(Fp, [
  // xNum
  [
    "0x11a05f2b1e833340b809101dd99815856b303e88a2d7005ff2627b56cdb4e2c85610c2d5f2e62d6eaeac1662734649b7",
    "0x17294ed3e943ab2f0588bab22147a81c7c17e75b2f6a8417f565e33c70d1e86b4838f2a6f318c356e834eef1b3cb83bb",
    "0xd54005db97678ec1d1048c5d10a9a1bce032473295983e56878e501ec68e25c958c3e3d2a09729fe0179f9dac9edcb0",
    "0x1778e7166fcc6db74e0609d307e55412d7f5e4656a8dbf25f1b33289f1b330835336e25ce3107193c5b388641d9b6861",
    "0xe99726a3199f4436642b4b3e4118e5499db995a1257fb3f086eeb65982fac18985a286f301e77c451154ce9ac8895d9",
    "0x1630c3250d7313ff01d1201bf7a74ab5db3cb17dd952799b9ed3ab9097e68f90a0870d2dcae73d19cd13c1c66f652983",
    "0xd6ed6553fe44d296a3726c38ae652bfb11586264f0f8ce19008e218f9c86b2a8da25128c1052ecaddd7f225a139ed84",
    "0x17b81e7701abdbe2e8743884d1117e53356de5ab275b4db1a682c62ef0f2753339b7c8f8c8f475af9ccb5618e3f0c88e",
    "0x80d3cf1f9a78fc47b90b33563be990dc43b756ce79f5574a2c596c928c5d1de4fa295f296b74e956d71986a8497e317",
    "0x169b1f8e1bcfa7c42e0c37515d138f22dd2ecb803a0c5c99676314baf4bb1b7fa3190b2edc0327797f241067be390c9e",
    "0x10321da079ce07e272d8ec09d2565b0dfa7dccdde6787f96d50af36003b14866f69b771f8c285decca67df3f1605fb7b",
    "0x6e08c248e260e70bd1e962381edee3d31d79d7e22c837bc23c0bf1bc24c6b68c24b1b80b64d391fa9c8ba2e8ba2d229"
  ],
  // xDen
  [
    "0x8ca8d548cff19ae18b2e62f4bd3fa6f01d5ef4ba35b48ba9c9588617fc8ac62b558d681be343df8993cf9fa40d21b1c",
    "0x12561a5deb559c4348b4711298e536367041e8ca0cf0800c0126c2588c48bf5713daa8846cb026e9e5c8276ec82b3bff",
    "0xb2962fe57a3225e8137e629bff2991f6f89416f5a718cd1fca64e00b11aceacd6a3d0967c94fedcfcc239ba5cb83e19",
    "0x3425581a58ae2fec83aafef7c40eb545b08243f16b1655154cca8abc28d6fd04976d5243eecf5c4130de8938dc62cd8",
    "0x13a8e162022914a80a6f1d5f43e7a07dffdfc759a12062bb8d6b44e833b306da9bd29ba81f35781d539d395b3532a21e",
    "0xe7355f8e4e667b955390f7f0506c6e9395735e9ce9cad4d0a43bcef24b8982f7400d24bc4228f11c02df9a29f6304a5",
    "0x772caacf16936190f3e0c63e0596721570f5799af53a1894e2e073062aede9cea73b3538f0de06cec2574496ee84a3a",
    "0x14a7ac2a9d64a8b230b3f5b074cf01996e7f63c21bca68a81996e1cdf9822c580fa5b9489d11e2d311f7d99bbdcc5a5e",
    "0xa10ecf6ada54f825e920b3dafc7a3cce07f8d1d7161366b74100da67f39883503826692abba43704776ec3a79a1d641",
    "0x95fc13ab9e92ad4476d6e3eb3a56680f682b4ee96f7d03776df533978f31c1593174e4b4b7865002d6384d168ecdd0a",
    "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ],
  // yNum
  [
    "0x90d97c81ba24ee0259d1f094980dcfa11ad138e48a869522b52af6c956543d3cd0c7aee9b3ba3c2be9845719707bb33",
    "0x134996a104ee5811d51036d776fb46831223e96c254f383d0f906343eb67ad34d6c56711962fa8bfe097e75a2e41c696",
    "0xcc786baa966e66f4a384c86a3b49942552e2d658a31ce2c344be4b91400da7d26d521628b00523b8dfe240c72de1f6",
    "0x1f86376e8981c217898751ad8746757d42aa7b90eeb791c09e4a3ec03251cf9de405aba9ec61deca6355c77b0e5f4cb",
    "0x8cc03fdefe0ff135caf4fe2a21529c4195536fbe3ce50b879833fd221351adc2ee7f8dc099040a841b6daecf2e8fedb",
    "0x16603fca40634b6a2211e11db8f0a6a074a7d0d4afadb7bd76505c3d3ad5544e203f6326c95a807299b23ab13633a5f0",
    "0x4ab0b9bcfac1bbcb2c977d027796b3ce75bb8ca2be184cb5231413c4d634f3747a87ac2460f415ec961f8855fe9d6f2",
    "0x987c8d5333ab86fde9926bd2ca6c674170a05bfe3bdd81ffd038da6c26c842642f64550fedfe935a15e4ca31870fb29",
    "0x9fc4018bd96684be88c9e221e4da1bb8f3abd16679dc26c1e8b6e6a1f20cabe69d65201c78607a360370e577bdba587",
    "0xe1bba7a1186bdb5223abde7ada14a23c42a0ca7915af6fe06985e7ed1e4d43b9b3f7055dd4eba6f2bafaaebca731c30",
    "0x19713e47937cd1be0dfd0b8f1d43fb93cd2fcbcb6caf493fd1183e416389e61031bf3a5cce3fbafce813711ad011c132",
    "0x18b46a908f36f6deb918c143fed2edcc523559b8aaf0c2462e6bfe7f911f643249d9cdf41b44d606ce07c8a4d0074d8e",
    "0xb182cac101b9399d155096004f53f447aa7b12a3426b08ec02710e807b4633f06c851c1919211f20d4c04f00b971ef8",
    "0x245a394ad1eca9b72fc00ae7be315dc757b3b080d4c158013e6632d3c40659cc6cf90ad1c232a6442d9d3f5db980133",
    "0x5c129645e44cf1102a159f748c4a3fc5e673d81d7e86568d9ab0f5d396a7ce46ba1049b6579afb7866b1e715475224b",
    "0x15e6be4e990f03ce4ea50b3b42df2eb5cb181d8f84965a3957add4fa95af01b2b665027efec01c7704b456be69c8b604"
  ],
  // yDen
  [
    "0x16112c4c3a9c98b252181140fad0eae9601a6de578980be6eec3232b5be72e7a07f3688ef60c206d01479253b03663c1",
    "0x1962d75c2381201e1a0cbd6c43c348b885c84ff731c4d59ca4a10356f453e01f78a4260763529e3532f6102c2e49a03d",
    "0x58df3306640da276faaae7d6e8eb15778c4855551ae7f310c35a5dd279cd2eca6757cd636f96f891e2538b53dbf67f2",
    "0x16b7d288798e5395f20d23bf89edb4d1d115c5dbddbcd30e123da489e726af41727364f2c28297ada8d26d98445f5416",
    "0xbe0e079545f43e4b00cc912f8228ddcc6d19c9f0f69bbb0542eda0fc9dec916a20b15dc0fd2ededda39142311a5001d",
    "0x8d9e5297186db2d9fb266eaac783182b70152c65550d881c5ecd87b6f0f5a6449f38db9dfa9cce202c6477faaf9b7ac",
    "0x166007c08a99db2fc3ba8734ace9824b5eecfdfa8d0cf8ef5dd365bc400a0051d5fa9c01a58b1fb93d1a1399126a775c",
    "0x16a3ef08be3ea7ea03bcddfabba6ff6ee5a4375efa1f4fd7feb34fd206357132b920f5b00801dee460ee415a15812ed9",
    "0x1866c8ed336c61231a1be54fd1d74cc4f9fb0ce4c6af5920abc5750c4bf39b4852cfe2f7bb9248836b233d9d55535d4a",
    "0x167a55cda70a6e1cea820597d94a84903216f763e13d87bb5308592e7ea7d4fbc7385ea3d529b35e346ef48bb8913f55",
    "0x4d2f259eea405bd48f010a01ad2911d9c6dd039bb61a6290e591b36e636a5c871a5c29f4f83060400f8b49cba8f6aa8",
    "0xaccbb67481d033ff5852c1e48c50c477f94ff8aefce42d28c0f9a88cea7913516f968986f7ebbea9684b529e2561092",
    "0xad6b9514c767fe3c3613144b45f1496543346d98adf02267d5ceef9a00d9b8693000763e3b90ac11e99b138573345cc",
    "0x2660400eb2e4f3b628bdd0d53cd76f2bf565b94e72927c1cb748df27942480e420517bd8714cc80d1fadc1326ed06f7",
    "0xe0fa1d816ddc03e6b24255e0d7819c171c40f65e273b853324efcd6356caa205ca2f570f13497804415473a1d634b8f",
    "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ]
].map((i3) => i3.map((j6) => BigInt(j6))));
var G2_SWU = mapToCurveSimpleSWU(Fp2, {
  A: Fp2.create({ c0: Fp.create(_0n8), c1: Fp.create(BigInt(240)) }),
  // A' = 240 * I
  B: Fp2.create({ c0: Fp.create(BigInt(1012)), c1: Fp.create(BigInt(1012)) }),
  // B' = 1012 * (1 + I)
  Z: Fp2.create({ c0: Fp.create(BigInt(-2)), c1: Fp.create(BigInt(-1)) })
  // Z: -(2 + I)
});
var G1_SWU = mapToCurveSimpleSWU(Fp, {
  A: Fp.create(BigInt("0x144698a3b8e9433d693a02c96d4982b0ea985383ee66a8d8e8981aefd881ac98936f8da0e0f97f5cf428082d584c1d")),
  B: Fp.create(BigInt("0x12e2908d11688030018b12e8753eee3b2016c1f0f24f4070a0b9c14fcef35ef55a23215a316ceaa5d1cc48e98e172be0")),
  Z: Fp.create(BigInt(11))
});
var { G2psi, G2psi2 } = psiFrobenius(Fp, Fp2, Fp2.div(Fp2.ONE, Fp2.NONRESIDUE));
var htfDefaults = Object.freeze({
  // DST: a domain separation tag
  // defined in section 2.2.5
  // Use utils.getDSTLabel(), utils.setDSTLabel(value)
  DST: "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_",
  encodeDST: "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_",
  // p: the characteristic of F
  //    where F is a finite field of characteristic p and order q = p^m
  p: Fp.ORDER,
  // m: the extension degree of F, m >= 1
  //     where F is a finite field of characteristic p and order q = p^m
  m: 2,
  // k: the target security level for the suite in bits
  // defined in section 5.1
  k: 128,
  // option to use a message that has already been processed by
  // expand_message_xmd
  expand: "xmd",
  // Hash functions for: expand_message_xmd is appropriate for use with a
  // wide range of hash functions, including SHA-2, SHA-3, BLAKE2, and others.
  // BBS+ uses blake2: https://github.com/hyperledger/aries-framework-go/issues/2247
  hash: sha256
});
var COMPRESSED_ZERO = setMask(Fp.toBytes(_0n8), { infinity: true, compressed: true });
function parseMask(bytes) {
  bytes = bytes.slice();
  const mask = bytes[0] & 224;
  const compressed = !!(mask >> 7 & 1);
  const infinity = !!(mask >> 6 & 1);
  const sort = !!(mask >> 5 & 1);
  bytes[0] &= 31;
  return { compressed, infinity, sort, value: bytes };
}
function setMask(bytes, mask) {
  if (bytes[0] & 224)
    throw new Error("setMask: non-empty mask");
  if (mask.compressed)
    bytes[0] |= 128;
  if (mask.infinity)
    bytes[0] |= 64;
  if (mask.sort)
    bytes[0] |= 32;
  return bytes;
}
function signatureG1ToRawBytes(point) {
  point.assertValidity();
  const isZero = point.equals(bls12_381.G1.ProjectivePoint.ZERO);
  const { x: x5, y: y4 } = point.toAffine();
  if (isZero)
    return COMPRESSED_ZERO.slice();
  const P6 = Fp.ORDER;
  const sort = Boolean(y4 * _2n6 / P6);
  return setMask(numberToBytesBE(x5, Fp.BYTES), { compressed: true, sort });
}
function signatureG2ToRawBytes(point) {
  point.assertValidity();
  const len = Fp.BYTES;
  if (point.equals(bls12_381.G2.ProjectivePoint.ZERO))
    return concatBytes2(COMPRESSED_ZERO, numberToBytesBE(_0n8, len));
  const { x: x5, y: y4 } = point.toAffine();
  const { re: x0, im: x1 } = Fp2.reim(x5);
  const { re: y0, im: y1 } = Fp2.reim(y4);
  const tmp = y1 > _0n8 ? y1 * _2n6 : y0 * _2n6;
  const sort = Boolean(tmp / Fp.ORDER & _1n8);
  const z22 = x0;
  return concatBytes2(setMask(numberToBytesBE(x1, len), { sort, compressed: true }), numberToBytesBE(z22, len));
}
var bls12_381 = bls({
  // Fields
  fields: {
    Fp,
    Fp2,
    Fp6,
    Fp12,
    Fr: Fr2
  },
  // G1 is the order-q subgroup of E1(Fp) : y² = x³ + 4, #E1(Fp) = h1q, where
  // characteristic; z + (z⁴ - z² + 1)(z - 1)²/3
  G1: {
    Fp,
    // cofactor; (z - 1)²/3
    h: BigInt("0x396c8c005555e1568c00aaab0000aaab"),
    // generator's coordinates
    // x = 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507
    // y = 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569
    Gx: BigInt("0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb"),
    Gy: BigInt("0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1"),
    a: Fp.ZERO,
    b: _4n3,
    htfDefaults: { ...htfDefaults, m: 1, DST: "BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_NUL_" },
    wrapPrivateKey: true,
    allowInfinityPoint: true,
    // Checks is the point resides in prime-order subgroup.
    // point.isTorsionFree() should return true for valid points
    // It returns false for shitty points.
    // https://eprint.iacr.org/2021/1130.pdf
    isTorsionFree: (c6, point) => {
      const beta = BigInt("0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe");
      const phi = new c6(Fp.mul(point.px, beta), point.py, point.pz);
      const xP = point.multiplyUnsafe(BLS_X).negate();
      const u2P = xP.multiplyUnsafe(BLS_X);
      return u2P.equals(phi);
    },
    // Clear cofactor of G1
    // https://eprint.iacr.org/2019/403
    clearCofactor: (_c2, point) => {
      return point.multiplyUnsafe(BLS_X).add(point);
    },
    mapToCurve: (scalars) => {
      const { x: x5, y: y4 } = G1_SWU(Fp.create(scalars[0]));
      return isogenyMapG1(x5, y4);
    },
    fromBytes: (bytes) => {
      const { compressed, infinity, sort, value } = parseMask(bytes);
      if (value.length === 48 && compressed) {
        const P6 = Fp.ORDER;
        const compressedValue = bytesToNumberBE(value);
        const x5 = Fp.create(compressedValue & Fp.MASK);
        if (infinity) {
          if (x5 !== _0n8)
            throw new Error("G1: non-empty compressed point at infinity");
          return { x: _0n8, y: _0n8 };
        }
        const right = Fp.add(Fp.pow(x5, _3n5), Fp.create(bls12_381.params.G1b));
        let y4 = Fp.sqrt(right);
        if (!y4)
          throw new Error("invalid compressed G1 point");
        if (y4 * _2n6 / P6 !== BigInt(sort))
          y4 = Fp.neg(y4);
        return { x: Fp.create(x5), y: Fp.create(y4) };
      } else if (value.length === 96 && !compressed) {
        const x5 = bytesToNumberBE(value.subarray(0, Fp.BYTES));
        const y4 = bytesToNumberBE(value.subarray(Fp.BYTES));
        if (infinity) {
          if (x5 !== _0n8 || y4 !== _0n8)
            throw new Error("G1: non-empty point at infinity");
          return bls12_381.G1.ProjectivePoint.ZERO.toAffine();
        }
        return { x: Fp.create(x5), y: Fp.create(y4) };
      } else {
        throw new Error("invalid point G1, expected 48/96 bytes");
      }
    },
    toBytes: (c6, point, isCompressed) => {
      const isZero = point.equals(c6.ZERO);
      const { x: x5, y: y4 } = point.toAffine();
      if (isCompressed) {
        if (isZero)
          return COMPRESSED_ZERO.slice();
        const P6 = Fp.ORDER;
        const sort = Boolean(y4 * _2n6 / P6);
        return setMask(numberToBytesBE(x5, Fp.BYTES), { compressed: true, sort });
      } else {
        if (isZero) {
          const x6 = concatBytes2(new Uint8Array([64]), new Uint8Array(2 * Fp.BYTES - 1));
          return x6;
        } else {
          return concatBytes2(numberToBytesBE(x5, Fp.BYTES), numberToBytesBE(y4, Fp.BYTES));
        }
      }
    },
    ShortSignature: {
      fromHex(hex2) {
        const { infinity, sort, value } = parseMask(ensureBytes("signatureHex", hex2, 48));
        const P6 = Fp.ORDER;
        const compressedValue = bytesToNumberBE(value);
        if (infinity)
          return bls12_381.G1.ProjectivePoint.ZERO;
        const x5 = Fp.create(compressedValue & Fp.MASK);
        const right = Fp.add(Fp.pow(x5, _3n5), Fp.create(bls12_381.params.G1b));
        let y4 = Fp.sqrt(right);
        if (!y4)
          throw new Error("invalid compressed G1 point");
        const aflag = BigInt(sort);
        if (y4 * _2n6 / P6 !== aflag)
          y4 = Fp.neg(y4);
        const point = bls12_381.G1.ProjectivePoint.fromAffine({ x: x5, y: y4 });
        point.assertValidity();
        return point;
      },
      toRawBytes(point) {
        return signatureG1ToRawBytes(point);
      },
      toHex(point) {
        return bytesToHex2(signatureG1ToRawBytes(point));
      }
    }
  },
  // G2 is the order-q subgroup of E2(Fp²) : y² = x³+4(1+√−1),
  // where Fp2 is Fp[√−1]/(x2+1). #E2(Fp2 ) = h2q, where
  // G² - 1
  // h2q
  G2: {
    Fp: Fp2,
    // cofactor
    h: BigInt("0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5"),
    Gx: Fp2.fromBigTuple([
      BigInt("0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8"),
      BigInt("0x13e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e")
    ]),
    // y =
    // 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582,
    // 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905
    Gy: Fp2.fromBigTuple([
      BigInt("0x0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801"),
      BigInt("0x0606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be")
    ]),
    a: Fp2.ZERO,
    b: Fp2.fromBigTuple([_4n3, _4n3]),
    hEff: BigInt("0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551"),
    htfDefaults: { ...htfDefaults },
    wrapPrivateKey: true,
    allowInfinityPoint: true,
    mapToCurve: (scalars) => {
      const { x: x5, y: y4 } = G2_SWU(Fp2.fromBigTuple(scalars));
      return isogenyMapG2(x5, y4);
    },
    // Checks is the point resides in prime-order subgroup.
    // point.isTorsionFree() should return true for valid points
    // It returns false for shitty points.
    // https://eprint.iacr.org/2021/1130.pdf
    // Older version: https://eprint.iacr.org/2019/814.pdf
    isTorsionFree: (c6, P6) => {
      return P6.multiplyUnsafe(BLS_X).negate().equals(G2psi(c6, P6));
    },
    // Maps the point into the prime-order subgroup G2.
    // clear_cofactor_bls12381_g2 from RFC 9380.
    // https://eprint.iacr.org/2017/419.pdf
    // prettier-ignore
    clearCofactor: (c6, P6) => {
      const x5 = BLS_X;
      let t1 = P6.multiplyUnsafe(x5).negate();
      let t2 = G2psi(c6, P6);
      let t3 = P6.double();
      t3 = G2psi2(c6, t3);
      t3 = t3.subtract(t2);
      t2 = t1.add(t2);
      t2 = t2.multiplyUnsafe(x5).negate();
      t3 = t3.add(t2);
      t3 = t3.subtract(t1);
      const Q4 = t3.subtract(P6);
      return Q4;
    },
    fromBytes: (bytes) => {
      const { compressed, infinity, sort, value } = parseMask(bytes);
      if (!compressed && !infinity && sort || // 00100000
      !compressed && infinity && sort || // 01100000
      sort && infinity && compressed) {
        throw new Error("invalid encoding flag: " + (bytes[0] & 224));
      }
      const L3 = Fp.BYTES;
      const slc = (b4, from11, to4) => bytesToNumberBE(b4.slice(from11, to4));
      if (value.length === 96 && compressed) {
        const b4 = bls12_381.params.G2b;
        const P6 = Fp.ORDER;
        if (infinity) {
          if (value.reduce((p4, c6) => p4 !== 0 ? c6 + 1 : c6, 0) > 0) {
            throw new Error("invalid compressed G2 point");
          }
          return { x: Fp2.ZERO, y: Fp2.ZERO };
        }
        const x_1 = slc(value, 0, L3);
        const x_0 = slc(value, L3, 2 * L3);
        const x5 = Fp2.create({ c0: Fp.create(x_0), c1: Fp.create(x_1) });
        const right = Fp2.add(Fp2.pow(x5, _3n5), b4);
        let y4 = Fp2.sqrt(right);
        const Y_bit = y4.c1 === _0n8 ? y4.c0 * _2n6 / P6 : y4.c1 * _2n6 / P6 ? _1n8 : _0n8;
        y4 = sort && Y_bit > 0 ? y4 : Fp2.neg(y4);
        return { x: x5, y: y4 };
      } else if (value.length === 192 && !compressed) {
        if (infinity) {
          if (value.reduce((p4, c6) => p4 !== 0 ? c6 + 1 : c6, 0) > 0) {
            throw new Error("invalid uncompressed G2 point");
          }
          return { x: Fp2.ZERO, y: Fp2.ZERO };
        }
        const x1 = slc(value, 0, L3);
        const x0 = slc(value, L3, 2 * L3);
        const y1 = slc(value, 2 * L3, 3 * L3);
        const y0 = slc(value, 3 * L3, 4 * L3);
        return { x: Fp2.fromBigTuple([x0, x1]), y: Fp2.fromBigTuple([y0, y1]) };
      } else {
        throw new Error("invalid point G2, expected 96/192 bytes");
      }
    },
    toBytes: (c6, point, isCompressed) => {
      const { BYTES: len, ORDER: P6 } = Fp;
      const isZero = point.equals(c6.ZERO);
      const { x: x5, y: y4 } = point.toAffine();
      if (isCompressed) {
        if (isZero)
          return concatBytes2(COMPRESSED_ZERO, numberToBytesBE(_0n8, len));
        const flag = Boolean(y4.c1 === _0n8 ? y4.c0 * _2n6 / P6 : y4.c1 * _2n6 / P6);
        return concatBytes2(setMask(numberToBytesBE(x5.c1, len), { compressed: true, sort: flag }), numberToBytesBE(x5.c0, len));
      } else {
        if (isZero)
          return concatBytes2(new Uint8Array([64]), new Uint8Array(4 * len - 1));
        const { re: x0, im: x1 } = Fp2.reim(x5);
        const { re: y0, im: y1 } = Fp2.reim(y4);
        return concatBytes2(numberToBytesBE(x1, len), numberToBytesBE(x0, len), numberToBytesBE(y1, len), numberToBytesBE(y0, len));
      }
    },
    Signature: {
      // TODO: Optimize, it's very slow because of sqrt.
      fromHex(hex2) {
        const { infinity, sort, value } = parseMask(ensureBytes("signatureHex", hex2));
        const P6 = Fp.ORDER;
        const half = value.length / 2;
        if (half !== 48 && half !== 96)
          throw new Error("invalid compressed signature length, must be 96 or 192");
        const z1 = bytesToNumberBE(value.slice(0, half));
        const z22 = bytesToNumberBE(value.slice(half));
        if (infinity)
          return bls12_381.G2.ProjectivePoint.ZERO;
        const x1 = Fp.create(z1 & Fp.MASK);
        const x22 = Fp.create(z22);
        const x5 = Fp2.create({ c0: x22, c1: x1 });
        const y22 = Fp2.add(Fp2.pow(x5, _3n5), bls12_381.params.G2b);
        let y4 = Fp2.sqrt(y22);
        if (!y4)
          throw new Error("Failed to find a square root");
        const { re: y0, im: y1 } = Fp2.reim(y4);
        const aflag1 = BigInt(sort);
        const isGreater = y1 > _0n8 && y1 * _2n6 / P6 !== aflag1;
        const isZero = y1 === _0n8 && y0 * _2n6 / P6 !== aflag1;
        if (isGreater || isZero)
          y4 = Fp2.neg(y4);
        const point = bls12_381.G2.ProjectivePoint.fromAffine({ x: x5, y: y4 });
        point.assertValidity();
        return point;
      },
      toRawBytes(point) {
        return signatureG2ToRawBytes(point);
      },
      toHex(point) {
        return bytesToHex2(signatureG2ToRawBytes(point));
      }
    }
  },
  params: {
    ateLoopSize: BLS_X,
    // The BLS parameter x for BLS12-381
    r: Fr2.ORDER,
    // order; z⁴ − z² + 1; CURVE.n from other curves
    xNegative: true,
    twistType: "multiplicative"
  },
  htfDefaults,
  hash: sha256,
  randomBytes
});

// node_modules/ox/node_modules/@noble/curves/esm/abstract/edwards.js
var _0n9 = BigInt(0);
var _1n9 = BigInt(1);
var _2n7 = BigInt(2);
var _8n2 = BigInt(8);
var VERIFY_DEFAULT = { zip215: true };
function validateOpts2(curve) {
  const opts = validateBasic(curve);
  validateObject(curve, {
    hash: "function",
    a: "bigint",
    d: "bigint",
    randomBytes: "function"
  }, {
    adjustScalarBytes: "function",
    domain: "function",
    uvRatio: "function",
    mapToCurve: "function"
  });
  return Object.freeze({ ...opts });
}
function twistedEdwards(curveDef) {
  const CURVE = validateOpts2(curveDef);
  const { Fp: Fp4, n: CURVE_ORDER, prehash, hash: cHash, randomBytes: randomBytes2, nByteLength, h: cofactor } = CURVE;
  const MASK = _2n7 << BigInt(nByteLength * 8) - _1n9;
  const modP2 = Fp4.create;
  const Fn4 = Field(CURVE.n, CURVE.nBitLength);
  function isEdValidXY(x5, y4) {
    const x22 = Fp4.sqr(x5);
    const y22 = Fp4.sqr(y4);
    const left = Fp4.add(Fp4.mul(CURVE.a, x22), y22);
    const right = Fp4.add(Fp4.ONE, Fp4.mul(CURVE.d, Fp4.mul(x22, y22)));
    return Fp4.eql(left, right);
  }
  if (!isEdValidXY(CURVE.Gx, CURVE.Gy))
    throw new Error("bad curve params: generator point");
  const uvRatio2 = CURVE.uvRatio || ((u2, v6) => {
    try {
      return { isValid: true, value: Fp4.sqrt(u2 * Fp4.inv(v6)) };
    } catch (e2) {
      return { isValid: false, value: _0n9 };
    }
  });
  const adjustScalarBytes2 = CURVE.adjustScalarBytes || ((bytes) => bytes);
  const domain = CURVE.domain || ((data, ctx, phflag) => {
    abool("phflag", phflag);
    if (ctx.length || phflag)
      throw new Error("Contexts/pre-hash are not supported");
    return data;
  });
  function aCoordinate(title, n4, banZero = false) {
    const min = banZero ? _1n9 : _0n9;
    aInRange("coordinate " + title, n4, min, MASK);
  }
  function aextpoint(other) {
    if (!(other instanceof Point3))
      throw new Error("ExtendedPoint expected");
  }
  const toAffineMemo = memoized((p4, iz) => {
    const { ex: x5, ey: y4, ez: z5 } = p4;
    const is0 = p4.is0();
    if (iz == null)
      iz = is0 ? _8n2 : Fp4.inv(z5);
    const ax = modP2(x5 * iz);
    const ay = modP2(y4 * iz);
    const zz = modP2(z5 * iz);
    if (is0)
      return { x: _0n9, y: _1n9 };
    if (zz !== _1n9)
      throw new Error("invZ was invalid");
    return { x: ax, y: ay };
  });
  const assertValidMemo = memoized((p4) => {
    const { a: a3, d: d7 } = CURVE;
    if (p4.is0())
      throw new Error("bad point: ZERO");
    const { ex: X4, ey: Y3, ez: Z2, et: T4 } = p4;
    const X22 = modP2(X4 * X4);
    const Y22 = modP2(Y3 * Y3);
    const Z22 = modP2(Z2 * Z2);
    const Z4 = modP2(Z22 * Z22);
    const aX2 = modP2(X22 * a3);
    const left = modP2(Z22 * modP2(aX2 + Y22));
    const right = modP2(Z4 + modP2(d7 * modP2(X22 * Y22)));
    if (left !== right)
      throw new Error("bad point: equation left != right (1)");
    const XY = modP2(X4 * Y3);
    const ZT = modP2(Z2 * T4);
    if (XY !== ZT)
      throw new Error("bad point: equation left != right (2)");
    return true;
  });
  class Point3 {
    constructor(ex, ey, ez, et4) {
      aCoordinate("x", ex);
      aCoordinate("y", ey);
      aCoordinate("z", ez, true);
      aCoordinate("t", et4);
      this.ex = ex;
      this.ey = ey;
      this.ez = ez;
      this.et = et4;
      Object.freeze(this);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(p4) {
      if (p4 instanceof Point3)
        throw new Error("extended point not allowed");
      const { x: x5, y: y4 } = p4 || {};
      aCoordinate("x", x5);
      aCoordinate("y", y4);
      return new Point3(x5, y4, _1n9, modP2(x5 * y4));
    }
    static normalizeZ(points) {
      const toInv = FpInvertBatch(Fp4, points.map((p4) => p4.ez));
      return points.map((p4, i3) => p4.toAffine(toInv[i3])).map(Point3.fromAffine);
    }
    // Multiscalar Multiplication
    static msm(points, scalars) {
      return pippenger(Point3, Fn4, points, scalars);
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      wnaf.setWindowSize(this, windowSize);
    }
    // Not required for fromHex(), which always creates valid points.
    // Could be useful for fromAffine().
    assertValidity() {
      assertValidMemo(this);
    }
    // Compare one point to another.
    equals(other) {
      aextpoint(other);
      const { ex: X1, ey: Y1, ez: Z1 } = this;
      const { ex: X22, ey: Y22, ez: Z2 } = other;
      const X1Z2 = modP2(X1 * Z2);
      const X2Z1 = modP2(X22 * Z1);
      const Y1Z2 = modP2(Y1 * Z2);
      const Y2Z1 = modP2(Y22 * Z1);
      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
    }
    is0() {
      return this.equals(Point3.ZERO);
    }
    negate() {
      return new Point3(modP2(-this.ex), this.ey, this.ez, modP2(-this.et));
    }
    // Fast algo for doubling Extended Point.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
    // Cost: 4M + 4S + 1*a + 6add + 1*2.
    double() {
      const { a: a3 } = CURVE;
      const { ex: X1, ey: Y1, ez: Z1 } = this;
      const A3 = modP2(X1 * X1);
      const B2 = modP2(Y1 * Y1);
      const C5 = modP2(_2n7 * modP2(Z1 * Z1));
      const D3 = modP2(a3 * A3);
      const x1y1 = X1 + Y1;
      const E4 = modP2(modP2(x1y1 * x1y1) - A3 - B2);
      const G6 = D3 + B2;
      const F2 = G6 - C5;
      const H3 = D3 - B2;
      const X32 = modP2(E4 * F2);
      const Y3 = modP2(G6 * H3);
      const T32 = modP2(E4 * H3);
      const Z3 = modP2(F2 * G6);
      return new Point3(X32, Y3, Z3, T32);
    }
    // Fast algo for adding 2 Extended Points.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
    // Cost: 9M + 1*a + 1*d + 7add.
    add(other) {
      aextpoint(other);
      const { a: a3, d: d7 } = CURVE;
      const { ex: X1, ey: Y1, ez: Z1, et: T12 } = this;
      const { ex: X22, ey: Y22, ez: Z2, et: T22 } = other;
      const A3 = modP2(X1 * X22);
      const B2 = modP2(Y1 * Y22);
      const C5 = modP2(T12 * d7 * T22);
      const D3 = modP2(Z1 * Z2);
      const E4 = modP2((X1 + Y1) * (X22 + Y22) - A3 - B2);
      const F2 = D3 - C5;
      const G6 = D3 + C5;
      const H3 = modP2(B2 - a3 * A3);
      const X32 = modP2(E4 * F2);
      const Y3 = modP2(G6 * H3);
      const T32 = modP2(E4 * H3);
      const Z3 = modP2(F2 * G6);
      return new Point3(X32, Y3, Z3, T32);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    wNAF(n4) {
      return wnaf.wNAFCached(this, n4, Point3.normalizeZ);
    }
    // Constant-time multiplication.
    multiply(scalar) {
      const n4 = scalar;
      aInRange("scalar", n4, _1n9, CURVE_ORDER);
      const { p: p4, f: f6 } = this.wNAF(n4);
      return Point3.normalizeZ([p4, f6])[0];
    }
    // Non-constant-time multiplication. Uses double-and-add algorithm.
    // It's faster, but should only be used when you don't care about
    // an exposed private key e.g. sig verification.
    // Does NOT allow scalars higher than CURVE.n.
    // Accepts optional accumulator to merge with multiply (important for sparse scalars)
    multiplyUnsafe(scalar, acc = Point3.ZERO) {
      const n4 = scalar;
      aInRange("scalar", n4, _0n9, CURVE_ORDER);
      if (n4 === _0n9)
        return I2;
      if (this.is0() || n4 === _1n9)
        return this;
      return wnaf.wNAFCachedUnsafe(this, n4, Point3.normalizeZ, acc);
    }
    // Checks if point is of small order.
    // If you add something to small order point, you will have "dirty"
    // point with torsion component.
    // Multiplies point by cofactor and checks if the result is 0.
    isSmallOrder() {
      return this.multiplyUnsafe(cofactor).is0();
    }
    // Multiplies point by curve order and checks if the result is 0.
    // Returns `false` is the point is dirty.
    isTorsionFree() {
      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();
    }
    // Converts Extended point to default (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    toAffine(iz) {
      return toAffineMemo(this, iz);
    }
    clearCofactor() {
      const { h: cofactor2 } = CURVE;
      if (cofactor2 === _1n9)
        return this;
      return this.multiplyUnsafe(cofactor2);
    }
    // Converts hash string or Uint8Array to Point.
    // Uses algo from RFC8032 5.1.3.
    static fromHex(hex2, zip215 = false) {
      const { d: d7, a: a3 } = CURVE;
      const len = Fp4.BYTES;
      hex2 = ensureBytes("pointHex", hex2, len);
      abool("zip215", zip215);
      const normed = hex2.slice();
      const lastByte = hex2[len - 1];
      normed[len - 1] = lastByte & ~128;
      const y4 = bytesToNumberLE(normed);
      const max = zip215 ? MASK : Fp4.ORDER;
      aInRange("pointHex.y", y4, _0n9, max);
      const y22 = modP2(y4 * y4);
      const u2 = modP2(y22 - _1n9);
      const v6 = modP2(d7 * y22 - a3);
      let { isValid, value: x5 } = uvRatio2(u2, v6);
      if (!isValid)
        throw new Error("Point.fromHex: invalid y coordinate");
      const isXOdd = (x5 & _1n9) === _1n9;
      const isLastByteOdd = (lastByte & 128) !== 0;
      if (!zip215 && x5 === _0n9 && isLastByteOdd)
        throw new Error("Point.fromHex: x=0 and x_0=1");
      if (isLastByteOdd !== isXOdd)
        x5 = modP2(-x5);
      return Point3.fromAffine({ x: x5, y: y4 });
    }
    static fromPrivateKey(privKey) {
      const { scalar } = getPrivateScalar(privKey);
      return G5.multiply(scalar);
    }
    toRawBytes() {
      const { x: x5, y: y4 } = this.toAffine();
      const bytes = numberToBytesLE(y4, Fp4.BYTES);
      bytes[bytes.length - 1] |= x5 & _1n9 ? 128 : 0;
      return bytes;
    }
    toHex() {
      return bytesToHex2(this.toRawBytes());
    }
  }
  Point3.BASE = new Point3(CURVE.Gx, CURVE.Gy, _1n9, modP2(CURVE.Gx * CURVE.Gy));
  Point3.ZERO = new Point3(_0n9, _1n9, _1n9, _0n9);
  const { BASE: G5, ZERO: I2 } = Point3;
  const wnaf = wNAF(Point3, nByteLength * 8);
  function modN2(a3) {
    return mod(a3, CURVE_ORDER);
  }
  function modN_LE(hash) {
    return modN2(bytesToNumberLE(hash));
  }
  function getPrivateScalar(key) {
    const len = Fp4.BYTES;
    key = ensureBytes("private key", key, len);
    const hashed = ensureBytes("hashed private key", cHash(key), 2 * len);
    const head = adjustScalarBytes2(hashed.slice(0, len));
    const prefix = hashed.slice(len, 2 * len);
    const scalar = modN_LE(head);
    return { head, prefix, scalar };
  }
  function getExtendedPublicKey(key) {
    const { head, prefix, scalar } = getPrivateScalar(key);
    const point = G5.multiply(scalar);
    const pointBytes = point.toRawBytes();
    return { head, prefix, scalar, point, pointBytes };
  }
  function getPublicKey2(privKey) {
    return getExtendedPublicKey(privKey).pointBytes;
  }
  function hashDomainToScalar(context = Uint8Array.of(), ...msgs) {
    const msg = concatBytes2(...msgs);
    return modN_LE(cHash(domain(msg, ensureBytes("context", context), !!prehash)));
  }
  function sign2(msg, privKey, options = {}) {
    msg = ensureBytes("message", msg);
    if (prehash)
      msg = prehash(msg);
    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);
    const r3 = hashDomainToScalar(options.context, prefix, msg);
    const R4 = G5.multiply(r3).toRawBytes();
    const k4 = hashDomainToScalar(options.context, R4, pointBytes, msg);
    const s2 = modN2(r3 + k4 * scalar);
    aInRange("signature.s", s2, _0n9, CURVE_ORDER);
    const res = concatBytes2(R4, numberToBytesLE(s2, Fp4.BYTES));
    return ensureBytes("result", res, Fp4.BYTES * 2);
  }
  const verifyOpts = VERIFY_DEFAULT;
  function verify3(sig, msg, publicKey, options = verifyOpts) {
    const { context, zip215 } = options;
    const len = Fp4.BYTES;
    sig = ensureBytes("signature", sig, 2 * len);
    msg = ensureBytes("message", msg);
    publicKey = ensureBytes("publicKey", publicKey, len);
    if (zip215 !== void 0)
      abool("zip215", zip215);
    if (prehash)
      msg = prehash(msg);
    const s2 = bytesToNumberLE(sig.slice(len, 2 * len));
    let A3, R4, SB;
    try {
      A3 = Point3.fromHex(publicKey, zip215);
      R4 = Point3.fromHex(sig.slice(0, len), zip215);
      SB = G5.multiplyUnsafe(s2);
    } catch (error) {
      return false;
    }
    if (!zip215 && A3.isSmallOrder())
      return false;
    const k4 = hashDomainToScalar(context, R4.toRawBytes(), A3.toRawBytes(), msg);
    const RkA = R4.add(A3.multiplyUnsafe(k4));
    return RkA.subtract(SB).clearCofactor().equals(Point3.ZERO);
  }
  G5._setWindowSize(8);
  const utils2 = {
    getExtendedPublicKey,
    /** ed25519 priv keys are uniform 32b. No need to check for modulo bias, like in secp256k1. */
    randomPrivateKey: () => randomBytes2(Fp4.BYTES),
    /**
     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
     * values. This slows down first getPublicKey() by milliseconds (see Speed section),
     * but allows to speed-up subsequent getPublicKey() calls up to 20x.
     * @param windowSize 2, 4, 8, 16
     */
    precompute(windowSize = 8, point = Point3.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  return {
    CURVE,
    getPublicKey: getPublicKey2,
    sign: sign2,
    verify: verify3,
    ExtendedPoint: Point3,
    utils: utils2
  };
}

// node_modules/ox/node_modules/@noble/curves/esm/abstract/montgomery.js
var _0n10 = BigInt(0);
var _1n10 = BigInt(1);
var _2n8 = BigInt(2);
function validateOpts3(curve) {
  validateObject(curve, {
    adjustScalarBytes: "function",
    powPminus2: "function"
  });
  return Object.freeze({ ...curve });
}
function montgomery(curveDef) {
  const CURVE = validateOpts3(curveDef);
  const { P: P6, type, adjustScalarBytes: adjustScalarBytes2, powPminus2 } = CURVE;
  const is25519 = type === "x25519";
  if (!is25519 && type !== "x448")
    throw new Error("invalid type");
  const montgomeryBits = is25519 ? 255 : 448;
  const fieldLen = is25519 ? 32 : 56;
  const Gu = is25519 ? BigInt(9) : BigInt(5);
  const a24 = is25519 ? BigInt(121665) : BigInt(39081);
  const minScalar = is25519 ? _2n8 ** BigInt(254) : _2n8 ** BigInt(447);
  const maxAdded = is25519 ? BigInt(8) * _2n8 ** BigInt(251) - _1n10 : BigInt(4) * _2n8 ** BigInt(445) - _1n10;
  const maxScalar = minScalar + maxAdded + _1n10;
  const modP2 = (n4) => mod(n4, P6);
  const GuBytes = encodeU(Gu);
  function encodeU(u2) {
    return numberToBytesLE(modP2(u2), fieldLen);
  }
  function decodeU(u2) {
    const _u = ensureBytes("u coordinate", u2, fieldLen);
    if (is25519)
      _u[31] &= 127;
    return modP2(bytesToNumberLE(_u));
  }
  function decodeScalar(scalar) {
    return bytesToNumberLE(adjustScalarBytes2(ensureBytes("scalar", scalar, fieldLen)));
  }
  function scalarMult(scalar, u2) {
    const pu2 = montgomeryLadder(decodeU(u2), decodeScalar(scalar));
    if (pu2 === _0n10)
      throw new Error("invalid private or public key received");
    return encodeU(pu2);
  }
  function scalarMultBase(scalar) {
    return scalarMult(scalar, GuBytes);
  }
  function cswap(swap, x_2, x_3) {
    const dummy = modP2(swap * (x_2 - x_3));
    x_2 = modP2(x_2 - dummy);
    x_3 = modP2(x_3 + dummy);
    return { x_2, x_3 };
  }
  function montgomeryLadder(u2, scalar) {
    aInRange("u", u2, _0n10, P6);
    aInRange("scalar", scalar, minScalar, maxScalar);
    const k4 = scalar;
    const x_1 = u2;
    let x_2 = _1n10;
    let z_2 = _0n10;
    let x_3 = u2;
    let z_3 = _1n10;
    let swap = _0n10;
    for (let t = BigInt(montgomeryBits - 1); t >= _0n10; t--) {
      const k_t = k4 >> t & _1n10;
      swap ^= k_t;
      ({ x_2, x_3 } = cswap(swap, x_2, x_3));
      ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));
      swap = k_t;
      const A3 = x_2 + z_2;
      const AA = modP2(A3 * A3);
      const B2 = x_2 - z_2;
      const BB = modP2(B2 * B2);
      const E4 = AA - BB;
      const C5 = x_3 + z_3;
      const D3 = x_3 - z_3;
      const DA = modP2(D3 * A3);
      const CB = modP2(C5 * B2);
      const dacb = DA + CB;
      const da_cb = DA - CB;
      x_3 = modP2(dacb * dacb);
      z_3 = modP2(x_1 * modP2(da_cb * da_cb));
      x_2 = modP2(AA * BB);
      z_2 = modP2(E4 * (AA + modP2(a24 * E4)));
    }
    ({ x_2, x_3 } = cswap(swap, x_2, x_3));
    ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));
    const z22 = powPminus2(z_2);
    return modP2(x_2 * z22);
  }
  return {
    scalarMult,
    scalarMultBase,
    getSharedSecret: (privateKey, publicKey) => scalarMult(privateKey, publicKey),
    getPublicKey: (privateKey) => scalarMultBase(privateKey),
    utils: { randomPrivateKey: () => CURVE.randomBytes(fieldLen) },
    GuBytes: GuBytes.slice()
  };
}

// node_modules/ox/node_modules/@noble/curves/esm/ed25519.js
var ED25519_P = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
var ED25519_SQRT_M1 = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
var _0n11 = BigInt(0);
var _1n11 = BigInt(1);
var _2n9 = BigInt(2);
var _3n6 = BigInt(3);
var _5n2 = BigInt(5);
var _8n3 = BigInt(8);
function ed25519_pow_2_252_3(x5) {
  const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);
  const P6 = ED25519_P;
  const x22 = x5 * x5 % P6;
  const b22 = x22 * x5 % P6;
  const b4 = pow2(b22, _2n9, P6) * b22 % P6;
  const b5 = pow2(b4, _1n11, P6) * x5 % P6;
  const b10 = pow2(b5, _5n2, P6) * b5 % P6;
  const b20 = pow2(b10, _10n, P6) * b10 % P6;
  const b40 = pow2(b20, _20n, P6) * b20 % P6;
  const b80 = pow2(b40, _40n, P6) * b40 % P6;
  const b160 = pow2(b80, _80n, P6) * b80 % P6;
  const b240 = pow2(b160, _80n, P6) * b80 % P6;
  const b250 = pow2(b240, _10n, P6) * b10 % P6;
  const pow_p_5_8 = pow2(b250, _2n9, P6) * x5 % P6;
  return { pow_p_5_8, b2: b22 };
}
function adjustScalarBytes(bytes) {
  bytes[0] &= 248;
  bytes[31] &= 127;
  bytes[31] |= 64;
  return bytes;
}
function uvRatio(u2, v6) {
  const P6 = ED25519_P;
  const v32 = mod(v6 * v6 * v6, P6);
  const v7 = mod(v32 * v32 * v6, P6);
  const pow = ed25519_pow_2_252_3(u2 * v7).pow_p_5_8;
  let x5 = mod(u2 * v32 * pow, P6);
  const vx2 = mod(v6 * x5 * x5, P6);
  const root1 = x5;
  const root2 = mod(x5 * ED25519_SQRT_M1, P6);
  const useRoot1 = vx2 === u2;
  const useRoot2 = vx2 === mod(-u2, P6);
  const noRoot = vx2 === mod(-u2 * ED25519_SQRT_M1, P6);
  if (useRoot1)
    x5 = root1;
  if (useRoot2 || noRoot)
    x5 = root2;
  if (isNegativeLE(x5, P6))
    x5 = mod(-x5, P6);
  return { isValid: useRoot1 || useRoot2, value: x5 };
}
var Fp3 = (() => Field(ED25519_P, void 0, true))();
var ed25519Defaults = (() => ({
  // Removing Fp.create() will still work, and is 10% faster on sign
  a: Fp3.create(BigInt(-1)),
  // d is -121665/121666 a.k.a. Fp.neg(121665 * Fp.inv(121666))
  d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),
  // Finite field 2n**255n - 19n
  Fp: Fp3,
  // Subgroup order 2n**252n + 27742317777372353535851937790883648493n;
  n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"),
  h: _8n3,
  Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),
  Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"),
  hash: sha512,
  randomBytes,
  adjustScalarBytes,
  // dom2
  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
  // Constant-time, u/√v
  uvRatio
}))();
var ed25519 = (() => twistedEdwards(ed25519Defaults))();
function ed25519_domain(data, ctx, phflag) {
  if (ctx.length > 255)
    throw new Error("Context is too big");
  return concatBytes(utf8ToBytes("SigEd25519 no Ed25519 collisions"), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);
}
var ed25519ctx = (() => twistedEdwards({
  ...ed25519Defaults,
  domain: ed25519_domain
}))();
var ed25519ph = (() => twistedEdwards(Object.assign({}, ed25519Defaults, {
  domain: ed25519_domain,
  prehash: sha512
})))();
var x25519 = (() => montgomery({
  P: ED25519_P,
  type: "x25519",
  powPminus2: (x5) => {
    const P6 = ED25519_P;
    const { pow_p_5_8, b2: b22 } = ed25519_pow_2_252_3(x5);
    return mod(pow2(pow_p_5_8, _3n6, P6) * b22, P6);
  },
  adjustScalarBytes,
  randomBytes
}))();
var ELL2_C1 = (() => (Fp3.ORDER + _3n6) / _8n3)();
var ELL2_C2 = (() => Fp3.pow(_2n9, ELL2_C1))();
var ELL2_C3 = (() => Fp3.sqrt(Fp3.neg(Fp3.ONE)))();
function map_to_curve_elligator2_curve25519(u2) {
  const ELL2_C4 = (Fp3.ORDER - _5n2) / _8n3;
  const ELL2_J = BigInt(486662);
  let tv1 = Fp3.sqr(u2);
  tv1 = Fp3.mul(tv1, _2n9);
  let xd = Fp3.add(tv1, Fp3.ONE);
  let x1n = Fp3.neg(ELL2_J);
  let tv2 = Fp3.sqr(xd);
  let gxd = Fp3.mul(tv2, xd);
  let gx1 = Fp3.mul(tv1, ELL2_J);
  gx1 = Fp3.mul(gx1, x1n);
  gx1 = Fp3.add(gx1, tv2);
  gx1 = Fp3.mul(gx1, x1n);
  let tv3 = Fp3.sqr(gxd);
  tv2 = Fp3.sqr(tv3);
  tv3 = Fp3.mul(tv3, gxd);
  tv3 = Fp3.mul(tv3, gx1);
  tv2 = Fp3.mul(tv2, tv3);
  let y11 = Fp3.pow(tv2, ELL2_C4);
  y11 = Fp3.mul(y11, tv3);
  let y12 = Fp3.mul(y11, ELL2_C3);
  tv2 = Fp3.sqr(y11);
  tv2 = Fp3.mul(tv2, gxd);
  let e1 = Fp3.eql(tv2, gx1);
  let y1 = Fp3.cmov(y12, y11, e1);
  let x2n = Fp3.mul(x1n, tv1);
  let y21 = Fp3.mul(y11, u2);
  y21 = Fp3.mul(y21, ELL2_C2);
  let y22 = Fp3.mul(y21, ELL2_C3);
  let gx2 = Fp3.mul(gx1, tv1);
  tv2 = Fp3.sqr(y21);
  tv2 = Fp3.mul(tv2, gxd);
  let e2 = Fp3.eql(tv2, gx2);
  let y23 = Fp3.cmov(y22, y21, e2);
  tv2 = Fp3.sqr(y1);
  tv2 = Fp3.mul(tv2, gxd);
  let e3 = Fp3.eql(tv2, gx1);
  let xn4 = Fp3.cmov(x2n, x1n, e3);
  let y4 = Fp3.cmov(y23, y1, e3);
  let e4 = Fp3.isOdd(y4);
  y4 = Fp3.cmov(y4, Fp3.neg(y4), e3 !== e4);
  return { xMn: xn4, xMd: xd, yMn: y4, yMd: _1n11 };
}
var ELL2_C1_EDWARDS = (() => FpSqrtEven(Fp3, Fp3.neg(BigInt(486664))))();
function map_to_curve_elligator2_edwards25519(u2) {
  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u2);
  let xn4 = Fp3.mul(xMn, yMd);
  xn4 = Fp3.mul(xn4, ELL2_C1_EDWARDS);
  let xd = Fp3.mul(xMd, yMn);
  let yn4 = Fp3.sub(xMn, xMd);
  let yd = Fp3.add(xMn, xMd);
  let tv1 = Fp3.mul(xd, yd);
  let e2 = Fp3.eql(tv1, Fp3.ZERO);
  xn4 = Fp3.cmov(xn4, Fp3.ZERO, e2);
  xd = Fp3.cmov(xd, Fp3.ONE, e2);
  yn4 = Fp3.cmov(yn4, Fp3.ONE, e2);
  yd = Fp3.cmov(yd, Fp3.ONE, e2);
  const [xd_inv, yd_inv] = FpInvertBatch(Fp3, [xd, yd], true);
  return { x: Fp3.mul(xn4, xd_inv), y: Fp3.mul(yn4, yd_inv) };
}
var ed25519_hasher = (() => createHasher(ed25519.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {
  DST: "edwards25519_XMD:SHA-512_ELL2_RO_",
  encodeDST: "edwards25519_XMD:SHA-512_ELL2_NU_",
  p: Fp3.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha512
}))();
var hashToCurve2 = (() => ed25519_hasher.hashToCurve)();
var encodeToCurve2 = (() => ed25519_hasher.encodeToCurve)();
function aristp(other) {
  if (!(other instanceof RistPoint))
    throw new Error("RistrettoPoint expected");
}
var SQRT_M1 = ED25519_SQRT_M1;
var SQRT_AD_MINUS_ONE = BigInt("25063068953384623474111414158702152701244531502492656460079210482610430750235");
var INVSQRT_A_MINUS_D = BigInt("54469307008909316920995813868745141605393597292927456921205312896311721017578");
var ONE_MINUS_D_SQ = BigInt("1159843021668779879193775521855586647937357759715417654439879720876111806838");
var D_MINUS_ONE_SQ = BigInt("40440834346308536858101042469323190826248399146238708352240133220865137265952");
var invertSqrt = (number) => uvRatio(_1n11, number);
var MAX_255B = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var bytes255ToNumberLE = (bytes) => ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);
function calcElligatorRistrettoMap(r0) {
  const { d: d7 } = ed25519.CURVE;
  const P6 = ed25519.CURVE.Fp.ORDER;
  const mod3 = ed25519.CURVE.Fp.create;
  const r3 = mod3(SQRT_M1 * r0 * r0);
  const Ns3 = mod3((r3 + _1n11) * ONE_MINUS_D_SQ);
  let c6 = BigInt(-1);
  const D3 = mod3((c6 - d7 * r3) * mod3(r3 + d7));
  let { isValid: Ns_D_is_sq, value: s2 } = uvRatio(Ns3, D3);
  let s_ = mod3(s2 * r0);
  if (!isNegativeLE(s_, P6))
    s_ = mod3(-s_);
  if (!Ns_D_is_sq)
    s2 = s_;
  if (!Ns_D_is_sq)
    c6 = r3;
  const Nt6 = mod3(c6 * (r3 - _1n11) * D_MINUS_ONE_SQ - D3);
  const s22 = s2 * s2;
  const W0 = mod3((s2 + s2) * D3);
  const W1 = mod3(Nt6 * SQRT_AD_MINUS_ONE);
  const W22 = mod3(_1n11 - s22);
  const W32 = mod3(_1n11 + s22);
  return new ed25519.ExtendedPoint(mod3(W0 * W32), mod3(W22 * W1), mod3(W1 * W32), mod3(W0 * W22));
}
var RistPoint = class _RistPoint {
  // Private property to discourage combining ExtendedPoint + RistrettoPoint
  // Always use Ristretto encoding/decoding instead.
  constructor(ep) {
    this.ep = ep;
  }
  static fromAffine(ap) {
    return new _RistPoint(ed25519.ExtendedPoint.fromAffine(ap));
  }
  /**
   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.
   * The hash-to-group operation applies Elligator twice and adds the results.
   * **Note:** this is one-way map, there is no conversion from point to hash.
   * Described in [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#appendix-B) and on
   * the [website](https://ristretto.group/formulas/elligator.html).
   * @param hex 64-byte output of a hash function
   */
  static hashToCurve(hex2) {
    hex2 = ensureBytes("ristrettoHash", hex2, 64);
    const r1 = bytes255ToNumberLE(hex2.slice(0, 32));
    const R1 = calcElligatorRistrettoMap(r1);
    const r22 = bytes255ToNumberLE(hex2.slice(32, 64));
    const R22 = calcElligatorRistrettoMap(r22);
    return new _RistPoint(R1.add(R22));
  }
  /**
   * Converts ristretto-encoded string to ristretto point.
   * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-decode).
   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding
   */
  static fromHex(hex2) {
    hex2 = ensureBytes("ristrettoHex", hex2, 32);
    const { a: a3, d: d7 } = ed25519.CURVE;
    const P6 = ed25519.CURVE.Fp.ORDER;
    const mod3 = ed25519.CURVE.Fp.create;
    const emsg = "RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint";
    const s2 = bytes255ToNumberLE(hex2);
    if (!equalBytes(numberToBytesLE(s2, 32), hex2) || isNegativeLE(s2, P6))
      throw new Error(emsg);
    const s22 = mod3(s2 * s2);
    const u1 = mod3(_1n11 + a3 * s22);
    const u2 = mod3(_1n11 - a3 * s22);
    const u1_2 = mod3(u1 * u1);
    const u2_2 = mod3(u2 * u2);
    const v6 = mod3(a3 * d7 * u1_2 - u2_2);
    const { isValid, value: I2 } = invertSqrt(mod3(v6 * u2_2));
    const Dx = mod3(I2 * u2);
    const Dy = mod3(I2 * Dx * v6);
    let x5 = mod3((s2 + s2) * Dx);
    if (isNegativeLE(x5, P6))
      x5 = mod3(-x5);
    const y4 = mod3(u1 * Dy);
    const t = mod3(x5 * y4);
    if (!isValid || isNegativeLE(t, P6) || y4 === _0n11)
      throw new Error(emsg);
    return new _RistPoint(new ed25519.ExtendedPoint(x5, y4, _1n11, t));
  }
  static msm(points, scalars) {
    const Fn4 = Field(ed25519.CURVE.n, ed25519.CURVE.nBitLength);
    return pippenger(_RistPoint, Fn4, points, scalars);
  }
  /**
   * Encodes ristretto point to Uint8Array.
   * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-encode).
   */
  toRawBytes() {
    let { ex: x5, ey: y4, ez: z5, et: t } = this.ep;
    const P6 = ed25519.CURVE.Fp.ORDER;
    const mod3 = ed25519.CURVE.Fp.create;
    const u1 = mod3(mod3(z5 + y4) * mod3(z5 - y4));
    const u2 = mod3(x5 * y4);
    const u2sq = mod3(u2 * u2);
    const { value: invsqrt } = invertSqrt(mod3(u1 * u2sq));
    const D1 = mod3(invsqrt * u1);
    const D22 = mod3(invsqrt * u2);
    const zInv = mod3(D1 * D22 * t);
    let D3;
    if (isNegativeLE(t * zInv, P6)) {
      let _x = mod3(y4 * SQRT_M1);
      let _y = mod3(x5 * SQRT_M1);
      x5 = _x;
      y4 = _y;
      D3 = mod3(D1 * INVSQRT_A_MINUS_D);
    } else {
      D3 = D22;
    }
    if (isNegativeLE(x5 * zInv, P6))
      y4 = mod3(-y4);
    let s2 = mod3((z5 - y4) * D3);
    if (isNegativeLE(s2, P6))
      s2 = mod3(-s2);
    return numberToBytesLE(s2, 32);
  }
  toHex() {
    return bytesToHex2(this.toRawBytes());
  }
  toString() {
    return this.toHex();
  }
  /**
   * Compares two Ristretto points.
   * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-equals).
   */
  equals(other) {
    aristp(other);
    const { ex: X1, ey: Y1 } = this.ep;
    const { ex: X22, ey: Y22 } = other.ep;
    const mod3 = ed25519.CURVE.Fp.create;
    const one = mod3(X1 * Y22) === mod3(Y1 * X22);
    const two = mod3(Y1 * Y22) === mod3(X1 * X22);
    return one || two;
  }
  add(other) {
    aristp(other);
    return new _RistPoint(this.ep.add(other.ep));
  }
  subtract(other) {
    aristp(other);
    return new _RistPoint(this.ep.subtract(other.ep));
  }
  multiply(scalar) {
    return new _RistPoint(this.ep.multiply(scalar));
  }
  multiplyUnsafe(scalar) {
    return new _RistPoint(this.ep.multiplyUnsafe(scalar));
  }
  double() {
    return new _RistPoint(this.ep.double());
  }
  negate() {
    return new _RistPoint(this.ep.negate());
  }
};
var RistrettoPoint = (() => {
  if (!RistPoint.BASE)
    RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);
  if (!RistPoint.ZERO)
    RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);
  return RistPoint;
})();

// node_modules/ox/node_modules/@adraffy/ens-normalize/dist/index.mjs
var S0 = 44032;
var L0 = 4352;
var V0 = 4449;
var T0 = 4519;
var L_COUNT = 19;
var V_COUNT = 21;
var T_COUNT = 28;
var N_COUNT = V_COUNT * T_COUNT;
var S_COUNT = L_COUNT * N_COUNT;
var S1 = S0 + S_COUNT;
var L1 = L0 + L_COUNT;
var V1 = V0 + V_COUNT;
var T1 = T0 + T_COUNT;

// node_modules/@scure/bip32/node_modules/@noble/curves/esm/utils.js
var _0n12 = BigInt(0);
var _1n12 = BigInt(1);
function _abool2(value, title = "") {
  if (typeof value !== "boolean") {
    const prefix = title && `"${title}"`;
    throw new Error(prefix + "expected boolean, got type=" + typeof value);
  }
  return value;
}
function _abytes2(value, length2, title = "") {
  const bytes = isBytes(value);
  const len = value?.length;
  const needsLen = length2 !== void 0;
  if (!bytes || needsLen && len !== length2) {
    const prefix = title && `"${title}" `;
    const ofLen = needsLen ? ` of length ${length2}` : "";
    const got = bytes ? `length=${len}` : `type=${typeof value}`;
    throw new Error(prefix + "expected Uint8Array" + ofLen + ", got " + got);
  }
  return value;
}
function numberToHexUnpadded2(num3) {
  const hex2 = num3.toString(16);
  return hex2.length & 1 ? "0" + hex2 : hex2;
}
function hexToNumber2(hex2) {
  if (typeof hex2 !== "string")
    throw new Error("hex string expected, got " + typeof hex2);
  return hex2 === "" ? _0n12 : BigInt("0x" + hex2);
}
function bytesToNumberBE2(bytes) {
  return hexToNumber2(bytesToHex(bytes));
}
function bytesToNumberLE2(bytes) {
  abytes(bytes);
  return hexToNumber2(bytesToHex(Uint8Array.from(bytes).reverse()));
}
function numberToBytesBE2(n4, len) {
  return hexToBytes(n4.toString(16).padStart(len * 2, "0"));
}
function numberToBytesLE2(n4, len) {
  return numberToBytesBE2(n4, len).reverse();
}
function ensureBytes2(title, hex2, expectedLength) {
  let res;
  if (typeof hex2 === "string") {
    try {
      res = hexToBytes(hex2);
    } catch (e2) {
      throw new Error(title + " must be hex string or Uint8Array, cause: " + e2);
    }
  } else if (isBytes(hex2)) {
    res = Uint8Array.from(hex2);
  } else {
    throw new Error(title + " must be hex string or Uint8Array");
  }
  const len = res.length;
  if (typeof expectedLength === "number" && len !== expectedLength)
    throw new Error(title + " of length " + expectedLength + " expected, got " + len);
  return res;
}
var isPosBig2 = (n4) => typeof n4 === "bigint" && _0n12 <= n4;
function inRange2(n4, min, max) {
  return isPosBig2(n4) && isPosBig2(min) && isPosBig2(max) && min <= n4 && n4 < max;
}
function aInRange2(title, n4, min, max) {
  if (!inRange2(n4, min, max))
    throw new Error("expected valid " + title + ": " + min + " <= n < " + max + ", got " + n4);
}
function bitLen2(n4) {
  let len;
  for (len = 0; n4 > _0n12; n4 >>= _1n12, len += 1)
    ;
  return len;
}
var bitMask2 = (n4) => (_1n12 << BigInt(n4)) - _1n12;
function createHmacDrbg2(hashLen, qByteLen, hmacFn) {
  if (typeof hashLen !== "number" || hashLen < 2)
    throw new Error("hashLen must be a number");
  if (typeof qByteLen !== "number" || qByteLen < 2)
    throw new Error("qByteLen must be a number");
  if (typeof hmacFn !== "function")
    throw new Error("hmacFn must be a function");
  const u8n2 = (len) => new Uint8Array(len);
  const u8of = (byte) => Uint8Array.of(byte);
  let v6 = u8n2(hashLen);
  let k4 = u8n2(hashLen);
  let i3 = 0;
  const reset = () => {
    v6.fill(1);
    k4.fill(0);
    i3 = 0;
  };
  const h4 = (...b4) => hmacFn(k4, v6, ...b4);
  const reseed = (seed = u8n2(0)) => {
    k4 = h4(u8of(0), seed);
    v6 = h4();
    if (seed.length === 0)
      return;
    k4 = h4(u8of(1), seed);
    v6 = h4();
  };
  const gen = () => {
    if (i3++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let len = 0;
    const out = [];
    while (len < qByteLen) {
      v6 = h4();
      const sl = v6.slice();
      out.push(sl);
      len += v6.length;
    }
    return concatBytes(...out);
  };
  const genUntil = (seed, pred) => {
    reset();
    reseed(seed);
    let res = void 0;
    while (!(res = pred(gen())))
      reseed();
    reset();
    return res;
  };
  return genUntil;
}
function isHash(val) {
  return typeof val === "function" && Number.isSafeInteger(val.outputLen);
}
function _validateObject(object, fields, optFields = {}) {
  if (!object || typeof object !== "object")
    throw new Error("expected valid options object");
  function checkField(fieldName, expectedType, isOpt) {
    const val = object[fieldName];
    if (isOpt && val === void 0)
      return;
    const current = typeof val;
    if (current !== expectedType || val === null)
      throw new Error(`param "${fieldName}" is invalid: expected ${expectedType}, got ${current}`);
  }
  Object.entries(fields).forEach(([k4, v6]) => checkField(k4, v6, false));
  Object.entries(optFields).forEach(([k4, v6]) => checkField(k4, v6, true));
}
function memoized2(fn3) {
  const map = /* @__PURE__ */ new WeakMap();
  return (arg, ...args) => {
    const val = map.get(arg);
    if (val !== void 0)
      return val;
    const computed = fn3(arg, ...args);
    map.set(arg, computed);
    return computed;
  };
}

// node_modules/@scure/bip32/node_modules/@noble/curves/esm/abstract/modular.js
var _0n13 = BigInt(0);
var _1n13 = BigInt(1);
var _2n10 = BigInt(2);
var _3n7 = BigInt(3);
var _4n4 = BigInt(4);
var _5n3 = BigInt(5);
var _7n = BigInt(7);
var _8n4 = BigInt(8);
var _9n = BigInt(9);
var _16n = BigInt(16);
function mod2(a3, b4) {
  const result = a3 % b4;
  return result >= _0n13 ? result : b4 + result;
}
function pow22(x5, power, modulo) {
  let res = x5;
  while (power-- > _0n13) {
    res *= res;
    res %= modulo;
  }
  return res;
}
function invert2(number, modulo) {
  if (number === _0n13)
    throw new Error("invert: expected non-zero number");
  if (modulo <= _0n13)
    throw new Error("invert: expected positive modulus, got " + modulo);
  let a3 = mod2(number, modulo);
  let b4 = modulo;
  let x5 = _0n13, y4 = _1n13, u2 = _1n13, v6 = _0n13;
  while (a3 !== _0n13) {
    const q2 = b4 / a3;
    const r3 = b4 % a3;
    const m4 = x5 - u2 * q2;
    const n4 = y4 - v6 * q2;
    b4 = a3, a3 = r3, x5 = u2, y4 = v6, u2 = m4, v6 = n4;
  }
  const gcd2 = b4;
  if (gcd2 !== _1n13)
    throw new Error("invert: does not exist");
  return mod2(x5, modulo);
}
function assertIsSquare(Fp4, root, n4) {
  if (!Fp4.eql(Fp4.sqr(root), n4))
    throw new Error("Cannot find square root");
}
function sqrt3mod42(Fp4, n4) {
  const p1div4 = (Fp4.ORDER + _1n13) / _4n4;
  const root = Fp4.pow(n4, p1div4);
  assertIsSquare(Fp4, root, n4);
  return root;
}
function sqrt5mod82(Fp4, n4) {
  const p5div8 = (Fp4.ORDER - _5n3) / _8n4;
  const n22 = Fp4.mul(n4, _2n10);
  const v6 = Fp4.pow(n22, p5div8);
  const nv = Fp4.mul(n4, v6);
  const i3 = Fp4.mul(Fp4.mul(nv, _2n10), v6);
  const root = Fp4.mul(nv, Fp4.sub(i3, Fp4.ONE));
  assertIsSquare(Fp4, root, n4);
  return root;
}
function sqrt9mod16(P6) {
  const Fp_ = Field2(P6);
  const tn2 = tonelliShanks2(P6);
  const c1 = tn2(Fp_, Fp_.neg(Fp_.ONE));
  const c22 = tn2(Fp_, c1);
  const c32 = tn2(Fp_, Fp_.neg(c1));
  const c42 = (P6 + _7n) / _16n;
  return (Fp4, n4) => {
    let tv1 = Fp4.pow(n4, c42);
    let tv2 = Fp4.mul(tv1, c1);
    const tv3 = Fp4.mul(tv1, c22);
    const tv4 = Fp4.mul(tv1, c32);
    const e1 = Fp4.eql(Fp4.sqr(tv2), n4);
    const e2 = Fp4.eql(Fp4.sqr(tv3), n4);
    tv1 = Fp4.cmov(tv1, tv2, e1);
    tv2 = Fp4.cmov(tv4, tv3, e2);
    const e3 = Fp4.eql(Fp4.sqr(tv2), n4);
    const root = Fp4.cmov(tv1, tv2, e3);
    assertIsSquare(Fp4, root, n4);
    return root;
  };
}
function tonelliShanks2(P6) {
  if (P6 < _3n7)
    throw new Error("sqrt is not defined for small field");
  let Q4 = P6 - _1n13;
  let S4 = 0;
  while (Q4 % _2n10 === _0n13) {
    Q4 /= _2n10;
    S4++;
  }
  let Z2 = _2n10;
  const _Fp = Field2(P6);
  while (FpLegendre2(_Fp, Z2) === 1) {
    if (Z2++ > 1e3)
      throw new Error("Cannot find square root: probably non-prime P");
  }
  if (S4 === 1)
    return sqrt3mod42;
  let cc2 = _Fp.pow(Z2, Q4);
  const Q1div2 = (Q4 + _1n13) / _2n10;
  return function tonelliSlow(Fp4, n4) {
    if (Fp4.is0(n4))
      return n4;
    if (FpLegendre2(Fp4, n4) !== 1)
      throw new Error("Cannot find square root");
    let M5 = S4;
    let c6 = Fp4.mul(Fp4.ONE, cc2);
    let t = Fp4.pow(n4, Q4);
    let R4 = Fp4.pow(n4, Q1div2);
    while (!Fp4.eql(t, Fp4.ONE)) {
      if (Fp4.is0(t))
        return Fp4.ZERO;
      let i3 = 1;
      let t_tmp = Fp4.sqr(t);
      while (!Fp4.eql(t_tmp, Fp4.ONE)) {
        i3++;
        t_tmp = Fp4.sqr(t_tmp);
        if (i3 === M5)
          throw new Error("Cannot find square root");
      }
      const exponent = _1n13 << BigInt(M5 - i3 - 1);
      const b4 = Fp4.pow(c6, exponent);
      M5 = i3;
      c6 = Fp4.sqr(b4);
      t = Fp4.mul(t, c6);
      R4 = Fp4.mul(R4, b4);
    }
    return R4;
  };
}
function FpSqrt2(P6) {
  if (P6 % _4n4 === _3n7)
    return sqrt3mod42;
  if (P6 % _8n4 === _5n3)
    return sqrt5mod82;
  if (P6 % _16n === _9n)
    return sqrt9mod16(P6);
  return tonelliShanks2(P6);
}
var FIELD_FIELDS2 = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField2(field) {
  const initial = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "number",
    BITS: "number"
  };
  const opts = FIELD_FIELDS2.reduce((map, val) => {
    map[val] = "function";
    return map;
  }, initial);
  _validateObject(field, opts);
  return field;
}
function FpPow2(Fp4, num3, power) {
  if (power < _0n13)
    throw new Error("invalid exponent, negatives unsupported");
  if (power === _0n13)
    return Fp4.ONE;
  if (power === _1n13)
    return num3;
  let p4 = Fp4.ONE;
  let d7 = num3;
  while (power > _0n13) {
    if (power & _1n13)
      p4 = Fp4.mul(p4, d7);
    d7 = Fp4.sqr(d7);
    power >>= _1n13;
  }
  return p4;
}
function FpInvertBatch2(Fp4, nums, passZero = false) {
  const inverted = new Array(nums.length).fill(passZero ? Fp4.ZERO : void 0);
  const multipliedAcc = nums.reduce((acc, num3, i3) => {
    if (Fp4.is0(num3))
      return acc;
    inverted[i3] = acc;
    return Fp4.mul(acc, num3);
  }, Fp4.ONE);
  const invertedAcc = Fp4.inv(multipliedAcc);
  nums.reduceRight((acc, num3, i3) => {
    if (Fp4.is0(num3))
      return acc;
    inverted[i3] = Fp4.mul(acc, inverted[i3]);
    return Fp4.mul(acc, num3);
  }, invertedAcc);
  return inverted;
}
function FpLegendre2(Fp4, n4) {
  const p1mod2 = (Fp4.ORDER - _1n13) / _2n10;
  const powered = Fp4.pow(n4, p1mod2);
  const yes = Fp4.eql(powered, Fp4.ONE);
  const zero = Fp4.eql(powered, Fp4.ZERO);
  const no3 = Fp4.eql(powered, Fp4.neg(Fp4.ONE));
  if (!yes && !zero && !no3)
    throw new Error("invalid Legendre symbol result");
  return yes ? 1 : zero ? 0 : -1;
}
function nLength2(n4, nBitLength) {
  if (nBitLength !== void 0)
    anumber(nBitLength);
  const _nBitLength = nBitLength !== void 0 ? nBitLength : n4.toString(2).length;
  const nByteLength = Math.ceil(_nBitLength / 8);
  return { nBitLength: _nBitLength, nByteLength };
}
function Field2(ORDER, bitLenOrOpts, isLE2 = false, opts = {}) {
  if (ORDER <= _0n13)
    throw new Error("invalid field: expected ORDER > 0, got " + ORDER);
  let _nbitLength = void 0;
  let _sqrt = void 0;
  let modFromBytes = false;
  let allowedLengths = void 0;
  if (typeof bitLenOrOpts === "object" && bitLenOrOpts != null) {
    if (opts.sqrt || isLE2)
      throw new Error("cannot specify opts in two arguments");
    const _opts = bitLenOrOpts;
    if (_opts.BITS)
      _nbitLength = _opts.BITS;
    if (_opts.sqrt)
      _sqrt = _opts.sqrt;
    if (typeof _opts.isLE === "boolean")
      isLE2 = _opts.isLE;
    if (typeof _opts.modFromBytes === "boolean")
      modFromBytes = _opts.modFromBytes;
    allowedLengths = _opts.allowedLengths;
  } else {
    if (typeof bitLenOrOpts === "number")
      _nbitLength = bitLenOrOpts;
    if (opts.sqrt)
      _sqrt = opts.sqrt;
  }
  const { nBitLength: BITS, nByteLength: BYTES } = nLength2(ORDER, _nbitLength);
  if (BYTES > 2048)
    throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let sqrtP;
  const f6 = Object.freeze({
    ORDER,
    isLE: isLE2,
    BITS,
    BYTES,
    MASK: bitMask2(BITS),
    ZERO: _0n13,
    ONE: _1n13,
    allowedLengths,
    create: (num3) => mod2(num3, ORDER),
    isValid: (num3) => {
      if (typeof num3 !== "bigint")
        throw new Error("invalid field element: expected bigint, got " + typeof num3);
      return _0n13 <= num3 && num3 < ORDER;
    },
    is0: (num3) => num3 === _0n13,
    // is valid and invertible
    isValidNot0: (num3) => !f6.is0(num3) && f6.isValid(num3),
    isOdd: (num3) => (num3 & _1n13) === _1n13,
    neg: (num3) => mod2(-num3, ORDER),
    eql: (lhs, rhs) => lhs === rhs,
    sqr: (num3) => mod2(num3 * num3, ORDER),
    add: (lhs, rhs) => mod2(lhs + rhs, ORDER),
    sub: (lhs, rhs) => mod2(lhs - rhs, ORDER),
    mul: (lhs, rhs) => mod2(lhs * rhs, ORDER),
    pow: (num3, power) => FpPow2(f6, num3, power),
    div: (lhs, rhs) => mod2(lhs * invert2(rhs, ORDER), ORDER),
    // Same as above, but doesn't normalize
    sqrN: (num3) => num3 * num3,
    addN: (lhs, rhs) => lhs + rhs,
    subN: (lhs, rhs) => lhs - rhs,
    mulN: (lhs, rhs) => lhs * rhs,
    inv: (num3) => invert2(num3, ORDER),
    sqrt: _sqrt || ((n4) => {
      if (!sqrtP)
        sqrtP = FpSqrt2(ORDER);
      return sqrtP(f6, n4);
    }),
    toBytes: (num3) => isLE2 ? numberToBytesLE2(num3, BYTES) : numberToBytesBE2(num3, BYTES),
    fromBytes: (bytes, skipValidation = true) => {
      if (allowedLengths) {
        if (!allowedLengths.includes(bytes.length) || bytes.length > BYTES) {
          throw new Error("Field.fromBytes: expected " + allowedLengths + " bytes, got " + bytes.length);
        }
        const padded = new Uint8Array(BYTES);
        padded.set(bytes, isLE2 ? 0 : padded.length - bytes.length);
        bytes = padded;
      }
      if (bytes.length !== BYTES)
        throw new Error("Field.fromBytes: expected " + BYTES + " bytes, got " + bytes.length);
      let scalar = isLE2 ? bytesToNumberLE2(bytes) : bytesToNumberBE2(bytes);
      if (modFromBytes)
        scalar = mod2(scalar, ORDER);
      if (!skipValidation) {
        if (!f6.isValid(scalar))
          throw new Error("invalid field element: outside of range 0..ORDER");
      }
      return scalar;
    },
    // TODO: we don't need it here, move out to separate fn
    invertBatch: (lst) => FpInvertBatch2(f6, lst),
    // We can't move this out because Fp6, Fp12 implement it
    // and it's unclear what to return in there.
    cmov: (a3, b4, c6) => c6 ? b4 : a3
  });
  return Object.freeze(f6);
}
function getFieldBytesLength2(fieldOrder) {
  if (typeof fieldOrder !== "bigint")
    throw new Error("field order must be bigint");
  const bitLength = fieldOrder.toString(2).length;
  return Math.ceil(bitLength / 8);
}
function getMinHashLength2(fieldOrder) {
  const length2 = getFieldBytesLength2(fieldOrder);
  return length2 + Math.ceil(length2 / 2);
}
function mapHashToField2(key, fieldOrder, isLE2 = false) {
  const len = key.length;
  const fieldLen = getFieldBytesLength2(fieldOrder);
  const minLen = getMinHashLength2(fieldOrder);
  if (len < 16 || len < minLen || len > 1024)
    throw new Error("expected " + minLen + "-1024 bytes of input, got " + len);
  const num3 = isLE2 ? bytesToNumberLE2(key) : bytesToNumberBE2(key);
  const reduced = mod2(num3, fieldOrder - _1n13) + _1n13;
  return isLE2 ? numberToBytesLE2(reduced, fieldLen) : numberToBytesBE2(reduced, fieldLen);
}

// node_modules/@scure/bip32/node_modules/@noble/curves/esm/abstract/curve.js
var _0n14 = BigInt(0);
var _1n14 = BigInt(1);
function negateCt(condition, item) {
  const neg = item.negate();
  return condition ? neg : item;
}
function normalizeZ(c6, points) {
  const invertedZs = FpInvertBatch2(c6.Fp, points.map((p4) => p4.Z));
  return points.map((p4, i3) => c6.fromAffine(p4.toAffine(invertedZs[i3])));
}
function validateW2(W6, bits) {
  if (!Number.isSafeInteger(W6) || W6 <= 0 || W6 > bits)
    throw new Error("invalid window size, expected [1.." + bits + "], got W=" + W6);
}
function calcWOpts2(W6, scalarBits) {
  validateW2(W6, scalarBits);
  const windows = Math.ceil(scalarBits / W6) + 1;
  const windowSize = 2 ** (W6 - 1);
  const maxNumber = 2 ** W6;
  const mask = bitMask2(W6);
  const shiftBy = BigInt(W6);
  return { windows, windowSize, mask, maxNumber, shiftBy };
}
function calcOffsets2(n4, window2, wOpts) {
  const { windowSize, mask, maxNumber, shiftBy } = wOpts;
  let wbits = Number(n4 & mask);
  let nextN = n4 >> shiftBy;
  if (wbits > windowSize) {
    wbits -= maxNumber;
    nextN += _1n14;
  }
  const offsetStart = window2 * windowSize;
  const offset = offsetStart + Math.abs(wbits) - 1;
  const isZero = wbits === 0;
  const isNeg = wbits < 0;
  const isNegF = window2 % 2 !== 0;
  const offsetF = offsetStart;
  return { nextN, offset, isZero, isNeg, isNegF, offsetF };
}
function validateMSMPoints2(points, c6) {
  if (!Array.isArray(points))
    throw new Error("array expected");
  points.forEach((p4, i3) => {
    if (!(p4 instanceof c6))
      throw new Error("invalid point at index " + i3);
  });
}
function validateMSMScalars2(scalars, field) {
  if (!Array.isArray(scalars))
    throw new Error("array of scalars expected");
  scalars.forEach((s2, i3) => {
    if (!field.isValid(s2))
      throw new Error("invalid scalar at index " + i3);
  });
}
var pointPrecomputes2 = /* @__PURE__ */ new WeakMap();
var pointWindowSizes2 = /* @__PURE__ */ new WeakMap();
function getW2(P6) {
  return pointWindowSizes2.get(P6) || 1;
}
function assert0(n4) {
  if (n4 !== _0n14)
    throw new Error("invalid wNAF");
}
var wNAF2 = class {
  // Parametrized with a given Point class (not individual point)
  constructor(Point3, bits) {
    this.BASE = Point3.BASE;
    this.ZERO = Point3.ZERO;
    this.Fn = Point3.Fn;
    this.bits = bits;
  }
  // non-const time multiplication ladder
  _unsafeLadder(elm, n4, p4 = this.ZERO) {
    let d7 = elm;
    while (n4 > _0n14) {
      if (n4 & _1n14)
        p4 = p4.add(d7);
      d7 = d7.double();
      n4 >>= _1n14;
    }
    return p4;
  }
  /**
   * Creates a wNAF precomputation window. Used for caching.
   * Default window size is set by `utils.precompute()` and is equal to 8.
   * Number of precomputed points depends on the curve size:
   * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
   * - 𝑊 is the window size
   * - 𝑛 is the bitlength of the curve order.
   * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
   * @param point Point instance
   * @param W window size
   * @returns precomputed point tables flattened to a single array
   */
  precomputeWindow(point, W6) {
    const { windows, windowSize } = calcWOpts2(W6, this.bits);
    const points = [];
    let p4 = point;
    let base3 = p4;
    for (let window2 = 0; window2 < windows; window2++) {
      base3 = p4;
      points.push(base3);
      for (let i3 = 1; i3 < windowSize; i3++) {
        base3 = base3.add(p4);
        points.push(base3);
      }
      p4 = base3.double();
    }
    return points;
  }
  /**
   * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
   * More compact implementation:
   * https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541
   * @returns real and fake (for const-time) points
   */
  wNAF(W6, precomputes, n4) {
    if (!this.Fn.isValid(n4))
      throw new Error("invalid scalar");
    let p4 = this.ZERO;
    let f6 = this.BASE;
    const wo4 = calcWOpts2(W6, this.bits);
    for (let window2 = 0; window2 < wo4.windows; window2++) {
      const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets2(n4, window2, wo4);
      n4 = nextN;
      if (isZero) {
        f6 = f6.add(negateCt(isNegF, precomputes[offsetF]));
      } else {
        p4 = p4.add(negateCt(isNeg, precomputes[offset]));
      }
    }
    assert0(n4);
    return { p: p4, f: f6 };
  }
  /**
   * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.
   * @param acc accumulator point to add result of multiplication
   * @returns point
   */
  wNAFUnsafe(W6, precomputes, n4, acc = this.ZERO) {
    const wo4 = calcWOpts2(W6, this.bits);
    for (let window2 = 0; window2 < wo4.windows; window2++) {
      if (n4 === _0n14)
        break;
      const { nextN, offset, isZero, isNeg } = calcOffsets2(n4, window2, wo4);
      n4 = nextN;
      if (isZero) {
        continue;
      } else {
        const item = precomputes[offset];
        acc = acc.add(isNeg ? item.negate() : item);
      }
    }
    assert0(n4);
    return acc;
  }
  getPrecomputes(W6, point, transform) {
    let comp = pointPrecomputes2.get(point);
    if (!comp) {
      comp = this.precomputeWindow(point, W6);
      if (W6 !== 1) {
        if (typeof transform === "function")
          comp = transform(comp);
        pointPrecomputes2.set(point, comp);
      }
    }
    return comp;
  }
  cached(point, scalar, transform) {
    const W6 = getW2(point);
    return this.wNAF(W6, this.getPrecomputes(W6, point, transform), scalar);
  }
  unsafe(point, scalar, transform, prev) {
    const W6 = getW2(point);
    if (W6 === 1)
      return this._unsafeLadder(point, scalar, prev);
    return this.wNAFUnsafe(W6, this.getPrecomputes(W6, point, transform), scalar, prev);
  }
  // We calculate precomputes for elliptic curve point multiplication
  // using windowed method. This specifies window size and
  // stores precomputed values. Usually only base point would be precomputed.
  createCache(P6, W6) {
    validateW2(W6, this.bits);
    pointWindowSizes2.set(P6, W6);
    pointPrecomputes2.delete(P6);
  }
  hasCache(elm) {
    return getW2(elm) !== 1;
  }
};
function mulEndoUnsafe(Point3, point, k1, k22) {
  let acc = point;
  let p1 = Point3.ZERO;
  let p22 = Point3.ZERO;
  while (k1 > _0n14 || k22 > _0n14) {
    if (k1 & _1n14)
      p1 = p1.add(acc);
    if (k22 & _1n14)
      p22 = p22.add(acc);
    acc = acc.double();
    k1 >>= _1n14;
    k22 >>= _1n14;
  }
  return { p1, p2: p22 };
}
function pippenger2(c6, fieldN, points, scalars) {
  validateMSMPoints2(points, c6);
  validateMSMScalars2(scalars, fieldN);
  const plength = points.length;
  const slength = scalars.length;
  if (plength !== slength)
    throw new Error("arrays of points and scalars must have equal length");
  const zero = c6.ZERO;
  const wbits = bitLen2(BigInt(plength));
  let windowSize = 1;
  if (wbits > 12)
    windowSize = wbits - 3;
  else if (wbits > 4)
    windowSize = wbits - 2;
  else if (wbits > 0)
    windowSize = 2;
  const MASK = bitMask2(windowSize);
  const buckets = new Array(Number(MASK) + 1).fill(zero);
  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;
  let sum = zero;
  for (let i3 = lastBits; i3 >= 0; i3 -= windowSize) {
    buckets.fill(zero);
    for (let j6 = 0; j6 < slength; j6++) {
      const scalar = scalars[j6];
      const wbits2 = Number(scalar >> BigInt(i3) & MASK);
      buckets[wbits2] = buckets[wbits2].add(points[j6]);
    }
    let resI = zero;
    for (let j6 = buckets.length - 1, sumI = zero; j6 > 0; j6--) {
      sumI = sumI.add(buckets[j6]);
      resI = resI.add(sumI);
    }
    sum = sum.add(resI);
    if (i3 !== 0)
      for (let j6 = 0; j6 < windowSize; j6++)
        sum = sum.double();
  }
  return sum;
}
function createField(order, field, isLE2) {
  if (field) {
    if (field.ORDER !== order)
      throw new Error("Field.ORDER must match order: Fp == p, Fn == n");
    validateField2(field);
    return field;
  } else {
    return Field2(order, { isLE: isLE2 });
  }
}
function _createCurveFields(type, CURVE, curveOpts = {}, FpFnLE) {
  if (FpFnLE === void 0)
    FpFnLE = type === "edwards";
  if (!CURVE || typeof CURVE !== "object")
    throw new Error(`expected valid ${type} CURVE object`);
  for (const p4 of ["p", "n", "h"]) {
    const val = CURVE[p4];
    if (!(typeof val === "bigint" && val > _0n14))
      throw new Error(`CURVE.${p4} must be positive bigint`);
  }
  const Fp4 = createField(CURVE.p, curveOpts.Fp, FpFnLE);
  const Fn4 = createField(CURVE.n, curveOpts.Fn, FpFnLE);
  const _b = type === "weierstrass" ? "b" : "d";
  const params = ["Gx", "Gy", "a", _b];
  for (const p4 of params) {
    if (!Fp4.isValid(CURVE[p4]))
      throw new Error(`CURVE.${p4} must be valid field element of CURVE.Fp`);
  }
  CURVE = Object.freeze(Object.assign({}, CURVE));
  return { CURVE, Fp: Fp4, Fn: Fn4 };
}

// node_modules/@scure/bip32/node_modules/@noble/curves/esm/abstract/weierstrass.js
var divNearest2 = (num3, den) => (num3 + (num3 >= 0 ? den : -den) / _2n11) / den;
function _splitEndoScalar(k4, basis, n4) {
  const [[a1, b1], [a22, b22]] = basis;
  const c1 = divNearest2(b22 * k4, n4);
  const c22 = divNearest2(-b1 * k4, n4);
  let k1 = k4 - c1 * a1 - c22 * a22;
  let k22 = -c1 * b1 - c22 * b22;
  const k1neg = k1 < _0n15;
  const k2neg = k22 < _0n15;
  if (k1neg)
    k1 = -k1;
  if (k2neg)
    k22 = -k22;
  const MAX_NUM = bitMask2(Math.ceil(bitLen2(n4) / 2)) + _1n15;
  if (k1 < _0n15 || k1 >= MAX_NUM || k22 < _0n15 || k22 >= MAX_NUM) {
    throw new Error("splitScalar (endomorphism): failed, k=" + k4);
  }
  return { k1neg, k1, k2neg, k2: k22 };
}
function validateSigFormat(format2) {
  if (!["compact", "recovered", "der"].includes(format2))
    throw new Error('Signature format must be "compact", "recovered", or "der"');
  return format2;
}
function validateSigOpts(opts, def) {
  const optsn = {};
  for (let optName of Object.keys(def)) {
    optsn[optName] = opts[optName] === void 0 ? def[optName] : opts[optName];
  }
  _abool2(optsn.lowS, "lowS");
  _abool2(optsn.prehash, "prehash");
  if (optsn.format !== void 0)
    validateSigFormat(optsn.format);
  return optsn;
}
var DERErr2 = class extends Error {
  constructor(m4 = "") {
    super(m4);
  }
};
var DER2 = {
  // asn.1 DER encoding utils
  Err: DERErr2,
  // Basic building block is TLV (Tag-Length-Value)
  _tlv: {
    encode: (tag2, data) => {
      const { Err: E4 } = DER2;
      if (tag2 < 0 || tag2 > 256)
        throw new E4("tlv.encode: wrong tag");
      if (data.length & 1)
        throw new E4("tlv.encode: unpadded data");
      const dataLen = data.length / 2;
      const len = numberToHexUnpadded2(dataLen);
      if (len.length / 2 & 128)
        throw new E4("tlv.encode: long form length too big");
      const lenLen = dataLen > 127 ? numberToHexUnpadded2(len.length / 2 | 128) : "";
      const t = numberToHexUnpadded2(tag2);
      return t + lenLen + len + data;
    },
    // v - value, l - left bytes (unparsed)
    decode(tag2, data) {
      const { Err: E4 } = DER2;
      let pos = 0;
      if (tag2 < 0 || tag2 > 256)
        throw new E4("tlv.encode: wrong tag");
      if (data.length < 2 || data[pos++] !== tag2)
        throw new E4("tlv.decode: wrong tlv");
      const first = data[pos++];
      const isLong = !!(first & 128);
      let length2 = 0;
      if (!isLong)
        length2 = first;
      else {
        const lenLen = first & 127;
        if (!lenLen)
          throw new E4("tlv.decode(long): indefinite length not supported");
        if (lenLen > 4)
          throw new E4("tlv.decode(long): byte length is too big");
        const lengthBytes = data.subarray(pos, pos + lenLen);
        if (lengthBytes.length !== lenLen)
          throw new E4("tlv.decode: length bytes not complete");
        if (lengthBytes[0] === 0)
          throw new E4("tlv.decode(long): zero leftmost byte");
        for (const b4 of lengthBytes)
          length2 = length2 << 8 | b4;
        pos += lenLen;
        if (length2 < 128)
          throw new E4("tlv.decode(long): not minimal encoding");
      }
      const v6 = data.subarray(pos, pos + length2);
      if (v6.length !== length2)
        throw new E4("tlv.decode: wrong value length");
      return { v: v6, l: data.subarray(pos + length2) };
    }
  },
  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
  // since we always use positive integers here. It must always be empty:
  // - add zero byte if exists
  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
  _int: {
    encode(num3) {
      const { Err: E4 } = DER2;
      if (num3 < _0n15)
        throw new E4("integer: negative integers are not allowed");
      let hex2 = numberToHexUnpadded2(num3);
      if (Number.parseInt(hex2[0], 16) & 8)
        hex2 = "00" + hex2;
      if (hex2.length & 1)
        throw new E4("unexpected DER parsing assertion: unpadded hex");
      return hex2;
    },
    decode(data) {
      const { Err: E4 } = DER2;
      if (data[0] & 128)
        throw new E4("invalid signature integer: negative");
      if (data[0] === 0 && !(data[1] & 128))
        throw new E4("invalid signature integer: unnecessary leading zero");
      return bytesToNumberBE2(data);
    }
  },
  toSig(hex2) {
    const { Err: E4, _int: int, _tlv: tlv } = DER2;
    const data = ensureBytes2("signature", hex2);
    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(48, data);
    if (seqLeftBytes.length)
      throw new E4("invalid signature: left bytes after parsing");
    const { v: rBytes, l: rLeftBytes } = tlv.decode(2, seqBytes);
    const { v: sBytes, l: sLeftBytes } = tlv.decode(2, rLeftBytes);
    if (sLeftBytes.length)
      throw new E4("invalid signature: left bytes after parsing");
    return { r: int.decode(rBytes), s: int.decode(sBytes) };
  },
  hexFromSig(sig) {
    const { _tlv: tlv, _int: int } = DER2;
    const rs2 = tlv.encode(2, int.encode(sig.r));
    const ss3 = tlv.encode(2, int.encode(sig.s));
    const seq = rs2 + ss3;
    return tlv.encode(48, seq);
  }
};
var _0n15 = BigInt(0);
var _1n15 = BigInt(1);
var _2n11 = BigInt(2);
var _3n8 = BigInt(3);
var _4n5 = BigInt(4);
function _normFnElement(Fn4, key) {
  const { BYTES: expected } = Fn4;
  let num3;
  if (typeof key === "bigint") {
    num3 = key;
  } else {
    let bytes = ensureBytes2("private key", key);
    try {
      num3 = Fn4.fromBytes(bytes);
    } catch (error) {
      throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);
    }
  }
  if (!Fn4.isValidNot0(num3))
    throw new Error("invalid private key: out of range [1..N-1]");
  return num3;
}
function weierstrassN(params, extraOpts = {}) {
  const validated = _createCurveFields("weierstrass", params, extraOpts);
  const { Fp: Fp4, Fn: Fn4 } = validated;
  let CURVE = validated.CURVE;
  const { h: cofactor, n: CURVE_ORDER } = CURVE;
  _validateObject(extraOpts, {}, {
    allowInfinityPoint: "boolean",
    clearCofactor: "function",
    isTorsionFree: "function",
    fromBytes: "function",
    toBytes: "function",
    endo: "object",
    wrapPrivateKey: "boolean"
  });
  const { endo } = extraOpts;
  if (endo) {
    if (!Fp4.is0(CURVE.a) || typeof endo.beta !== "bigint" || !Array.isArray(endo.basises)) {
      throw new Error('invalid endo: expected "beta": bigint and "basises": array');
    }
  }
  const lengths = getWLengths(Fp4, Fn4);
  function assertCompressionIsSupported() {
    if (!Fp4.isOdd)
      throw new Error("compression is not supported: Field does not have .isOdd()");
  }
  function pointToBytes3(_c2, point, isCompressed) {
    const { x: x5, y: y4 } = point.toAffine();
    const bx = Fp4.toBytes(x5);
    _abool2(isCompressed, "isCompressed");
    if (isCompressed) {
      assertCompressionIsSupported();
      const hasEvenY = !Fp4.isOdd(y4);
      return concatBytes(pprefix(hasEvenY), bx);
    } else {
      return concatBytes(Uint8Array.of(4), bx, Fp4.toBytes(y4));
    }
  }
  function pointFromBytes(bytes) {
    _abytes2(bytes, void 0, "Point");
    const { publicKey: comp, publicKeyUncompressed: uncomp } = lengths;
    const length2 = bytes.length;
    const head = bytes[0];
    const tail = bytes.subarray(1);
    if (length2 === comp && (head === 2 || head === 3)) {
      const x5 = Fp4.fromBytes(tail);
      if (!Fp4.isValid(x5))
        throw new Error("bad point: is not on curve, wrong x");
      const y22 = weierstrassEquation(x5);
      let y4;
      try {
        y4 = Fp4.sqrt(y22);
      } catch (sqrtError) {
        const err = sqrtError instanceof Error ? ": " + sqrtError.message : "";
        throw new Error("bad point: is not on curve, sqrt error" + err);
      }
      assertCompressionIsSupported();
      const isYOdd = Fp4.isOdd(y4);
      const isHeadOdd = (head & 1) === 1;
      if (isHeadOdd !== isYOdd)
        y4 = Fp4.neg(y4);
      return { x: x5, y: y4 };
    } else if (length2 === uncomp && head === 4) {
      const L3 = Fp4.BYTES;
      const x5 = Fp4.fromBytes(tail.subarray(0, L3));
      const y4 = Fp4.fromBytes(tail.subarray(L3, L3 * 2));
      if (!isValidXY(x5, y4))
        throw new Error("bad point: is not on curve");
      return { x: x5, y: y4 };
    } else {
      throw new Error(`bad point: got length ${length2}, expected compressed=${comp} or uncompressed=${uncomp}`);
    }
  }
  const encodePoint = extraOpts.toBytes || pointToBytes3;
  const decodePoint = extraOpts.fromBytes || pointFromBytes;
  function weierstrassEquation(x5) {
    const x22 = Fp4.sqr(x5);
    const x32 = Fp4.mul(x22, x5);
    return Fp4.add(Fp4.add(x32, Fp4.mul(x5, CURVE.a)), CURVE.b);
  }
  function isValidXY(x5, y4) {
    const left = Fp4.sqr(y4);
    const right = weierstrassEquation(x5);
    return Fp4.eql(left, right);
  }
  if (!isValidXY(CURVE.Gx, CURVE.Gy))
    throw new Error("bad curve params: generator point");
  const _4a3 = Fp4.mul(Fp4.pow(CURVE.a, _3n8), _4n5);
  const _27b2 = Fp4.mul(Fp4.sqr(CURVE.b), BigInt(27));
  if (Fp4.is0(Fp4.add(_4a3, _27b2)))
    throw new Error("bad curve params: a or b");
  function acoord(title, n4, banZero = false) {
    if (!Fp4.isValid(n4) || banZero && Fp4.is0(n4))
      throw new Error(`bad point coordinate ${title}`);
    return n4;
  }
  function aprjpoint(other) {
    if (!(other instanceof Point3))
      throw new Error("ProjectivePoint expected");
  }
  function splitEndoScalarN(k4) {
    if (!endo || !endo.basises)
      throw new Error("no endo");
    return _splitEndoScalar(k4, endo.basises, Fn4.ORDER);
  }
  const toAffineMemo = memoized2((p4, iz) => {
    const { X: X4, Y: Y3, Z: Z2 } = p4;
    if (Fp4.eql(Z2, Fp4.ONE))
      return { x: X4, y: Y3 };
    const is0 = p4.is0();
    if (iz == null)
      iz = is0 ? Fp4.ONE : Fp4.inv(Z2);
    const x5 = Fp4.mul(X4, iz);
    const y4 = Fp4.mul(Y3, iz);
    const zz = Fp4.mul(Z2, iz);
    if (is0)
      return { x: Fp4.ZERO, y: Fp4.ZERO };
    if (!Fp4.eql(zz, Fp4.ONE))
      throw new Error("invZ was invalid");
    return { x: x5, y: y4 };
  });
  const assertValidMemo = memoized2((p4) => {
    if (p4.is0()) {
      if (extraOpts.allowInfinityPoint && !Fp4.is0(p4.Y))
        return;
      throw new Error("bad point: ZERO");
    }
    const { x: x5, y: y4 } = p4.toAffine();
    if (!Fp4.isValid(x5) || !Fp4.isValid(y4))
      throw new Error("bad point: x or y not field elements");
    if (!isValidXY(x5, y4))
      throw new Error("bad point: equation left != right");
    if (!p4.isTorsionFree())
      throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  function finishEndo(endoBeta, k1p, k2p, k1neg, k2neg) {
    k2p = new Point3(Fp4.mul(k2p.X, endoBeta), k2p.Y, k2p.Z);
    k1p = negateCt(k1neg, k1p);
    k2p = negateCt(k2neg, k2p);
    return k1p.add(k2p);
  }
  class Point3 {
    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */
    constructor(X4, Y3, Z2) {
      this.X = acoord("x", X4);
      this.Y = acoord("y", Y3, true);
      this.Z = acoord("z", Z2);
      Object.freeze(this);
    }
    static CURVE() {
      return CURVE;
    }
    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */
    static fromAffine(p4) {
      const { x: x5, y: y4 } = p4 || {};
      if (!p4 || !Fp4.isValid(x5) || !Fp4.isValid(y4))
        throw new Error("invalid affine point");
      if (p4 instanceof Point3)
        throw new Error("projective point not allowed");
      if (Fp4.is0(x5) && Fp4.is0(y4))
        return Point3.ZERO;
      return new Point3(x5, y4, Fp4.ONE);
    }
    static fromBytes(bytes) {
      const P6 = Point3.fromAffine(decodePoint(_abytes2(bytes, void 0, "point")));
      P6.assertValidity();
      return P6;
    }
    static fromHex(hex2) {
      return Point3.fromBytes(ensureBytes2("pointHex", hex2));
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     *
     * @param windowSize
     * @param isLazy true will defer table computation until the first multiplication
     * @returns
     */
    precompute(windowSize = 8, isLazy = true) {
      wnaf.createCache(this, windowSize);
      if (!isLazy)
        this.multiply(_3n8);
      return this;
    }
    // TODO: return `this`
    /** A point on curve is valid if it conforms to equation. */
    assertValidity() {
      assertValidMemo(this);
    }
    hasEvenY() {
      const { y: y4 } = this.toAffine();
      if (!Fp4.isOdd)
        throw new Error("Field doesn't support isOdd");
      return !Fp4.isOdd(y4);
    }
    /** Compare one point to another. */
    equals(other) {
      aprjpoint(other);
      const { X: X1, Y: Y1, Z: Z1 } = this;
      const { X: X22, Y: Y22, Z: Z2 } = other;
      const U1 = Fp4.eql(Fp4.mul(X1, Z2), Fp4.mul(X22, Z1));
      const U22 = Fp4.eql(Fp4.mul(Y1, Z2), Fp4.mul(Y22, Z1));
      return U1 && U22;
    }
    /** Flips point to one corresponding to (x, -y) in Affine coordinates. */
    negate() {
      return new Point3(this.X, Fp4.neg(this.Y), this.Z);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: a3, b: b4 } = CURVE;
      const b32 = Fp4.mul(b4, _3n8);
      const { X: X1, Y: Y1, Z: Z1 } = this;
      let X32 = Fp4.ZERO, Y3 = Fp4.ZERO, Z3 = Fp4.ZERO;
      let t0 = Fp4.mul(X1, X1);
      let t1 = Fp4.mul(Y1, Y1);
      let t2 = Fp4.mul(Z1, Z1);
      let t3 = Fp4.mul(X1, Y1);
      t3 = Fp4.add(t3, t3);
      Z3 = Fp4.mul(X1, Z1);
      Z3 = Fp4.add(Z3, Z3);
      X32 = Fp4.mul(a3, Z3);
      Y3 = Fp4.mul(b32, t2);
      Y3 = Fp4.add(X32, Y3);
      X32 = Fp4.sub(t1, Y3);
      Y3 = Fp4.add(t1, Y3);
      Y3 = Fp4.mul(X32, Y3);
      X32 = Fp4.mul(t3, X32);
      Z3 = Fp4.mul(b32, Z3);
      t2 = Fp4.mul(a3, t2);
      t3 = Fp4.sub(t0, t2);
      t3 = Fp4.mul(a3, t3);
      t3 = Fp4.add(t3, Z3);
      Z3 = Fp4.add(t0, t0);
      t0 = Fp4.add(Z3, t0);
      t0 = Fp4.add(t0, t2);
      t0 = Fp4.mul(t0, t3);
      Y3 = Fp4.add(Y3, t0);
      t2 = Fp4.mul(Y1, Z1);
      t2 = Fp4.add(t2, t2);
      t0 = Fp4.mul(t2, t3);
      X32 = Fp4.sub(X32, t0);
      Z3 = Fp4.mul(t2, t1);
      Z3 = Fp4.add(Z3, Z3);
      Z3 = Fp4.add(Z3, Z3);
      return new Point3(X32, Y3, Z3);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(other) {
      aprjpoint(other);
      const { X: X1, Y: Y1, Z: Z1 } = this;
      const { X: X22, Y: Y22, Z: Z2 } = other;
      let X32 = Fp4.ZERO, Y3 = Fp4.ZERO, Z3 = Fp4.ZERO;
      const a3 = CURVE.a;
      const b32 = Fp4.mul(CURVE.b, _3n8);
      let t0 = Fp4.mul(X1, X22);
      let t1 = Fp4.mul(Y1, Y22);
      let t2 = Fp4.mul(Z1, Z2);
      let t3 = Fp4.add(X1, Y1);
      let t4 = Fp4.add(X22, Y22);
      t3 = Fp4.mul(t3, t4);
      t4 = Fp4.add(t0, t1);
      t3 = Fp4.sub(t3, t4);
      t4 = Fp4.add(X1, Z1);
      let t5 = Fp4.add(X22, Z2);
      t4 = Fp4.mul(t4, t5);
      t5 = Fp4.add(t0, t2);
      t4 = Fp4.sub(t4, t5);
      t5 = Fp4.add(Y1, Z1);
      X32 = Fp4.add(Y22, Z2);
      t5 = Fp4.mul(t5, X32);
      X32 = Fp4.add(t1, t2);
      t5 = Fp4.sub(t5, X32);
      Z3 = Fp4.mul(a3, t4);
      X32 = Fp4.mul(b32, t2);
      Z3 = Fp4.add(X32, Z3);
      X32 = Fp4.sub(t1, Z3);
      Z3 = Fp4.add(t1, Z3);
      Y3 = Fp4.mul(X32, Z3);
      t1 = Fp4.add(t0, t0);
      t1 = Fp4.add(t1, t0);
      t2 = Fp4.mul(a3, t2);
      t4 = Fp4.mul(b32, t4);
      t1 = Fp4.add(t1, t2);
      t2 = Fp4.sub(t0, t2);
      t2 = Fp4.mul(a3, t2);
      t4 = Fp4.add(t4, t2);
      t0 = Fp4.mul(t1, t4);
      Y3 = Fp4.add(Y3, t0);
      t0 = Fp4.mul(t5, t4);
      X32 = Fp4.mul(t3, X32);
      X32 = Fp4.sub(X32, t0);
      t0 = Fp4.mul(t3, t1);
      Z3 = Fp4.mul(t5, Z3);
      Z3 = Fp4.add(Z3, t0);
      return new Point3(X32, Y3, Z3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    is0() {
      return this.equals(Point3.ZERO);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(scalar) {
      const { endo: endo2 } = extraOpts;
      if (!Fn4.isValidNot0(scalar))
        throw new Error("invalid scalar: out of range");
      let point, fake;
      const mul3 = (n4) => wnaf.cached(this, n4, (p4) => normalizeZ(Point3, p4));
      if (endo2) {
        const { k1neg, k1, k2neg, k2: k22 } = splitEndoScalarN(scalar);
        const { p: k1p, f: k1f } = mul3(k1);
        const { p: k2p, f: k2f } = mul3(k22);
        fake = k1f.add(k2f);
        point = finishEndo(endo2.beta, k1p, k2p, k1neg, k2neg);
      } else {
        const { p: p4, f: f6 } = mul3(scalar);
        point = p4;
        fake = f6;
      }
      return normalizeZ(Point3, [point, fake])[0];
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed secret key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(sc2) {
      const { endo: endo2 } = extraOpts;
      const p4 = this;
      if (!Fn4.isValid(sc2))
        throw new Error("invalid scalar: out of range");
      if (sc2 === _0n15 || p4.is0())
        return Point3.ZERO;
      if (sc2 === _1n15)
        return p4;
      if (wnaf.hasCache(this))
        return this.multiply(sc2);
      if (endo2) {
        const { k1neg, k1, k2neg, k2: k22 } = splitEndoScalarN(sc2);
        const { p1, p2: p22 } = mulEndoUnsafe(Point3, p4, k1, k22);
        return finishEndo(endo2.beta, p1, p22, k1neg, k2neg);
      } else {
        return wnaf.unsafe(p4, sc2);
      }
    }
    multiplyAndAddUnsafe(Q4, a3, b4) {
      const sum = this.multiplyUnsafe(a3).add(Q4.multiplyUnsafe(b4));
      return sum.is0() ? void 0 : sum;
    }
    /**
     * Converts Projective point to affine (x, y) coordinates.
     * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch
     */
    toAffine(invertedZ) {
      return toAffineMemo(this, invertedZ);
    }
    /**
     * Checks whether Point is free of torsion elements (is in prime subgroup).
     * Always torsion-free for cofactor=1 curves.
     */
    isTorsionFree() {
      const { isTorsionFree } = extraOpts;
      if (cofactor === _1n15)
        return true;
      if (isTorsionFree)
        return isTorsionFree(Point3, this);
      return wnaf.unsafe(this, CURVE_ORDER).is0();
    }
    clearCofactor() {
      const { clearCofactor } = extraOpts;
      if (cofactor === _1n15)
        return this;
      if (clearCofactor)
        return clearCofactor(Point3, this);
      return this.multiplyUnsafe(cofactor);
    }
    isSmallOrder() {
      return this.multiplyUnsafe(cofactor).is0();
    }
    toBytes(isCompressed = true) {
      _abool2(isCompressed, "isCompressed");
      this.assertValidity();
      return encodePoint(Point3, this, isCompressed);
    }
    toHex(isCompressed = true) {
      return bytesToHex(this.toBytes(isCompressed));
    }
    toString() {
      return `<Point ${this.is0() ? "ZERO" : this.toHex()}>`;
    }
    // TODO: remove
    get px() {
      return this.X;
    }
    get py() {
      return this.X;
    }
    get pz() {
      return this.Z;
    }
    toRawBytes(isCompressed = true) {
      return this.toBytes(isCompressed);
    }
    _setWindowSize(windowSize) {
      this.precompute(windowSize);
    }
    static normalizeZ(points) {
      return normalizeZ(Point3, points);
    }
    static msm(points, scalars) {
      return pippenger2(Point3, Fn4, points, scalars);
    }
    static fromPrivateKey(privateKey) {
      return Point3.BASE.multiply(_normFnElement(Fn4, privateKey));
    }
  }
  Point3.BASE = new Point3(CURVE.Gx, CURVE.Gy, Fp4.ONE);
  Point3.ZERO = new Point3(Fp4.ZERO, Fp4.ONE, Fp4.ZERO);
  Point3.Fp = Fp4;
  Point3.Fn = Fn4;
  const bits = Fn4.BITS;
  const wnaf = new wNAF2(Point3, extraOpts.endo ? Math.ceil(bits / 2) : bits);
  Point3.BASE.precompute(8);
  return Point3;
}
function pprefix(hasEvenY) {
  return Uint8Array.of(hasEvenY ? 2 : 3);
}
function SWUFpSqrtRatio2(Fp4, Z2) {
  const q2 = Fp4.ORDER;
  let l6 = _0n15;
  for (let o5 = q2 - _1n15; o5 % _2n11 === _0n15; o5 /= _2n11)
    l6 += _1n15;
  const c1 = l6;
  const _2n_pow_c1_1 = _2n11 << c1 - _1n15 - _1n15;
  const _2n_pow_c1 = _2n_pow_c1_1 * _2n11;
  const c22 = (q2 - _1n15) / _2n_pow_c1;
  const c32 = (c22 - _1n15) / _2n11;
  const c42 = _2n_pow_c1 - _1n15;
  const c52 = _2n_pow_c1_1;
  const c6 = Fp4.pow(Z2, c22);
  const c7 = Fp4.pow(Z2, (c22 + _1n15) / _2n11);
  let sqrtRatio = (u2, v6) => {
    let tv1 = c6;
    let tv2 = Fp4.pow(v6, c42);
    let tv3 = Fp4.sqr(tv2);
    tv3 = Fp4.mul(tv3, v6);
    let tv5 = Fp4.mul(u2, tv3);
    tv5 = Fp4.pow(tv5, c32);
    tv5 = Fp4.mul(tv5, tv2);
    tv2 = Fp4.mul(tv5, v6);
    tv3 = Fp4.mul(tv5, u2);
    let tv4 = Fp4.mul(tv3, tv2);
    tv5 = Fp4.pow(tv4, c52);
    let isQR = Fp4.eql(tv5, Fp4.ONE);
    tv2 = Fp4.mul(tv3, c7);
    tv5 = Fp4.mul(tv4, tv1);
    tv3 = Fp4.cmov(tv2, tv3, isQR);
    tv4 = Fp4.cmov(tv5, tv4, isQR);
    for (let i3 = c1; i3 > _1n15; i3--) {
      let tv52 = i3 - _2n11;
      tv52 = _2n11 << tv52 - _1n15;
      let tvv5 = Fp4.pow(tv4, tv52);
      const e1 = Fp4.eql(tvv5, Fp4.ONE);
      tv2 = Fp4.mul(tv3, tv1);
      tv1 = Fp4.mul(tv1, tv1);
      tvv5 = Fp4.mul(tv4, tv1);
      tv3 = Fp4.cmov(tv2, tv3, e1);
      tv4 = Fp4.cmov(tvv5, tv4, e1);
    }
    return { isValid: isQR, value: tv3 };
  };
  if (Fp4.ORDER % _4n5 === _3n8) {
    const c12 = (Fp4.ORDER - _3n8) / _4n5;
    const c23 = Fp4.sqrt(Fp4.neg(Z2));
    sqrtRatio = (u2, v6) => {
      let tv1 = Fp4.sqr(v6);
      const tv2 = Fp4.mul(u2, v6);
      tv1 = Fp4.mul(tv1, tv2);
      let y1 = Fp4.pow(tv1, c12);
      y1 = Fp4.mul(y1, tv2);
      const y22 = Fp4.mul(y1, c23);
      const tv3 = Fp4.mul(Fp4.sqr(y1), v6);
      const isQR = Fp4.eql(tv3, u2);
      let y4 = Fp4.cmov(y22, y1, isQR);
      return { isValid: isQR, value: y4 };
    };
  }
  return sqrtRatio;
}
function mapToCurveSimpleSWU2(Fp4, opts) {
  validateField2(Fp4);
  const { A: A3, B: B2, Z: Z2 } = opts;
  if (!Fp4.isValid(A3) || !Fp4.isValid(B2) || !Fp4.isValid(Z2))
    throw new Error("mapToCurveSimpleSWU: invalid opts");
  const sqrtRatio = SWUFpSqrtRatio2(Fp4, Z2);
  if (!Fp4.isOdd)
    throw new Error("Field does not have .isOdd()");
  return (u2) => {
    let tv1, tv2, tv3, tv4, tv5, tv6, x5, y4;
    tv1 = Fp4.sqr(u2);
    tv1 = Fp4.mul(tv1, Z2);
    tv2 = Fp4.sqr(tv1);
    tv2 = Fp4.add(tv2, tv1);
    tv3 = Fp4.add(tv2, Fp4.ONE);
    tv3 = Fp4.mul(tv3, B2);
    tv4 = Fp4.cmov(Z2, Fp4.neg(tv2), !Fp4.eql(tv2, Fp4.ZERO));
    tv4 = Fp4.mul(tv4, A3);
    tv2 = Fp4.sqr(tv3);
    tv6 = Fp4.sqr(tv4);
    tv5 = Fp4.mul(tv6, A3);
    tv2 = Fp4.add(tv2, tv5);
    tv2 = Fp4.mul(tv2, tv3);
    tv6 = Fp4.mul(tv6, tv4);
    tv5 = Fp4.mul(tv6, B2);
    tv2 = Fp4.add(tv2, tv5);
    x5 = Fp4.mul(tv1, tv3);
    const { isValid, value } = sqrtRatio(tv2, tv6);
    y4 = Fp4.mul(tv1, u2);
    y4 = Fp4.mul(y4, value);
    x5 = Fp4.cmov(x5, tv3, isValid);
    y4 = Fp4.cmov(y4, value, isValid);
    const e1 = Fp4.isOdd(u2) === Fp4.isOdd(y4);
    y4 = Fp4.cmov(Fp4.neg(y4), y4, e1);
    const tv4_inv = FpInvertBatch2(Fp4, [tv4], true)[0];
    x5 = Fp4.mul(x5, tv4_inv);
    return { x: x5, y: y4 };
  };
}
function getWLengths(Fp4, Fn4) {
  return {
    secretKey: Fn4.BYTES,
    publicKey: 1 + Fp4.BYTES,
    publicKeyUncompressed: 1 + 2 * Fp4.BYTES,
    publicKeyHasPrefix: true,
    signature: 2 * Fn4.BYTES
  };
}
function ecdh(Point3, ecdhOpts = {}) {
  const { Fn: Fn4 } = Point3;
  const randomBytes_ = ecdhOpts.randomBytes || randomBytes;
  const lengths = Object.assign(getWLengths(Point3.Fp, Fn4), { seed: getMinHashLength2(Fn4.ORDER) });
  function isValidSecretKey(secretKey) {
    try {
      return !!_normFnElement(Fn4, secretKey);
    } catch (error) {
      return false;
    }
  }
  function isValidPublicKey(publicKey, isCompressed) {
    const { publicKey: comp, publicKeyUncompressed } = lengths;
    try {
      const l6 = publicKey.length;
      if (isCompressed === true && l6 !== comp)
        return false;
      if (isCompressed === false && l6 !== publicKeyUncompressed)
        return false;
      return !!Point3.fromBytes(publicKey);
    } catch (error) {
      return false;
    }
  }
  function randomSecretKey(seed = randomBytes_(lengths.seed)) {
    return mapHashToField2(_abytes2(seed, lengths.seed, "seed"), Fn4.ORDER);
  }
  function getPublicKey2(secretKey, isCompressed = true) {
    return Point3.BASE.multiply(_normFnElement(Fn4, secretKey)).toBytes(isCompressed);
  }
  function keygen(seed) {
    const secretKey = randomSecretKey(seed);
    return { secretKey, publicKey: getPublicKey2(secretKey) };
  }
  function isProbPub(item) {
    if (typeof item === "bigint")
      return false;
    if (item instanceof Point3)
      return true;
    const { secretKey, publicKey, publicKeyUncompressed } = lengths;
    if (Fn4.allowedLengths || secretKey === publicKey)
      return void 0;
    const l6 = ensureBytes2("key", item).length;
    return l6 === publicKey || l6 === publicKeyUncompressed;
  }
  function getSharedSecret2(secretKeyA, publicKeyB, isCompressed = true) {
    if (isProbPub(secretKeyA) === true)
      throw new Error("first arg must be private key");
    if (isProbPub(publicKeyB) === false)
      throw new Error("second arg must be public key");
    const s2 = _normFnElement(Fn4, secretKeyA);
    const b4 = Point3.fromHex(publicKeyB);
    return b4.multiply(s2).toBytes(isCompressed);
  }
  const utils2 = {
    isValidSecretKey,
    isValidPublicKey,
    randomSecretKey,
    // TODO: remove
    isValidPrivateKey: isValidSecretKey,
    randomPrivateKey: randomSecretKey,
    normPrivateKeyToScalar: (key) => _normFnElement(Fn4, key),
    precompute(windowSize = 8, point = Point3.BASE) {
      return point.precompute(windowSize, false);
    }
  };
  return Object.freeze({ getPublicKey: getPublicKey2, getSharedSecret: getSharedSecret2, keygen, Point: Point3, utils: utils2, lengths });
}
function ecdsa(Point3, hash, ecdsaOpts = {}) {
  ahash(hash);
  _validateObject(ecdsaOpts, {}, {
    hmac: "function",
    lowS: "boolean",
    randomBytes: "function",
    bits2int: "function",
    bits2int_modN: "function"
  });
  const randomBytes2 = ecdsaOpts.randomBytes || randomBytes;
  const hmac2 = ecdsaOpts.hmac || ((key, ...msgs) => hmac(hash, key, concatBytes(...msgs)));
  const { Fp: Fp4, Fn: Fn4 } = Point3;
  const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn4;
  const { keygen, getPublicKey: getPublicKey2, getSharedSecret: getSharedSecret2, utils: utils2, lengths } = ecdh(Point3, ecdsaOpts);
  const defaultSigOpts = {
    prehash: false,
    lowS: typeof ecdsaOpts.lowS === "boolean" ? ecdsaOpts.lowS : false,
    format: void 0,
    //'compact' as ECDSASigFormat,
    extraEntropy: false
  };
  const defaultSigOpts_format = "compact";
  function isBiggerThanHalfOrder(number) {
    const HALF = CURVE_ORDER >> _1n15;
    return number > HALF;
  }
  function validateRS(title, num3) {
    if (!Fn4.isValidNot0(num3))
      throw new Error(`invalid signature ${title}: out of range 1..Point.Fn.ORDER`);
    return num3;
  }
  function validateSigLength(bytes, format2) {
    validateSigFormat(format2);
    const size3 = lengths.signature;
    const sizer = format2 === "compact" ? size3 : format2 === "recovered" ? size3 + 1 : void 0;
    return _abytes2(bytes, sizer, `${format2} signature`);
  }
  class Signature {
    constructor(r3, s2, recovery) {
      this.r = validateRS("r", r3);
      this.s = validateRS("s", s2);
      if (recovery != null)
        this.recovery = recovery;
      Object.freeze(this);
    }
    static fromBytes(bytes, format2 = defaultSigOpts_format) {
      validateSigLength(bytes, format2);
      let recid;
      if (format2 === "der") {
        const { r: r4, s: s3 } = DER2.toSig(_abytes2(bytes));
        return new Signature(r4, s3);
      }
      if (format2 === "recovered") {
        recid = bytes[0];
        format2 = "compact";
        bytes = bytes.subarray(1);
      }
      const L3 = Fn4.BYTES;
      const r3 = bytes.subarray(0, L3);
      const s2 = bytes.subarray(L3, L3 * 2);
      return new Signature(Fn4.fromBytes(r3), Fn4.fromBytes(s2), recid);
    }
    static fromHex(hex2, format2) {
      return this.fromBytes(hexToBytes(hex2), format2);
    }
    addRecoveryBit(recovery) {
      return new Signature(this.r, this.s, recovery);
    }
    recoverPublicKey(messageHash) {
      const FIELD_ORDER = Fp4.ORDER;
      const { r: r3, s: s2, recovery: rec } = this;
      if (rec == null || ![0, 1, 2, 3].includes(rec))
        throw new Error("recovery id invalid");
      const hasCofactor = CURVE_ORDER * _2n11 < FIELD_ORDER;
      if (hasCofactor && rec > 1)
        throw new Error("recovery id is ambiguous for h>1 curve");
      const radj = rec === 2 || rec === 3 ? r3 + CURVE_ORDER : r3;
      if (!Fp4.isValid(radj))
        throw new Error("recovery id 2 or 3 invalid");
      const x5 = Fp4.toBytes(radj);
      const R4 = Point3.fromBytes(concatBytes(pprefix((rec & 1) === 0), x5));
      const ir3 = Fn4.inv(radj);
      const h4 = bits2int_modN(ensureBytes2("msgHash", messageHash));
      const u1 = Fn4.create(-h4 * ir3);
      const u2 = Fn4.create(s2 * ir3);
      const Q4 = Point3.BASE.multiplyUnsafe(u1).add(R4.multiplyUnsafe(u2));
      if (Q4.is0())
        throw new Error("point at infinify");
      Q4.assertValidity();
      return Q4;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return isBiggerThanHalfOrder(this.s);
    }
    toBytes(format2 = defaultSigOpts_format) {
      validateSigFormat(format2);
      if (format2 === "der")
        return hexToBytes(DER2.hexFromSig(this));
      const r3 = Fn4.toBytes(this.r);
      const s2 = Fn4.toBytes(this.s);
      if (format2 === "recovered") {
        if (this.recovery == null)
          throw new Error("recovery bit must be present");
        return concatBytes(Uint8Array.of(this.recovery), r3, s2);
      }
      return concatBytes(r3, s2);
    }
    toHex(format2) {
      return bytesToHex(this.toBytes(format2));
    }
    // TODO: remove
    assertValidity() {
    }
    static fromCompact(hex2) {
      return Signature.fromBytes(ensureBytes2("sig", hex2), "compact");
    }
    static fromDER(hex2) {
      return Signature.fromBytes(ensureBytes2("sig", hex2), "der");
    }
    normalizeS() {
      return this.hasHighS() ? new Signature(this.r, Fn4.neg(this.s), this.recovery) : this;
    }
    toDERRawBytes() {
      return this.toBytes("der");
    }
    toDERHex() {
      return bytesToHex(this.toBytes("der"));
    }
    toCompactRawBytes() {
      return this.toBytes("compact");
    }
    toCompactHex() {
      return bytesToHex(this.toBytes("compact"));
    }
  }
  const bits2int = ecdsaOpts.bits2int || function bits2int_def(bytes) {
    if (bytes.length > 8192)
      throw new Error("input is too large");
    const num3 = bytesToNumberBE2(bytes);
    const delta = bytes.length * 8 - fnBits;
    return delta > 0 ? num3 >> BigInt(delta) : num3;
  };
  const bits2int_modN = ecdsaOpts.bits2int_modN || function bits2int_modN_def(bytes) {
    return Fn4.create(bits2int(bytes));
  };
  const ORDER_MASK = bitMask2(fnBits);
  function int2octets(num3) {
    aInRange2("num < 2^" + fnBits, num3, _0n15, ORDER_MASK);
    return Fn4.toBytes(num3);
  }
  function validateMsgAndHash(message, prehash) {
    _abytes2(message, void 0, "message");
    return prehash ? _abytes2(hash(message), void 0, "prehashed message") : message;
  }
  function prepSig(message, privateKey, opts) {
    if (["recovered", "canonical"].some((k4) => k4 in opts))
      throw new Error("sign() legacy options not supported");
    const { lowS, prehash, extraEntropy: extraEntropy2 } = validateSigOpts(opts, defaultSigOpts);
    message = validateMsgAndHash(message, prehash);
    const h1int = bits2int_modN(message);
    const d7 = _normFnElement(Fn4, privateKey);
    const seedArgs = [int2octets(d7), int2octets(h1int)];
    if (extraEntropy2 != null && extraEntropy2 !== false) {
      const e2 = extraEntropy2 === true ? randomBytes2(lengths.secretKey) : extraEntropy2;
      seedArgs.push(ensureBytes2("extraEntropy", e2));
    }
    const seed = concatBytes(...seedArgs);
    const m4 = h1int;
    function k2sig(kBytes) {
      const k4 = bits2int(kBytes);
      if (!Fn4.isValidNot0(k4))
        return;
      const ik = Fn4.inv(k4);
      const q2 = Point3.BASE.multiply(k4).toAffine();
      const r3 = Fn4.create(q2.x);
      if (r3 === _0n15)
        return;
      const s2 = Fn4.create(ik * Fn4.create(m4 + r3 * d7));
      if (s2 === _0n15)
        return;
      let recovery = (q2.x === r3 ? 0 : 2) | Number(q2.y & _1n15);
      let normS = s2;
      if (lowS && isBiggerThanHalfOrder(s2)) {
        normS = Fn4.neg(s2);
        recovery ^= 1;
      }
      return new Signature(r3, normS, recovery);
    }
    return { seed, k2sig };
  }
  function sign2(message, secretKey, opts = {}) {
    message = ensureBytes2("message", message);
    const { seed, k2sig } = prepSig(message, secretKey, opts);
    const drbg = createHmacDrbg2(hash.outputLen, Fn4.BYTES, hmac2);
    const sig = drbg(seed, k2sig);
    return sig;
  }
  function tryParsingSig(sg) {
    let sig = void 0;
    const isHex = typeof sg === "string" || isBytes(sg);
    const isObj = !isHex && sg !== null && typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint";
    if (!isHex && !isObj)
      throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    if (isObj) {
      sig = new Signature(sg.r, sg.s);
    } else if (isHex) {
      try {
        sig = Signature.fromBytes(ensureBytes2("sig", sg), "der");
      } catch (derError) {
        if (!(derError instanceof DER2.Err))
          throw derError;
      }
      if (!sig) {
        try {
          sig = Signature.fromBytes(ensureBytes2("sig", sg), "compact");
        } catch (error) {
          return false;
        }
      }
    }
    if (!sig)
      return false;
    return sig;
  }
  function verify3(signature, message, publicKey, opts = {}) {
    const { lowS, prehash, format: format2 } = validateSigOpts(opts, defaultSigOpts);
    publicKey = ensureBytes2("publicKey", publicKey);
    message = validateMsgAndHash(ensureBytes2("message", message), prehash);
    if ("strict" in opts)
      throw new Error("options.strict was renamed to lowS");
    const sig = format2 === void 0 ? tryParsingSig(signature) : Signature.fromBytes(ensureBytes2("sig", signature), format2);
    if (sig === false)
      return false;
    try {
      const P6 = Point3.fromBytes(publicKey);
      if (lowS && sig.hasHighS())
        return false;
      const { r: r3, s: s2 } = sig;
      const h4 = bits2int_modN(message);
      const is4 = Fn4.inv(s2);
      const u1 = Fn4.create(h4 * is4);
      const u2 = Fn4.create(r3 * is4);
      const R4 = Point3.BASE.multiplyUnsafe(u1).add(P6.multiplyUnsafe(u2));
      if (R4.is0())
        return false;
      const v6 = Fn4.create(R4.x);
      return v6 === r3;
    } catch (e2) {
      return false;
    }
  }
  function recoverPublicKey2(signature, message, opts = {}) {
    const { prehash } = validateSigOpts(opts, defaultSigOpts);
    message = validateMsgAndHash(message, prehash);
    return Signature.fromBytes(signature, "recovered").recoverPublicKey(message).toBytes();
  }
  return Object.freeze({
    keygen,
    getPublicKey: getPublicKey2,
    getSharedSecret: getSharedSecret2,
    utils: utils2,
    lengths,
    Point: Point3,
    sign: sign2,
    verify: verify3,
    recoverPublicKey: recoverPublicKey2,
    Signature,
    hash
  });
}
function _weierstrass_legacy_opts_to_new(c6) {
  const CURVE = {
    a: c6.a,
    b: c6.b,
    p: c6.Fp.ORDER,
    n: c6.n,
    h: c6.h,
    Gx: c6.Gx,
    Gy: c6.Gy
  };
  const Fp4 = c6.Fp;
  let allowedLengths = c6.allowedPrivateKeyLengths ? Array.from(new Set(c6.allowedPrivateKeyLengths.map((l6) => Math.ceil(l6 / 2)))) : void 0;
  const Fn4 = Field2(CURVE.n, {
    BITS: c6.nBitLength,
    allowedLengths,
    modFromBytes: c6.wrapPrivateKey
  });
  const curveOpts = {
    Fp: Fp4,
    Fn: Fn4,
    allowInfinityPoint: c6.allowInfinityPoint,
    endo: c6.endo,
    isTorsionFree: c6.isTorsionFree,
    clearCofactor: c6.clearCofactor,
    fromBytes: c6.fromBytes,
    toBytes: c6.toBytes
  };
  return { CURVE, curveOpts };
}
function _ecdsa_legacy_opts_to_new(c6) {
  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c6);
  const ecdsaOpts = {
    hmac: c6.hmac,
    randomBytes: c6.randomBytes,
    lowS: c6.lowS,
    bits2int: c6.bits2int,
    bits2int_modN: c6.bits2int_modN
  };
  return { CURVE, curveOpts, hash: c6.hash, ecdsaOpts };
}
function _ecdsa_new_output_to_legacy(c6, _ecdsa) {
  const Point3 = _ecdsa.Point;
  return Object.assign({}, _ecdsa, {
    ProjectivePoint: Point3,
    CURVE: Object.assign({}, c6, nLength2(Point3.Fn.ORDER, Point3.Fn.BITS))
  });
}
function weierstrass2(c6) {
  const { CURVE, curveOpts, hash, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c6);
  const Point3 = weierstrassN(CURVE, curveOpts);
  const signs = ecdsa(Point3, hash, ecdsaOpts);
  return _ecdsa_new_output_to_legacy(c6, signs);
}

// node_modules/@scure/bip32/node_modules/@noble/curves/esm/_shortw_utils.js
function createCurve2(curveDef, defHash) {
  const create4 = (hash) => weierstrass2({ ...curveDef, hash });
  return { ...create4(defHash), create: create4 };
}

// node_modules/@scure/bip32/node_modules/@noble/curves/esm/abstract/hash-to-curve.js
var os2ip2 = bytesToNumberBE2;
function i2osp2(value, length2) {
  anum2(value);
  anum2(length2);
  if (value < 0 || value >= 1 << 8 * length2)
    throw new Error("invalid I2OSP input: " + value);
  const res = Array.from({ length: length2 }).fill(0);
  for (let i3 = length2 - 1; i3 >= 0; i3--) {
    res[i3] = value & 255;
    value >>>= 8;
  }
  return new Uint8Array(res);
}
function strxor2(a3, b4) {
  const arr = new Uint8Array(a3.length);
  for (let i3 = 0; i3 < a3.length; i3++) {
    arr[i3] = a3[i3] ^ b4[i3];
  }
  return arr;
}
function anum2(item) {
  if (!Number.isSafeInteger(item))
    throw new Error("number expected");
}
function normDST(DST) {
  if (!isBytes(DST) && typeof DST !== "string")
    throw new Error("DST must be Uint8Array or string");
  return typeof DST === "string" ? utf8ToBytes(DST) : DST;
}
function expand_message_xmd2(msg, DST, lenInBytes, H3) {
  abytes(msg);
  anum2(lenInBytes);
  DST = normDST(DST);
  if (DST.length > 255)
    DST = H3(concatBytes(utf8ToBytes("H2C-OVERSIZE-DST-"), DST));
  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H3;
  const ell = Math.ceil(lenInBytes / b_in_bytes);
  if (lenInBytes > 65535 || ell > 255)
    throw new Error("expand_message_xmd: invalid lenInBytes");
  const DST_prime = concatBytes(DST, i2osp2(DST.length, 1));
  const Z_pad = i2osp2(0, r_in_bytes);
  const l_i_b_str = i2osp2(lenInBytes, 2);
  const b4 = new Array(ell);
  const b_0 = H3(concatBytes(Z_pad, msg, l_i_b_str, i2osp2(0, 1), DST_prime));
  b4[0] = H3(concatBytes(b_0, i2osp2(1, 1), DST_prime));
  for (let i3 = 1; i3 <= ell; i3++) {
    const args = [strxor2(b_0, b4[i3 - 1]), i2osp2(i3 + 1, 1), DST_prime];
    b4[i3] = H3(concatBytes(...args));
  }
  const pseudo_random_bytes = concatBytes(...b4);
  return pseudo_random_bytes.slice(0, lenInBytes);
}
function expand_message_xof2(msg, DST, lenInBytes, k4, H3) {
  abytes(msg);
  anum2(lenInBytes);
  DST = normDST(DST);
  if (DST.length > 255) {
    const dkLen = Math.ceil(2 * k4 / 8);
    DST = H3.create({ dkLen }).update(utf8ToBytes("H2C-OVERSIZE-DST-")).update(DST).digest();
  }
  if (lenInBytes > 65535 || DST.length > 255)
    throw new Error("expand_message_xof: invalid lenInBytes");
  return H3.create({ dkLen: lenInBytes }).update(msg).update(i2osp2(lenInBytes, 2)).update(DST).update(i2osp2(DST.length, 1)).digest();
}
function hash_to_field2(msg, count, options) {
  _validateObject(options, {
    p: "bigint",
    m: "number",
    k: "number",
    hash: "function"
  });
  const { p: p4, k: k4, m: m4, hash, expand, DST } = options;
  if (!isHash(options.hash))
    throw new Error("expected valid hash");
  abytes(msg);
  anum2(count);
  const log2p = p4.toString(2).length;
  const L3 = Math.ceil((log2p + k4) / 8);
  const len_in_bytes = count * m4 * L3;
  let prb;
  if (expand === "xmd") {
    prb = expand_message_xmd2(msg, DST, len_in_bytes, hash);
  } else if (expand === "xof") {
    prb = expand_message_xof2(msg, DST, len_in_bytes, k4, hash);
  } else if (expand === "_internal_pass") {
    prb = msg;
  } else {
    throw new Error('expand must be "xmd" or "xof"');
  }
  const u2 = new Array(count);
  for (let i3 = 0; i3 < count; i3++) {
    const e2 = new Array(m4);
    for (let j6 = 0; j6 < m4; j6++) {
      const elm_offset = L3 * (j6 + i3 * m4);
      const tv = prb.subarray(elm_offset, elm_offset + L3);
      e2[j6] = mod2(os2ip2(tv), p4);
    }
    u2[i3] = e2;
  }
  return u2;
}
function isogenyMap2(field, map) {
  const coeff = map.map((i3) => Array.from(i3).reverse());
  return (x5, y4) => {
    const [xn4, xd, yn4, yd] = coeff.map((val) => val.reduce((acc, i3) => field.add(field.mul(acc, x5), i3)));
    const [xd_inv, yd_inv] = FpInvertBatch2(field, [xd, yd], true);
    x5 = field.mul(xn4, xd_inv);
    y4 = field.mul(y4, field.mul(yn4, yd_inv));
    return { x: x5, y: y4 };
  };
}
var _DST_scalar = utf8ToBytes("HashToScalar-");
function createHasher2(Point3, mapToCurve, defaults) {
  if (typeof mapToCurve !== "function")
    throw new Error("mapToCurve() must be defined");
  function map(num3) {
    return Point3.fromAffine(mapToCurve(num3));
  }
  function clear2(initial) {
    const P6 = initial.clearCofactor();
    if (P6.equals(Point3.ZERO))
      return Point3.ZERO;
    P6.assertValidity();
    return P6;
  }
  return {
    defaults,
    hashToCurve(msg, options) {
      const opts = Object.assign({}, defaults, options);
      const u2 = hash_to_field2(msg, 2, opts);
      const u0 = map(u2[0]);
      const u1 = map(u2[1]);
      return clear2(u0.add(u1));
    },
    encodeToCurve(msg, options) {
      const optsDst = defaults.encodeDST ? { DST: defaults.encodeDST } : {};
      const opts = Object.assign({}, defaults, optsDst, options);
      const u2 = hash_to_field2(msg, 1, opts);
      const u0 = map(u2[0]);
      return clear2(u0);
    },
    /** See {@link H2CHasher} */
    mapToCurve(scalars) {
      if (!Array.isArray(scalars))
        throw new Error("expected array of bigints");
      for (const i3 of scalars)
        if (typeof i3 !== "bigint")
          throw new Error("expected array of bigints");
      return clear2(map(scalars));
    },
    // hash_to_scalar can produce 0: https://www.rfc-editor.org/errata/eid8393
    // RFC 9380, draft-irtf-cfrg-bbs-signatures-08
    hashToScalar(msg, options) {
      const N12 = Point3.Fn.ORDER;
      const opts = Object.assign({}, defaults, { p: N12, m: 1, DST: _DST_scalar }, options);
      return hash_to_field2(msg, 1, opts)[0][0];
    }
  };
}

// node_modules/@scure/bip32/node_modules/@noble/curves/esm/secp256k1.js
var secp256k1_CURVE = {
  p: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),
  n: BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),
  h: BigInt(1),
  a: BigInt(0),
  b: BigInt(7),
  Gx: BigInt("0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
  Gy: BigInt("0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8")
};
var secp256k1_ENDO = {
  beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
  basises: [
    [BigInt("0x3086d221a7d46bcde86c90e49284eb15"), -BigInt("0xe4437ed6010e88286f547fa90abfe4c3")],
    [BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), BigInt("0x3086d221a7d46bcde86c90e49284eb15")]
  ]
};
var _0n16 = BigInt(0);
var _1n16 = BigInt(1);
var _2n12 = BigInt(2);
function sqrtMod2(y4) {
  const P6 = secp256k1_CURVE.p;
  const _3n9 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
  const b22 = y4 * y4 * y4 % P6;
  const b32 = b22 * b22 * y4 % P6;
  const b6 = pow22(b32, _3n9, P6) * b32 % P6;
  const b9 = pow22(b6, _3n9, P6) * b32 % P6;
  const b11 = pow22(b9, _2n12, P6) * b22 % P6;
  const b222 = pow22(b11, _11n, P6) * b11 % P6;
  const b44 = pow22(b222, _22n, P6) * b222 % P6;
  const b88 = pow22(b44, _44n, P6) * b44 % P6;
  const b176 = pow22(b88, _88n, P6) * b88 % P6;
  const b220 = pow22(b176, _44n, P6) * b44 % P6;
  const b223 = pow22(b220, _3n9, P6) * b32 % P6;
  const t1 = pow22(b223, _23n, P6) * b222 % P6;
  const t2 = pow22(t1, _6n, P6) * b22 % P6;
  const root = pow22(t2, _2n12, P6);
  if (!Fpk12.eql(Fpk12.sqr(root), y4))
    throw new Error("Cannot find square root");
  return root;
}
var Fpk12 = Field2(secp256k1_CURVE.p, { sqrt: sqrtMod2 });
var secp256k12 = createCurve2({ ...secp256k1_CURVE, Fp: Fpk12, lowS: true, endo: secp256k1_ENDO }, sha256);
var TAGGED_HASH_PREFIXES2 = {};
function taggedHash2(tag2, ...messages) {
  let tagP = TAGGED_HASH_PREFIXES2[tag2];
  if (tagP === void 0) {
    const tagH = sha256(utf8ToBytes(tag2));
    tagP = concatBytes(tagH, tagH);
    TAGGED_HASH_PREFIXES2[tag2] = tagP;
  }
  return sha256(concatBytes(tagP, ...messages));
}
var pointToBytes2 = (point) => point.toBytes(true).slice(1);
var Pointk1 = (() => secp256k12.Point)();
var hasEven = (y4) => y4 % _2n12 === _0n16;
function schnorrGetExtPubKey2(priv) {
  const { Fn: Fn4, BASE } = Pointk1;
  const d_ = _normFnElement(Fn4, priv);
  const p4 = BASE.multiply(d_);
  const scalar = hasEven(p4.y) ? d_ : Fn4.neg(d_);
  return { scalar, bytes: pointToBytes2(p4) };
}
function lift_x2(x5) {
  const Fp4 = Fpk12;
  if (!Fp4.isValidNot0(x5))
    throw new Error("invalid x: Fail if x ≥ p");
  const xx = Fp4.create(x5 * x5);
  const c6 = Fp4.create(xx * x5 + BigInt(7));
  let y4 = Fp4.sqrt(c6);
  if (!hasEven(y4))
    y4 = Fp4.neg(y4);
  const p4 = Pointk1.fromAffine({ x: x5, y: y4 });
  p4.assertValidity();
  return p4;
}
var num2 = bytesToNumberBE2;
function challenge2(...args) {
  return Pointk1.Fn.create(num2(taggedHash2("BIP0340/challenge", ...args)));
}
function schnorrGetPublicKey2(secretKey) {
  return schnorrGetExtPubKey2(secretKey).bytes;
}
function schnorrSign2(message, secretKey, auxRand = randomBytes(32)) {
  const { Fn: Fn4 } = Pointk1;
  const m4 = ensureBytes2("message", message);
  const { bytes: px, scalar: d7 } = schnorrGetExtPubKey2(secretKey);
  const a3 = ensureBytes2("auxRand", auxRand, 32);
  const t = Fn4.toBytes(d7 ^ num2(taggedHash2("BIP0340/aux", a3)));
  const rand = taggedHash2("BIP0340/nonce", t, px, m4);
  const { bytes: rx, scalar: k4 } = schnorrGetExtPubKey2(rand);
  const e2 = challenge2(rx, px, m4);
  const sig = new Uint8Array(64);
  sig.set(rx, 0);
  sig.set(Fn4.toBytes(Fn4.create(k4 + e2 * d7)), 32);
  if (!schnorrVerify2(sig, m4, px))
    throw new Error("sign: Invalid signature produced");
  return sig;
}
function schnorrVerify2(signature, message, publicKey) {
  const { Fn: Fn4, BASE } = Pointk1;
  const sig = ensureBytes2("signature", signature, 64);
  const m4 = ensureBytes2("message", message);
  const pub = ensureBytes2("publicKey", publicKey, 32);
  try {
    const P6 = lift_x2(num2(pub));
    const r3 = num2(sig.subarray(0, 32));
    if (!inRange2(r3, _1n16, secp256k1_CURVE.p))
      return false;
    const s2 = num2(sig.subarray(32, 64));
    if (!inRange2(s2, _1n16, secp256k1_CURVE.n))
      return false;
    const e2 = challenge2(Fn4.toBytes(r3), pointToBytes2(P6), m4);
    const R4 = BASE.multiplyUnsafe(s2).add(P6.multiplyUnsafe(Fn4.neg(e2)));
    const { x: x5, y: y4 } = R4.toAffine();
    if (R4.is0() || !hasEven(y4) || x5 !== r3)
      return false;
    return true;
  } catch (error) {
    return false;
  }
}
var schnorr2 = (() => {
  const size3 = 32;
  const seedLength = 48;
  const randomSecretKey = (seed = randomBytes(seedLength)) => {
    return mapHashToField2(seed, secp256k1_CURVE.n);
  };
  secp256k12.utils.randomSecretKey;
  function keygen(seed) {
    const secretKey = randomSecretKey(seed);
    return { secretKey, publicKey: schnorrGetPublicKey2(secretKey) };
  }
  return {
    keygen,
    getPublicKey: schnorrGetPublicKey2,
    sign: schnorrSign2,
    verify: schnorrVerify2,
    Point: Pointk1,
    utils: {
      randomSecretKey,
      randomPrivateKey: randomSecretKey,
      taggedHash: taggedHash2,
      // TODO: remove
      lift_x: lift_x2,
      pointToBytes: pointToBytes2,
      numberToBytesBE: numberToBytesBE2,
      bytesToNumberBE: bytesToNumberBE2,
      mod: mod2
    },
    lengths: {
      secretKey: size3,
      publicKey: size3,
      publicKeyHasPrefix: false,
      signature: size3 * 2,
      seed: seedLength
    }
  };
})();
var isoMap2 = (() => isogenyMap2(Fpk12, [
  // xNum
  [
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
    "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
    "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
  ],
  // xDen
  [
    "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
    "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ],
  // yNum
  [
    "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
    "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
    "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
    "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
  ],
  // yDen
  [
    "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
    "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
    "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ]
].map((i3) => i3.map((j6) => BigInt(j6)))))();
var mapSWU2 = (() => mapToCurveSimpleSWU2(Fpk12, {
  A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
  B: BigInt("1771"),
  Z: Fpk12.create(BigInt("-11"))
}))();
var secp256k1_hasher2 = (() => createHasher2(secp256k12.Point, (scalars) => {
  const { x: x5, y: y4 } = mapSWU2(Fpk12.create(scalars[0]));
  return isoMap2(x5, y4);
}, {
  DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
  encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
  p: Fpk12.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha256
}))();
var hashToCurve3 = (() => secp256k1_hasher2.hashToCurve)();
var encodeToCurve3 = (() => secp256k1_hasher2.encodeToCurve)();

// node_modules/@scure/base/lib/esm/index.js
function isBytes3(a3) {
  return a3 instanceof Uint8Array || ArrayBuffer.isView(a3) && a3.constructor.name === "Uint8Array";
}
function abytes3(b4, ...lengths) {
  if (!isBytes3(b4))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b4.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b4.length);
}
function isArrayOf(isString, arr) {
  if (!Array.isArray(arr))
    return false;
  if (arr.length === 0)
    return true;
  if (isString) {
    return arr.every((item) => typeof item === "string");
  } else {
    return arr.every((item) => Number.isSafeInteger(item));
  }
}
function afn(input) {
  if (typeof input !== "function")
    throw new Error("function expected");
  return true;
}
function astr(label, input) {
  if (typeof input !== "string")
    throw new Error(`${label}: string expected`);
  return true;
}
function anumber2(n4) {
  if (!Number.isSafeInteger(n4))
    throw new Error(`invalid integer: ${n4}`);
}
function aArr(input) {
  if (!Array.isArray(input))
    throw new Error("array expected");
}
function astrArr(label, input) {
  if (!isArrayOf(true, input))
    throw new Error(`${label}: array of strings expected`);
}
function anumArr(label, input) {
  if (!isArrayOf(false, input))
    throw new Error(`${label}: array of numbers expected`);
}
function chain(...args) {
  const id = (a3) => a3;
  const wrap2 = (a3, b4) => (c6) => a3(b4(c6));
  const encode8 = args.map((x5) => x5.encode).reduceRight(wrap2, id);
  const decode8 = args.map((x5) => x5.decode).reduce(wrap2, id);
  return { encode: encode8, decode: decode8 };
}
function alphabet(letters) {
  const lettersA = typeof letters === "string" ? letters.split("") : letters;
  const len = lettersA.length;
  astrArr("alphabet", lettersA);
  const indexes = new Map(lettersA.map((l6, i3) => [l6, i3]));
  return {
    encode: (digits) => {
      aArr(digits);
      return digits.map((i3) => {
        if (!Number.isSafeInteger(i3) || i3 < 0 || i3 >= len)
          throw new Error(`alphabet.encode: digit index outside alphabet "${i3}". Allowed: ${letters}`);
        return lettersA[i3];
      });
    },
    decode: (input) => {
      aArr(input);
      return input.map((letter) => {
        astr("alphabet.decode", letter);
        const i3 = indexes.get(letter);
        if (i3 === void 0)
          throw new Error(`Unknown letter: "${letter}". Allowed: ${letters}`);
        return i3;
      });
    }
  };
}
function join(separator = "") {
  astr("join", separator);
  return {
    encode: (from11) => {
      astrArr("join.decode", from11);
      return from11.join(separator);
    },
    decode: (to4) => {
      astr("join.decode", to4);
      return to4.split(separator);
    }
  };
}
function padding(bits, chr = "=") {
  anumber2(bits);
  astr("padding", chr);
  return {
    encode(data) {
      astrArr("padding.encode", data);
      while (data.length * bits % 8)
        data.push(chr);
      return data;
    },
    decode(input) {
      astrArr("padding.decode", input);
      let end = input.length;
      if (end * bits % 8)
        throw new Error("padding: invalid, string should have whole number of bytes");
      for (; end > 0 && input[end - 1] === chr; end--) {
        const last = end - 1;
        const byte = last * bits;
        if (byte % 8 === 0)
          throw new Error("padding: invalid, string has too much padding");
      }
      return input.slice(0, end);
    }
  };
}
function normalize(fn3) {
  afn(fn3);
  return { encode: (from11) => from11, decode: (to4) => fn3(to4) };
}
function convertRadix(data, from11, to4) {
  if (from11 < 2)
    throw new Error(`convertRadix: invalid from=${from11}, base cannot be less than 2`);
  if (to4 < 2)
    throw new Error(`convertRadix: invalid to=${to4}, base cannot be less than 2`);
  aArr(data);
  if (!data.length)
    return [];
  let pos = 0;
  const res = [];
  const digits = Array.from(data, (d7) => {
    anumber2(d7);
    if (d7 < 0 || d7 >= from11)
      throw new Error(`invalid integer: ${d7}`);
    return d7;
  });
  const dlen = digits.length;
  while (true) {
    let carry = 0;
    let done = true;
    for (let i3 = pos; i3 < dlen; i3++) {
      const digit = digits[i3];
      const fromCarry = from11 * carry;
      const digitBase = fromCarry + digit;
      if (!Number.isSafeInteger(digitBase) || fromCarry / from11 !== carry || digitBase - digit !== fromCarry) {
        throw new Error("convertRadix: carry overflow");
      }
      const div = digitBase / to4;
      carry = digitBase % to4;
      const rounded = Math.floor(div);
      digits[i3] = rounded;
      if (!Number.isSafeInteger(rounded) || rounded * to4 + carry !== digitBase)
        throw new Error("convertRadix: carry overflow");
      if (!done)
        continue;
      else if (!rounded)
        pos = i3;
      else
        done = false;
    }
    res.push(carry);
    if (done)
      break;
  }
  for (let i3 = 0; i3 < data.length - 1 && data[i3] === 0; i3++)
    res.push(0);
  return res.reverse();
}
var gcd = (a3, b4) => b4 === 0 ? a3 : gcd(b4, a3 % b4);
var radix2carry = (from11, to4) => from11 + (to4 - gcd(from11, to4));
var powers = (() => {
  let res = [];
  for (let i3 = 0; i3 < 40; i3++)
    res.push(2 ** i3);
  return res;
})();
function convertRadix2(data, from11, to4, padding2) {
  aArr(data);
  if (from11 <= 0 || from11 > 32)
    throw new Error(`convertRadix2: wrong from=${from11}`);
  if (to4 <= 0 || to4 > 32)
    throw new Error(`convertRadix2: wrong to=${to4}`);
  if (radix2carry(from11, to4) > 32) {
    throw new Error(`convertRadix2: carry overflow from=${from11} to=${to4} carryBits=${radix2carry(from11, to4)}`);
  }
  let carry = 0;
  let pos = 0;
  const max = powers[from11];
  const mask = powers[to4] - 1;
  const res = [];
  for (const n4 of data) {
    anumber2(n4);
    if (n4 >= max)
      throw new Error(`convertRadix2: invalid data word=${n4} from=${from11}`);
    carry = carry << from11 | n4;
    if (pos + from11 > 32)
      throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from11}`);
    pos += from11;
    for (; pos >= to4; pos -= to4)
      res.push((carry >> pos - to4 & mask) >>> 0);
    const pow = powers[pos];
    if (pow === void 0)
      throw new Error("invalid carry");
    carry &= pow - 1;
  }
  carry = carry << to4 - pos & mask;
  if (!padding2 && pos >= from11)
    throw new Error("Excess padding");
  if (!padding2 && carry > 0)
    throw new Error(`Non-zero padding: ${carry}`);
  if (padding2 && pos > 0)
    res.push(carry >>> 0);
  return res;
}
function radix(num3) {
  anumber2(num3);
  const _256 = 2 ** 8;
  return {
    encode: (bytes) => {
      if (!isBytes3(bytes))
        throw new Error("radix.encode input should be Uint8Array");
      return convertRadix(Array.from(bytes), _256, num3);
    },
    decode: (digits) => {
      anumArr("radix.decode", digits);
      return Uint8Array.from(convertRadix(digits, num3, _256));
    }
  };
}
function radix2(bits, revPadding = false) {
  anumber2(bits);
  if (bits <= 0 || bits > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (bytes) => {
      if (!isBytes3(bytes))
        throw new Error("radix2.encode input should be Uint8Array");
      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);
    },
    decode: (digits) => {
      anumArr("radix2.decode", digits);
      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
    }
  };
}
function unsafeWrapper(fn3) {
  afn(fn3);
  return function(...args) {
    try {
      return fn3.apply(null, args);
    } catch (e2) {
    }
  };
}
function checksum3(len, fn3) {
  anumber2(len);
  afn(fn3);
  return {
    encode(data) {
      if (!isBytes3(data))
        throw new Error("checksum.encode: input should be Uint8Array");
      const sum = fn3(data).slice(0, len);
      const res = new Uint8Array(data.length + len);
      res.set(data);
      res.set(sum, data.length);
      return res;
    },
    decode(data) {
      if (!isBytes3(data))
        throw new Error("checksum.decode: input should be Uint8Array");
      const payload = data.slice(0, -len);
      const oldChecksum = data.slice(-len);
      const newChecksum = fn3(payload).slice(0, len);
      for (let i3 = 0; i3 < len; i3++)
        if (newChecksum[i3] !== oldChecksum[i3])
          throw new Error("Invalid checksum");
      return payload;
    }
  };
}
var base16 = chain(radix2(4), alphabet("0123456789ABCDEF"), join(""));
var base32 = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding(5), join(""));
var base32nopad = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), join(""));
var base32hex = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding(5), join(""));
var base32hexnopad = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), join(""));
var base32crockford = chain(radix2(5), alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join(""), normalize((s2) => s2.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
var hasBase64Builtin = (() => typeof Uint8Array.from([]).toBase64 === "function" && typeof Uint8Array.fromBase64 === "function")();
var decodeBase64Builtin = (s2, isUrl) => {
  astr("base64", s2);
  const re4 = isUrl ? /^[A-Za-z0-9=_-]+$/ : /^[A-Za-z0-9=+/]+$/;
  const alphabet3 = isUrl ? "base64url" : "base64";
  if (s2.length > 0 && !re4.test(s2))
    throw new Error("invalid base64");
  return Uint8Array.fromBase64(s2, { alphabet: alphabet3, lastChunkHandling: "strict" });
};
var base64 = hasBase64Builtin ? {
  encode(b4) {
    abytes3(b4);
    return b4.toBase64();
  },
  decode(s2) {
    return decodeBase64Builtin(s2, false);
  }
} : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding(6), join(""));
var base64nopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), join(""));
var base64url = hasBase64Builtin ? {
  encode(b4) {
    abytes3(b4);
    return b4.toBase64({ alphabet: "base64url" });
  },
  decode(s2) {
    return decodeBase64Builtin(s2, true);
  }
} : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding(6), join(""));
var base64urlnopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), join(""));
var genBase58 = (abc) => chain(radix(58), alphabet(abc), join(""));
var base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
var base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
var base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
var createBase58check = (sha2565) => chain(checksum3(4, (data) => sha2565(sha2565(data))), base58);
var BECH_ALPHABET = chain(alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join(""));
var POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
function bech32Polymod(pre) {
  const b4 = pre >> 25;
  let chk = (pre & 33554431) << 5;
  for (let i3 = 0; i3 < POLYMOD_GENERATORS.length; i3++) {
    if ((b4 >> i3 & 1) === 1)
      chk ^= POLYMOD_GENERATORS[i3];
  }
  return chk;
}
function bechChecksum(prefix, words, encodingConst = 1) {
  const len = prefix.length;
  let chk = 1;
  for (let i3 = 0; i3 < len; i3++) {
    const c6 = prefix.charCodeAt(i3);
    if (c6 < 33 || c6 > 126)
      throw new Error(`Invalid prefix (${prefix})`);
    chk = bech32Polymod(chk) ^ c6 >> 5;
  }
  chk = bech32Polymod(chk);
  for (let i3 = 0; i3 < len; i3++)
    chk = bech32Polymod(chk) ^ prefix.charCodeAt(i3) & 31;
  for (let v6 of words)
    chk = bech32Polymod(chk) ^ v6;
  for (let i3 = 0; i3 < 6; i3++)
    chk = bech32Polymod(chk);
  chk ^= encodingConst;
  return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]], 30, 5, false));
}
function genBech32(encoding) {
  const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
  const _words = radix2(5);
  const fromWords = _words.decode;
  const toWords = _words.encode;
  const fromWordsUnsafe = unsafeWrapper(fromWords);
  function encode8(prefix, words, limit2 = 90) {
    astr("bech32.encode prefix", prefix);
    if (isBytes3(words))
      words = Array.from(words);
    anumArr("bech32.encode", words);
    const plen = prefix.length;
    if (plen === 0)
      throw new TypeError(`Invalid prefix length ${plen}`);
    const actualLength = plen + 7 + words.length;
    if (limit2 !== false && actualLength > limit2)
      throw new TypeError(`Length ${actualLength} exceeds limit ${limit2}`);
    const lowered = prefix.toLowerCase();
    const sum = bechChecksum(lowered, words, ENCODING_CONST);
    return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
  }
  function decode8(str, limit2 = 90) {
    astr("bech32.decode input", str);
    const slen = str.length;
    if (slen < 8 || limit2 !== false && slen > limit2)
      throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit2})`);
    const lowered = str.toLowerCase();
    if (str !== lowered && str !== str.toUpperCase())
      throw new Error(`String must be lowercase or uppercase`);
    const sepIndex = lowered.lastIndexOf("1");
    if (sepIndex === 0 || sepIndex === -1)
      throw new Error(`Letter "1" must be present between prefix and data only`);
    const prefix = lowered.slice(0, sepIndex);
    const data = lowered.slice(sepIndex + 1);
    if (data.length < 6)
      throw new Error("Data must be at least 6 characters long");
    const words = BECH_ALPHABET.decode(data).slice(0, -6);
    const sum = bechChecksum(prefix, words, ENCODING_CONST);
    if (!data.endsWith(sum))
      throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
    return { prefix, words };
  }
  const decodeUnsafe = unsafeWrapper(decode8);
  function decodeToBytes(str) {
    const { prefix, words } = decode8(str, false);
    return { prefix, words, bytes: fromWords(words) };
  }
  function encodeFromBytes(prefix, bytes) {
    return encode8(prefix, toWords(bytes));
  }
  return {
    encode: encode8,
    decode: decode8,
    encodeFromBytes,
    decodeToBytes,
    decodeUnsafe,
    fromWords,
    fromWordsUnsafe,
    toWords
  };
}
var bech32 = genBech32("bech32");
var bech32m = genBech32("bech32m");
var hasHexBuiltin2 = (() => typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function")();
var hexBuiltin = {
  encode(data) {
    abytes3(data);
    return data.toHex();
  },
  decode(s2) {
    astr("hex", s2);
    return Uint8Array.fromHex(s2);
  }
};
var hex = hasHexBuiltin2 ? hexBuiltin : chain(radix2(4), alphabet("0123456789abcdef"), join(""), normalize((s2) => {
  if (typeof s2 !== "string" || s2.length % 2 !== 0)
    throw new TypeError(`hex.decode: expected string, got ${typeof s2} with length ${s2.length}`);
  return s2.toLowerCase();
}));

// node_modules/@scure/bip32/lib/esm/index.js
var Point2 = secp256k12.ProjectivePoint;
var base58check = createBase58check(sha256);
var MASTER_SECRET = utf8ToBytes("Bitcoin seed");

// node_modules/ox/_esm/core/Secp256k1.js
var Secp256k1_exports = {};
__export(Secp256k1_exports, {
  createKeyPair: () => createKeyPair,
  getPublicKey: () => getPublicKey,
  getSharedSecret: () => getSharedSecret,
  noble: () => noble,
  randomPrivateKey: () => randomPrivateKey,
  recoverAddress: () => recoverAddress,
  recoverPublicKey: () => recoverPublicKey,
  sign: () => sign,
  verify: () => verify
});

// node_modules/ox/_esm/core/internal/entropy.js
var extraEntropy = false;

// node_modules/ox/_esm/core/Secp256k1.js
var noble = secp256k1;
function createKeyPair(options = {}) {
  const { as: as2 = "Hex" } = options;
  const privateKey = randomPrivateKey({ as: as2 });
  const publicKey = getPublicKey({ privateKey });
  return {
    privateKey,
    publicKey
  };
}
function getPublicKey(options) {
  const { privateKey } = options;
  const point = secp256k1.ProjectivePoint.fromPrivateKey(from(privateKey).slice(2));
  return from3(point);
}
function getSharedSecret(options) {
  const { as: as2 = "Hex", privateKey, publicKey } = options;
  const point = secp256k1.ProjectivePoint.fromHex(toHex(publicKey).slice(2));
  const sharedPoint = point.multiply(secp256k1.utils.normPrivateKeyToScalar(from(privateKey).slice(2)));
  const sharedSecret = sharedPoint.toRawBytes(true);
  if (as2 === "Hex")
    return fromBytes(sharedSecret);
  return sharedSecret;
}
function randomPrivateKey(options = {}) {
  const { as: as2 = "Hex" } = options;
  const bytes = secp256k1.utils.randomPrivateKey();
  if (as2 === "Hex")
    return fromBytes(bytes);
  return bytes;
}
function recoverAddress(options) {
  return fromPublicKey(recoverPublicKey(options));
}
function recoverPublicKey(options) {
  const { payload, signature } = options;
  const { r: r3, s: s2, yParity } = signature;
  const signature_ = new secp256k1.Signature(BigInt(r3), BigInt(s2)).addRecoveryBit(yParity);
  const point = signature_.recoverPublicKey(from(payload).substring(2));
  return from3(point);
}
function sign(options) {
  const { extraEntropy: extraEntropy2 = extraEntropy, hash, payload, privateKey } = options;
  const { r: r3, s: s2, recovery } = secp256k1.sign(from2(payload), from2(privateKey), {
    extraEntropy: typeof extraEntropy2 === "boolean" ? extraEntropy2 : from(extraEntropy2).slice(2),
    lowS: true,
    ...hash ? { prehash: true } : {}
  });
  return {
    r: r3,
    s: s2,
    yParity: recovery
  };
}
function verify(options) {
  const { address, hash, payload, publicKey, signature } = options;
  if (address)
    return isEqual(address, recoverAddress({ payload, signature }));
  return secp256k1.verify(signature, from2(payload), toBytes2(publicKey), ...hash ? [{ prehash: true, lowS: true }] : []);
}

// node_modules/@noble/ciphers/esm/utils.js
function isBytes4(a3) {
  return a3 instanceof Uint8Array || ArrayBuffer.isView(a3) && a3.constructor.name === "Uint8Array";
}
function abool2(b4) {
  if (typeof b4 !== "boolean")
    throw new Error(`boolean expected, not ${b4}`);
}
function abytes4(b4, ...lengths) {
  if (!isBytes4(b4))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b4.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b4.length);
}
function aexists2(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function aoutput2(out, instance) {
  abytes4(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error("digestInto() expects output buffer of length at least " + min);
  }
}
function u82(arr) {
  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
}
function u322(arr) {
  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
}
function clean2(...arrays) {
  for (let i3 = 0; i3 < arrays.length; i3++) {
    arrays[i3].fill(0);
  }
}
function createView2(arr) {
  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
var isLE = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
var hasHexBuiltin3 = (() => (
  // @ts-ignore
  typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
))();
var hexes3 = Array.from({ length: 256 }, (_3, i3) => i3.toString(16).padStart(2, "0"));
function utf8ToBytes3(str) {
  if (typeof str !== "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes5(data) {
  if (typeof data === "string")
    data = utf8ToBytes3(data);
  else if (isBytes4(data))
    data = copyBytes(data);
  else
    throw new Error("Uint8Array expected, got " + typeof data);
  return data;
}
function overlapBytes(a3, b4) {
  return a3.buffer === b4.buffer && // best we can do, may fail with an obscure Proxy
  a3.byteOffset < b4.byteOffset + b4.byteLength && // a starts before b end
  b4.byteOffset < a3.byteOffset + a3.byteLength;
}
function complexOverlapBytes(input, output) {
  if (overlapBytes(input, output) && input.byteOffset < output.byteOffset)
    throw new Error("complex overlap of input and output is not supported");
}
function concatBytes3(...arrays) {
  let sum = 0;
  for (let i3 = 0; i3 < arrays.length; i3++) {
    const a3 = arrays[i3];
    abytes4(a3);
    sum += a3.length;
  }
  const res = new Uint8Array(sum);
  for (let i3 = 0, pad3 = 0; i3 < arrays.length; i3++) {
    const a3 = arrays[i3];
    res.set(a3, pad3);
    pad3 += a3.length;
  }
  return res;
}
function equalBytes2(a3, b4) {
  if (a3.length !== b4.length)
    return false;
  let diff = 0;
  for (let i3 = 0; i3 < a3.length; i3++)
    diff |= a3[i3] ^ b4[i3];
  return diff === 0;
}
var wrapCipher = (params, constructor) => {
  function wrappedCipher(key, ...args) {
    abytes4(key);
    if (!isLE)
      throw new Error("Non little-endian hardware is not yet supported");
    if (params.nonceLength !== void 0) {
      const nonce = args[0];
      if (!nonce)
        throw new Error("nonce / iv required");
      if (params.varSizeNonce)
        abytes4(nonce);
      else
        abytes4(nonce, params.nonceLength);
    }
    const tagl = params.tagLength;
    if (tagl && args[1] !== void 0) {
      abytes4(args[1]);
    }
    const cipher = constructor(key, ...args);
    const checkOutput = (fnLength, output) => {
      if (output !== void 0) {
        if (fnLength !== 2)
          throw new Error("cipher output not supported");
        abytes4(output);
      }
    };
    let called = false;
    const wrCipher = {
      encrypt(data, output) {
        if (called)
          throw new Error("cannot encrypt() twice with same key + nonce");
        called = true;
        abytes4(data);
        checkOutput(cipher.encrypt.length, output);
        return cipher.encrypt(data, output);
      },
      decrypt(data, output) {
        abytes4(data);
        if (tagl && data.length < tagl)
          throw new Error("invalid ciphertext length: smaller than tagLength=" + tagl);
        checkOutput(cipher.decrypt.length, output);
        return cipher.decrypt(data, output);
      }
    };
    return wrCipher;
  }
  Object.assign(wrappedCipher, params);
  return wrappedCipher;
};
function getOutput(expectedLength, out, onlyAligned = true) {
  if (out === void 0)
    return new Uint8Array(expectedLength);
  if (out.length !== expectedLength)
    throw new Error("invalid output length, expected " + expectedLength + ", got: " + out.length);
  if (onlyAligned && !isAligned32(out))
    throw new Error("invalid output, must be aligned");
  return out;
}
function setBigUint64(view, byteOffset, value, isLE2) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE2);
  const _32n = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n & _u32_max);
  const wl = Number(value & _u32_max);
  const h4 = isLE2 ? 4 : 0;
  const l6 = isLE2 ? 0 : 4;
  view.setUint32(byteOffset + h4, wh, isLE2);
  view.setUint32(byteOffset + l6, wl, isLE2);
}
function u64Lengths(dataLength, aadLength, isLE2) {
  abool2(isLE2);
  const num3 = new Uint8Array(16);
  const view = createView2(num3);
  setBigUint64(view, 0, BigInt(aadLength), isLE2);
  setBigUint64(view, 8, BigInt(dataLength), isLE2);
  return num3;
}
function isAligned32(bytes) {
  return bytes.byteOffset % 4 === 0;
}
function copyBytes(bytes) {
  return Uint8Array.from(bytes);
}

// node_modules/@noble/ciphers/esm/_polyval.js
var BLOCK_SIZE = 16;
var ZEROS16 = new Uint8Array(16);
var ZEROS32 = u322(ZEROS16);
var POLY = 225;
var mul2 = (s0, s1, s2, s3) => {
  const hiBit = s3 & 1;
  return {
    s3: s2 << 31 | s3 >>> 1,
    s2: s1 << 31 | s2 >>> 1,
    s1: s0 << 31 | s1 >>> 1,
    s0: s0 >>> 1 ^ POLY << 24 & -(hiBit & 1)
    // reduce % poly
  };
};
var swapLE = (n4) => (n4 >>> 0 & 255) << 24 | (n4 >>> 8 & 255) << 16 | (n4 >>> 16 & 255) << 8 | n4 >>> 24 & 255 | 0;
function _toGHASHKey(k4) {
  k4.reverse();
  const hiBit = k4[15] & 1;
  let carry = 0;
  for (let i3 = 0; i3 < k4.length; i3++) {
    const t = k4[i3];
    k4[i3] = t >>> 1 | carry;
    carry = (t & 1) << 7;
  }
  k4[0] ^= -hiBit & 225;
  return k4;
}
var estimateWindow = (bytes) => {
  if (bytes > 64 * 1024)
    return 8;
  if (bytes > 1024)
    return 4;
  return 2;
};
var GHASH = class {
  // We select bits per window adaptively based on expectedLength
  constructor(key, expectedLength) {
    this.blockLen = BLOCK_SIZE;
    this.outputLen = BLOCK_SIZE;
    this.s0 = 0;
    this.s1 = 0;
    this.s2 = 0;
    this.s3 = 0;
    this.finished = false;
    key = toBytes5(key);
    abytes4(key, 16);
    const kView = createView2(key);
    let k0 = kView.getUint32(0, false);
    let k1 = kView.getUint32(4, false);
    let k22 = kView.getUint32(8, false);
    let k32 = kView.getUint32(12, false);
    const doubles = [];
    for (let i3 = 0; i3 < 128; i3++) {
      doubles.push({ s0: swapLE(k0), s1: swapLE(k1), s2: swapLE(k22), s3: swapLE(k32) });
      ({ s0: k0, s1: k1, s2: k22, s3: k32 } = mul2(k0, k1, k22, k32));
    }
    const W6 = estimateWindow(expectedLength || 1024);
    if (![1, 2, 4, 8].includes(W6))
      throw new Error("ghash: invalid window size, expected 2, 4 or 8");
    this.W = W6;
    const bits = 128;
    const windows = bits / W6;
    const windowSize = this.windowSize = 2 ** W6;
    const items = [];
    for (let w5 = 0; w5 < windows; w5++) {
      for (let byte = 0; byte < windowSize; byte++) {
        let s0 = 0, s1 = 0, s2 = 0, s3 = 0;
        for (let j6 = 0; j6 < W6; j6++) {
          const bit = byte >>> W6 - j6 - 1 & 1;
          if (!bit)
            continue;
          const { s0: d0, s1: d1, s2: d22, s3: d32 } = doubles[W6 * w5 + j6];
          s0 ^= d0, s1 ^= d1, s2 ^= d22, s3 ^= d32;
        }
        items.push({ s0, s1, s2, s3 });
      }
    }
    this.t = items;
  }
  _updateBlock(s0, s1, s2, s3) {
    s0 ^= this.s0, s1 ^= this.s1, s2 ^= this.s2, s3 ^= this.s3;
    const { W: W6, t, windowSize } = this;
    let o0 = 0, o1 = 0, o22 = 0, o32 = 0;
    const mask = (1 << W6) - 1;
    let w5 = 0;
    for (const num3 of [s0, s1, s2, s3]) {
      for (let bytePos = 0; bytePos < 4; bytePos++) {
        const byte = num3 >>> 8 * bytePos & 255;
        for (let bitPos = 8 / W6 - 1; bitPos >= 0; bitPos--) {
          const bit = byte >>> W6 * bitPos & mask;
          const { s0: e0, s1: e1, s2: e2, s3: e3 } = t[w5 * windowSize + bit];
          o0 ^= e0, o1 ^= e1, o22 ^= e2, o32 ^= e3;
          w5 += 1;
        }
      }
    }
    this.s0 = o0;
    this.s1 = o1;
    this.s2 = o22;
    this.s3 = o32;
  }
  update(data) {
    aexists2(this);
    data = toBytes5(data);
    abytes4(data);
    const b32 = u322(data);
    const blocks = Math.floor(data.length / BLOCK_SIZE);
    const left = data.length % BLOCK_SIZE;
    for (let i3 = 0; i3 < blocks; i3++) {
      this._updateBlock(b32[i3 * 4 + 0], b32[i3 * 4 + 1], b32[i3 * 4 + 2], b32[i3 * 4 + 3]);
    }
    if (left) {
      ZEROS16.set(data.subarray(blocks * BLOCK_SIZE));
      this._updateBlock(ZEROS32[0], ZEROS32[1], ZEROS32[2], ZEROS32[3]);
      clean2(ZEROS32);
    }
    return this;
  }
  destroy() {
    const { t } = this;
    for (const elm of t) {
      elm.s0 = 0, elm.s1 = 0, elm.s2 = 0, elm.s3 = 0;
    }
  }
  digestInto(out) {
    aexists2(this);
    aoutput2(out, this);
    this.finished = true;
    const { s0, s1, s2, s3 } = this;
    const o32 = u322(out);
    o32[0] = s0;
    o32[1] = s1;
    o32[2] = s2;
    o32[3] = s3;
    return out;
  }
  digest() {
    const res = new Uint8Array(BLOCK_SIZE);
    this.digestInto(res);
    this.destroy();
    return res;
  }
};
var Polyval = class extends GHASH {
  constructor(key, expectedLength) {
    key = toBytes5(key);
    abytes4(key);
    const ghKey = _toGHASHKey(copyBytes(key));
    super(ghKey, expectedLength);
    clean2(ghKey);
  }
  update(data) {
    data = toBytes5(data);
    aexists2(this);
    const b32 = u322(data);
    const left = data.length % BLOCK_SIZE;
    const blocks = Math.floor(data.length / BLOCK_SIZE);
    for (let i3 = 0; i3 < blocks; i3++) {
      this._updateBlock(swapLE(b32[i3 * 4 + 3]), swapLE(b32[i3 * 4 + 2]), swapLE(b32[i3 * 4 + 1]), swapLE(b32[i3 * 4 + 0]));
    }
    if (left) {
      ZEROS16.set(data.subarray(blocks * BLOCK_SIZE));
      this._updateBlock(swapLE(ZEROS32[3]), swapLE(ZEROS32[2]), swapLE(ZEROS32[1]), swapLE(ZEROS32[0]));
      clean2(ZEROS32);
    }
    return this;
  }
  digestInto(out) {
    aexists2(this);
    aoutput2(out, this);
    this.finished = true;
    const { s0, s1, s2, s3 } = this;
    const o32 = u322(out);
    o32[0] = s0;
    o32[1] = s1;
    o32[2] = s2;
    o32[3] = s3;
    return out.reverse();
  }
};
function wrapConstructorWithKey(hashCons) {
  const hashC = (msg, key) => hashCons(key, msg.length).update(toBytes5(msg)).digest();
  const tmp = hashCons(new Uint8Array(16), 0);
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (key, expectedLength) => hashCons(key, expectedLength);
  return hashC;
}
var ghash = wrapConstructorWithKey((key, expectedLength) => new GHASH(key, expectedLength));
var polyval = wrapConstructorWithKey((key, expectedLength) => new Polyval(key, expectedLength));

// node_modules/@noble/ciphers/esm/aes.js
var BLOCK_SIZE2 = 16;
var BLOCK_SIZE32 = 4;
var EMPTY_BLOCK = new Uint8Array(BLOCK_SIZE2);
var POLY2 = 283;
function mul22(n4) {
  return n4 << 1 ^ POLY2 & -(n4 >> 7);
}
function mul(a3, b4) {
  let res = 0;
  for (; b4 > 0; b4 >>= 1) {
    res ^= a3 & -(b4 & 1);
    a3 = mul22(a3);
  }
  return res;
}
var sbox = (() => {
  const t = new Uint8Array(256);
  for (let i3 = 0, x5 = 1; i3 < 256; i3++, x5 ^= mul22(x5))
    t[i3] = x5;
  const box = new Uint8Array(256);
  box[0] = 99;
  for (let i3 = 0; i3 < 255; i3++) {
    let x5 = t[255 - i3];
    x5 |= x5 << 8;
    box[t[i3]] = (x5 ^ x5 >> 4 ^ x5 >> 5 ^ x5 >> 6 ^ x5 >> 7 ^ 99) & 255;
  }
  clean2(t);
  return box;
})();
var invSbox = sbox.map((_3, j6) => sbox.indexOf(j6));
var rotr32_8 = (n4) => n4 << 24 | n4 >>> 8;
var rotl32_8 = (n4) => n4 << 8 | n4 >>> 24;
var byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
function genTtable(sbox2, fn3) {
  if (sbox2.length !== 256)
    throw new Error("Wrong sbox length");
  const T02 = new Uint32Array(256).map((_3, j6) => fn3(sbox2[j6]));
  const T12 = T02.map(rotl32_8);
  const T22 = T12.map(rotl32_8);
  const T32 = T22.map(rotl32_8);
  const T01 = new Uint32Array(256 * 256);
  const T23 = new Uint32Array(256 * 256);
  const sbox22 = new Uint16Array(256 * 256);
  for (let i3 = 0; i3 < 256; i3++) {
    for (let j6 = 0; j6 < 256; j6++) {
      const idx = i3 * 256 + j6;
      T01[idx] = T02[i3] ^ T12[j6];
      T23[idx] = T22[i3] ^ T32[j6];
      sbox22[idx] = sbox2[i3] << 8 | sbox2[j6];
    }
  }
  return { sbox: sbox2, sbox2: sbox22, T0: T02, T1: T12, T2: T22, T3: T32, T01, T23 };
}
var tableEncoding = genTtable(sbox, (s2) => mul(s2, 3) << 24 | s2 << 16 | s2 << 8 | mul(s2, 2));
var tableDecoding = genTtable(invSbox, (s2) => mul(s2, 11) << 24 | mul(s2, 13) << 16 | mul(s2, 9) << 8 | mul(s2, 14));
var xPowers = (() => {
  const p4 = new Uint8Array(16);
  for (let i3 = 0, x5 = 1; i3 < 16; i3++, x5 = mul22(x5))
    p4[i3] = x5;
  return p4;
})();
function expandKeyLE(key) {
  abytes4(key);
  const len = key.length;
  if (![16, 24, 32].includes(len))
    throw new Error("aes: invalid key size, should be 16, 24 or 32, got " + len);
  const { sbox2 } = tableEncoding;
  const toClean = [];
  if (!isAligned32(key))
    toClean.push(key = copyBytes(key));
  const k32 = u322(key);
  const Nk = k32.length;
  const subByte = (n4) => applySbox(sbox2, n4, n4, n4, n4);
  const xk = new Uint32Array(len + 28);
  xk.set(k32);
  for (let i3 = Nk; i3 < xk.length; i3++) {
    let t = xk[i3 - 1];
    if (i3 % Nk === 0)
      t = subByte(rotr32_8(t)) ^ xPowers[i3 / Nk - 1];
    else if (Nk > 6 && i3 % Nk === 4)
      t = subByte(t);
    xk[i3] = xk[i3 - Nk] ^ t;
  }
  clean2(...toClean);
  return xk;
}
function expandKeyDecLE(key) {
  const encKey = expandKeyLE(key);
  const xk = encKey.slice();
  const Nk = encKey.length;
  const { sbox2 } = tableEncoding;
  const { T0: T02, T1: T12, T2: T22, T3: T32 } = tableDecoding;
  for (let i3 = 0; i3 < Nk; i3 += 4) {
    for (let j6 = 0; j6 < 4; j6++)
      xk[i3 + j6] = encKey[Nk - i3 - 4 + j6];
  }
  clean2(encKey);
  for (let i3 = 4; i3 < Nk - 4; i3++) {
    const x5 = xk[i3];
    const w5 = applySbox(sbox2, x5, x5, x5, x5);
    xk[i3] = T02[w5 & 255] ^ T12[w5 >>> 8 & 255] ^ T22[w5 >>> 16 & 255] ^ T32[w5 >>> 24];
  }
  return xk;
}
function apply0123(T01, T23, s0, s1, s2, s3) {
  return T01[s0 << 8 & 65280 | s1 >>> 8 & 255] ^ T23[s2 >>> 8 & 65280 | s3 >>> 24 & 255];
}
function applySbox(sbox2, s0, s1, s2, s3) {
  return sbox2[s0 & 255 | s1 & 65280] | sbox2[s2 >>> 16 & 255 | s3 >>> 16 & 65280] << 16;
}
function encrypt(xk, s0, s1, s2, s3) {
  const { sbox2, T01, T23 } = tableEncoding;
  let k4 = 0;
  s0 ^= xk[k4++], s1 ^= xk[k4++], s2 ^= xk[k4++], s3 ^= xk[k4++];
  const rounds = xk.length / 4 - 2;
  for (let i3 = 0; i3 < rounds; i3++) {
    const t02 = xk[k4++] ^ apply0123(T01, T23, s0, s1, s2, s3);
    const t12 = xk[k4++] ^ apply0123(T01, T23, s1, s2, s3, s0);
    const t22 = xk[k4++] ^ apply0123(T01, T23, s2, s3, s0, s1);
    const t32 = xk[k4++] ^ apply0123(T01, T23, s3, s0, s1, s2);
    s0 = t02, s1 = t12, s2 = t22, s3 = t32;
  }
  const t0 = xk[k4++] ^ applySbox(sbox2, s0, s1, s2, s3);
  const t1 = xk[k4++] ^ applySbox(sbox2, s1, s2, s3, s0);
  const t2 = xk[k4++] ^ applySbox(sbox2, s2, s3, s0, s1);
  const t3 = xk[k4++] ^ applySbox(sbox2, s3, s0, s1, s2);
  return { s0: t0, s1: t1, s2: t2, s3: t3 };
}
function decrypt(xk, s0, s1, s2, s3) {
  const { sbox2, T01, T23 } = tableDecoding;
  let k4 = 0;
  s0 ^= xk[k4++], s1 ^= xk[k4++], s2 ^= xk[k4++], s3 ^= xk[k4++];
  const rounds = xk.length / 4 - 2;
  for (let i3 = 0; i3 < rounds; i3++) {
    const t02 = xk[k4++] ^ apply0123(T01, T23, s0, s3, s2, s1);
    const t12 = xk[k4++] ^ apply0123(T01, T23, s1, s0, s3, s2);
    const t22 = xk[k4++] ^ apply0123(T01, T23, s2, s1, s0, s3);
    const t32 = xk[k4++] ^ apply0123(T01, T23, s3, s2, s1, s0);
    s0 = t02, s1 = t12, s2 = t22, s3 = t32;
  }
  const t0 = xk[k4++] ^ applySbox(sbox2, s0, s3, s2, s1);
  const t1 = xk[k4++] ^ applySbox(sbox2, s1, s0, s3, s2);
  const t2 = xk[k4++] ^ applySbox(sbox2, s2, s1, s0, s3);
  const t3 = xk[k4++] ^ applySbox(sbox2, s3, s2, s1, s0);
  return { s0: t0, s1: t1, s2: t2, s3: t3 };
}
function ctrCounter(xk, nonce, src2, dst) {
  abytes4(nonce, BLOCK_SIZE2);
  abytes4(src2);
  const srcLen = src2.length;
  dst = getOutput(srcLen, dst);
  complexOverlapBytes(src2, dst);
  const ctr2 = nonce;
  const c32 = u322(ctr2);
  let { s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]);
  const src32 = u322(src2);
  const dst32 = u322(dst);
  for (let i3 = 0; i3 + 4 <= src32.length; i3 += 4) {
    dst32[i3 + 0] = src32[i3 + 0] ^ s0;
    dst32[i3 + 1] = src32[i3 + 1] ^ s1;
    dst32[i3 + 2] = src32[i3 + 2] ^ s2;
    dst32[i3 + 3] = src32[i3 + 3] ^ s3;
    let carry = 1;
    for (let i4 = ctr2.length - 1; i4 >= 0; i4--) {
      carry = carry + (ctr2[i4] & 255) | 0;
      ctr2[i4] = carry & 255;
      carry >>>= 8;
    }
    ({ s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]));
  }
  const start = BLOCK_SIZE2 * Math.floor(src32.length / BLOCK_SIZE32);
  if (start < srcLen) {
    const b32 = new Uint32Array([s0, s1, s2, s3]);
    const buf = u82(b32);
    for (let i3 = start, pos = 0; i3 < srcLen; i3++, pos++)
      dst[i3] = src2[i3] ^ buf[pos];
    clean2(b32);
  }
  return dst;
}
function ctr32(xk, isLE2, nonce, src2, dst) {
  abytes4(nonce, BLOCK_SIZE2);
  abytes4(src2);
  dst = getOutput(src2.length, dst);
  const ctr2 = nonce;
  const c32 = u322(ctr2);
  const view = createView2(ctr2);
  const src32 = u322(src2);
  const dst32 = u322(dst);
  const ctrPos = isLE2 ? 0 : 12;
  const srcLen = src2.length;
  let ctrNum = view.getUint32(ctrPos, isLE2);
  let { s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]);
  for (let i3 = 0; i3 + 4 <= src32.length; i3 += 4) {
    dst32[i3 + 0] = src32[i3 + 0] ^ s0;
    dst32[i3 + 1] = src32[i3 + 1] ^ s1;
    dst32[i3 + 2] = src32[i3 + 2] ^ s2;
    dst32[i3 + 3] = src32[i3 + 3] ^ s3;
    ctrNum = ctrNum + 1 >>> 0;
    view.setUint32(ctrPos, ctrNum, isLE2);
    ({ s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]));
  }
  const start = BLOCK_SIZE2 * Math.floor(src32.length / BLOCK_SIZE32);
  if (start < srcLen) {
    const b32 = new Uint32Array([s0, s1, s2, s3]);
    const buf = u82(b32);
    for (let i3 = start, pos = 0; i3 < srcLen; i3++, pos++)
      dst[i3] = src2[i3] ^ buf[pos];
    clean2(b32);
  }
  return dst;
}
var ctr = wrapCipher({ blockSize: 16, nonceLength: 16 }, function aesctr(key, nonce) {
  function processCtr(buf, dst) {
    abytes4(buf);
    if (dst !== void 0) {
      abytes4(dst);
      if (!isAligned32(dst))
        throw new Error("unaligned destination");
    }
    const xk = expandKeyLE(key);
    const n4 = copyBytes(nonce);
    const toClean = [xk, n4];
    if (!isAligned32(buf))
      toClean.push(buf = copyBytes(buf));
    const out = ctrCounter(xk, n4, buf, dst);
    clean2(...toClean);
    return out;
  }
  return {
    encrypt: (plaintext, dst) => processCtr(plaintext, dst),
    decrypt: (ciphertext, dst) => processCtr(ciphertext, dst)
  };
});
function validateBlockDecrypt(data) {
  abytes4(data);
  if (data.length % BLOCK_SIZE2 !== 0) {
    throw new Error("aes-(cbc/ecb).decrypt ciphertext should consist of blocks with size " + BLOCK_SIZE2);
  }
}
function validateBlockEncrypt(plaintext, pcks5, dst) {
  abytes4(plaintext);
  let outLen = plaintext.length;
  const remaining = outLen % BLOCK_SIZE2;
  if (!pcks5 && remaining !== 0)
    throw new Error("aec/(cbc-ecb): unpadded plaintext with disabled padding");
  if (!isAligned32(plaintext))
    plaintext = copyBytes(plaintext);
  const b4 = u322(plaintext);
  if (pcks5) {
    let left = BLOCK_SIZE2 - remaining;
    if (!left)
      left = BLOCK_SIZE2;
    outLen = outLen + left;
  }
  dst = getOutput(outLen, dst);
  complexOverlapBytes(plaintext, dst);
  const o5 = u322(dst);
  return { b: b4, o: o5, out: dst };
}
function validatePCKS(data, pcks5) {
  if (!pcks5)
    return data;
  const len = data.length;
  if (!len)
    throw new Error("aes/pcks5: empty ciphertext not allowed");
  const lastByte = data[len - 1];
  if (lastByte <= 0 || lastByte > 16)
    throw new Error("aes/pcks5: wrong padding");
  const out = data.subarray(0, -lastByte);
  for (let i3 = 0; i3 < lastByte; i3++)
    if (data[len - i3 - 1] !== lastByte)
      throw new Error("aes/pcks5: wrong padding");
  return out;
}
function padPCKS(left) {
  const tmp = new Uint8Array(16);
  const tmp32 = u322(tmp);
  tmp.set(left);
  const paddingByte = BLOCK_SIZE2 - left.length;
  for (let i3 = BLOCK_SIZE2 - paddingByte; i3 < BLOCK_SIZE2; i3++)
    tmp[i3] = paddingByte;
  return tmp32;
}
var ecb = wrapCipher({ blockSize: 16 }, function aesecb(key, opts = {}) {
  const pcks5 = !opts.disablePadding;
  return {
    encrypt(plaintext, dst) {
      const { b: b4, o: o5, out: _out } = validateBlockEncrypt(plaintext, pcks5, dst);
      const xk = expandKeyLE(key);
      let i3 = 0;
      for (; i3 + 4 <= b4.length; ) {
        const { s0, s1, s2, s3 } = encrypt(xk, b4[i3 + 0], b4[i3 + 1], b4[i3 + 2], b4[i3 + 3]);
        o5[i3++] = s0, o5[i3++] = s1, o5[i3++] = s2, o5[i3++] = s3;
      }
      if (pcks5) {
        const tmp32 = padPCKS(plaintext.subarray(i3 * 4));
        const { s0, s1, s2, s3 } = encrypt(xk, tmp32[0], tmp32[1], tmp32[2], tmp32[3]);
        o5[i3++] = s0, o5[i3++] = s1, o5[i3++] = s2, o5[i3++] = s3;
      }
      clean2(xk);
      return _out;
    },
    decrypt(ciphertext, dst) {
      validateBlockDecrypt(ciphertext);
      const xk = expandKeyDecLE(key);
      dst = getOutput(ciphertext.length, dst);
      const toClean = [xk];
      if (!isAligned32(ciphertext))
        toClean.push(ciphertext = copyBytes(ciphertext));
      complexOverlapBytes(ciphertext, dst);
      const b4 = u322(ciphertext);
      const o5 = u322(dst);
      for (let i3 = 0; i3 + 4 <= b4.length; ) {
        const { s0, s1, s2, s3 } = decrypt(xk, b4[i3 + 0], b4[i3 + 1], b4[i3 + 2], b4[i3 + 3]);
        o5[i3++] = s0, o5[i3++] = s1, o5[i3++] = s2, o5[i3++] = s3;
      }
      clean2(...toClean);
      return validatePCKS(dst, pcks5);
    }
  };
});
var cbc = wrapCipher({ blockSize: 16, nonceLength: 16 }, function aescbc(key, iv, opts = {}) {
  const pcks5 = !opts.disablePadding;
  return {
    encrypt(plaintext, dst) {
      const xk = expandKeyLE(key);
      const { b: b4, o: o5, out: _out } = validateBlockEncrypt(plaintext, pcks5, dst);
      let _iv = iv;
      const toClean = [xk];
      if (!isAligned32(_iv))
        toClean.push(_iv = copyBytes(_iv));
      const n32 = u322(_iv);
      let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];
      let i3 = 0;
      for (; i3 + 4 <= b4.length; ) {
        s0 ^= b4[i3 + 0], s1 ^= b4[i3 + 1], s2 ^= b4[i3 + 2], s3 ^= b4[i3 + 3];
        ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));
        o5[i3++] = s0, o5[i3++] = s1, o5[i3++] = s2, o5[i3++] = s3;
      }
      if (pcks5) {
        const tmp32 = padPCKS(plaintext.subarray(i3 * 4));
        s0 ^= tmp32[0], s1 ^= tmp32[1], s2 ^= tmp32[2], s3 ^= tmp32[3];
        ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));
        o5[i3++] = s0, o5[i3++] = s1, o5[i3++] = s2, o5[i3++] = s3;
      }
      clean2(...toClean);
      return _out;
    },
    decrypt(ciphertext, dst) {
      validateBlockDecrypt(ciphertext);
      const xk = expandKeyDecLE(key);
      let _iv = iv;
      const toClean = [xk];
      if (!isAligned32(_iv))
        toClean.push(_iv = copyBytes(_iv));
      const n32 = u322(_iv);
      dst = getOutput(ciphertext.length, dst);
      if (!isAligned32(ciphertext))
        toClean.push(ciphertext = copyBytes(ciphertext));
      complexOverlapBytes(ciphertext, dst);
      const b4 = u322(ciphertext);
      const o5 = u322(dst);
      let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];
      for (let i3 = 0; i3 + 4 <= b4.length; ) {
        const ps0 = s0, ps1 = s1, ps2 = s2, ps3 = s3;
        s0 = b4[i3 + 0], s1 = b4[i3 + 1], s2 = b4[i3 + 2], s3 = b4[i3 + 3];
        const { s0: o0, s1: o1, s2: o22, s3: o32 } = decrypt(xk, s0, s1, s2, s3);
        o5[i3++] = o0 ^ ps0, o5[i3++] = o1 ^ ps1, o5[i3++] = o22 ^ ps2, o5[i3++] = o32 ^ ps3;
      }
      clean2(...toClean);
      return validatePCKS(dst, pcks5);
    }
  };
});
var cfb = wrapCipher({ blockSize: 16, nonceLength: 16 }, function aescfb(key, iv) {
  function processCfb(src2, isEncrypt, dst) {
    abytes4(src2);
    const srcLen = src2.length;
    dst = getOutput(srcLen, dst);
    if (overlapBytes(src2, dst))
      throw new Error("overlapping src and dst not supported.");
    const xk = expandKeyLE(key);
    let _iv = iv;
    const toClean = [xk];
    if (!isAligned32(_iv))
      toClean.push(_iv = copyBytes(_iv));
    if (!isAligned32(src2))
      toClean.push(src2 = copyBytes(src2));
    const src32 = u322(src2);
    const dst32 = u322(dst);
    const next32 = isEncrypt ? dst32 : src32;
    const n32 = u322(_iv);
    let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];
    for (let i3 = 0; i3 + 4 <= src32.length; ) {
      const { s0: e0, s1: e1, s2: e2, s3: e3 } = encrypt(xk, s0, s1, s2, s3);
      dst32[i3 + 0] = src32[i3 + 0] ^ e0;
      dst32[i3 + 1] = src32[i3 + 1] ^ e1;
      dst32[i3 + 2] = src32[i3 + 2] ^ e2;
      dst32[i3 + 3] = src32[i3 + 3] ^ e3;
      s0 = next32[i3++], s1 = next32[i3++], s2 = next32[i3++], s3 = next32[i3++];
    }
    const start = BLOCK_SIZE2 * Math.floor(src32.length / BLOCK_SIZE32);
    if (start < srcLen) {
      ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));
      const buf = u82(new Uint32Array([s0, s1, s2, s3]));
      for (let i3 = start, pos = 0; i3 < srcLen; i3++, pos++)
        dst[i3] = src2[i3] ^ buf[pos];
      clean2(buf);
    }
    clean2(...toClean);
    return dst;
  }
  return {
    encrypt: (plaintext, dst) => processCfb(plaintext, true, dst),
    decrypt: (ciphertext, dst) => processCfb(ciphertext, false, dst)
  };
});
function computeTag(fn3, isLE2, key, data, AAD) {
  const aadLength = AAD ? AAD.length : 0;
  const h4 = fn3.create(key, data.length + aadLength);
  if (AAD)
    h4.update(AAD);
  const num3 = u64Lengths(8 * data.length, 8 * aadLength, isLE2);
  h4.update(data);
  h4.update(num3);
  const res = h4.digest();
  clean2(num3);
  return res;
}
var gcm = wrapCipher({ blockSize: 16, nonceLength: 12, tagLength: 16, varSizeNonce: true }, function aesgcm(key, nonce, AAD) {
  if (nonce.length < 8)
    throw new Error("aes/gcm: invalid nonce length");
  const tagLength = 16;
  function _computeTag(authKey, tagMask, data) {
    const tag2 = computeTag(ghash, false, authKey, data, AAD);
    for (let i3 = 0; i3 < tagMask.length; i3++)
      tag2[i3] ^= tagMask[i3];
    return tag2;
  }
  function deriveKeys() {
    const xk = expandKeyLE(key);
    const authKey = EMPTY_BLOCK.slice();
    const counter = EMPTY_BLOCK.slice();
    ctr32(xk, false, counter, counter, authKey);
    if (nonce.length === 12) {
      counter.set(nonce);
    } else {
      const nonceLen = EMPTY_BLOCK.slice();
      const view = createView2(nonceLen);
      setBigUint64(view, 8, BigInt(nonce.length * 8), false);
      const g4 = ghash.create(authKey).update(nonce).update(nonceLen);
      g4.digestInto(counter);
      g4.destroy();
    }
    const tagMask = ctr32(xk, false, counter, EMPTY_BLOCK);
    return { xk, authKey, counter, tagMask };
  }
  return {
    encrypt(plaintext) {
      const { xk, authKey, counter, tagMask } = deriveKeys();
      const out = new Uint8Array(plaintext.length + tagLength);
      const toClean = [xk, authKey, counter, tagMask];
      if (!isAligned32(plaintext))
        toClean.push(plaintext = copyBytes(plaintext));
      ctr32(xk, false, counter, plaintext, out.subarray(0, plaintext.length));
      const tag2 = _computeTag(authKey, tagMask, out.subarray(0, out.length - tagLength));
      toClean.push(tag2);
      out.set(tag2, plaintext.length);
      clean2(...toClean);
      return out;
    },
    decrypt(ciphertext) {
      const { xk, authKey, counter, tagMask } = deriveKeys();
      const toClean = [xk, authKey, tagMask, counter];
      if (!isAligned32(ciphertext))
        toClean.push(ciphertext = copyBytes(ciphertext));
      const data = ciphertext.subarray(0, -tagLength);
      const passedTag = ciphertext.subarray(-tagLength);
      const tag2 = _computeTag(authKey, tagMask, data);
      toClean.push(tag2);
      if (!equalBytes2(tag2, passedTag))
        throw new Error("aes/gcm: invalid ghash tag");
      const out = ctr32(xk, false, counter, data);
      clean2(...toClean);
      return out;
    }
  };
});
var limit = (name2, min, max) => (value) => {
  if (!Number.isSafeInteger(value) || min > value || value > max) {
    const minmax = "[" + min + ".." + max + "]";
    throw new Error("" + name2 + ": expected value in range " + minmax + ", got " + value);
  }
};
var gcmsiv = wrapCipher({ blockSize: 16, nonceLength: 12, tagLength: 16, varSizeNonce: true }, function aessiv(key, nonce, AAD) {
  const tagLength = 16;
  const AAD_LIMIT = limit("AAD", 0, 2 ** 36);
  const PLAIN_LIMIT = limit("plaintext", 0, 2 ** 36);
  const NONCE_LIMIT = limit("nonce", 12, 12);
  const CIPHER_LIMIT = limit("ciphertext", 16, 2 ** 36 + 16);
  abytes4(key, 16, 24, 32);
  NONCE_LIMIT(nonce.length);
  if (AAD !== void 0)
    AAD_LIMIT(AAD.length);
  function deriveKeys() {
    const xk = expandKeyLE(key);
    const encKey = new Uint8Array(key.length);
    const authKey = new Uint8Array(16);
    const toClean = [xk, encKey];
    let _nonce = nonce;
    if (!isAligned32(_nonce))
      toClean.push(_nonce = copyBytes(_nonce));
    const n32 = u322(_nonce);
    let s0 = 0, s1 = n32[0], s2 = n32[1], s3 = n32[2];
    let counter = 0;
    for (const derivedKey of [authKey, encKey].map(u322)) {
      const d32 = u322(derivedKey);
      for (let i3 = 0; i3 < d32.length; i3 += 2) {
        const { s0: o0, s1: o1 } = encrypt(xk, s0, s1, s2, s3);
        d32[i3 + 0] = o0;
        d32[i3 + 1] = o1;
        s0 = ++counter;
      }
    }
    const res = { authKey, encKey: expandKeyLE(encKey) };
    clean2(...toClean);
    return res;
  }
  function _computeTag(encKey, authKey, data) {
    const tag2 = computeTag(polyval, true, authKey, data, AAD);
    for (let i3 = 0; i3 < 12; i3++)
      tag2[i3] ^= nonce[i3];
    tag2[15] &= 127;
    const t32 = u322(tag2);
    let s0 = t32[0], s1 = t32[1], s2 = t32[2], s3 = t32[3];
    ({ s0, s1, s2, s3 } = encrypt(encKey, s0, s1, s2, s3));
    t32[0] = s0, t32[1] = s1, t32[2] = s2, t32[3] = s3;
    return tag2;
  }
  function processSiv(encKey, tag2, input) {
    let block = copyBytes(tag2);
    block[15] |= 128;
    const res = ctr32(encKey, true, block, input);
    clean2(block);
    return res;
  }
  return {
    encrypt(plaintext) {
      PLAIN_LIMIT(plaintext.length);
      const { encKey, authKey } = deriveKeys();
      const tag2 = _computeTag(encKey, authKey, plaintext);
      const toClean = [encKey, authKey, tag2];
      if (!isAligned32(plaintext))
        toClean.push(plaintext = copyBytes(plaintext));
      const out = new Uint8Array(plaintext.length + tagLength);
      out.set(tag2, plaintext.length);
      out.set(processSiv(encKey, tag2, plaintext));
      clean2(...toClean);
      return out;
    },
    decrypt(ciphertext) {
      CIPHER_LIMIT(ciphertext.length);
      const tag2 = ciphertext.subarray(-tagLength);
      const { encKey, authKey } = deriveKeys();
      const toClean = [encKey, authKey];
      if (!isAligned32(ciphertext))
        toClean.push(ciphertext = copyBytes(ciphertext));
      const plaintext = processSiv(encKey, tag2, ciphertext.subarray(0, -tagLength));
      const expectedTag = _computeTag(encKey, authKey, plaintext);
      toClean.push(expectedTag);
      if (!equalBytes2(tag2, expectedTag)) {
        clean2(...toClean);
        throw new Error("invalid polyval tag");
      }
      clean2(...toClean);
      return plaintext;
    }
  };
});
function isBytes32(a3) {
  return a3 instanceof Uint32Array || ArrayBuffer.isView(a3) && a3.constructor.name === "Uint32Array";
}
function encryptBlock(xk, block) {
  abytes4(block, 16);
  if (!isBytes32(xk))
    throw new Error("_encryptBlock accepts result of expandKeyLE");
  const b32 = u322(block);
  let { s0, s1, s2, s3 } = encrypt(xk, b32[0], b32[1], b32[2], b32[3]);
  b32[0] = s0, b32[1] = s1, b32[2] = s2, b32[3] = s3;
  return block;
}
function decryptBlock(xk, block) {
  abytes4(block, 16);
  if (!isBytes32(xk))
    throw new Error("_decryptBlock accepts result of expandKeyLE");
  const b32 = u322(block);
  let { s0, s1, s2, s3 } = decrypt(xk, b32[0], b32[1], b32[2], b32[3]);
  b32[0] = s0, b32[1] = s1, b32[2] = s2, b32[3] = s3;
  return block;
}
var AESW = {
  /*
  High-level pseudocode:
  ```
  A: u64 = IV
  out = []
  for (let i=0, ctr = 0; i<6; i++) {
    for (const chunk of chunks(plaintext, 8)) {
      A ^= swapEndianess(ctr++)
      [A, res] = chunks(encrypt(A || chunk), 8);
      out ||= res
    }
  }
  out = A || out
  ```
  Decrypt is the same, but reversed.
  */
  encrypt(kek, out) {
    if (out.length >= 2 ** 32)
      throw new Error("plaintext should be less than 4gb");
    const xk = expandKeyLE(kek);
    if (out.length === 16)
      encryptBlock(xk, out);
    else {
      const o32 = u322(out);
      let a0 = o32[0], a1 = o32[1];
      for (let j6 = 0, ctr2 = 1; j6 < 6; j6++) {
        for (let pos = 2; pos < o32.length; pos += 2, ctr2++) {
          const { s0, s1, s2, s3 } = encrypt(xk, a0, a1, o32[pos], o32[pos + 1]);
          a0 = s0, a1 = s1 ^ byteSwap(ctr2), o32[pos] = s2, o32[pos + 1] = s3;
        }
      }
      o32[0] = a0, o32[1] = a1;
    }
    xk.fill(0);
  },
  decrypt(kek, out) {
    if (out.length - 8 >= 2 ** 32)
      throw new Error("ciphertext should be less than 4gb");
    const xk = expandKeyDecLE(kek);
    const chunks = out.length / 8 - 1;
    if (chunks === 1)
      decryptBlock(xk, out);
    else {
      const o32 = u322(out);
      let a0 = o32[0], a1 = o32[1];
      for (let j6 = 0, ctr2 = chunks * 6; j6 < 6; j6++) {
        for (let pos = chunks * 2; pos >= 1; pos -= 2, ctr2--) {
          a1 ^= byteSwap(ctr2);
          const { s0, s1, s2, s3 } = decrypt(xk, a0, a1, o32[pos], o32[pos + 1]);
          a0 = s0, a1 = s1, o32[pos] = s2, o32[pos + 1] = s3;
        }
      }
      o32[0] = a0, o32[1] = a1;
    }
    xk.fill(0);
  }
};
var AESKW_IV = new Uint8Array(8).fill(166);
var aeskw = wrapCipher({ blockSize: 8 }, (kek) => ({
  encrypt(plaintext) {
    if (!plaintext.length || plaintext.length % 8 !== 0)
      throw new Error("invalid plaintext length");
    if (plaintext.length === 8)
      throw new Error("8-byte keys not allowed in AESKW, use AESKWP instead");
    const out = concatBytes3(AESKW_IV, plaintext);
    AESW.encrypt(kek, out);
    return out;
  },
  decrypt(ciphertext) {
    if (ciphertext.length % 8 !== 0 || ciphertext.length < 3 * 8)
      throw new Error("invalid ciphertext length");
    const out = copyBytes(ciphertext);
    AESW.decrypt(kek, out);
    if (!equalBytes2(out.subarray(0, 8), AESKW_IV))
      throw new Error("integrity check failed");
    out.subarray(0, 8).fill(0);
    return out.subarray(8);
  }
}));
var AESKWP_IV = 2790873510;
var aeskwp = wrapCipher({ blockSize: 8 }, (kek) => ({
  encrypt(plaintext) {
    if (!plaintext.length)
      throw new Error("invalid plaintext length");
    const padded = Math.ceil(plaintext.length / 8) * 8;
    const out = new Uint8Array(8 + padded);
    out.set(plaintext, 8);
    const out32 = u322(out);
    out32[0] = AESKWP_IV;
    out32[1] = byteSwap(plaintext.length);
    AESW.encrypt(kek, out);
    return out;
  },
  decrypt(ciphertext) {
    if (ciphertext.length < 16)
      throw new Error("invalid ciphertext length");
    const out = copyBytes(ciphertext);
    const o32 = u322(out);
    AESW.decrypt(kek, out);
    const len = byteSwap(o32[1]) >>> 0;
    const padded = Math.ceil(len / 8) * 8;
    if (o32[0] !== AESKWP_IV || out.length - 8 !== padded)
      throw new Error("integrity check failed");
    for (let i3 = len; i3 < padded; i3++)
      if (out[8 + i3] !== 0)
        throw new Error("integrity check failed");
    out.subarray(0, 8).fill(0);
    return out.subarray(8, 8 + len);
  }
}));

// node_modules/@scure/bip39/esm/wordlists/czech.js
var wordlist = `abdikace
abeceda
adresa
agrese
akce
aktovka
alej
alkohol
amputace
ananas
andulka
anekdota
anketa
antika
anulovat
archa
arogance
asfalt
asistent
aspirace
astma
astronom
atlas
atletika
atol
autobus
azyl
babka
bachor
bacil
baculka
badatel
bageta
bagr
bahno
bakterie
balada
baletka
balkon
balonek
balvan
balza
bambus
bankomat
barbar
baret
barman
baroko
barva
baterka
batoh
bavlna
bazalka
bazilika
bazuka
bedna
beran
beseda
bestie
beton
bezinka
bezmoc
beztak
bicykl
bidlo
biftek
bikiny
bilance
biograf
biolog
bitva
bizon
blahobyt
blatouch
blecha
bledule
blesk
blikat
blizna
blokovat
bloudit
blud
bobek
bobr
bodlina
bodnout
bohatost
bojkot
bojovat
bokorys
bolest
borec
borovice
bota
boubel
bouchat
bouda
boule
bourat
boxer
bradavka
brambora
branka
bratr
brepta
briketa
brko
brloh
bronz
broskev
brunetka
brusinka
brzda
brzy
bublina
bubnovat
buchta
buditel
budka
budova
bufet
bujarost
bukvice
buldok
bulva
bunda
bunkr
burza
butik
buvol
buzola
bydlet
bylina
bytovka
bzukot
capart
carevna
cedr
cedule
cejch
cejn
cela
celer
celkem
celnice
cenina
cennost
cenovka
centrum
cenzor
cestopis
cetka
chalupa
chapadlo
charita
chata
chechtat
chemie
chichot
chirurg
chlad
chleba
chlubit
chmel
chmura
chobot
chochol
chodba
cholera
chomout
chopit
choroba
chov
chrapot
chrlit
chrt
chrup
chtivost
chudina
chutnat
chvat
chvilka
chvost
chyba
chystat
chytit
cibule
cigareta
cihelna
cihla
cinkot
cirkus
cisterna
citace
citrus
cizinec
cizost
clona
cokoliv
couvat
ctitel
ctnost
cudnost
cuketa
cukr
cupot
cvaknout
cval
cvik
cvrkot
cyklista
daleko
dareba
datel
datum
dcera
debata
dechovka
decibel
deficit
deflace
dekl
dekret
demokrat
deprese
derby
deska
detektiv
dikobraz
diktovat
dioda
diplom
disk
displej
divadlo
divoch
dlaha
dlouho
dluhopis
dnes
dobro
dobytek
docent
dochutit
dodnes
dohled
dohoda
dohra
dojem
dojnice
doklad
dokola
doktor
dokument
dolar
doleva
dolina
doma
dominant
domluvit
domov
donutit
dopad
dopis
doplnit
doposud
doprovod
dopustit
dorazit
dorost
dort
dosah
doslov
dostatek
dosud
dosyta
dotaz
dotek
dotknout
doufat
doutnat
dovozce
dozadu
doznat
dozorce
drahota
drak
dramatik
dravec
draze
drdol
drobnost
drogerie
drozd
drsnost
drtit
drzost
duben
duchovno
dudek
duha
duhovka
dusit
dusno
dutost
dvojice
dvorec
dynamit
ekolog
ekonomie
elektron
elipsa
email
emise
emoce
empatie
epizoda
epocha
epopej
epos
esej
esence
eskorta
eskymo
etiketa
euforie
evoluce
exekuce
exkurze
expedice
exploze
export
extrakt
facka
fajfka
fakulta
fanatik
fantazie
farmacie
favorit
fazole
federace
fejeton
fenka
fialka
figurant
filozof
filtr
finance
finta
fixace
fjord
flanel
flirt
flotila
fond
fosfor
fotbal
fotka
foton
frakce
freska
fronta
fukar
funkce
fyzika
galeje
garant
genetika
geolog
gilotina
glazura
glejt
golem
golfista
gotika
graf
gramofon
granule
grep
gril
grog
groteska
guma
hadice
hadr
hala
halenka
hanba
hanopis
harfa
harpuna
havran
hebkost
hejkal
hejno
hejtman
hektar
helma
hematom
herec
herna
heslo
hezky
historik
hladovka
hlasivky
hlava
hledat
hlen
hlodavec
hloh
hloupost
hltat
hlubina
hluchota
hmat
hmota
hmyz
hnis
hnojivo
hnout
hoblina
hoboj
hoch
hodiny
hodlat
hodnota
hodovat
hojnost
hokej
holinka
holka
holub
homole
honitba
honorace
horal
horda
horizont
horko
horlivec
hormon
hornina
horoskop
horstvo
hospoda
hostina
hotovost
houba
houf
houpat
houska
hovor
hradba
hranice
hravost
hrazda
hrbolek
hrdina
hrdlo
hrdost
hrnek
hrobka
hromada
hrot
hrouda
hrozen
hrstka
hrubost
hryzat
hubenost
hubnout
hudba
hukot
humr
husita
hustota
hvozd
hybnost
hydrant
hygiena
hymna
hysterik
idylka
ihned
ikona
iluze
imunita
infekce
inflace
inkaso
inovace
inspekce
internet
invalida
investor
inzerce
ironie
jablko
jachta
jahoda
jakmile
jakost
jalovec
jantar
jarmark
jaro
jasan
jasno
jatka
javor
jazyk
jedinec
jedle
jednatel
jehlan
jekot
jelen
jelito
jemnost
jenom
jepice
jeseter
jevit
jezdec
jezero
jinak
jindy
jinoch
jiskra
jistota
jitrnice
jizva
jmenovat
jogurt
jurta
kabaret
kabel
kabinet
kachna
kadet
kadidlo
kahan
kajak
kajuta
kakao
kaktus
kalamita
kalhoty
kalibr
kalnost
kamera
kamkoliv
kamna
kanibal
kanoe
kantor
kapalina
kapela
kapitola
kapka
kaple
kapota
kapr
kapusta
kapybara
karamel
karotka
karton
kasa
katalog
katedra
kauce
kauza
kavalec
kazajka
kazeta
kazivost
kdekoliv
kdesi
kedluben
kemp
keramika
kino
klacek
kladivo
klam
klapot
klasika
klaun
klec
klenba
klepat
klesnout
klid
klima
klisna
klobouk
klokan
klopa
kloub
klubovna
klusat
kluzkost
kmen
kmitat
kmotr
kniha
knot
koalice
koberec
kobka
kobliha
kobyla
kocour
kohout
kojenec
kokos
koktejl
kolaps
koleda
kolize
kolo
komando
kometa
komik
komnata
komora
kompas
komunita
konat
koncept
kondice
konec
konfese
kongres
konina
konkurs
kontakt
konzerva
kopanec
kopie
kopnout
koprovka
korbel
korektor
kormidlo
koroptev
korpus
koruna
koryto
korzet
kosatec
kostka
kotel
kotleta
kotoul
koukat
koupelna
kousek
kouzlo
kovboj
koza
kozoroh
krabice
krach
krajina
kralovat
krasopis
kravata
kredit
krejcar
kresba
kreveta
kriket
kritik
krize
krkavec
krmelec
krmivo
krocan
krok
kronika
kropit
kroupa
krovka
krtek
kruhadlo
krupice
krutost
krvinka
krychle
krypta
krystal
kryt
kudlanka
kufr
kujnost
kukla
kulajda
kulich
kulka
kulomet
kultura
kuna
kupodivu
kurt
kurzor
kutil
kvalita
kvasinka
kvestor
kynolog
kyselina
kytara
kytice
kytka
kytovec
kyvadlo
labrador
lachtan
ladnost
laik
lakomec
lamela
lampa
lanovka
lasice
laso
lastura
latinka
lavina
lebka
leckdy
leden
lednice
ledovka
ledvina
legenda
legie
legrace
lehce
lehkost
lehnout
lektvar
lenochod
lentilka
lepenka
lepidlo
letadlo
letec
letmo
letokruh
levhart
levitace
levobok
libra
lichotka
lidojed
lidskost
lihovina
lijavec
lilek
limetka
linie
linka
linoleum
listopad
litina
litovat
lobista
lodivod
logika
logoped
lokalita
loket
lomcovat
lopata
lopuch
lord
losos
lotr
loudal
louh
louka
louskat
lovec
lstivost
lucerna
lucifer
lump
lusk
lustrace
lvice
lyra
lyrika
lysina
madam
madlo
magistr
mahagon
majetek
majitel
majorita
makak
makovice
makrela
malba
malina
malovat
malvice
maminka
mandle
manko
marnost
masakr
maskot
masopust
matice
matrika
maturita
mazanec
mazivo
mazlit
mazurka
mdloba
mechanik
meditace
medovina
melasa
meloun
mentolka
metla
metoda
metr
mezera
migrace
mihnout
mihule
mikina
mikrofon
milenec
milimetr
milost
mimika
mincovna
minibar
minomet
minulost
miska
mistr
mixovat
mladost
mlha
mlhovina
mlok
mlsat
mluvit
mnich
mnohem
mobil
mocnost
modelka
modlitba
mohyla
mokro
molekula
momentka
monarcha
monokl
monstrum
montovat
monzun
mosaz
moskyt
most
motivace
motorka
motyka
moucha
moudrost
mozaika
mozek
mozol
mramor
mravenec
mrkev
mrtvola
mrzet
mrzutost
mstitel
mudrc
muflon
mulat
mumie
munice
muset
mutace
muzeum
muzikant
myslivec
mzda
nabourat
nachytat
nadace
nadbytek
nadhoz
nadobro
nadpis
nahlas
nahnat
nahodile
nahradit
naivita
najednou
najisto
najmout
naklonit
nakonec
nakrmit
nalevo
namazat
namluvit
nanometr
naoko
naopak
naostro
napadat
napevno
naplnit
napnout
naposled
naprosto
narodit
naruby
narychlo
nasadit
nasekat
naslepo
nastat
natolik
navenek
navrch
navzdory
nazvat
nebe
nechat
necky
nedaleko
nedbat
neduh
negace
nehet
nehoda
nejen
nejprve
neklid
nelibost
nemilost
nemoc
neochota
neonka
nepokoj
nerost
nerv
nesmysl
nesoulad
netvor
neuron
nevina
nezvykle
nicota
nijak
nikam
nikdy
nikl
nikterak
nitro
nocleh
nohavice
nominace
nora
norek
nositel
nosnost
nouze
noviny
novota
nozdra
nuda
nudle
nuget
nutit
nutnost
nutrie
nymfa
obal
obarvit
obava
obdiv
obec
obehnat
obejmout
obezita
obhajoba
obilnice
objasnit
objekt
obklopit
oblast
oblek
obliba
obloha
obluda
obnos
obohatit
obojek
obout
obrazec
obrna
obruba
obrys
obsah
obsluha
obstarat
obuv
obvaz
obvinit
obvod
obvykle
obyvatel
obzor
ocas
ocel
ocenit
ochladit
ochota
ochrana
ocitnout
odboj
odbyt
odchod
odcizit
odebrat
odeslat
odevzdat
odezva
odhadce
odhodit
odjet
odjinud
odkaz
odkoupit
odliv
odluka
odmlka
odolnost
odpad
odpis
odplout
odpor
odpustit
odpykat
odrazka
odsoudit
odstup
odsun
odtok
odtud
odvaha
odveta
odvolat
odvracet
odznak
ofina
ofsajd
ohlas
ohnisko
ohrada
ohrozit
ohryzek
okap
okenice
oklika
okno
okouzlit
okovy
okrasa
okres
okrsek
okruh
okupant
okurka
okusit
olejnina
olizovat
omak
omeleta
omezit
omladina
omlouvat
omluva
omyl
onehdy
opakovat
opasek
operace
opice
opilost
opisovat
opora
opozice
opravdu
oproti
orbital
orchestr
orgie
orlice
orloj
ortel
osada
oschnout
osika
osivo
oslava
oslepit
oslnit
oslovit
osnova
osoba
osolit
ospalec
osten
ostraha
ostuda
ostych
osvojit
oteplit
otisk
otop
otrhat
otrlost
otrok
otruby
otvor
ovanout
ovar
oves
ovlivnit
ovoce
oxid
ozdoba
pachatel
pacient
padouch
pahorek
pakt
palanda
palec
palivo
paluba
pamflet
pamlsek
panenka
panika
panna
panovat
panstvo
pantofle
paprika
parketa
parodie
parta
paruka
paryba
paseka
pasivita
pastelka
patent
patrona
pavouk
pazneht
pazourek
pecka
pedagog
pejsek
peklo
peloton
penalta
pendrek
penze
periskop
pero
pestrost
petarda
petice
petrolej
pevnina
pexeso
pianista
piha
pijavice
pikle
piknik
pilina
pilnost
pilulka
pinzeta
pipeta
pisatel
pistole
pitevna
pivnice
pivovar
placenta
plakat
plamen
planeta
plastika
platit
plavidlo
plaz
plech
plemeno
plenta
ples
pletivo
plevel
plivat
plnit
plno
plocha
plodina
plomba
plout
pluk
plyn
pobavit
pobyt
pochod
pocit
poctivec
podat
podcenit
podepsat
podhled
podivit
podklad
podmanit
podnik
podoba
podpora
podraz
podstata
podvod
podzim
poezie
pohanka
pohnutka
pohovor
pohroma
pohyb
pointa
pojistka
pojmout
pokazit
pokles
pokoj
pokrok
pokuta
pokyn
poledne
polibek
polknout
poloha
polynom
pomalu
pominout
pomlka
pomoc
pomsta
pomyslet
ponechat
ponorka
ponurost
popadat
popel
popisek
poplach
poprosit
popsat
popud
poradce
porce
porod
porucha
poryv
posadit
posed
posila
poskok
poslanec
posoudit
pospolu
postava
posudek
posyp
potah
potkan
potlesk
potomek
potrava
potupa
potvora
poukaz
pouto
pouzdro
povaha
povidla
povlak
povoz
povrch
povstat
povyk
povzdech
pozdrav
pozemek
poznatek
pozor
pozvat
pracovat
prahory
praktika
prales
praotec
praporek
prase
pravda
princip
prkno
probudit
procento
prodej
profese
prohra
projekt
prolomit
promile
pronikat
propad
prorok
prosba
proton
proutek
provaz
prskavka
prsten
prudkost
prut
prvek
prvohory
psanec
psovod
pstruh
ptactvo
puberta
puch
pudl
pukavec
puklina
pukrle
pult
pumpa
punc
pupen
pusa
pusinka
pustina
putovat
putyka
pyramida
pysk
pytel
racek
rachot
radiace
radnice
radon
raft
ragby
raketa
rakovina
rameno
rampouch
rande
rarach
rarita
rasovna
rastr
ratolest
razance
razidlo
reagovat
reakce
recept
redaktor
referent
reflex
rejnok
reklama
rekord
rekrut
rektor
reputace
revize
revma
revolver
rezerva
riskovat
riziko
robotika
rodokmen
rohovka
rokle
rokoko
romaneto
ropovod
ropucha
rorejs
rosol
rostlina
rotmistr
rotoped
rotunda
roubenka
roucho
roup
roura
rovina
rovnice
rozbor
rozchod
rozdat
rozeznat
rozhodce
rozinka
rozjezd
rozkaz
rozloha
rozmar
rozpad
rozruch
rozsah
roztok
rozum
rozvod
rubrika
ruchadlo
rukavice
rukopis
ryba
rybolov
rychlost
rydlo
rypadlo
rytina
ryzost
sadista
sahat
sako
samec
samizdat
samota
sanitka
sardinka
sasanka
satelit
sazba
sazenice
sbor
schovat
sebranka
secese
sedadlo
sediment
sedlo
sehnat
sejmout
sekera
sekta
sekunda
sekvoje
semeno
seno
servis
sesadit
seshora
seskok
seslat
sestra
sesuv
sesypat
setba
setina
setkat
setnout
setrvat
sever
seznam
shoda
shrnout
sifon
silnice
sirka
sirotek
sirup
situace
skafandr
skalisko
skanzen
skaut
skeptik
skica
skladba
sklenice
sklo
skluz
skoba
skokan
skoro
skripta
skrz
skupina
skvost
skvrna
slabika
sladidlo
slanina
slast
slavnost
sledovat
slepec
sleva
slezina
slib
slina
sliznice
slon
sloupek
slovo
sluch
sluha
slunce
slupka
slza
smaragd
smetana
smilstvo
smlouva
smog
smrad
smrk
smrtka
smutek
smysl
snad
snaha
snob
sobota
socha
sodovka
sokol
sopka
sotva
souboj
soucit
soudce
souhlas
soulad
soumrak
souprava
soused
soutok
souviset
spalovna
spasitel
spis
splav
spodek
spojenec
spolu
sponzor
spornost
spousta
sprcha
spustit
sranda
sraz
srdce
srna
srnec
srovnat
srpen
srst
srub
stanice
starosta
statika
stavba
stehno
stezka
stodola
stolek
stopa
storno
stoupat
strach
stres
strhnout
strom
struna
studna
stupnice
stvol
styk
subjekt
subtropy
suchar
sudost
sukno
sundat
sunout
surikata
surovina
svah
svalstvo
svetr
svatba
svazek
svisle
svitek
svoboda
svodidlo
svorka
svrab
sykavka
sykot
synek
synovec
sypat
sypkost
syrovost
sysel
sytost
tabletka
tabule
tahoun
tajemno
tajfun
tajga
tajit
tajnost
taktika
tamhle
tampon
tancovat
tanec
tanker
tapeta
tavenina
tazatel
technika
tehdy
tekutina
telefon
temnota
tendence
tenista
tenor
teplota
tepna
teprve
terapie
termoska
textil
ticho
tiskopis
titulek
tkadlec
tkanina
tlapka
tleskat
tlukot
tlupa
tmel
toaleta
topinka
topol
torzo
touha
toulec
tradice
traktor
tramp
trasa
traverza
trefit
trest
trezor
trhavina
trhlina
trochu
trojice
troska
trouba
trpce
trpitel
trpkost
trubec
truchlit
truhlice
trus
trvat
tudy
tuhnout
tuhost
tundra
turista
turnaj
tuzemsko
tvaroh
tvorba
tvrdost
tvrz
tygr
tykev
ubohost
uboze
ubrat
ubrousek
ubrus
ubytovna
ucho
uctivost
udivit
uhradit
ujednat
ujistit
ujmout
ukazatel
uklidnit
uklonit
ukotvit
ukrojit
ulice
ulita
ulovit
umyvadlo
unavit
uniforma
uniknout
upadnout
uplatnit
uplynout
upoutat
upravit
uran
urazit
usednout
usilovat
usmrtit
usnadnit
usnout
usoudit
ustlat
ustrnout
utahovat
utkat
utlumit
utonout
utopenec
utrousit
uvalit
uvolnit
uvozovka
uzdravit
uzel
uzenina
uzlina
uznat
vagon
valcha
valoun
vana
vandal
vanilka
varan
varhany
varovat
vcelku
vchod
vdova
vedro
vegetace
vejce
velbloud
veletrh
velitel
velmoc
velryba
venkov
veranda
verze
veselka
veskrze
vesnice
vespodu
vesta
veterina
veverka
vibrace
vichr
videohra
vidina
vidle
vila
vinice
viset
vitalita
vize
vizitka
vjezd
vklad
vkus
vlajka
vlak
vlasec
vlevo
vlhkost
vliv
vlnovka
vloupat
vnucovat
vnuk
voda
vodivost
vodoznak
vodstvo
vojensky
vojna
vojsko
volant
volba
volit
volno
voskovka
vozidlo
vozovna
vpravo
vrabec
vracet
vrah
vrata
vrba
vrcholek
vrhat
vrstva
vrtule
vsadit
vstoupit
vstup
vtip
vybavit
vybrat
vychovat
vydat
vydra
vyfotit
vyhledat
vyhnout
vyhodit
vyhradit
vyhubit
vyjasnit
vyjet
vyjmout
vyklopit
vykonat
vylekat
vymazat
vymezit
vymizet
vymyslet
vynechat
vynikat
vynutit
vypadat
vyplatit
vypravit
vypustit
vyrazit
vyrovnat
vyrvat
vyslovit
vysoko
vystavit
vysunout
vysypat
vytasit
vytesat
vytratit
vyvinout
vyvolat
vyvrhel
vyzdobit
vyznat
vzadu
vzbudit
vzchopit
vzdor
vzduch
vzdychat
vzestup
vzhledem
vzkaz
vzlykat
vznik
vzorek
vzpoura
vztah
vztek
xylofon
zabrat
zabydlet
zachovat
zadarmo
zadusit
zafoukat
zahltit
zahodit
zahrada
zahynout
zajatec
zajet
zajistit
zaklepat
zakoupit
zalepit
zamezit
zamotat
zamyslet
zanechat
zanikat
zaplatit
zapojit
zapsat
zarazit
zastavit
zasunout
zatajit
zatemnit
zatknout
zaujmout
zavalit
zavelet
zavinit
zavolat
zavrtat
zazvonit
zbavit
zbrusu
zbudovat
zbytek
zdaleka
zdarma
zdatnost
zdivo
zdobit
zdroj
zdvih
zdymadlo
zelenina
zeman
zemina
zeptat
zezadu
zezdola
zhatit
zhltnout
zhluboka
zhotovit
zhruba
zima
zimnice
zjemnit
zklamat
zkoumat
zkratka
zkumavka
zlato
zlehka
zloba
zlom
zlost
zlozvyk
zmapovat
zmar
zmatek
zmije
zmizet
zmocnit
zmodrat
zmrzlina
zmutovat
znak
znalost
znamenat
znovu
zobrazit
zotavit
zoubek
zoufale
zplodit
zpomalit
zprava
zprostit
zprudka
zprvu
zrada
zranit
zrcadlo
zrnitost
zrno
zrovna
zrychlit
zrzavost
zticha
ztratit
zubovina
zubr
zvednout
zvenku
zvesela
zvon
zvrat
zvukovod
zvyk`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/english.js
var wordlist2 = `abandon
ability
able
about
above
absent
absorb
abstract
absurd
abuse
access
accident
account
accuse
achieve
acid
acoustic
acquire
across
act
action
actor
actress
actual
adapt
add
addict
address
adjust
admit
adult
advance
advice
aerobic
affair
afford
afraid
again
age
agent
agree
ahead
aim
air
airport
aisle
alarm
album
alcohol
alert
alien
all
alley
allow
almost
alone
alpha
already
also
alter
always
amateur
amazing
among
amount
amused
analyst
anchor
ancient
anger
angle
angry
animal
ankle
announce
annual
another
answer
antenna
antique
anxiety
any
apart
apology
appear
apple
approve
april
arch
arctic
area
arena
argue
arm
armed
armor
army
around
arrange
arrest
arrive
arrow
art
artefact
artist
artwork
ask
aspect
assault
asset
assist
assume
asthma
athlete
atom
attack
attend
attitude
attract
auction
audit
august
aunt
author
auto
autumn
average
avocado
avoid
awake
aware
away
awesome
awful
awkward
axis
baby
bachelor
bacon
badge
bag
balance
balcony
ball
bamboo
banana
banner
bar
barely
bargain
barrel
base
basic
basket
battle
beach
bean
beauty
because
become
beef
before
begin
behave
behind
believe
below
belt
bench
benefit
best
betray
better
between
beyond
bicycle
bid
bike
bind
biology
bird
birth
bitter
black
blade
blame
blanket
blast
bleak
bless
blind
blood
blossom
blouse
blue
blur
blush
board
boat
body
boil
bomb
bone
bonus
book
boost
border
boring
borrow
boss
bottom
bounce
box
boy
bracket
brain
brand
brass
brave
bread
breeze
brick
bridge
brief
bright
bring
brisk
broccoli
broken
bronze
broom
brother
brown
brush
bubble
buddy
budget
buffalo
build
bulb
bulk
bullet
bundle
bunker
burden
burger
burst
bus
business
busy
butter
buyer
buzz
cabbage
cabin
cable
cactus
cage
cake
call
calm
camera
camp
can
canal
cancel
candy
cannon
canoe
canvas
canyon
capable
capital
captain
car
carbon
card
cargo
carpet
carry
cart
case
cash
casino
castle
casual
cat
catalog
catch
category
cattle
caught
cause
caution
cave
ceiling
celery
cement
census
century
cereal
certain
chair
chalk
champion
change
chaos
chapter
charge
chase
chat
cheap
check
cheese
chef
cherry
chest
chicken
chief
child
chimney
choice
choose
chronic
chuckle
chunk
churn
cigar
cinnamon
circle
citizen
city
civil
claim
clap
clarify
claw
clay
clean
clerk
clever
click
client
cliff
climb
clinic
clip
clock
clog
close
cloth
cloud
clown
club
clump
cluster
clutch
coach
coast
coconut
code
coffee
coil
coin
collect
color
column
combine
come
comfort
comic
common
company
concert
conduct
confirm
congress
connect
consider
control
convince
cook
cool
copper
copy
coral
core
corn
correct
cost
cotton
couch
country
couple
course
cousin
cover
coyote
crack
cradle
craft
cram
crane
crash
crater
crawl
crazy
cream
credit
creek
crew
cricket
crime
crisp
critic
crop
cross
crouch
crowd
crucial
cruel
cruise
crumble
crunch
crush
cry
crystal
cube
culture
cup
cupboard
curious
current
curtain
curve
cushion
custom
cute
cycle
dad
damage
damp
dance
danger
daring
dash
daughter
dawn
day
deal
debate
debris
decade
december
decide
decline
decorate
decrease
deer
defense
define
defy
degree
delay
deliver
demand
demise
denial
dentist
deny
depart
depend
deposit
depth
deputy
derive
describe
desert
design
desk
despair
destroy
detail
detect
develop
device
devote
diagram
dial
diamond
diary
dice
diesel
diet
differ
digital
dignity
dilemma
dinner
dinosaur
direct
dirt
disagree
discover
disease
dish
dismiss
disorder
display
distance
divert
divide
divorce
dizzy
doctor
document
dog
doll
dolphin
domain
donate
donkey
donor
door
dose
double
dove
draft
dragon
drama
drastic
draw
dream
dress
drift
drill
drink
drip
drive
drop
drum
dry
duck
dumb
dune
during
dust
dutch
duty
dwarf
dynamic
eager
eagle
early
earn
earth
easily
east
easy
echo
ecology
economy
edge
edit
educate
effort
egg
eight
either
elbow
elder
electric
elegant
element
elephant
elevator
elite
else
embark
embody
embrace
emerge
emotion
employ
empower
empty
enable
enact
end
endless
endorse
enemy
energy
enforce
engage
engine
enhance
enjoy
enlist
enough
enrich
enroll
ensure
enter
entire
entry
envelope
episode
equal
equip
era
erase
erode
erosion
error
erupt
escape
essay
essence
estate
eternal
ethics
evidence
evil
evoke
evolve
exact
example
excess
exchange
excite
exclude
excuse
execute
exercise
exhaust
exhibit
exile
exist
exit
exotic
expand
expect
expire
explain
expose
express
extend
extra
eye
eyebrow
fabric
face
faculty
fade
faint
faith
fall
false
fame
family
famous
fan
fancy
fantasy
farm
fashion
fat
fatal
father
fatigue
fault
favorite
feature
february
federal
fee
feed
feel
female
fence
festival
fetch
fever
few
fiber
fiction
field
figure
file
film
filter
final
find
fine
finger
finish
fire
firm
first
fiscal
fish
fit
fitness
fix
flag
flame
flash
flat
flavor
flee
flight
flip
float
flock
floor
flower
fluid
flush
fly
foam
focus
fog
foil
fold
follow
food
foot
force
forest
forget
fork
fortune
forum
forward
fossil
foster
found
fox
fragile
frame
frequent
fresh
friend
fringe
frog
front
frost
frown
frozen
fruit
fuel
fun
funny
furnace
fury
future
gadget
gain
galaxy
gallery
game
gap
garage
garbage
garden
garlic
garment
gas
gasp
gate
gather
gauge
gaze
general
genius
genre
gentle
genuine
gesture
ghost
giant
gift
giggle
ginger
giraffe
girl
give
glad
glance
glare
glass
glide
glimpse
globe
gloom
glory
glove
glow
glue
goat
goddess
gold
good
goose
gorilla
gospel
gossip
govern
gown
grab
grace
grain
grant
grape
grass
gravity
great
green
grid
grief
grit
grocery
group
grow
grunt
guard
guess
guide
guilt
guitar
gun
gym
habit
hair
half
hammer
hamster
hand
happy
harbor
hard
harsh
harvest
hat
have
hawk
hazard
head
health
heart
heavy
hedgehog
height
hello
helmet
help
hen
hero
hidden
high
hill
hint
hip
hire
history
hobby
hockey
hold
hole
holiday
hollow
home
honey
hood
hope
horn
horror
horse
hospital
host
hotel
hour
hover
hub
huge
human
humble
humor
hundred
hungry
hunt
hurdle
hurry
hurt
husband
hybrid
ice
icon
idea
identify
idle
ignore
ill
illegal
illness
image
imitate
immense
immune
impact
impose
improve
impulse
inch
include
income
increase
index
indicate
indoor
industry
infant
inflict
inform
inhale
inherit
initial
inject
injury
inmate
inner
innocent
input
inquiry
insane
insect
inside
inspire
install
intact
interest
into
invest
invite
involve
iron
island
isolate
issue
item
ivory
jacket
jaguar
jar
jazz
jealous
jeans
jelly
jewel
job
join
joke
journey
joy
judge
juice
jump
jungle
junior
junk
just
kangaroo
keen
keep
ketchup
key
kick
kid
kidney
kind
kingdom
kiss
kit
kitchen
kite
kitten
kiwi
knee
knife
knock
know
lab
label
labor
ladder
lady
lake
lamp
language
laptop
large
later
latin
laugh
laundry
lava
law
lawn
lawsuit
layer
lazy
leader
leaf
learn
leave
lecture
left
leg
legal
legend
leisure
lemon
lend
length
lens
leopard
lesson
letter
level
liar
liberty
library
license
life
lift
light
like
limb
limit
link
lion
liquid
list
little
live
lizard
load
loan
lobster
local
lock
logic
lonely
long
loop
lottery
loud
lounge
love
loyal
lucky
luggage
lumber
lunar
lunch
luxury
lyrics
machine
mad
magic
magnet
maid
mail
main
major
make
mammal
man
manage
mandate
mango
mansion
manual
maple
marble
march
margin
marine
market
marriage
mask
mass
master
match
material
math
matrix
matter
maximum
maze
meadow
mean
measure
meat
mechanic
medal
media
melody
melt
member
memory
mention
menu
mercy
merge
merit
merry
mesh
message
metal
method
middle
midnight
milk
million
mimic
mind
minimum
minor
minute
miracle
mirror
misery
miss
mistake
mix
mixed
mixture
mobile
model
modify
mom
moment
monitor
monkey
monster
month
moon
moral
more
morning
mosquito
mother
motion
motor
mountain
mouse
move
movie
much
muffin
mule
multiply
muscle
museum
mushroom
music
must
mutual
myself
mystery
myth
naive
name
napkin
narrow
nasty
nation
nature
near
neck
need
negative
neglect
neither
nephew
nerve
nest
net
network
neutral
never
news
next
nice
night
noble
noise
nominee
noodle
normal
north
nose
notable
note
nothing
notice
novel
now
nuclear
number
nurse
nut
oak
obey
object
oblige
obscure
observe
obtain
obvious
occur
ocean
october
odor
off
offer
office
often
oil
okay
old
olive
olympic
omit
once
one
onion
online
only
open
opera
opinion
oppose
option
orange
orbit
orchard
order
ordinary
organ
orient
original
orphan
ostrich
other
outdoor
outer
output
outside
oval
oven
over
own
owner
oxygen
oyster
ozone
pact
paddle
page
pair
palace
palm
panda
panel
panic
panther
paper
parade
parent
park
parrot
party
pass
patch
path
patient
patrol
pattern
pause
pave
payment
peace
peanut
pear
peasant
pelican
pen
penalty
pencil
people
pepper
perfect
permit
person
pet
phone
photo
phrase
physical
piano
picnic
picture
piece
pig
pigeon
pill
pilot
pink
pioneer
pipe
pistol
pitch
pizza
place
planet
plastic
plate
play
please
pledge
pluck
plug
plunge
poem
poet
point
polar
pole
police
pond
pony
pool
popular
portion
position
possible
post
potato
pottery
poverty
powder
power
practice
praise
predict
prefer
prepare
present
pretty
prevent
price
pride
primary
print
priority
prison
private
prize
problem
process
produce
profit
program
project
promote
proof
property
prosper
protect
proud
provide
public
pudding
pull
pulp
pulse
pumpkin
punch
pupil
puppy
purchase
purity
purpose
purse
push
put
puzzle
pyramid
quality
quantum
quarter
question
quick
quit
quiz
quote
rabbit
raccoon
race
rack
radar
radio
rail
rain
raise
rally
ramp
ranch
random
range
rapid
rare
rate
rather
raven
raw
razor
ready
real
reason
rebel
rebuild
recall
receive
recipe
record
recycle
reduce
reflect
reform
refuse
region
regret
regular
reject
relax
release
relief
rely
remain
remember
remind
remove
render
renew
rent
reopen
repair
repeat
replace
report
require
rescue
resemble
resist
resource
response
result
retire
retreat
return
reunion
reveal
review
reward
rhythm
rib
ribbon
rice
rich
ride
ridge
rifle
right
rigid
ring
riot
ripple
risk
ritual
rival
river
road
roast
robot
robust
rocket
romance
roof
rookie
room
rose
rotate
rough
round
route
royal
rubber
rude
rug
rule
run
runway
rural
sad
saddle
sadness
safe
sail
salad
salmon
salon
salt
salute
same
sample
sand
satisfy
satoshi
sauce
sausage
save
say
scale
scan
scare
scatter
scene
scheme
school
science
scissors
scorpion
scout
scrap
screen
script
scrub
sea
search
season
seat
second
secret
section
security
seed
seek
segment
select
sell
seminar
senior
sense
sentence
series
service
session
settle
setup
seven
shadow
shaft
shallow
share
shed
shell
sheriff
shield
shift
shine
ship
shiver
shock
shoe
shoot
shop
short
shoulder
shove
shrimp
shrug
shuffle
shy
sibling
sick
side
siege
sight
sign
silent
silk
silly
silver
similar
simple
since
sing
siren
sister
situate
six
size
skate
sketch
ski
skill
skin
skirt
skull
slab
slam
sleep
slender
slice
slide
slight
slim
slogan
slot
slow
slush
small
smart
smile
smoke
smooth
snack
snake
snap
sniff
snow
soap
soccer
social
sock
soda
soft
solar
soldier
solid
solution
solve
someone
song
soon
sorry
sort
soul
sound
soup
source
south
space
spare
spatial
spawn
speak
special
speed
spell
spend
sphere
spice
spider
spike
spin
spirit
split
spoil
sponsor
spoon
sport
spot
spray
spread
spring
spy
square
squeeze
squirrel
stable
stadium
staff
stage
stairs
stamp
stand
start
state
stay
steak
steel
stem
step
stereo
stick
still
sting
stock
stomach
stone
stool
story
stove
strategy
street
strike
strong
struggle
student
stuff
stumble
style
subject
submit
subway
success
such
sudden
suffer
sugar
suggest
suit
summer
sun
sunny
sunset
super
supply
supreme
sure
surface
surge
surprise
surround
survey
suspect
sustain
swallow
swamp
swap
swarm
swear
sweet
swift
swim
swing
switch
sword
symbol
symptom
syrup
system
table
tackle
tag
tail
talent
talk
tank
tape
target
task
taste
tattoo
taxi
teach
team
tell
ten
tenant
tennis
tent
term
test
text
thank
that
theme
then
theory
there
they
thing
this
thought
three
thrive
throw
thumb
thunder
ticket
tide
tiger
tilt
timber
time
tiny
tip
tired
tissue
title
toast
tobacco
today
toddler
toe
together
toilet
token
tomato
tomorrow
tone
tongue
tonight
tool
tooth
top
topic
topple
torch
tornado
tortoise
toss
total
tourist
toward
tower
town
toy
track
trade
traffic
tragic
train
transfer
trap
trash
travel
tray
treat
tree
trend
trial
tribe
trick
trigger
trim
trip
trophy
trouble
truck
true
truly
trumpet
trust
truth
try
tube
tuition
tumble
tuna
tunnel
turkey
turn
turtle
twelve
twenty
twice
twin
twist
two
type
typical
ugly
umbrella
unable
unaware
uncle
uncover
under
undo
unfair
unfold
unhappy
uniform
unique
unit
universe
unknown
unlock
until
unusual
unveil
update
upgrade
uphold
upon
upper
upset
urban
urge
usage
use
used
useful
useless
usual
utility
vacant
vacuum
vague
valid
valley
valve
van
vanish
vapor
various
vast
vault
vehicle
velvet
vendor
venture
venue
verb
verify
version
very
vessel
veteran
viable
vibrant
vicious
victory
video
view
village
vintage
violin
virtual
virus
visa
visit
visual
vital
vivid
vocal
voice
void
volcano
volume
vote
voyage
wage
wagon
wait
walk
wall
walnut
want
warfare
warm
warrior
wash
wasp
waste
water
wave
way
wealth
weapon
wear
weasel
weather
web
wedding
weekend
weird
welcome
west
wet
whale
what
wheat
wheel
when
where
whip
whisper
wide
width
wife
wild
will
win
window
wine
wing
wink
winner
winter
wire
wisdom
wise
wish
witness
wolf
woman
wonder
wood
wool
word
work
world
worry
worth
wrap
wreck
wrestle
wrist
write
wrong
yard
year
yellow
you
young
youth
zebra
zero
zone
zoo`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/french.js
var wordlist3 = `abaisser
abandon
abdiquer
abeille
abolir
aborder
aboutir
aboyer
abrasif
abreuver
abriter
abroger
abrupt
absence
absolu
absurde
abusif
abyssal
académie
acajou
acarien
accabler
accepter
acclamer
accolade
accroche
accuser
acerbe
achat
acheter
aciduler
acier
acompte
acquérir
acronyme
acteur
actif
actuel
adepte
adéquat
adhésif
adjectif
adjuger
admettre
admirer
adopter
adorer
adoucir
adresse
adroit
adulte
adverbe
aérer
aéronef
affaire
affecter
affiche
affreux
affubler
agacer
agencer
agile
agiter
agrafer
agréable
agrume
aider
aiguille
ailier
aimable
aisance
ajouter
ajuster
alarmer
alchimie
alerte
algèbre
algue
aliéner
aliment
alléger
alliage
allouer
allumer
alourdir
alpaga
altesse
alvéole
amateur
ambigu
ambre
aménager
amertume
amidon
amiral
amorcer
amour
amovible
amphibie
ampleur
amusant
analyse
anaphore
anarchie
anatomie
ancien
anéantir
angle
angoisse
anguleux
animal
annexer
annonce
annuel
anodin
anomalie
anonyme
anormal
antenne
antidote
anxieux
apaiser
apéritif
aplanir
apologie
appareil
appeler
apporter
appuyer
aquarium
aqueduc
arbitre
arbuste
ardeur
ardoise
argent
arlequin
armature
armement
armoire
armure
arpenter
arracher
arriver
arroser
arsenic
artériel
article
aspect
asphalte
aspirer
assaut
asservir
assiette
associer
assurer
asticot
astre
astuce
atelier
atome
atrium
atroce
attaque
attentif
attirer
attraper
aubaine
auberge
audace
audible
augurer
aurore
automne
autruche
avaler
avancer
avarice
avenir
averse
aveugle
aviateur
avide
avion
aviser
avoine
avouer
avril
axial
axiome
badge
bafouer
bagage
baguette
baignade
balancer
balcon
baleine
balisage
bambin
bancaire
bandage
banlieue
bannière
banquier
barbier
baril
baron
barque
barrage
bassin
bastion
bataille
bateau
batterie
baudrier
bavarder
belette
bélier
belote
bénéfice
berceau
berger
berline
bermuda
besace
besogne
bétail
beurre
biberon
bicycle
bidule
bijou
bilan
bilingue
billard
binaire
biologie
biopsie
biotype
biscuit
bison
bistouri
bitume
bizarre
blafard
blague
blanchir
blessant
blinder
blond
bloquer
blouson
bobard
bobine
boire
boiser
bolide
bonbon
bondir
bonheur
bonifier
bonus
bordure
borne
botte
boucle
boueux
bougie
boulon
bouquin
bourse
boussole
boutique
boxeur
branche
brasier
brave
brebis
brèche
breuvage
bricoler
brigade
brillant
brioche
brique
brochure
broder
bronzer
brousse
broyeur
brume
brusque
brutal
bruyant
buffle
buisson
bulletin
bureau
burin
bustier
butiner
butoir
buvable
buvette
cabanon
cabine
cachette
cadeau
cadre
caféine
caillou
caisson
calculer
calepin
calibre
calmer
calomnie
calvaire
camarade
caméra
camion
campagne
canal
caneton
canon
cantine
canular
capable
caporal
caprice
capsule
capter
capuche
carabine
carbone
caresser
caribou
carnage
carotte
carreau
carton
cascade
casier
casque
cassure
causer
caution
cavalier
caverne
caviar
cédille
ceinture
céleste
cellule
cendrier
censurer
central
cercle
cérébral
cerise
cerner
cerveau
cesser
chagrin
chaise
chaleur
chambre
chance
chapitre
charbon
chasseur
chaton
chausson
chavirer
chemise
chenille
chéquier
chercher
cheval
chien
chiffre
chignon
chimère
chiot
chlorure
chocolat
choisir
chose
chouette
chrome
chute
cigare
cigogne
cimenter
cinéma
cintrer
circuler
cirer
cirque
citerne
citoyen
citron
civil
clairon
clameur
claquer
classe
clavier
client
cligner
climat
clivage
cloche
clonage
cloporte
cobalt
cobra
cocasse
cocotier
coder
codifier
coffre
cogner
cohésion
coiffer
coincer
colère
colibri
colline
colmater
colonel
combat
comédie
commande
compact
concert
conduire
confier
congeler
connoter
consonne
contact
convexe
copain
copie
corail
corbeau
cordage
corniche
corpus
correct
cortège
cosmique
costume
coton
coude
coupure
courage
couteau
couvrir
coyote
crabe
crainte
cravate
crayon
créature
créditer
crémeux
creuser
crevette
cribler
crier
cristal
critère
croire
croquer
crotale
crucial
cruel
crypter
cubique
cueillir
cuillère
cuisine
cuivre
culminer
cultiver
cumuler
cupide
curatif
curseur
cyanure
cycle
cylindre
cynique
daigner
damier
danger
danseur
dauphin
débattre
débiter
déborder
débrider
débutant
décaler
décembre
déchirer
décider
déclarer
décorer
décrire
décupler
dédale
déductif
déesse
défensif
défiler
défrayer
dégager
dégivrer
déglutir
dégrafer
déjeuner
délice
déloger
demander
demeurer
démolir
dénicher
dénouer
dentelle
dénuder
départ
dépenser
déphaser
déplacer
déposer
déranger
dérober
désastre
descente
désert
désigner
désobéir
dessiner
destrier
détacher
détester
détourer
détresse
devancer
devenir
deviner
devoir
diable
dialogue
diamant
dicter
différer
digérer
digital
digne
diluer
dimanche
diminuer
dioxyde
directif
diriger
discuter
disposer
dissiper
distance
divertir
diviser
docile
docteur
dogme
doigt
domaine
domicile
dompter
donateur
donjon
donner
dopamine
dortoir
dorure
dosage
doseur
dossier
dotation
douanier
double
douceur
douter
doyen
dragon
draper
dresser
dribbler
droiture
duperie
duplexe
durable
durcir
dynastie
éblouir
écarter
écharpe
échelle
éclairer
éclipse
éclore
écluse
école
économie
écorce
écouter
écraser
écrémer
écrivain
écrou
écume
écureuil
édifier
éduquer
effacer
effectif
effigie
effort
effrayer
effusion
égaliser
égarer
éjecter
élaborer
élargir
électron
élégant
éléphant
élève
éligible
élitisme
éloge
élucider
éluder
emballer
embellir
embryon
émeraude
émission
emmener
émotion
émouvoir
empereur
employer
emporter
emprise
émulsion
encadrer
enchère
enclave
encoche
endiguer
endosser
endroit
enduire
énergie
enfance
enfermer
enfouir
engager
engin
englober
énigme
enjamber
enjeu
enlever
ennemi
ennuyeux
enrichir
enrobage
enseigne
entasser
entendre
entier
entourer
entraver
énumérer
envahir
enviable
envoyer
enzyme
éolien
épaissir
épargne
épatant
épaule
épicerie
épidémie
épier
épilogue
épine
épisode
épitaphe
époque
épreuve
éprouver
épuisant
équerre
équipe
ériger
érosion
erreur
éruption
escalier
espadon
espèce
espiègle
espoir
esprit
esquiver
essayer
essence
essieu
essorer
estime
estomac
estrade
étagère
étaler
étanche
étatique
éteindre
étendoir
éternel
éthanol
éthique
ethnie
étirer
étoffer
étoile
étonnant
étourdir
étrange
étroit
étude
euphorie
évaluer
évasion
éventail
évidence
éviter
évolutif
évoquer
exact
exagérer
exaucer
exceller
excitant
exclusif
excuse
exécuter
exemple
exercer
exhaler
exhorter
exigence
exiler
exister
exotique
expédier
explorer
exposer
exprimer
exquis
extensif
extraire
exulter
fable
fabuleux
facette
facile
facture
faiblir
falaise
fameux
famille
farceur
farfelu
farine
farouche
fasciner
fatal
fatigue
faucon
fautif
faveur
favori
fébrile
féconder
fédérer
félin
femme
fémur
fendoir
féodal
fermer
féroce
ferveur
festival
feuille
feutre
février
fiasco
ficeler
fictif
fidèle
figure
filature
filetage
filière
filleul
filmer
filou
filtrer
financer
finir
fiole
firme
fissure
fixer
flairer
flamme
flasque
flatteur
fléau
flèche
fleur
flexion
flocon
flore
fluctuer
fluide
fluvial
folie
fonderie
fongible
fontaine
forcer
forgeron
formuler
fortune
fossile
foudre
fougère
fouiller
foulure
fourmi
fragile
fraise
franchir
frapper
frayeur
frégate
freiner
frelon
frémir
frénésie
frère
friable
friction
frisson
frivole
froid
fromage
frontal
frotter
fruit
fugitif
fuite
fureur
furieux
furtif
fusion
futur
gagner
galaxie
galerie
gambader
garantir
gardien
garnir
garrigue
gazelle
gazon
géant
gélatine
gélule
gendarme
général
génie
genou
gentil
géologie
géomètre
géranium
germe
gestuel
geyser
gibier
gicler
girafe
givre
glace
glaive
glisser
globe
gloire
glorieux
golfeur
gomme
gonfler
gorge
gorille
goudron
gouffre
goulot
goupille
gourmand
goutte
graduel
graffiti
graine
grand
grappin
gratuit
gravir
grenat
griffure
griller
grimper
grogner
gronder
grotte
groupe
gruger
grutier
gruyère
guépard
guerrier
guide
guimauve
guitare
gustatif
gymnaste
gyrostat
habitude
hachoir
halte
hameau
hangar
hanneton
haricot
harmonie
harpon
hasard
hélium
hématome
herbe
hérisson
hermine
héron
hésiter
heureux
hiberner
hibou
hilarant
histoire
hiver
homard
hommage
homogène
honneur
honorer
honteux
horde
horizon
horloge
hormone
horrible
houleux
housse
hublot
huileux
humain
humble
humide
humour
hurler
hydromel
hygiène
hymne
hypnose
idylle
ignorer
iguane
illicite
illusion
image
imbiber
imiter
immense
immobile
immuable
impact
impérial
implorer
imposer
imprimer
imputer
incarner
incendie
incident
incliner
incolore
indexer
indice
inductif
inédit
ineptie
inexact
infini
infliger
informer
infusion
ingérer
inhaler
inhiber
injecter
injure
innocent
inoculer
inonder
inscrire
insecte
insigne
insolite
inspirer
instinct
insulter
intact
intense
intime
intrigue
intuitif
inutile
invasion
inventer
inviter
invoquer
ironique
irradier
irréel
irriter
isoler
ivoire
ivresse
jaguar
jaillir
jambe
janvier
jardin
jauger
jaune
javelot
jetable
jeton
jeudi
jeunesse
joindre
joncher
jongler
joueur
jouissif
journal
jovial
joyau
joyeux
jubiler
jugement
junior
jupon
juriste
justice
juteux
juvénile
kayak
kimono
kiosque
label
labial
labourer
lacérer
lactose
lagune
laine
laisser
laitier
lambeau
lamelle
lampe
lanceur
langage
lanterne
lapin
largeur
larme
laurier
lavabo
lavoir
lecture
légal
léger
légume
lessive
lettre
levier
lexique
lézard
liasse
libérer
libre
licence
licorne
liège
lièvre
ligature
ligoter
ligue
limer
limite
limonade
limpide
linéaire
lingot
lionceau
liquide
lisière
lister
lithium
litige
littoral
livreur
logique
lointain
loisir
lombric
loterie
louer
lourd
loutre
louve
loyal
lubie
lucide
lucratif
lueur
lugubre
luisant
lumière
lunaire
lundi
luron
lutter
luxueux
machine
magasin
magenta
magique
maigre
maillon
maintien
mairie
maison
majorer
malaxer
maléfice
malheur
malice
mallette
mammouth
mandater
maniable
manquant
manteau
manuel
marathon
marbre
marchand
mardi
maritime
marqueur
marron
marteler
mascotte
massif
matériel
matière
matraque
maudire
maussade
mauve
maximal
méchant
méconnu
médaille
médecin
méditer
méduse
meilleur
mélange
mélodie
membre
mémoire
menacer
mener
menhir
mensonge
mentor
mercredi
mérite
merle
messager
mesure
métal
météore
méthode
métier
meuble
miauler
microbe
miette
mignon
migrer
milieu
million
mimique
mince
minéral
minimal
minorer
minute
miracle
miroiter
missile
mixte
mobile
moderne
moelleux
mondial
moniteur
monnaie
monotone
monstre
montagne
monument
moqueur
morceau
morsure
mortier
moteur
motif
mouche
moufle
moulin
mousson
mouton
mouvant
multiple
munition
muraille
murène
murmure
muscle
muséum
musicien
mutation
muter
mutuel
myriade
myrtille
mystère
mythique
nageur
nappe
narquois
narrer
natation
nation
nature
naufrage
nautique
navire
nébuleux
nectar
néfaste
négation
négliger
négocier
neige
nerveux
nettoyer
neurone
neutron
neveu
niche
nickel
nitrate
niveau
noble
nocif
nocturne
noirceur
noisette
nomade
nombreux
nommer
normatif
notable
notifier
notoire
nourrir
nouveau
novateur
novembre
novice
nuage
nuancer
nuire
nuisible
numéro
nuptial
nuque
nutritif
obéir
objectif
obliger
obscur
observer
obstacle
obtenir
obturer
occasion
occuper
océan
octobre
octroyer
octupler
oculaire
odeur
odorant
offenser
officier
offrir
ogive
oiseau
oisillon
olfactif
olivier
ombrage
omettre
onctueux
onduler
onéreux
onirique
opale
opaque
opérer
opinion
opportun
opprimer
opter
optique
orageux
orange
orbite
ordonner
oreille
organe
orgueil
orifice
ornement
orque
ortie
osciller
osmose
ossature
otarie
ouragan
ourson
outil
outrager
ouvrage
ovation
oxyde
oxygène
ozone
paisible
palace
palmarès
palourde
palper
panache
panda
pangolin
paniquer
panneau
panorama
pantalon
papaye
papier
papoter
papyrus
paradoxe
parcelle
paresse
parfumer
parler
parole
parrain
parsemer
partager
parure
parvenir
passion
pastèque
paternel
patience
patron
pavillon
pavoiser
payer
paysage
peigne
peintre
pelage
pélican
pelle
pelouse
peluche
pendule
pénétrer
pénible
pensif
pénurie
pépite
péplum
perdrix
perforer
période
permuter
perplexe
persil
perte
peser
pétale
petit
pétrir
peuple
pharaon
phobie
phoque
photon
phrase
physique
piano
pictural
pièce
pierre
pieuvre
pilote
pinceau
pipette
piquer
pirogue
piscine
piston
pivoter
pixel
pizza
placard
plafond
plaisir
planer
plaque
plastron
plateau
pleurer
plexus
pliage
plomb
plonger
pluie
plumage
pochette
poésie
poète
pointe
poirier
poisson
poivre
polaire
policier
pollen
polygone
pommade
pompier
ponctuel
pondérer
poney
portique
position
posséder
posture
potager
poteau
potion
pouce
poulain
poumon
pourpre
poussin
pouvoir
prairie
pratique
précieux
prédire
préfixe
prélude
prénom
présence
prétexte
prévoir
primitif
prince
prison
priver
problème
procéder
prodige
profond
progrès
proie
projeter
prologue
promener
propre
prospère
protéger
prouesse
proverbe
prudence
pruneau
psychose
public
puceron
puiser
pulpe
pulsar
punaise
punitif
pupitre
purifier
puzzle
pyramide
quasar
querelle
question
quiétude
quitter
quotient
racine
raconter
radieux
ragondin
raideur
raisin
ralentir
rallonge
ramasser
rapide
rasage
ratisser
ravager
ravin
rayonner
réactif
réagir
réaliser
réanimer
recevoir
réciter
réclamer
récolter
recruter
reculer
recycler
rédiger
redouter
refaire
réflexe
réformer
refrain
refuge
régalien
région
réglage
régulier
réitérer
rejeter
rejouer
relatif
relever
relief
remarque
remède
remise
remonter
remplir
remuer
renard
renfort
renifler
renoncer
rentrer
renvoi
replier
reporter
reprise
reptile
requin
réserve
résineux
résoudre
respect
rester
résultat
rétablir
retenir
réticule
retomber
retracer
réunion
réussir
revanche
revivre
révolte
révulsif
richesse
rideau
rieur
rigide
rigoler
rincer
riposter
risible
risque
rituel
rival
rivière
rocheux
romance
rompre
ronce
rondin
roseau
rosier
rotatif
rotor
rotule
rouge
rouille
rouleau
routine
royaume
ruban
rubis
ruche
ruelle
rugueux
ruiner
ruisseau
ruser
rustique
rythme
sabler
saboter
sabre
sacoche
safari
sagesse
saisir
salade
salive
salon
saluer
samedi
sanction
sanglier
sarcasme
sardine
saturer
saugrenu
saumon
sauter
sauvage
savant
savonner
scalpel
scandale
scélérat
scénario
sceptre
schéma
science
scinder
score
scrutin
sculpter
séance
sécable
sécher
secouer
sécréter
sédatif
séduire
seigneur
séjour
sélectif
semaine
sembler
semence
séminal
sénateur
sensible
sentence
séparer
séquence
serein
sergent
sérieux
serrure
sérum
service
sésame
sévir
sevrage
sextuple
sidéral
siècle
siéger
siffler
sigle
signal
silence
silicium
simple
sincère
sinistre
siphon
sirop
sismique
situer
skier
social
socle
sodium
soigneux
soldat
soleil
solitude
soluble
sombre
sommeil
somnoler
sonde
songeur
sonnette
sonore
sorcier
sortir
sosie
sottise
soucieux
soudure
souffle
soulever
soupape
source
soutirer
souvenir
spacieux
spatial
spécial
sphère
spiral
stable
station
sternum
stimulus
stipuler
strict
studieux
stupeur
styliste
sublime
substrat
subtil
subvenir
succès
sucre
suffixe
suggérer
suiveur
sulfate
superbe
supplier
surface
suricate
surmener
surprise
sursaut
survie
suspect
syllabe
symbole
symétrie
synapse
syntaxe
système
tabac
tablier
tactile
tailler
talent
talisman
talonner
tambour
tamiser
tangible
tapis
taquiner
tarder
tarif
tartine
tasse
tatami
tatouage
taupe
taureau
taxer
témoin
temporel
tenaille
tendre
teneur
tenir
tension
terminer
terne
terrible
tétine
texte
thème
théorie
thérapie
thorax
tibia
tiède
timide
tirelire
tiroir
tissu
titane
titre
tituber
toboggan
tolérant
tomate
tonique
tonneau
toponyme
torche
tordre
tornade
torpille
torrent
torse
tortue
totem
toucher
tournage
tousser
toxine
traction
trafic
tragique
trahir
train
trancher
travail
trèfle
tremper
trésor
treuil
triage
tribunal
tricoter
trilogie
triomphe
tripler
triturer
trivial
trombone
tronc
tropical
troupeau
tuile
tulipe
tumulte
tunnel
turbine
tuteur
tutoyer
tuyau
tympan
typhon
typique
tyran
ubuesque
ultime
ultrason
unanime
unifier
union
unique
unitaire
univers
uranium
urbain
urticant
usage
usine
usuel
usure
utile
utopie
vacarme
vaccin
vagabond
vague
vaillant
vaincre
vaisseau
valable
valise
vallon
valve
vampire
vanille
vapeur
varier
vaseux
vassal
vaste
vecteur
vedette
végétal
véhicule
veinard
véloce
vendredi
vénérer
venger
venimeux
ventouse
verdure
vérin
vernir
verrou
verser
vertu
veston
vétéran
vétuste
vexant
vexer
viaduc
viande
victoire
vidange
vidéo
vignette
vigueur
vilain
village
vinaigre
violon
vipère
virement
virtuose
virus
visage
viseur
vision
visqueux
visuel
vital
vitesse
viticole
vitrine
vivace
vivipare
vocation
voguer
voile
voisin
voiture
volaille
volcan
voltiger
volume
vorace
vortex
voter
vouloir
voyage
voyelle
wagon
xénon
yacht
zèbre
zénith
zeste
zoologie`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/italian.js
var wordlist4 = `abaco
abbaglio
abbinato
abete
abisso
abolire
abrasivo
abrogato
accadere
accenno
accusato
acetone
achille
acido
acqua
acre
acrilico
acrobata
acuto
adagio
addebito
addome
adeguato
aderire
adipe
adottare
adulare
affabile
affetto
affisso
affranto
aforisma
afoso
africano
agave
agente
agevole
aggancio
agire
agitare
agonismo
agricolo
agrumeto
aguzzo
alabarda
alato
albatro
alberato
albo
albume
alce
alcolico
alettone
alfa
algebra
aliante
alibi
alimento
allagato
allegro
allievo
allodola
allusivo
almeno
alogeno
alpaca
alpestre
altalena
alterno
alticcio
altrove
alunno
alveolo
alzare
amalgama
amanita
amarena
ambito
ambrato
ameba
america
ametista
amico
ammasso
ammenda
ammirare
ammonito
amore
ampio
ampliare
amuleto
anacardo
anagrafe
analista
anarchia
anatra
anca
ancella
ancora
andare
andrea
anello
angelo
angolare
angusto
anima
annegare
annidato
anno
annuncio
anonimo
anticipo
anzi
apatico
apertura
apode
apparire
appetito
appoggio
approdo
appunto
aprile
arabica
arachide
aragosta
araldica
arancio
aratura
arazzo
arbitro
archivio
ardito
arenile
argento
argine
arguto
aria
armonia
arnese
arredato
arringa
arrosto
arsenico
arso
artefice
arzillo
asciutto
ascolto
asepsi
asettico
asfalto
asino
asola
aspirato
aspro
assaggio
asse
assoluto
assurdo
asta
astenuto
astice
astratto
atavico
ateismo
atomico
atono
attesa
attivare
attorno
attrito
attuale
ausilio
austria
autista
autonomo
autunno
avanzato
avere
avvenire
avviso
avvolgere
azione
azoto
azzimo
azzurro
babele
baccano
bacino
baco
badessa
badilata
bagnato
baita
balcone
baldo
balena
ballata
balzano
bambino
bandire
baraonda
barbaro
barca
baritono
barlume
barocco
basilico
basso
batosta
battuto
baule
bava
bavosa
becco
beffa
belgio
belva
benda
benevole
benigno
benzina
bere
berlina
beta
bibita
bici
bidone
bifido
biga
bilancia
bimbo
binocolo
biologo
bipede
bipolare
birbante
birra
biscotto
bisesto
bisnonno
bisonte
bisturi
bizzarro
blando
blatta
bollito
bonifico
bordo
bosco
botanico
bottino
bozzolo
braccio
bradipo
brama
branca
bravura
bretella
brevetto
brezza
briglia
brillante
brindare
broccolo
brodo
bronzina
brullo
bruno
bubbone
buca
budino
buffone
buio
bulbo
buono
burlone
burrasca
bussola
busta
cadetto
caduco
calamaro
calcolo
calesse
calibro
calmo
caloria
cambusa
camerata
camicia
cammino
camola
campale
canapa
candela
cane
canino
canotto
cantina
capace
capello
capitolo
capogiro
cappero
capra
capsula
carapace
carcassa
cardo
carisma
carovana
carretto
cartolina
casaccio
cascata
caserma
caso
cassone
castello
casuale
catasta
catena
catrame
cauto
cavillo
cedibile
cedrata
cefalo
celebre
cellulare
cena
cenone
centesimo
ceramica
cercare
certo
cerume
cervello
cesoia
cespo
ceto
chela
chiaro
chicca
chiedere
chimera
china
chirurgo
chitarra
ciao
ciclismo
cifrare
cigno
cilindro
ciottolo
circa
cirrosi
citrico
cittadino
ciuffo
civetta
civile
classico
clinica
cloro
cocco
codardo
codice
coerente
cognome
collare
colmato
colore
colposo
coltivato
colza
coma
cometa
commando
comodo
computer
comune
conciso
condurre
conferma
congelare
coniuge
connesso
conoscere
consumo
continuo
convegno
coperto
copione
coppia
copricapo
corazza
cordata
coricato
cornice
corolla
corpo
corredo
corsia
cortese
cosmico
costante
cottura
covato
cratere
cravatta
creato
credere
cremoso
crescita
creta
criceto
crinale
crisi
critico
croce
cronaca
crostata
cruciale
crusca
cucire
cuculo
cugino
cullato
cupola
curatore
cursore
curvo
cuscino
custode
dado
daino
dalmata
damerino
daniela
dannoso
danzare
datato
davanti
davvero
debutto
decennio
deciso
declino
decollo
decreto
dedicato
definito
deforme
degno
delegare
delfino
delirio
delta
demenza
denotato
dentro
deposito
derapata
derivare
deroga
descritto
deserto
desiderio
desumere
detersivo
devoto
diametro
dicembre
diedro
difeso
diffuso
digerire
digitale
diluvio
dinamico
dinnanzi
dipinto
diploma
dipolo
diradare
dire
dirotto
dirupo
disagio
discreto
disfare
disgelo
disposto
distanza
disumano
dito
divano
divelto
dividere
divorato
doblone
docente
doganale
dogma
dolce
domato
domenica
dominare
dondolo
dono
dormire
dote
dottore
dovuto
dozzina
drago
druido
dubbio
dubitare
ducale
duna
duomo
duplice
duraturo
ebano
eccesso
ecco
eclissi
economia
edera
edicola
edile
editoria
educare
egemonia
egli
egoismo
egregio
elaborato
elargire
elegante
elencato
eletto
elevare
elfico
elica
elmo
elsa
eluso
emanato
emblema
emesso
emiro
emotivo
emozione
empirico
emulo
endemico
enduro
energia
enfasi
enoteca
entrare
enzima
epatite
epilogo
episodio
epocale
eppure
equatore
erario
erba
erboso
erede
eremita
erigere
ermetico
eroe
erosivo
errante
esagono
esame
esanime
esaudire
esca
esempio
esercito
esibito
esigente
esistere
esito
esofago
esortato
esoso
espanso
espresso
essenza
esso
esteso
estimare
estonia
estroso
esultare
etilico
etnico
etrusco
etto
euclideo
europa
evaso
evidenza
evitato
evoluto
evviva
fabbrica
faccenda
fachiro
falco
famiglia
fanale
fanfara
fango
fantasma
fare
farfalla
farinoso
farmaco
fascia
fastoso
fasullo
faticare
fato
favoloso
febbre
fecola
fede
fegato
felpa
feltro
femmina
fendere
fenomeno
fermento
ferro
fertile
fessura
festivo
fetta
feudo
fiaba
fiducia
fifa
figurato
filo
finanza
finestra
finire
fiore
fiscale
fisico
fiume
flacone
flamenco
flebo
flemma
florido
fluente
fluoro
fobico
focaccia
focoso
foderato
foglio
folata
folclore
folgore
fondente
fonetico
fonia
fontana
forbito
forchetta
foresta
formica
fornaio
foro
fortezza
forzare
fosfato
fosso
fracasso
frana
frassino
fratello
freccetta
frenata
fresco
frigo
frollino
fronde
frugale
frutta
fucilata
fucsia
fuggente
fulmine
fulvo
fumante
fumetto
fumoso
fune
funzione
fuoco
furbo
furgone
furore
fuso
futile
gabbiano
gaffe
galateo
gallina
galoppo
gambero
gamma
garanzia
garbo
garofano
garzone
gasdotto
gasolio
gastrico
gatto
gaudio
gazebo
gazzella
geco
gelatina
gelso
gemello
gemmato
gene
genitore
gennaio
genotipo
gergo
ghepardo
ghiaccio
ghisa
giallo
gilda
ginepro
giocare
gioiello
giorno
giove
girato
girone
gittata
giudizio
giurato
giusto
globulo
glutine
gnomo
gobba
golf
gomito
gommone
gonfio
gonna
governo
gracile
grado
grafico
grammo
grande
grattare
gravoso
grazia
greca
gregge
grifone
grigio
grinza
grotta
gruppo
guadagno
guaio
guanto
guardare
gufo
guidare
ibernato
icona
identico
idillio
idolo
idra
idrico
idrogeno
igiene
ignaro
ignorato
ilare
illeso
illogico
illudere
imballo
imbevuto
imbocco
imbuto
immane
immerso
immolato
impacco
impeto
impiego
importo
impronta
inalare
inarcare
inattivo
incanto
incendio
inchino
incisivo
incluso
incontro
incrocio
incubo
indagine
india
indole
inedito
infatti
infilare
inflitto
ingaggio
ingegno
inglese
ingordo
ingrosso
innesco
inodore
inoltrare
inondato
insano
insetto
insieme
insonnia
insulina
intasato
intero
intonaco
intuito
inumidire
invalido
invece
invito
iperbole
ipnotico
ipotesi
ippica
iride
irlanda
ironico
irrigato
irrorare
isolato
isotopo
isterico
istituto
istrice
italia
iterare
labbro
labirinto
lacca
lacerato
lacrima
lacuna
laddove
lago
lampo
lancetta
lanterna
lardoso
larga
laringe
lastra
latenza
latino
lattuga
lavagna
lavoro
legale
leggero
lembo
lentezza
lenza
leone
lepre
lesivo
lessato
lesto
letterale
leva
levigato
libero
lido
lievito
lilla
limatura
limitare
limpido
lineare
lingua
liquido
lira
lirica
lisca
lite
litigio
livrea
locanda
lode
logica
lombare
londra
longevo
loquace
lorenzo
loto
lotteria
luce
lucidato
lumaca
luminoso
lungo
lupo
luppolo
lusinga
lusso
lutto
macabro
macchina
macero
macinato
madama
magico
maglia
magnete
magro
maiolica
malafede
malgrado
malinteso
malsano
malto
malumore
mana
mancia
mandorla
mangiare
manifesto
mannaro
manovra
mansarda
mantide
manubrio
mappa
maratona
marcire
maretta
marmo
marsupio
maschera
massaia
mastino
materasso
matricola
mattone
maturo
mazurca
meandro
meccanico
mecenate
medesimo
meditare
mega
melassa
melis
melodia
meninge
meno
mensola
mercurio
merenda
merlo
meschino
mese
messere
mestolo
metallo
metodo
mettere
miagolare
mica
micelio
michele
microbo
midollo
miele
migliore
milano
milite
mimosa
minerale
mini
minore
mirino
mirtillo
miscela
missiva
misto
misurare
mitezza
mitigare
mitra
mittente
mnemonico
modello
modifica
modulo
mogano
mogio
mole
molosso
monastero
monco
mondina
monetario
monile
monotono
monsone
montato
monviso
mora
mordere
morsicato
mostro
motivato
motosega
motto
movenza
movimento
mozzo
mucca
mucosa
muffa
mughetto
mugnaio
mulatto
mulinello
multiplo
mummia
munto
muovere
murale
musa
muscolo
musica
mutevole
muto
nababbo
nafta
nanometro
narciso
narice
narrato
nascere
nastrare
naturale
nautica
naviglio
nebulosa
necrosi
negativo
negozio
nemmeno
neofita
neretto
nervo
nessuno
nettuno
neutrale
neve
nevrotico
nicchia
ninfa
nitido
nobile
nocivo
nodo
nome
nomina
nordico
normale
norvegese
nostrano
notare
notizia
notturno
novella
nucleo
nulla
numero
nuovo
nutrire
nuvola
nuziale
oasi
obbedire
obbligo
obelisco
oblio
obolo
obsoleto
occasione
occhio
occidente
occorrere
occultare
ocra
oculato
odierno
odorare
offerta
offrire
offuscato
oggetto
oggi
ognuno
olandese
olfatto
oliato
oliva
ologramma
oltre
omaggio
ombelico
ombra
omega
omissione
ondoso
onere
onice
onnivoro
onorevole
onta
operato
opinione
opposto
oracolo
orafo
ordine
orecchino
orefice
orfano
organico
origine
orizzonte
orma
ormeggio
ornativo
orologio
orrendo
orribile
ortensia
ortica
orzata
orzo
osare
oscurare
osmosi
ospedale
ospite
ossa
ossidare
ostacolo
oste
otite
otre
ottagono
ottimo
ottobre
ovale
ovest
ovino
oviparo
ovocito
ovunque
ovviare
ozio
pacchetto
pace
pacifico
padella
padrone
paese
paga
pagina
palazzina
palesare
pallido
palo
palude
pandoro
pannello
paolo
paonazzo
paprica
parabola
parcella
parere
pargolo
pari
parlato
parola
partire
parvenza
parziale
passivo
pasticca
patacca
patologia
pattume
pavone
peccato
pedalare
pedonale
peggio
peloso
penare
pendice
penisola
pennuto
penombra
pensare
pentola
pepe
pepita
perbene
percorso
perdonato
perforare
pergamena
periodo
permesso
perno
perplesso
persuaso
pertugio
pervaso
pesatore
pesista
peso
pestifero
petalo
pettine
petulante
pezzo
piacere
pianta
piattino
piccino
picozza
piega
pietra
piffero
pigiama
pigolio
pigro
pila
pilifero
pillola
pilota
pimpante
pineta
pinna
pinolo
pioggia
piombo
piramide
piretico
pirite
pirolisi
pitone
pizzico
placebo
planare
plasma
platano
plenario
pochezza
poderoso
podismo
poesia
poggiare
polenta
poligono
pollice
polmonite
polpetta
polso
poltrona
polvere
pomice
pomodoro
ponte
popoloso
porfido
poroso
porpora
porre
portata
posa
positivo
possesso
postulato
potassio
potere
pranzo
prassi
pratica
precluso
predica
prefisso
pregiato
prelievo
premere
prenotare
preparato
presenza
pretesto
prevalso
prima
principe
privato
problema
procura
produrre
profumo
progetto
prolunga
promessa
pronome
proposta
proroga
proteso
prova
prudente
prugna
prurito
psiche
pubblico
pudica
pugilato
pugno
pulce
pulito
pulsante
puntare
pupazzo
pupilla
puro
quadro
qualcosa
quasi
querela
quota
raccolto
raddoppio
radicale
radunato
raffica
ragazzo
ragione
ragno
ramarro
ramingo
ramo
randagio
rantolare
rapato
rapina
rappreso
rasatura
raschiato
rasente
rassegna
rastrello
rata
ravveduto
reale
recepire
recinto
recluta
recondito
recupero
reddito
redimere
regalato
registro
regola
regresso
relazione
remare
remoto
renna
replica
reprimere
reputare
resa
residente
responso
restauro
rete
retina
retorica
rettifica
revocato
riassunto
ribadire
ribelle
ribrezzo
ricarica
ricco
ricevere
riciclato
ricordo
ricreduto
ridicolo
ridurre
rifasare
riflesso
riforma
rifugio
rigare
rigettato
righello
rilassato
rilevato
rimanere
rimbalzo
rimedio
rimorchio
rinascita
rincaro
rinforzo
rinnovo
rinomato
rinsavito
rintocco
rinuncia
rinvenire
riparato
ripetuto
ripieno
riportare
ripresa
ripulire
risata
rischio
riserva
risibile
riso
rispetto
ristoro
risultato
risvolto
ritardo
ritegno
ritmico
ritrovo
riunione
riva
riverso
rivincita
rivolto
rizoma
roba
robotico
robusto
roccia
roco
rodaggio
rodere
roditore
rogito
rollio
romantico
rompere
ronzio
rosolare
rospo
rotante
rotondo
rotula
rovescio
rubizzo
rubrica
ruga
rullino
rumine
rumoroso
ruolo
rupe
russare
rustico
sabato
sabbiare
sabotato
sagoma
salasso
saldatura
salgemma
salivare
salmone
salone
saltare
saluto
salvo
sapere
sapido
saporito
saraceno
sarcasmo
sarto
sassoso
satellite
satira
satollo
saturno
savana
savio
saziato
sbadiglio
sbalzo
sbancato
sbarra
sbattere
sbavare
sbendare
sbirciare
sbloccato
sbocciato
sbrinare
sbruffone
sbuffare
scabroso
scadenza
scala
scambiare
scandalo
scapola
scarso
scatenare
scavato
scelto
scenico
scettro
scheda
schiena
sciarpa
scienza
scindere
scippo
sciroppo
scivolo
sclerare
scodella
scolpito
scomparto
sconforto
scoprire
scorta
scossone
scozzese
scriba
scrollare
scrutinio
scuderia
scultore
scuola
scuro
scusare
sdebitare
sdoganare
seccatura
secondo
sedano
seggiola
segnalato
segregato
seguito
selciato
selettivo
sella
selvaggio
semaforo
sembrare
seme
seminato
sempre
senso
sentire
sepolto
sequenza
serata
serbato
sereno
serio
serpente
serraglio
servire
sestina
setola
settimana
sfacelo
sfaldare
sfamato
sfarzoso
sfaticato
sfera
sfida
sfilato
sfinge
sfocato
sfoderare
sfogo
sfoltire
sforzato
sfratto
sfruttato
sfuggito
sfumare
sfuso
sgabello
sgarbato
sgonfiare
sgorbio
sgrassato
sguardo
sibilo
siccome
sierra
sigla
signore
silenzio
sillaba
simbolo
simpatico
simulato
sinfonia
singolo
sinistro
sino
sintesi
sinusoide
sipario
sisma
sistole
situato
slitta
slogatura
sloveno
smarrito
smemorato
smentito
smeraldo
smilzo
smontare
smottato
smussato
snellire
snervato
snodo
sobbalzo
sobrio
soccorso
sociale
sodale
soffitto
sogno
soldato
solenne
solido
sollazzo
solo
solubile
solvente
somatico
somma
sonda
sonetto
sonnifero
sopire
soppeso
sopra
sorgere
sorpasso
sorriso
sorso
sorteggio
sorvolato
sospiro
sosta
sottile
spada
spalla
spargere
spatola
spavento
spazzola
specie
spedire
spegnere
spelatura
speranza
spessore
spettrale
spezzato
spia
spigoloso
spillato
spinoso
spirale
splendido
sportivo
sposo
spranga
sprecare
spronato
spruzzo
spuntino
squillo
sradicare
srotolato
stabile
stacco
staffa
stagnare
stampato
stantio
starnuto
stasera
statuto
stelo
steppa
sterzo
stiletto
stima
stirpe
stivale
stizzoso
stonato
storico
strappo
stregato
stridulo
strozzare
strutto
stuccare
stufo
stupendo
subentro
succoso
sudore
suggerito
sugo
sultano
suonare
superbo
supporto
surgelato
surrogato
sussurro
sutura
svagare
svedese
sveglio
svelare
svenuto
svezia
sviluppo
svista
svizzera
svolta
svuotare
tabacco
tabulato
tacciare
taciturno
tale
talismano
tampone
tannino
tara
tardivo
targato
tariffa
tarpare
tartaruga
tasto
tattico
taverna
tavolata
tazza
teca
tecnico
telefono
temerario
tempo
temuto
tendone
tenero
tensione
tentacolo
teorema
terme
terrazzo
terzetto
tesi
tesserato
testato
tetro
tettoia
tifare
tigella
timbro
tinto
tipico
tipografo
tiraggio
tiro
titanio
titolo
titubante
tizio
tizzone
toccare
tollerare
tolto
tombola
tomo
tonfo
tonsilla
topazio
topologia
toppa
torba
tornare
torrone
tortora
toscano
tossire
tostatura
totano
trabocco
trachea
trafila
tragedia
tralcio
tramonto
transito
trapano
trarre
trasloco
trattato
trave
treccia
tremolio
trespolo
tributo
tricheco
trifoglio
trillo
trincea
trio
tristezza
triturato
trivella
tromba
trono
troppo
trottola
trovare
truccato
tubatura
tuffato
tulipano
tumulto
tunisia
turbare
turchino
tuta
tutela
ubicato
uccello
uccisore
udire
uditivo
uffa
ufficio
uguale
ulisse
ultimato
umano
umile
umorismo
uncinetto
ungere
ungherese
unicorno
unificato
unisono
unitario
unte
uovo
upupa
uragano
urgenza
urlo
usanza
usato
uscito
usignolo
usuraio
utensile
utilizzo
utopia
vacante
vaccinato
vagabondo
vagliato
valanga
valgo
valico
valletta
valoroso
valutare
valvola
vampata
vangare
vanitoso
vano
vantaggio
vanvera
vapore
varano
varcato
variante
vasca
vedetta
vedova
veduto
vegetale
veicolo
velcro
velina
velluto
veloce
venato
vendemmia
vento
verace
verbale
vergogna
verifica
vero
verruca
verticale
vescica
vessillo
vestale
veterano
vetrina
vetusto
viandante
vibrante
vicenda
vichingo
vicinanza
vidimare
vigilia
vigneto
vigore
vile
villano
vimini
vincitore
viola
vipera
virgola
virologo
virulento
viscoso
visione
vispo
vissuto
visura
vita
vitello
vittima
vivanda
vivido
viziare
voce
voga
volatile
volere
volpe
voragine
vulcano
zampogna
zanna
zappato
zattera
zavorra
zefiro
zelante
zelo
zenzero
zerbino
zibetto
zinco
zircone
zitto
zolla
zotico
zucchero
zufolo
zulu
zuppa`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/japanese.js
var wordlist5 = `あいこくしん
あいさつ
あいだ
あおぞら
あかちゃん
あきる
あけがた
あける
あこがれる
あさい
あさひ
あしあと
あじわう
あずかる
あずき
あそぶ
あたえる
あたためる
あたりまえ
あたる
あつい
あつかう
あっしゅく
あつまり
あつめる
あてな
あてはまる
あひる
あぶら
あぶる
あふれる
あまい
あまど
あまやかす
あまり
あみもの
あめりか
あやまる
あゆむ
あらいぐま
あらし
あらすじ
あらためる
あらゆる
あらわす
ありがとう
あわせる
あわてる
あんい
あんがい
あんこ
あんぜん
あんてい
あんない
あんまり
いいだす
いおん
いがい
いがく
いきおい
いきなり
いきもの
いきる
いくじ
いくぶん
いけばな
いけん
いこう
いこく
いこつ
いさましい
いさん
いしき
いじゅう
いじょう
いじわる
いずみ
いずれ
いせい
いせえび
いせかい
いせき
いぜん
いそうろう
いそがしい
いだい
いだく
いたずら
いたみ
いたりあ
いちおう
いちじ
いちど
いちば
いちぶ
いちりゅう
いつか
いっしゅん
いっせい
いっそう
いったん
いっち
いってい
いっぽう
いてざ
いてん
いどう
いとこ
いない
いなか
いねむり
いのち
いのる
いはつ
いばる
いはん
いびき
いひん
いふく
いへん
いほう
いみん
いもうと
いもたれ
いもり
いやがる
いやす
いよかん
いよく
いらい
いらすと
いりぐち
いりょう
いれい
いれもの
いれる
いろえんぴつ
いわい
いわう
いわかん
いわば
いわゆる
いんげんまめ
いんさつ
いんしょう
いんよう
うえき
うえる
うおざ
うがい
うかぶ
うかべる
うきわ
うくらいな
うくれれ
うけたまわる
うけつけ
うけとる
うけもつ
うける
うごかす
うごく
うこん
うさぎ
うしなう
うしろがみ
うすい
うすぎ
うすぐらい
うすめる
うせつ
うちあわせ
うちがわ
うちき
うちゅう
うっかり
うつくしい
うったえる
うつる
うどん
うなぎ
うなじ
うなずく
うなる
うねる
うのう
うぶげ
うぶごえ
うまれる
うめる
うもう
うやまう
うよく
うらがえす
うらぐち
うらない
うりあげ
うりきれ
うるさい
うれしい
うれゆき
うれる
うろこ
うわき
うわさ
うんこう
うんちん
うんてん
うんどう
えいえん
えいが
えいきょう
えいご
えいせい
えいぶん
えいよう
えいわ
えおり
えがお
えがく
えきたい
えくせる
えしゃく
えすて
えつらん
えのぐ
えほうまき
えほん
えまき
えもじ
えもの
えらい
えらぶ
えりあ
えんえん
えんかい
えんぎ
えんげき
えんしゅう
えんぜつ
えんそく
えんちょう
えんとつ
おいかける
おいこす
おいしい
おいつく
おうえん
おうさま
おうじ
おうせつ
おうたい
おうふく
おうべい
おうよう
おえる
おおい
おおう
おおどおり
おおや
おおよそ
おかえり
おかず
おがむ
おかわり
おぎなう
おきる
おくさま
おくじょう
おくりがな
おくる
おくれる
おこす
おこなう
おこる
おさえる
おさない
おさめる
おしいれ
おしえる
おじぎ
おじさん
おしゃれ
おそらく
おそわる
おたがい
おたく
おだやか
おちつく
おっと
おつり
おでかけ
おとしもの
おとなしい
おどり
おどろかす
おばさん
おまいり
おめでとう
おもいで
おもう
おもたい
おもちゃ
おやつ
おやゆび
およぼす
おらんだ
おろす
おんがく
おんけい
おんしゃ
おんせん
おんだん
おんちゅう
おんどけい
かあつ
かいが
がいき
がいけん
がいこう
かいさつ
かいしゃ
かいすいよく
かいぜん
かいぞうど
かいつう
かいてん
かいとう
かいふく
がいへき
かいほう
かいよう
がいらい
かいわ
かえる
かおり
かかえる
かがく
かがし
かがみ
かくご
かくとく
かざる
がぞう
かたい
かたち
がちょう
がっきゅう
がっこう
がっさん
がっしょう
かなざわし
かのう
がはく
かぶか
かほう
かほご
かまう
かまぼこ
かめれおん
かゆい
かようび
からい
かるい
かろう
かわく
かわら
がんか
かんけい
かんこう
かんしゃ
かんそう
かんたん
かんち
がんばる
きあい
きあつ
きいろ
ぎいん
きうい
きうん
きえる
きおう
きおく
きおち
きおん
きかい
きかく
きかんしゃ
ききて
きくばり
きくらげ
きけんせい
きこう
きこえる
きこく
きさい
きさく
きさま
きさらぎ
ぎじかがく
ぎしき
ぎじたいけん
ぎじにってい
ぎじゅつしゃ
きすう
きせい
きせき
きせつ
きそう
きぞく
きぞん
きたえる
きちょう
きつえん
ぎっちり
きつつき
きつね
きてい
きどう
きどく
きない
きなが
きなこ
きぬごし
きねん
きのう
きのした
きはく
きびしい
きひん
きふく
きぶん
きぼう
きほん
きまる
きみつ
きむずかしい
きめる
きもだめし
きもち
きもの
きゃく
きやく
ぎゅうにく
きよう
きょうりゅう
きらい
きらく
きりん
きれい
きれつ
きろく
ぎろん
きわめる
ぎんいろ
きんかくじ
きんじょ
きんようび
ぐあい
くいず
くうかん
くうき
くうぐん
くうこう
ぐうせい
くうそう
ぐうたら
くうふく
くうぼ
くかん
くきょう
くげん
ぐこう
くさい
くさき
くさばな
くさる
くしゃみ
くしょう
くすのき
くすりゆび
くせげ
くせん
ぐたいてき
くださる
くたびれる
くちこみ
くちさき
くつした
ぐっすり
くつろぐ
くとうてん
くどく
くなん
くねくね
くのう
くふう
くみあわせ
くみたてる
くめる
くやくしょ
くらす
くらべる
くるま
くれる
くろう
くわしい
ぐんかん
ぐんしょく
ぐんたい
ぐんて
けあな
けいかく
けいけん
けいこ
けいさつ
げいじゅつ
けいたい
げいのうじん
けいれき
けいろ
けおとす
けおりもの
げきか
げきげん
げきだん
げきちん
げきとつ
げきは
げきやく
げこう
げこくじょう
げざい
けさき
げざん
けしき
けしごむ
けしょう
げすと
けたば
けちゃっぷ
けちらす
けつあつ
けつい
けつえき
けっこん
けつじょ
けっせき
けってい
けつまつ
げつようび
げつれい
けつろん
げどく
けとばす
けとる
けなげ
けなす
けなみ
けぬき
げねつ
けねん
けはい
げひん
けぶかい
げぼく
けまり
けみかる
けむし
けむり
けもの
けらい
けろけろ
けわしい
けんい
けんえつ
けんお
けんか
げんき
けんげん
けんこう
けんさく
けんしゅう
けんすう
げんそう
けんちく
けんてい
けんとう
けんない
けんにん
げんぶつ
けんま
けんみん
けんめい
けんらん
けんり
こあくま
こいぬ
こいびと
ごうい
こうえん
こうおん
こうかん
ごうきゅう
ごうけい
こうこう
こうさい
こうじ
こうすい
ごうせい
こうそく
こうたい
こうちゃ
こうつう
こうてい
こうどう
こうない
こうはい
ごうほう
ごうまん
こうもく
こうりつ
こえる
こおり
ごかい
ごがつ
ごかん
こくご
こくさい
こくとう
こくない
こくはく
こぐま
こけい
こける
ここのか
こころ
こさめ
こしつ
こすう
こせい
こせき
こぜん
こそだて
こたい
こたえる
こたつ
こちょう
こっか
こつこつ
こつばん
こつぶ
こてい
こてん
ことがら
ことし
ことば
ことり
こなごな
こねこね
このまま
このみ
このよ
ごはん
こひつじ
こふう
こふん
こぼれる
ごまあぶら
こまかい
ごますり
こまつな
こまる
こむぎこ
こもじ
こもち
こもの
こもん
こやく
こやま
こゆう
こゆび
こよい
こよう
こりる
これくしょん
ころっけ
こわもて
こわれる
こんいん
こんかい
こんき
こんしゅう
こんすい
こんだて
こんとん
こんなん
こんびに
こんぽん
こんまけ
こんや
こんれい
こんわく
ざいえき
さいかい
さいきん
ざいげん
ざいこ
さいしょ
さいせい
ざいたく
ざいちゅう
さいてき
ざいりょう
さうな
さかいし
さがす
さかな
さかみち
さがる
さぎょう
さくし
さくひん
さくら
さこく
さこつ
さずかる
ざせき
さたん
さつえい
ざつおん
ざっか
ざつがく
さっきょく
ざっし
さつじん
ざっそう
さつたば
さつまいも
さてい
さといも
さとう
さとおや
さとし
さとる
さのう
さばく
さびしい
さべつ
さほう
さほど
さます
さみしい
さみだれ
さむけ
さめる
さやえんどう
さゆう
さよう
さよく
さらだ
ざるそば
さわやか
さわる
さんいん
さんか
さんきゃく
さんこう
さんさい
ざんしょ
さんすう
さんせい
さんそ
さんち
さんま
さんみ
さんらん
しあい
しあげ
しあさって
しあわせ
しいく
しいん
しうち
しえい
しおけ
しかい
しかく
じかん
しごと
しすう
じだい
したうけ
したぎ
したて
したみ
しちょう
しちりん
しっかり
しつじ
しつもん
してい
してき
してつ
じてん
じどう
しなぎれ
しなもの
しなん
しねま
しねん
しのぐ
しのぶ
しはい
しばかり
しはつ
しはらい
しはん
しひょう
しふく
じぶん
しへい
しほう
しほん
しまう
しまる
しみん
しむける
じむしょ
しめい
しめる
しもん
しゃいん
しゃうん
しゃおん
じゃがいも
しやくしょ
しゃくほう
しゃけん
しゃこ
しゃざい
しゃしん
しゃせん
しゃそう
しゃたい
しゃちょう
しゃっきん
じゃま
しゃりん
しゃれい
じゆう
じゅうしょ
しゅくはく
じゅしん
しゅっせき
しゅみ
しゅらば
じゅんばん
しょうかい
しょくたく
しょっけん
しょどう
しょもつ
しらせる
しらべる
しんか
しんこう
じんじゃ
しんせいじ
しんちく
しんりん
すあげ
すあし
すあな
ずあん
すいえい
すいか
すいとう
ずいぶん
すいようび
すうがく
すうじつ
すうせん
すおどり
すきま
すくう
すくない
すける
すごい
すこし
ずさん
すずしい
すすむ
すすめる
すっかり
ずっしり
ずっと
すてき
すてる
すねる
すのこ
すはだ
すばらしい
ずひょう
ずぶぬれ
すぶり
すふれ
すべて
すべる
ずほう
すぼん
すまい
すめし
すもう
すやき
すらすら
するめ
すれちがう
すろっと
すわる
すんぜん
すんぽう
せあぶら
せいかつ
せいげん
せいじ
せいよう
せおう
せかいかん
せきにん
せきむ
せきゆ
せきらんうん
せけん
せこう
せすじ
せたい
せたけ
せっかく
せっきゃく
ぜっく
せっけん
せっこつ
せっさたくま
せつぞく
せつだん
せつでん
せっぱん
せつび
せつぶん
せつめい
せつりつ
せなか
せのび
せはば
せびろ
せぼね
せまい
せまる
せめる
せもたれ
せりふ
ぜんあく
せんい
せんえい
せんか
せんきょ
せんく
せんげん
ぜんご
せんさい
せんしゅ
せんすい
せんせい
せんぞ
せんたく
せんちょう
せんてい
せんとう
せんぬき
せんねん
せんぱい
ぜんぶ
ぜんぽう
せんむ
せんめんじょ
せんもん
せんやく
せんゆう
せんよう
ぜんら
ぜんりゃく
せんれい
せんろ
そあく
そいとげる
そいね
そうがんきょう
そうき
そうご
そうしん
そうだん
そうなん
そうび
そうめん
そうり
そえもの
そえん
そがい
そげき
そこう
そこそこ
そざい
そしな
そせい
そせん
そそぐ
そだてる
そつう
そつえん
そっかん
そつぎょう
そっけつ
そっこう
そっせん
そっと
そとがわ
そとづら
そなえる
そなた
そふぼ
そぼく
そぼろ
そまつ
そまる
そむく
そむりえ
そめる
そもそも
そよかぜ
そらまめ
そろう
そんかい
そんけい
そんざい
そんしつ
そんぞく
そんちょう
ぞんび
ぞんぶん
そんみん
たあい
たいいん
たいうん
たいえき
たいおう
だいがく
たいき
たいぐう
たいけん
たいこ
たいざい
だいじょうぶ
だいすき
たいせつ
たいそう
だいたい
たいちょう
たいてい
だいどころ
たいない
たいねつ
たいのう
たいはん
だいひょう
たいふう
たいへん
たいほ
たいまつばな
たいみんぐ
たいむ
たいめん
たいやき
たいよう
たいら
たいりょく
たいる
たいわん
たうえ
たえる
たおす
たおる
たおれる
たかい
たかね
たきび
たくさん
たこく
たこやき
たさい
たしざん
だじゃれ
たすける
たずさわる
たそがれ
たたかう
たたく
ただしい
たたみ
たちばな
だっかい
だっきゃく
だっこ
だっしゅつ
だったい
たてる
たとえる
たなばた
たにん
たぬき
たのしみ
たはつ
たぶん
たべる
たぼう
たまご
たまる
だむる
ためいき
ためす
ためる
たもつ
たやすい
たよる
たらす
たりきほんがん
たりょう
たりる
たると
たれる
たれんと
たろっと
たわむれる
だんあつ
たんい
たんおん
たんか
たんき
たんけん
たんご
たんさん
たんじょうび
だんせい
たんそく
たんたい
だんち
たんてい
たんとう
だんな
たんにん
だんねつ
たんのう
たんぴん
だんぼう
たんまつ
たんめい
だんれつ
だんろ
だんわ
ちあい
ちあん
ちいき
ちいさい
ちえん
ちかい
ちから
ちきゅう
ちきん
ちけいず
ちけん
ちこく
ちさい
ちしき
ちしりょう
ちせい
ちそう
ちたい
ちたん
ちちおや
ちつじょ
ちてき
ちてん
ちぬき
ちぬり
ちのう
ちひょう
ちへいせん
ちほう
ちまた
ちみつ
ちみどろ
ちめいど
ちゃんこなべ
ちゅうい
ちゆりょく
ちょうし
ちょさくけん
ちらし
ちらみ
ちりがみ
ちりょう
ちるど
ちわわ
ちんたい
ちんもく
ついか
ついたち
つうか
つうじょう
つうはん
つうわ
つかう
つかれる
つくね
つくる
つけね
つける
つごう
つたえる
つづく
つつじ
つつむ
つとめる
つながる
つなみ
つねづね
つのる
つぶす
つまらない
つまる
つみき
つめたい
つもり
つもる
つよい
つるぼ
つるみく
つわもの
つわり
てあし
てあて
てあみ
ていおん
ていか
ていき
ていけい
ていこく
ていさつ
ていし
ていせい
ていたい
ていど
ていねい
ていひょう
ていへん
ていぼう
てうち
ておくれ
てきとう
てくび
でこぼこ
てさぎょう
てさげ
てすり
てそう
てちがい
てちょう
てつがく
てつづき
でっぱ
てつぼう
てつや
でぬかえ
てぬき
てぬぐい
てのひら
てはい
てぶくろ
てふだ
てほどき
てほん
てまえ
てまきずし
てみじか
てみやげ
てらす
てれび
てわけ
てわたし
でんあつ
てんいん
てんかい
てんき
てんぐ
てんけん
てんごく
てんさい
てんし
てんすう
でんち
てんてき
てんとう
てんない
てんぷら
てんぼうだい
てんめつ
てんらんかい
でんりょく
でんわ
どあい
といれ
どうかん
とうきゅう
どうぐ
とうし
とうむぎ
とおい
とおか
とおく
とおす
とおる
とかい
とかす
ときおり
ときどき
とくい
とくしゅう
とくてん
とくに
とくべつ
とけい
とける
とこや
とさか
としょかん
とそう
とたん
とちゅう
とっきゅう
とっくん
とつぜん
とつにゅう
とどける
ととのえる
とない
となえる
となり
とのさま
とばす
どぶがわ
とほう
とまる
とめる
ともだち
ともる
どようび
とらえる
とんかつ
どんぶり
ないかく
ないこう
ないしょ
ないす
ないせん
ないそう
なおす
ながい
なくす
なげる
なこうど
なさけ
なたでここ
なっとう
なつやすみ
ななおし
なにごと
なにもの
なにわ
なのか
なふだ
なまいき
なまえ
なまみ
なみだ
なめらか
なめる
なやむ
ならう
ならび
ならぶ
なれる
なわとび
なわばり
にあう
にいがた
にうけ
におい
にかい
にがて
にきび
にくしみ
にくまん
にげる
にさんかたんそ
にしき
にせもの
にちじょう
にちようび
にっか
にっき
にっけい
にっこう
にっさん
にっしょく
にっすう
にっせき
にってい
になう
にほん
にまめ
にもつ
にやり
にゅういん
にりんしゃ
にわとり
にんい
にんか
にんき
にんげん
にんしき
にんずう
にんそう
にんたい
にんち
にんてい
にんにく
にんぷ
にんまり
にんむ
にんめい
にんよう
ぬいくぎ
ぬかす
ぬぐいとる
ぬぐう
ぬくもり
ぬすむ
ぬまえび
ぬめり
ぬらす
ぬんちゃく
ねあげ
ねいき
ねいる
ねいろ
ねぐせ
ねくたい
ねくら
ねこぜ
ねこむ
ねさげ
ねすごす
ねそべる
ねだん
ねつい
ねっしん
ねつぞう
ねったいぎょ
ねぶそく
ねふだ
ねぼう
ねほりはほり
ねまき
ねまわし
ねみみ
ねむい
ねむたい
ねもと
ねらう
ねわざ
ねんいり
ねんおし
ねんかん
ねんきん
ねんぐ
ねんざ
ねんし
ねんちゃく
ねんど
ねんぴ
ねんぶつ
ねんまつ
ねんりょう
ねんれい
のいず
のおづま
のがす
のきなみ
のこぎり
のこす
のこる
のせる
のぞく
のぞむ
のたまう
のちほど
のっく
のばす
のはら
のべる
のぼる
のみもの
のやま
のらいぬ
のらねこ
のりもの
のりゆき
のれん
のんき
ばあい
はあく
ばあさん
ばいか
ばいく
はいけん
はいご
はいしん
はいすい
はいせん
はいそう
はいち
ばいばい
はいれつ
はえる
はおる
はかい
ばかり
はかる
はくしゅ
はけん
はこぶ
はさみ
はさん
はしご
ばしょ
はしる
はせる
ぱそこん
はそん
はたん
はちみつ
はつおん
はっかく
はづき
はっきり
はっくつ
はっけん
はっこう
はっさん
はっしん
はったつ
はっちゅう
はってん
はっぴょう
はっぽう
はなす
はなび
はにかむ
はぶらし
はみがき
はむかう
はめつ
はやい
はやし
はらう
はろうぃん
はわい
はんい
はんえい
はんおん
はんかく
はんきょう
ばんぐみ
はんこ
はんしゃ
はんすう
はんだん
ぱんち
ぱんつ
はんてい
はんとし
はんのう
はんぱ
はんぶん
はんぺん
はんぼうき
はんめい
はんらん
はんろん
ひいき
ひうん
ひえる
ひかく
ひかり
ひかる
ひかん
ひくい
ひけつ
ひこうき
ひこく
ひさい
ひさしぶり
ひさん
びじゅつかん
ひしょ
ひそか
ひそむ
ひたむき
ひだり
ひたる
ひつぎ
ひっこし
ひっし
ひつじゅひん
ひっす
ひつぜん
ぴったり
ぴっちり
ひつよう
ひてい
ひとごみ
ひなまつり
ひなん
ひねる
ひはん
ひびく
ひひょう
ひほう
ひまわり
ひまん
ひみつ
ひめい
ひめじし
ひやけ
ひやす
ひよう
びょうき
ひらがな
ひらく
ひりつ
ひりょう
ひるま
ひるやすみ
ひれい
ひろい
ひろう
ひろき
ひろゆき
ひんかく
ひんけつ
ひんこん
ひんしゅ
ひんそう
ぴんち
ひんぱん
びんぼう
ふあん
ふいうち
ふうけい
ふうせん
ぷうたろう
ふうとう
ふうふ
ふえる
ふおん
ふかい
ふきん
ふくざつ
ふくぶくろ
ふこう
ふさい
ふしぎ
ふじみ
ふすま
ふせい
ふせぐ
ふそく
ぶたにく
ふたん
ふちょう
ふつう
ふつか
ふっかつ
ふっき
ふっこく
ぶどう
ふとる
ふとん
ふのう
ふはい
ふひょう
ふへん
ふまん
ふみん
ふめつ
ふめん
ふよう
ふりこ
ふりる
ふるい
ふんいき
ぶんがく
ぶんぐ
ふんしつ
ぶんせき
ふんそう
ぶんぽう
へいあん
へいおん
へいがい
へいき
へいげん
へいこう
へいさ
へいしゃ
へいせつ
へいそ
へいたく
へいてん
へいねつ
へいわ
へきが
へこむ
べにいろ
べにしょうが
へらす
へんかん
べんきょう
べんごし
へんさい
へんたい
べんり
ほあん
ほいく
ぼうぎょ
ほうこく
ほうそう
ほうほう
ほうもん
ほうりつ
ほえる
ほおん
ほかん
ほきょう
ぼきん
ほくろ
ほけつ
ほけん
ほこう
ほこる
ほしい
ほしつ
ほしゅ
ほしょう
ほせい
ほそい
ほそく
ほたて
ほたる
ぽちぶくろ
ほっきょく
ほっさ
ほったん
ほとんど
ほめる
ほんい
ほんき
ほんけ
ほんしつ
ほんやく
まいにち
まかい
まかせる
まがる
まける
まこと
まさつ
まじめ
ますく
まぜる
まつり
まとめ
まなぶ
まぬけ
まねく
まほう
まもる
まゆげ
まよう
まろやか
まわす
まわり
まわる
まんが
まんきつ
まんぞく
まんなか
みいら
みうち
みえる
みがく
みかた
みかん
みけん
みこん
みじかい
みすい
みすえる
みせる
みっか
みつかる
みつける
みてい
みとめる
みなと
みなみかさい
みねらる
みのう
みのがす
みほん
みもと
みやげ
みらい
みりょく
みわく
みんか
みんぞく
むいか
むえき
むえん
むかい
むかう
むかえ
むかし
むぎちゃ
むける
むげん
むさぼる
むしあつい
むしば
むじゅん
むしろ
むすう
むすこ
むすぶ
むすめ
むせる
むせん
むちゅう
むなしい
むのう
むやみ
むよう
むらさき
むりょう
むろん
めいあん
めいうん
めいえん
めいかく
めいきょく
めいさい
めいし
めいそう
めいぶつ
めいれい
めいわく
めぐまれる
めざす
めした
めずらしい
めだつ
めまい
めやす
めんきょ
めんせき
めんどう
もうしあげる
もうどうけん
もえる
もくし
もくてき
もくようび
もちろん
もどる
もらう
もんく
もんだい
やおや
やける
やさい
やさしい
やすい
やすたろう
やすみ
やせる
やそう
やたい
やちん
やっと
やっぱり
やぶる
やめる
ややこしい
やよい
やわらかい
ゆうき
ゆうびんきょく
ゆうべ
ゆうめい
ゆけつ
ゆしゅつ
ゆせん
ゆそう
ゆたか
ゆちゃく
ゆでる
ゆにゅう
ゆびわ
ゆらい
ゆれる
ようい
ようか
ようきゅう
ようじ
ようす
ようちえん
よかぜ
よかん
よきん
よくせい
よくぼう
よけい
よごれる
よさん
よしゅう
よそう
よそく
よっか
よてい
よどがわく
よねつ
よやく
よゆう
よろこぶ
よろしい
らいう
らくがき
らくご
らくさつ
らくだ
らしんばん
らせん
らぞく
らたい
らっか
られつ
りえき
りかい
りきさく
りきせつ
りくぐん
りくつ
りけん
りこう
りせい
りそう
りそく
りてん
りねん
りゆう
りゅうがく
りよう
りょうり
りょかん
りょくちゃ
りょこう
りりく
りれき
りろん
りんご
るいけい
るいさい
るいじ
るいせき
るすばん
るりがわら
れいかん
れいぎ
れいせい
れいぞうこ
れいとう
れいぼう
れきし
れきだい
れんあい
れんけい
れんこん
れんさい
れんしゅう
れんぞく
れんらく
ろうか
ろうご
ろうじん
ろうそく
ろくが
ろこつ
ろじうら
ろしゅつ
ろせん
ろてん
ろめん
ろれつ
ろんぎ
ろんぱ
ろんぶん
ろんり
わかす
わかめ
わかやま
わかれる
わしつ
わじまし
わすれもの
わらう
われる`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/korean.js
var wordlist6 = `가격
가끔
가난
가능
가득
가르침
가뭄
가방
가상
가슴
가운데
가을
가이드
가입
가장
가정
가족
가죽
각오
각자
간격
간부
간섭
간장
간접
간판
갈등
갈비
갈색
갈증
감각
감기
감소
감수성
감자
감정
갑자기
강남
강당
강도
강력히
강변
강북
강사
강수량
강아지
강원도
강의
강제
강조
같이
개구리
개나리
개방
개별
개선
개성
개인
객관적
거실
거액
거울
거짓
거품
걱정
건강
건물
건설
건조
건축
걸음
검사
검토
게시판
게임
겨울
견해
결과
결국
결론
결석
결승
결심
결정
결혼
경계
경고
경기
경력
경복궁
경비
경상도
경영
경우
경쟁
경제
경주
경찰
경치
경향
경험
계곡
계단
계란
계산
계속
계약
계절
계층
계획
고객
고구려
고궁
고급
고등학생
고무신
고민
고양이
고장
고전
고집
고춧가루
고통
고향
곡식
골목
골짜기
골프
공간
공개
공격
공군
공급
공기
공동
공무원
공부
공사
공식
공업
공연
공원
공장
공짜
공책
공통
공포
공항
공휴일
과목
과일
과장
과정
과학
관객
관계
관광
관념
관람
관련
관리
관습
관심
관점
관찰
광경
광고
광장
광주
괴로움
굉장히
교과서
교문
교복
교실
교양
교육
교장
교직
교통
교환
교훈
구경
구름
구멍
구별
구분
구석
구성
구속
구역
구입
구청
구체적
국가
국기
국내
국립
국물
국민
국수
국어
국왕
국적
국제
국회
군대
군사
군인
궁극적
권리
권위
권투
귀국
귀신
규정
규칙
균형
그날
그냥
그늘
그러나
그룹
그릇
그림
그제서야
그토록
극복
극히
근거
근교
근래
근로
근무
근본
근원
근육
근처
글씨
글자
금강산
금고
금년
금메달
금액
금연
금요일
금지
긍정적
기간
기관
기념
기능
기독교
기둥
기록
기름
기법
기본
기분
기쁨
기숙사
기술
기억
기업
기온
기운
기원
기적
기준
기침
기혼
기획
긴급
긴장
길이
김밥
김치
김포공항
깍두기
깜빡
깨달음
깨소금
껍질
꼭대기
꽃잎
나들이
나란히
나머지
나물
나침반
나흘
낙엽
난방
날개
날씨
날짜
남녀
남대문
남매
남산
남자
남편
남학생
낭비
낱말
내년
내용
내일
냄비
냄새
냇물
냉동
냉면
냉방
냉장고
넥타이
넷째
노동
노란색
노력
노인
녹음
녹차
녹화
논리
논문
논쟁
놀이
농구
농담
농민
농부
농업
농장
농촌
높이
눈동자
눈물
눈썹
뉴욕
느낌
늑대
능동적
능력
다방
다양성
다음
다이어트
다행
단계
단골
단독
단맛
단순
단어
단위
단점
단체
단추
단편
단풍
달걀
달러
달력
달리
닭고기
담당
담배
담요
담임
답변
답장
당근
당분간
당연히
당장
대규모
대낮
대단히
대답
대도시
대략
대량
대륙
대문
대부분
대신
대응
대장
대전
대접
대중
대책
대출
대충
대통령
대학
대한민국
대합실
대형
덩어리
데이트
도대체
도덕
도둑
도망
도서관
도심
도움
도입
도자기
도저히
도전
도중
도착
독감
독립
독서
독일
독창적
동화책
뒷모습
뒷산
딸아이
마누라
마늘
마당
마라톤
마련
마무리
마사지
마약
마요네즈
마을
마음
마이크
마중
마지막
마찬가지
마찰
마흔
막걸리
막내
막상
만남
만두
만세
만약
만일
만점
만족
만화
많이
말기
말씀
말투
맘대로
망원경
매년
매달
매력
매번
매스컴
매일
매장
맥주
먹이
먼저
먼지
멀리
메일
며느리
며칠
면담
멸치
명단
명령
명예
명의
명절
명칭
명함
모금
모니터
모델
모든
모범
모습
모양
모임
모조리
모집
모퉁이
목걸이
목록
목사
목소리
목숨
목적
목표
몰래
몸매
몸무게
몸살
몸속
몸짓
몸통
몹시
무관심
무궁화
무더위
무덤
무릎
무슨
무엇
무역
무용
무조건
무지개
무척
문구
문득
문법
문서
문제
문학
문화
물가
물건
물결
물고기
물론
물리학
물음
물질
물체
미국
미디어
미사일
미술
미역
미용실
미움
미인
미팅
미혼
민간
민족
민주
믿음
밀가루
밀리미터
밑바닥
바가지
바구니
바나나
바늘
바닥
바닷가
바람
바이러스
바탕
박물관
박사
박수
반대
반드시
반말
반발
반성
반응
반장
반죽
반지
반찬
받침
발가락
발걸음
발견
발달
발레
발목
발바닥
발생
발음
발자국
발전
발톱
발표
밤하늘
밥그릇
밥맛
밥상
밥솥
방금
방면
방문
방바닥
방법
방송
방식
방안
방울
방지
방학
방해
방향
배경
배꼽
배달
배드민턴
백두산
백색
백성
백인
백제
백화점
버릇
버섯
버튼
번개
번역
번지
번호
벌금
벌레
벌써
범위
범인
범죄
법률
법원
법적
법칙
베이징
벨트
변경
변동
변명
변신
변호사
변화
별도
별명
별일
병실
병아리
병원
보관
보너스
보라색
보람
보름
보상
보안
보자기
보장
보전
보존
보통
보편적
보험
복도
복사
복숭아
복습
볶음
본격적
본래
본부
본사
본성
본인
본질
볼펜
봉사
봉지
봉투
부근
부끄러움
부담
부동산
부문
부분
부산
부상
부엌
부인
부작용
부장
부정
부족
부지런히
부친
부탁
부품
부회장
북부
북한
분노
분량
분리
분명
분석
분야
분위기
분필
분홍색
불고기
불과
불교
불꽃
불만
불법
불빛
불안
불이익
불행
브랜드
비극
비난
비닐
비둘기
비디오
비로소
비만
비명
비밀
비바람
비빔밥
비상
비용
비율
비중
비타민
비판
빌딩
빗물
빗방울
빗줄기
빛깔
빨간색
빨래
빨리
사건
사계절
사나이
사냥
사람
사랑
사립
사모님
사물
사방
사상
사생활
사설
사슴
사실
사업
사용
사월
사장
사전
사진
사촌
사춘기
사탕
사투리
사흘
산길
산부인과
산업
산책
살림
살인
살짝
삼계탕
삼국
삼십
삼월
삼촌
상관
상금
상대
상류
상반기
상상
상식
상업
상인
상자
상점
상처
상추
상태
상표
상품
상황
새벽
색깔
색연필
생각
생명
생물
생방송
생산
생선
생신
생일
생활
서랍
서른
서명
서민
서비스
서양
서울
서적
서점
서쪽
서클
석사
석유
선거
선물
선배
선생
선수
선원
선장
선전
선택
선풍기
설거지
설날
설렁탕
설명
설문
설사
설악산
설치
설탕
섭씨
성공
성당
성명
성별
성인
성장
성적
성질
성함
세금
세미나
세상
세월
세종대왕
세탁
센터
센티미터
셋째
소규모
소극적
소금
소나기
소년
소득
소망
소문
소설
소속
소아과
소용
소원
소음
소중히
소지품
소질
소풍
소형
속담
속도
속옷
손가락
손길
손녀
손님
손등
손목
손뼉
손실
손질
손톱
손해
솔직히
솜씨
송아지
송이
송편
쇠고기
쇼핑
수건
수년
수단
수돗물
수동적
수면
수명
수박
수상
수석
수술
수시로
수업
수염
수영
수입
수준
수집
수출
수컷
수필
수학
수험생
수화기
숙녀
숙소
숙제
순간
순서
순수
순식간
순위
숟가락
술병
술집
숫자
스님
스물
스스로
스승
스웨터
스위치
스케이트
스튜디오
스트레스
스포츠
슬쩍
슬픔
습관
습기
승객
승리
승부
승용차
승진
시각
시간
시골
시금치
시나리오
시댁
시리즈
시멘트
시민
시부모
시선
시설
시스템
시아버지
시어머니
시월
시인
시일
시작
시장
시절
시점
시중
시즌
시집
시청
시합
시험
식구
식기
식당
식량
식료품
식물
식빵
식사
식생활
식초
식탁
식품
신고
신규
신념
신문
신발
신비
신사
신세
신용
신제품
신청
신체
신화
실감
실내
실력
실례
실망
실수
실습
실시
실장
실정
실질적
실천
실체
실컷
실태
실패
실험
실현
심리
심부름
심사
심장
심정
심판
쌍둥이
씨름
씨앗
아가씨
아나운서
아드님
아들
아쉬움
아스팔트
아시아
아울러
아저씨
아줌마
아직
아침
아파트
아프리카
아픔
아홉
아흔
악기
악몽
악수
안개
안경
안과
안내
안녕
안동
안방
안부
안주
알루미늄
알코올
암시
암컷
압력
앞날
앞문
애인
애정
액수
앨범
야간
야단
야옹
약간
약국
약속
약수
약점
약품
약혼녀
양념
양력
양말
양배추
양주
양파
어둠
어려움
어른
어젯밤
어쨌든
어쩌다가
어쩐지
언니
언덕
언론
언어
얼굴
얼른
얼음
얼핏
엄마
업무
업종
업체
엉덩이
엉망
엉터리
엊그제
에너지
에어컨
엔진
여건
여고생
여관
여군
여권
여대생
여덟
여동생
여든
여론
여름
여섯
여성
여왕
여인
여전히
여직원
여학생
여행
역사
역시
역할
연결
연구
연극
연기
연락
연설
연세
연속
연습
연애
연예인
연인
연장
연주
연출
연필
연합
연휴
열기
열매
열쇠
열심히
열정
열차
열흘
염려
엽서
영국
영남
영상
영양
영역
영웅
영원히
영하
영향
영혼
영화
옆구리
옆방
옆집
예감
예금
예방
예산
예상
예선
예술
예습
예식장
예약
예전
예절
예정
예컨대
옛날
오늘
오락
오랫동안
오렌지
오로지
오른발
오븐
오십
오염
오월
오전
오직
오징어
오페라
오피스텔
오히려
옥상
옥수수
온갖
온라인
온몸
온종일
온통
올가을
올림픽
올해
옷차림
와이셔츠
와인
완성
완전
왕비
왕자
왜냐하면
왠지
외갓집
외국
외로움
외삼촌
외출
외침
외할머니
왼발
왼손
왼쪽
요금
요일
요즘
요청
용기
용서
용어
우산
우선
우승
우연히
우정
우체국
우편
운동
운명
운반
운전
운행
울산
울음
움직임
웃어른
웃음
워낙
원고
원래
원서
원숭이
원인
원장
원피스
월급
월드컵
월세
월요일
웨이터
위반
위법
위성
위원
위험
위협
윗사람
유난히
유럽
유명
유물
유산
유적
유치원
유학
유행
유형
육군
육상
육십
육체
은행
음력
음료
음반
음성
음식
음악
음주
의견
의논
의문
의복
의식
의심
의외로
의욕
의원
의학
이것
이곳
이념
이놈
이달
이대로
이동
이렇게
이력서
이론적
이름
이민
이발소
이별
이불
이빨
이상
이성
이슬
이야기
이용
이웃
이월
이윽고
이익
이전
이중
이튿날
이틀
이혼
인간
인격
인공
인구
인근
인기
인도
인류
인물
인생
인쇄
인연
인원
인재
인종
인천
인체
인터넷
인하
인형
일곱
일기
일단
일대
일등
일반
일본
일부
일상
일생
일손
일요일
일월
일정
일종
일주일
일찍
일체
일치
일행
일회용
임금
임무
입대
입력
입맛
입사
입술
입시
입원
입장
입학
자가용
자격
자극
자동
자랑
자부심
자식
자신
자연
자원
자율
자전거
자정
자존심
자판
작가
작년
작성
작업
작용
작은딸
작품
잔디
잔뜩
잔치
잘못
잠깐
잠수함
잠시
잠옷
잠자리
잡지
장관
장군
장기간
장래
장례
장르
장마
장면
장모
장미
장비
장사
장소
장식
장애인
장인
장점
장차
장학금
재능
재빨리
재산
재생
재작년
재정
재채기
재판
재학
재활용
저것
저고리
저곳
저녁
저런
저렇게
저번
저울
저절로
저축
적극
적당히
적성
적용
적응
전개
전공
전기
전달
전라도
전망
전문
전반
전부
전세
전시
전용
전자
전쟁
전주
전철
전체
전통
전혀
전후
절대
절망
절반
절약
절차
점검
점수
점심
점원
점점
점차
접근
접시
접촉
젓가락
정거장
정도
정류장
정리
정말
정면
정문
정반대
정보
정부
정비
정상
정성
정오
정원
정장
정지
정치
정확히
제공
제과점
제대로
제목
제발
제법
제삿날
제안
제일
제작
제주도
제출
제품
제한
조각
조건
조금
조깅
조명
조미료
조상
조선
조용히
조절
조정
조직
존댓말
존재
졸업
졸음
종교
종로
종류
종소리
종업원
종종
종합
좌석
죄인
주관적
주름
주말
주머니
주먹
주문
주민
주방
주변
주식
주인
주일
주장
주전자
주택
준비
줄거리
줄기
줄무늬
중간
중계방송
중국
중년
중단
중독
중반
중부
중세
중소기업
중순
중앙
중요
중학교
즉석
즉시
즐거움
증가
증거
증권
증상
증세
지각
지갑
지경
지극히
지금
지급
지능
지름길
지리산
지방
지붕
지식
지역
지우개
지원
지적
지점
지진
지출
직선
직업
직원
직장
진급
진동
진로
진료
진리
진짜
진찰
진출
진통
진행
질문
질병
질서
짐작
집단
집안
집중
짜증
찌꺼기
차남
차라리
차량
차림
차별
차선
차츰
착각
찬물
찬성
참가
참기름
참새
참석
참여
참외
참조
찻잔
창가
창고
창구
창문
창밖
창작
창조
채널
채점
책가방
책방
책상
책임
챔피언
처벌
처음
천국
천둥
천장
천재
천천히
철도
철저히
철학
첫날
첫째
청년
청바지
청소
청춘
체계
체력
체온
체육
체중
체험
초등학생
초반
초밥
초상화
초순
초여름
초원
초저녁
초점
초청
초콜릿
촛불
총각
총리
총장
촬영
최근
최상
최선
최신
최악
최종
추석
추억
추진
추천
추측
축구
축소
축제
축하
출근
출발
출산
출신
출연
출입
출장
출판
충격
충고
충돌
충분히
충청도
취업
취직
취향
치약
친구
친척
칠십
칠월
칠판
침대
침묵
침실
칫솔
칭찬
카메라
카운터
칼국수
캐릭터
캠퍼스
캠페인
커튼
컨디션
컬러
컴퓨터
코끼리
코미디
콘서트
콜라
콤플렉스
콩나물
쾌감
쿠데타
크림
큰길
큰딸
큰소리
큰아들
큰어머니
큰일
큰절
클래식
클럽
킬로
타입
타자기
탁구
탁자
탄생
태권도
태양
태풍
택시
탤런트
터널
터미널
테니스
테스트
테이블
텔레비전
토론
토마토
토요일
통계
통과
통로
통신
통역
통일
통장
통제
통증
통합
통화
퇴근
퇴원
퇴직금
튀김
트럭
특급
특별
특성
특수
특징
특히
튼튼히
티셔츠
파란색
파일
파출소
판결
판단
판매
판사
팔십
팔월
팝송
패션
팩스
팩시밀리
팬티
퍼센트
페인트
편견
편의
편지
편히
평가
평균
평생
평소
평양
평일
평화
포스터
포인트
포장
포함
표면
표정
표준
표현
품목
품질
풍경
풍속
풍습
프랑스
프린터
플라스틱
피곤
피망
피아노
필름
필수
필요
필자
필통
핑계
하느님
하늘
하드웨어
하룻밤
하반기
하숙집
하순
하여튼
하지만
하천
하품
하필
학과
학교
학급
학기
학년
학력
학번
학부모
학비
학생
학술
학습
학용품
학원
학위
학자
학점
한계
한글
한꺼번에
한낮
한눈
한동안
한때
한라산
한마디
한문
한번
한복
한식
한여름
한쪽
할머니
할아버지
할인
함께
함부로
합격
합리적
항공
항구
항상
항의
해결
해군
해답
해당
해물
해석
해설
해수욕장
해안
핵심
핸드백
햄버거
햇볕
햇살
행동
행복
행사
행운
행위
향기
향상
향수
허락
허용
헬기
현관
현금
현대
현상
현실
현장
현재
현지
혈액
협력
형부
형사
형수
형식
형제
형태
형편
혜택
호기심
호남
호랑이
호박
호텔
호흡
혹시
홀로
홈페이지
홍보
홍수
홍차
화면
화분
화살
화요일
화장
화학
확보
확인
확장
확정
환갑
환경
환영
환율
환자
활기
활동
활발히
활용
활짝
회견
회관
회복
회색
회원
회장
회전
횟수
횡단보도
효율적
후반
후춧가루
훈련
훨씬
휴식
휴일
흉내
흐름
흑백
흑인
흔적
흔히
흥미
흥분
희곡
희망
희생
흰색
힘껏`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/portuguese.js
var wordlist7 = `abacate
abaixo
abalar
abater
abduzir
abelha
aberto
abismo
abotoar
abranger
abreviar
abrigar
abrupto
absinto
absoluto
absurdo
abutre
acabado
acalmar
acampar
acanhar
acaso
aceitar
acelerar
acenar
acervo
acessar
acetona
achatar
acidez
acima
acionado
acirrar
aclamar
aclive
acolhida
acomodar
acoplar
acordar
acumular
acusador
adaptar
adega
adentro
adepto
adequar
aderente
adesivo
adeus
adiante
aditivo
adjetivo
adjunto
admirar
adorar
adquirir
adubo
adverso
advogado
aeronave
afastar
aferir
afetivo
afinador
afivelar
aflito
afluente
afrontar
agachar
agarrar
agasalho
agenciar
agilizar
agiota
agitado
agora
agradar
agreste
agrupar
aguardar
agulha
ajoelhar
ajudar
ajustar
alameda
alarme
alastrar
alavanca
albergue
albino
alcatra
aldeia
alecrim
alegria
alertar
alface
alfinete
algum
alheio
aliar
alicate
alienar
alinhar
aliviar
almofada
alocar
alpiste
alterar
altitude
alucinar
alugar
aluno
alusivo
alvo
amaciar
amador
amarelo
amassar
ambas
ambiente
ameixa
amenizar
amido
amistoso
amizade
amolador
amontoar
amoroso
amostra
amparar
ampliar
ampola
anagrama
analisar
anarquia
anatomia
andaime
anel
anexo
angular
animar
anjo
anomalia
anotado
ansioso
anterior
anuidade
anunciar
anzol
apagador
apalpar
apanhado
apego
apelido
apertada
apesar
apetite
apito
aplauso
aplicada
apoio
apontar
aposta
aprendiz
aprovar
aquecer
arame
aranha
arara
arcada
ardente
areia
arejar
arenito
aresta
argiloso
argola
arma
arquivo
arraial
arrebate
arriscar
arroba
arrumar
arsenal
arterial
artigo
arvoredo
asfaltar
asilado
aspirar
assador
assinar
assoalho
assunto
astral
atacado
atadura
atalho
atarefar
atear
atender
aterro
ateu
atingir
atirador
ativo
atoleiro
atracar
atrevido
atriz
atual
atum
auditor
aumentar
aura
aurora
autismo
autoria
autuar
avaliar
avante
avaria
avental
avesso
aviador
avisar
avulso
axila
azarar
azedo
azeite
azulejo
babar
babosa
bacalhau
bacharel
bacia
bagagem
baiano
bailar
baioneta
bairro
baixista
bajular
baleia
baliza
balsa
banal
bandeira
banho
banir
banquete
barato
barbado
baronesa
barraca
barulho
baseado
bastante
batata
batedor
batida
batom
batucar
baunilha
beber
beijo
beirada
beisebol
beldade
beleza
belga
beliscar
bendito
bengala
benzer
berimbau
berlinda
berro
besouro
bexiga
bezerro
bico
bicudo
bienal
bifocal
bifurcar
bigorna
bilhete
bimestre
bimotor
biologia
biombo
biosfera
bipolar
birrento
biscoito
bisneto
bispo
bissexto
bitola
bizarro
blindado
bloco
bloquear
boato
bobagem
bocado
bocejo
bochecha
boicotar
bolada
boletim
bolha
bolo
bombeiro
bonde
boneco
bonita
borbulha
borda
boreal
borracha
bovino
boxeador
branco
brasa
braveza
breu
briga
brilho
brincar
broa
brochura
bronzear
broto
bruxo
bucha
budismo
bufar
bule
buraco
busca
busto
buzina
cabana
cabelo
cabide
cabo
cabrito
cacau
cacetada
cachorro
cacique
cadastro
cadeado
cafezal
caiaque
caipira
caixote
cajado
caju
calafrio
calcular
caldeira
calibrar
calmante
calota
camada
cambista
camisa
camomila
campanha
camuflar
canavial
cancelar
caneta
canguru
canhoto
canivete
canoa
cansado
cantar
canudo
capacho
capela
capinar
capotar
capricho
captador
capuz
caracol
carbono
cardeal
careca
carimbar
carneiro
carpete
carreira
cartaz
carvalho
casaco
casca
casebre
castelo
casulo
catarata
cativar
caule
causador
cautelar
cavalo
caverna
cebola
cedilha
cegonha
celebrar
celular
cenoura
censo
centeio
cercar
cerrado
certeiro
cerveja
cetim
cevada
chacota
chaleira
chamado
chapada
charme
chatice
chave
chefe
chegada
cheiro
cheque
chicote
chifre
chinelo
chocalho
chover
chumbo
chutar
chuva
cicatriz
ciclone
cidade
cidreira
ciente
cigana
cimento
cinto
cinza
ciranda
circuito
cirurgia
citar
clareza
clero
clicar
clone
clube
coado
coagir
cobaia
cobertor
cobrar
cocada
coelho
coentro
coeso
cogumelo
coibir
coifa
coiote
colar
coleira
colher
colidir
colmeia
colono
coluna
comando
combinar
comentar
comitiva
comover
complexo
comum
concha
condor
conectar
confuso
congelar
conhecer
conjugar
consumir
contrato
convite
cooperar
copeiro
copiador
copo
coquetel
coragem
cordial
corneta
coronha
corporal
correio
cortejo
coruja
corvo
cosseno
costela
cotonete
couro
couve
covil
cozinha
cratera
cravo
creche
credor
creme
crer
crespo
criada
criminal
crioulo
crise
criticar
crosta
crua
cruzeiro
cubano
cueca
cuidado
cujo
culatra
culminar
culpar
cultura
cumprir
cunhado
cupido
curativo
curral
cursar
curto
cuspir
custear
cutelo
damasco
datar
debater
debitar
deboche
debulhar
decalque
decimal
declive
decote
decretar
dedal
dedicado
deduzir
defesa
defumar
degelo
degrau
degustar
deitado
deixar
delator
delegado
delinear
delonga
demanda
demitir
demolido
dentista
depenado
depilar
depois
depressa
depurar
deriva
derramar
desafio
desbotar
descanso
desenho
desfiado
desgaste
desigual
deslize
desmamar
desova
despesa
destaque
desviar
detalhar
detentor
detonar
detrito
deusa
dever
devido
devotado
dezena
diagrama
dialeto
didata
difuso
digitar
dilatado
diluente
diminuir
dinastia
dinheiro
diocese
direto
discreta
disfarce
disparo
disquete
dissipar
distante
ditador
diurno
diverso
divisor
divulgar
dizer
dobrador
dolorido
domador
dominado
donativo
donzela
dormente
dorsal
dosagem
dourado
doutor
drenagem
drible
drogaria
duelar
duende
dueto
duplo
duquesa
durante
duvidoso
eclodir
ecoar
ecologia
edificar
edital
educado
efeito
efetivar
ejetar
elaborar
eleger
eleitor
elenco
elevador
eliminar
elogiar
embargo
embolado
embrulho
embutido
emenda
emergir
emissor
empatia
empenho
empinado
empolgar
emprego
empurrar
emulador
encaixe
encenado
enchente
encontro
endeusar
endossar
enfaixar
enfeite
enfim
engajado
engenho
englobar
engomado
engraxar
enguia
enjoar
enlatar
enquanto
enraizar
enrolado
enrugar
ensaio
enseada
ensino
ensopado
entanto
enteado
entidade
entortar
entrada
entulho
envergar
enviado
envolver
enxame
enxerto
enxofre
enxuto
epiderme
equipar
ereto
erguido
errata
erva
ervilha
esbanjar
esbelto
escama
escola
escrita
escuta
esfinge
esfolar
esfregar
esfumado
esgrima
esmalte
espanto
espelho
espiga
esponja
espreita
espumar
esquerda
estaca
esteira
esticar
estofado
estrela
estudo
esvaziar
etanol
etiqueta
euforia
europeu
evacuar
evaporar
evasivo
eventual
evidente
evoluir
exagero
exalar
examinar
exato
exausto
excesso
excitar
exclamar
executar
exemplo
exibir
exigente
exonerar
expandir
expelir
expirar
explanar
exposto
expresso
expulsar
externo
extinto
extrato
fabricar
fabuloso
faceta
facial
fada
fadiga
faixa
falar
falta
familiar
fandango
fanfarra
fantoche
fardado
farelo
farinha
farofa
farpa
fartura
fatia
fator
favorita
faxina
fazenda
fechado
feijoada
feirante
felino
feminino
fenda
feno
fera
feriado
ferrugem
ferver
festejar
fetal
feudal
fiapo
fibrose
ficar
ficheiro
figurado
fileira
filho
filme
filtrar
firmeza
fisgada
fissura
fita
fivela
fixador
fixo
flacidez
flamingo
flanela
flechada
flora
flutuar
fluxo
focal
focinho
fofocar
fogo
foguete
foice
folgado
folheto
forjar
formiga
forno
forte
fosco
fossa
fragata
fralda
frango
frasco
fraterno
freira
frente
fretar
frieza
friso
fritura
fronha
frustrar
fruteira
fugir
fulano
fuligem
fundar
fungo
funil
furador
furioso
futebol
gabarito
gabinete
gado
gaiato
gaiola
gaivota
galega
galho
galinha
galocha
ganhar
garagem
garfo
gargalo
garimpo
garoupa
garrafa
gasoduto
gasto
gata
gatilho
gaveta
gazela
gelado
geleia
gelo
gemada
gemer
gemido
generoso
gengiva
genial
genoma
genro
geologia
gerador
germinar
gesso
gestor
ginasta
gincana
gingado
girafa
girino
glacial
glicose
global
glorioso
goela
goiaba
golfe
golpear
gordura
gorjeta
gorro
gostoso
goteira
governar
gracejo
gradual
grafite
gralha
grampo
granada
gratuito
graveto
graxa
grego
grelhar
greve
grilo
grisalho
gritaria
grosso
grotesco
grudado
grunhido
gruta
guache
guarani
guaxinim
guerrear
guiar
guincho
guisado
gula
guloso
guru
habitar
harmonia
haste
haver
hectare
herdar
heresia
hesitar
hiato
hibernar
hidratar
hiena
hino
hipismo
hipnose
hipoteca
hoje
holofote
homem
honesto
honrado
hormonal
hospedar
humorado
iate
ideia
idoso
ignorado
igreja
iguana
ileso
ilha
iludido
iluminar
ilustrar
imagem
imediato
imenso
imersivo
iminente
imitador
imortal
impacto
impedir
implante
impor
imprensa
impune
imunizar
inalador
inapto
inativo
incenso
inchar
incidir
incluir
incolor
indeciso
indireto
indutor
ineficaz
inerente
infantil
infestar
infinito
inflamar
informal
infrator
ingerir
inibido
inicial
inimigo
injetar
inocente
inodoro
inovador
inox
inquieto
inscrito
inseto
insistir
inspetor
instalar
insulto
intacto
integral
intimar
intocado
intriga
invasor
inverno
invicto
invocar
iogurte
iraniano
ironizar
irreal
irritado
isca
isento
isolado
isqueiro
italiano
janeiro
jangada
janta
jararaca
jardim
jarro
jasmim
jato
javali
jazida
jejum
joaninha
joelhada
jogador
joia
jornal
jorrar
jovem
juba
judeu
judoca
juiz
julgador
julho
jurado
jurista
juro
justa
labareda
laboral
lacre
lactante
ladrilho
lagarta
lagoa
laje
lamber
lamentar
laminar
lampejo
lanche
lapidar
lapso
laranja
lareira
largura
lasanha
lastro
lateral
latido
lavanda
lavoura
lavrador
laxante
lazer
lealdade
lebre
legado
legendar
legista
leigo
leiloar
leitura
lembrete
leme
lenhador
lentilha
leoa
lesma
leste
letivo
letreiro
levar
leveza
levitar
liberal
libido
liderar
ligar
ligeiro
limitar
limoeiro
limpador
linda
linear
linhagem
liquidez
listagem
lisura
litoral
livro
lixa
lixeira
locador
locutor
lojista
lombo
lona
longe
lontra
lorde
lotado
loteria
loucura
lousa
louvar
luar
lucidez
lucro
luneta
lustre
lutador
luva
macaco
macete
machado
macio
madeira
madrinha
magnata
magreza
maior
mais
malandro
malha
malote
maluco
mamilo
mamoeiro
mamute
manada
mancha
mandato
manequim
manhoso
manivela
manobrar
mansa
manter
manusear
mapeado
maquinar
marcador
maresia
marfim
margem
marinho
marmita
maroto
marquise
marreco
martelo
marujo
mascote
masmorra
massagem
mastigar
matagal
materno
matinal
matutar
maxilar
medalha
medida
medusa
megafone
meiga
melancia
melhor
membro
memorial
menino
menos
mensagem
mental
merecer
mergulho
mesada
mesclar
mesmo
mesquita
mestre
metade
meteoro
metragem
mexer
mexicano
micro
migalha
migrar
milagre
milenar
milhar
mimado
minerar
minhoca
ministro
minoria
miolo
mirante
mirtilo
misturar
mocidade
moderno
modular
moeda
moer
moinho
moita
moldura
moleza
molho
molinete
molusco
montanha
moqueca
morango
morcego
mordomo
morena
mosaico
mosquete
mostarda
motel
motim
moto
motriz
muda
muito
mulata
mulher
multar
mundial
munido
muralha
murcho
muscular
museu
musical
nacional
nadador
naja
namoro
narina
narrado
nascer
nativa
natureza
navalha
navegar
navio
neblina
nebuloso
negativa
negociar
negrito
nervoso
neta
neural
nevasca
nevoeiro
ninar
ninho
nitidez
nivelar
nobreza
noite
noiva
nomear
nominal
nordeste
nortear
notar
noticiar
noturno
novelo
novilho
novo
nublado
nudez
numeral
nupcial
nutrir
nuvem
obcecado
obedecer
objetivo
obrigado
obscuro
obstetra
obter
obturar
ocidente
ocioso
ocorrer
oculista
ocupado
ofegante
ofensiva
oferenda
oficina
ofuscado
ogiva
olaria
oleoso
olhar
oliveira
ombro
omelete
omisso
omitir
ondulado
oneroso
ontem
opcional
operador
oponente
oportuno
oposto
orar
orbitar
ordem
ordinal
orfanato
orgasmo
orgulho
oriental
origem
oriundo
orla
ortodoxo
orvalho
oscilar
ossada
osso
ostentar
otimismo
ousadia
outono
outubro
ouvido
ovelha
ovular
oxidar
oxigenar
pacato
paciente
pacote
pactuar
padaria
padrinho
pagar
pagode
painel
pairar
paisagem
palavra
palestra
palheta
palito
palmada
palpitar
pancada
panela
panfleto
panqueca
pantanal
papagaio
papelada
papiro
parafina
parcial
pardal
parede
partida
pasmo
passado
pastel
patamar
patente
patinar
patrono
paulada
pausar
peculiar
pedalar
pedestre
pediatra
pedra
pegada
peitoral
peixe
pele
pelicano
penca
pendurar
peneira
penhasco
pensador
pente
perceber
perfeito
pergunta
perito
permitir
perna
perplexo
persiana
pertence
peruca
pescado
pesquisa
pessoa
petiscar
piada
picado
piedade
pigmento
pilastra
pilhado
pilotar
pimenta
pincel
pinguim
pinha
pinote
pintar
pioneiro
pipoca
piquete
piranha
pires
pirueta
piscar
pistola
pitanga
pivete
planta
plaqueta
platina
plebeu
plumagem
pluvial
pneu
poda
poeira
poetisa
polegada
policiar
poluente
polvilho
pomar
pomba
ponderar
pontaria
populoso
porta
possuir
postal
pote
poupar
pouso
povoar
praia
prancha
prato
praxe
prece
predador
prefeito
premiar
prensar
preparar
presilha
pretexto
prevenir
prezar
primata
princesa
prisma
privado
processo
produto
profeta
proibido
projeto
prometer
propagar
prosa
protetor
provador
publicar
pudim
pular
pulmonar
pulseira
punhal
punir
pupilo
pureza
puxador
quadra
quantia
quarto
quase
quebrar
queda
queijo
quente
querido
quimono
quina
quiosque
rabanada
rabisco
rachar
racionar
radial
raiar
rainha
raio
raiva
rajada
ralado
ramal
ranger
ranhura
rapadura
rapel
rapidez
raposa
raquete
raridade
rasante
rascunho
rasgar
raspador
rasteira
rasurar
ratazana
ratoeira
realeza
reanimar
reaver
rebaixar
rebelde
rebolar
recado
recente
recheio
recibo
recordar
recrutar
recuar
rede
redimir
redonda
reduzida
reenvio
refinar
refletir
refogar
refresco
refugiar
regalia
regime
regra
reinado
reitor
rejeitar
relativo
remador
remendo
remorso
renovado
reparo
repelir
repleto
repolho
represa
repudiar
requerer
resenha
resfriar
resgatar
residir
resolver
respeito
ressaca
restante
resumir
retalho
reter
retirar
retomada
retratar
revelar
revisor
revolta
riacho
rica
rigidez
rigoroso
rimar
ringue
risada
risco
risonho
robalo
rochedo
rodada
rodeio
rodovia
roedor
roleta
romano
roncar
rosado
roseira
rosto
rota
roteiro
rotina
rotular
rouco
roupa
roxo
rubro
rugido
rugoso
ruivo
rumo
rupestre
russo
sabor
saciar
sacola
sacudir
sadio
safira
saga
sagrada
saibro
salada
saleiro
salgado
saliva
salpicar
salsicha
saltar
salvador
sambar
samurai
sanar
sanfona
sangue
sanidade
sapato
sarda
sargento
sarjeta
saturar
saudade
saxofone
sazonal
secar
secular
seda
sedento
sediado
sedoso
sedutor
segmento
segredo
segundo
seiva
seleto
selvagem
semanal
semente
senador
senhor
sensual
sentado
separado
sereia
seringa
serra
servo
setembro
setor
sigilo
silhueta
silicone
simetria
simpatia
simular
sinal
sincero
singular
sinopse
sintonia
sirene
siri
situado
soberano
sobra
socorro
sogro
soja
solda
soletrar
solteiro
sombrio
sonata
sondar
sonegar
sonhador
sono
soprano
soquete
sorrir
sorteio
sossego
sotaque
soterrar
sovado
sozinho
suavizar
subida
submerso
subsolo
subtrair
sucata
sucesso
suco
sudeste
sufixo
sugador
sugerir
sujeito
sulfato
sumir
suor
superior
suplicar
suposto
suprimir
surdina
surfista
surpresa
surreal
surtir
suspiro
sustento
tabela
tablete
tabuada
tacho
tagarela
talher
talo
talvez
tamanho
tamborim
tampa
tangente
tanto
tapar
tapioca
tardio
tarefa
tarja
tarraxa
tatuagem
taurino
taxativo
taxista
teatral
tecer
tecido
teclado
tedioso
teia
teimar
telefone
telhado
tempero
tenente
tensor
tentar
termal
terno
terreno
tese
tesoura
testado
teto
textura
texugo
tiara
tigela
tijolo
timbrar
timidez
tingido
tinteiro
tiragem
titular
toalha
tocha
tolerar
tolice
tomada
tomilho
tonel
tontura
topete
tora
torcido
torneio
torque
torrada
torto
tostar
touca
toupeira
toxina
trabalho
tracejar
tradutor
trafegar
trajeto
trama
trancar
trapo
traseiro
tratador
travar
treino
tremer
trepidar
trevo
triagem
tribo
triciclo
tridente
trilogia
trindade
triplo
triturar
triunfal
trocar
trombeta
trova
trunfo
truque
tubular
tucano
tudo
tulipa
tupi
turbo
turma
turquesa
tutelar
tutorial
uivar
umbigo
unha
unidade
uniforme
urologia
urso
urtiga
urubu
usado
usina
usufruir
vacina
vadiar
vagaroso
vaidoso
vala
valente
validade
valores
vantagem
vaqueiro
varanda
vareta
varrer
vascular
vasilha
vassoura
vazar
vazio
veado
vedar
vegetar
veicular
veleiro
velhice
veludo
vencedor
vendaval
venerar
ventre
verbal
verdade
vereador
vergonha
vermelho
verniz
versar
vertente
vespa
vestido
vetorial
viaduto
viagem
viajar
viatura
vibrador
videira
vidraria
viela
viga
vigente
vigiar
vigorar
vilarejo
vinco
vinheta
vinil
violeta
virada
virtude
visitar
visto
vitral
viveiro
vizinho
voador
voar
vogal
volante
voleibol
voltagem
volumoso
vontade
vulto
vuvuzela
xadrez
xarope
xeque
xeretar
xerife
xingar
zangado
zarpar
zebu
zelador
zombar
zoologia
zumbido`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/simplified-chinese.js
var wordlist8 = `的
一
是
在
不
了
有
和
人
这
中
大
为
上
个
国
我
以
要
他
时
来
用
们
生
到
作
地
于
出
就
分
对
成
会
可
主
发
年
动
同
工
也
能
下
过
子
说
产
种
面
而
方
后
多
定
行
学
法
所
民
得
经
十
三
之
进
着
等
部
度
家
电
力
里
如
水
化
高
自
二
理
起
小
物
现
实
加
量
都
两
体
制
机
当
使
点
从
业
本
去
把
性
好
应
开
它
合
还
因
由
其
些
然
前
外
天
政
四
日
那
社
义
事
平
形
相
全
表
间
样
与
关
各
重
新
线
内
数
正
心
反
你
明
看
原
又
么
利
比
或
但
质
气
第
向
道
命
此
变
条
只
没
结
解
问
意
建
月
公
无
系
军
很
情
者
最
立
代
想
已
通
并
提
直
题
党
程
展
五
果
料
象
员
革
位
入
常
文
总
次
品
式
活
设
及
管
特
件
长
求
老
头
基
资
边
流
路
级
少
图
山
统
接
知
较
将
组
见
计
别
她
手
角
期
根
论
运
农
指
几
九
区
强
放
决
西
被
干
做
必
战
先
回
则
任
取
据
处
队
南
给
色
光
门
即
保
治
北
造
百
规
热
领
七
海
口
东
导
器
压
志
世
金
增
争
济
阶
油
思
术
极
交
受
联
什
认
六
共
权
收
证
改
清
美
再
采
转
更
单
风
切
打
白
教
速
花
带
安
场
身
车
例
真
务
具
万
每
目
至
达
走
积
示
议
声
报
斗
完
类
八
离
华
名
确
才
科
张
信
马
节
话
米
整
空
元
况
今
集
温
传
土
许
步
群
广
石
记
需
段
研
界
拉
林
律
叫
且
究
观
越
织
装
影
算
低
持
音
众
书
布
复
容
儿
须
际
商
非
验
连
断
深
难
近
矿
千
周
委
素
技
备
半
办
青
省
列
习
响
约
支
般
史
感
劳
便
团
往
酸
历
市
克
何
除
消
构
府
称
太
准
精
值
号
率
族
维
划
选
标
写
存
候
毛
亲
快
效
斯
院
查
江
型
眼
王
按
格
养
易
置
派
层
片
始
却
专
状
育
厂
京
识
适
属
圆
包
火
住
调
满
县
局
照
参
红
细
引
听
该
铁
价
严
首
底
液
官
德
随
病
苏
失
尔
死
讲
配
女
黄
推
显
谈
罪
神
艺
呢
席
含
企
望
密
批
营
项
防
举
球
英
氧
势
告
李
台
落
木
帮
轮
破
亚
师
围
注
远
字
材
排
供
河
态
封
另
施
减
树
溶
怎
止
案
言
士
均
武
固
叶
鱼
波
视
仅
费
紧
爱
左
章
早
朝
害
续
轻
服
试
食
充
兵
源
判
护
司
足
某
练
差
致
板
田
降
黑
犯
负
击
范
继
兴
似
余
坚
曲
输
修
故
城
夫
够
送
笔
船
占
右
财
吃
富
春
职
觉
汉
画
功
巴
跟
虽
杂
飞
检
吸
助
升
阳
互
初
创
抗
考
投
坏
策
古
径
换
未
跑
留
钢
曾
端
责
站
简
述
钱
副
尽
帝
射
草
冲
承
独
令
限
阿
宣
环
双
请
超
微
让
控
州
良
轴
找
否
纪
益
依
优
顶
础
载
倒
房
突
坐
粉
敌
略
客
袁
冷
胜
绝
析
块
剂
测
丝
协
诉
念
陈
仍
罗
盐
友
洋
错
苦
夜
刑
移
频
逐
靠
混
母
短
皮
终
聚
汽
村
云
哪
既
距
卫
停
烈
央
察
烧
迅
境
若
印
洲
刻
括
激
孔
搞
甚
室
待
核
校
散
侵
吧
甲
游
久
菜
味
旧
模
湖
货
损
预
阻
毫
普
稳
乙
妈
植
息
扩
银
语
挥
酒
守
拿
序
纸
医
缺
雨
吗
针
刘
啊
急
唱
误
训
愿
审
附
获
茶
鲜
粮
斤
孩
脱
硫
肥
善
龙
演
父
渐
血
欢
械
掌
歌
沙
刚
攻
谓
盾
讨
晚
粒
乱
燃
矛
乎
杀
药
宁
鲁
贵
钟
煤
读
班
伯
香
介
迫
句
丰
培
握
兰
担
弦
蛋
沉
假
穿
执
答
乐
谁
顺
烟
缩
征
脸
喜
松
脚
困
异
免
背
星
福
买
染
井
概
慢
怕
磁
倍
祖
皇
促
静
补
评
翻
肉
践
尼
衣
宽
扬
棉
希
伤
操
垂
秋
宜
氢
套
督
振
架
亮
末
宪
庆
编
牛
触
映
雷
销
诗
座
居
抓
裂
胞
呼
娘
景
威
绿
晶
厚
盟
衡
鸡
孙
延
危
胶
屋
乡
临
陆
顾
掉
呀
灯
岁
措
束
耐
剧
玉
赵
跳
哥
季
课
凯
胡
额
款
绍
卷
齐
伟
蒸
殖
永
宗
苗
川
炉
岩
弱
零
杨
奏
沿
露
杆
探
滑
镇
饭
浓
航
怀
赶
库
夺
伊
灵
税
途
灭
赛
归
召
鼓
播
盘
裁
险
康
唯
录
菌
纯
借
糖
盖
横
符
私
努
堂
域
枪
润
幅
哈
竟
熟
虫
泽
脑
壤
碳
欧
遍
侧
寨
敢
彻
虑
斜
薄
庭
纳
弹
饲
伸
折
麦
湿
暗
荷
瓦
塞
床
筑
恶
户
访
塔
奇
透
梁
刀
旋
迹
卡
氯
遇
份
毒
泥
退
洗
摆
灰
彩
卖
耗
夏
择
忙
铜
献
硬
予
繁
圈
雪
函
亦
抽
篇
阵
阴
丁
尺
追
堆
雄
迎
泛
爸
楼
避
谋
吨
野
猪
旗
累
偏
典
馆
索
秦
脂
潮
爷
豆
忽
托
惊
塑
遗
愈
朱
替
纤
粗
倾
尚
痛
楚
谢
奋
购
磨
君
池
旁
碎
骨
监
捕
弟
暴
割
贯
殊
释
词
亡
壁
顿
宝
午
尘
闻
揭
炮
残
冬
桥
妇
警
综
招
吴
付
浮
遭
徐
您
摇
谷
赞
箱
隔
订
男
吹
园
纷
唐
败
宋
玻
巨
耕
坦
荣
闭
湾
键
凡
驻
锅
救
恩
剥
凝
碱
齿
截
炼
麻
纺
禁
废
盛
版
缓
净
睛
昌
婚
涉
筒
嘴
插
岸
朗
庄
街
藏
姑
贸
腐
奴
啦
惯
乘
伙
恢
匀
纱
扎
辩
耳
彪
臣
亿
璃
抵
脉
秀
萨
俄
网
舞
店
喷
纵
寸
汗
挂
洪
贺
闪
柬
爆
烯
津
稻
墙
软
勇
像
滚
厘
蒙
芳
肯
坡
柱
荡
腿
仪
旅
尾
轧
冰
贡
登
黎
削
钻
勒
逃
障
氨
郭
峰
币
港
伏
轨
亩
毕
擦
莫
刺
浪
秘
援
株
健
售
股
岛
甘
泡
睡
童
铸
汤
阀
休
汇
舍
牧
绕
炸
哲
磷
绩
朋
淡
尖
启
陷
柴
呈
徒
颜
泪
稍
忘
泵
蓝
拖
洞
授
镜
辛
壮
锋
贫
虚
弯
摩
泰
幼
廷
尊
窗
纲
弄
隶
疑
氏
宫
姐
震
瑞
怪
尤
琴
循
描
膜
违
夹
腰
缘
珠
穷
森
枝
竹
沟
催
绳
忆
邦
剩
幸
浆
栏
拥
牙
贮
礼
滤
钠
纹
罢
拍
咱
喊
袖
埃
勤
罚
焦
潜
伍
墨
欲
缝
姓
刊
饱
仿
奖
铝
鬼
丽
跨
默
挖
链
扫
喝
袋
炭
污
幕
诸
弧
励
梅
奶
洁
灾
舟
鉴
苯
讼
抱
毁
懂
寒
智
埔
寄
届
跃
渡
挑
丹
艰
贝
碰
拔
爹
戴
码
梦
芽
熔
赤
渔
哭
敬
颗
奔
铅
仲
虎
稀
妹
乏
珍
申
桌
遵
允
隆
螺
仓
魏
锐
晓
氮
兼
隐
碍
赫
拨
忠
肃
缸
牵
抢
博
巧
壳
兄
杜
讯
诚
碧
祥
柯
页
巡
矩
悲
灌
龄
伦
票
寻
桂
铺
圣
恐
恰
郑
趣
抬
荒
腾
贴
柔
滴
猛
阔
辆
妻
填
撤
储
签
闹
扰
紫
砂
递
戏
吊
陶
伐
喂
疗
瓶
婆
抚
臂
摸
忍
虾
蜡
邻
胸
巩
挤
偶
弃
槽
劲
乳
邓
吉
仁
烂
砖
租
乌
舰
伴
瓜
浅
丙
暂
燥
橡
柳
迷
暖
牌
秧
胆
详
簧
踏
瓷
谱
呆
宾
糊
洛
辉
愤
竞
隙
怒
粘
乃
绪
肩
籍
敏
涂
熙
皆
侦
悬
掘
享
纠
醒
狂
锁
淀
恨
牲
霸
爬
赏
逆
玩
陵
祝
秒
浙
貌
役
彼
悉
鸭
趋
凤
晨
畜
辈
秩
卵
署
梯
炎
滩
棋
驱
筛
峡
冒
啥
寿
译
浸
泉
帽
迟
硅
疆
贷
漏
稿
冠
嫩
胁
芯
牢
叛
蚀
奥
鸣
岭
羊
凭
串
塘
绘
酵
融
盆
锡
庙
筹
冻
辅
摄
袭
筋
拒
僚
旱
钾
鸟
漆
沈
眉
疏
添
棒
穗
硝
韩
逼
扭
侨
凉
挺
碗
栽
炒
杯
患
馏
劝
豪
辽
勃
鸿
旦
吏
拜
狗
埋
辊
掩
饮
搬
骂
辞
勾
扣
估
蒋
绒
雾
丈
朵
姆
拟
宇
辑
陕
雕
偿
蓄
崇
剪
倡
厅
咬
驶
薯
刷
斥
番
赋
奉
佛
浇
漫
曼
扇
钙
桃
扶
仔
返
俗
亏
腔
鞋
棱
覆
框
悄
叔
撞
骗
勘
旺
沸
孤
吐
孟
渠
屈
疾
妙
惜
仰
狠
胀
谐
抛
霉
桑
岗
嘛
衰
盗
渗
脏
赖
涌
甜
曹
阅
肌
哩
厉
烃
纬
毅
昨
伪
症
煮
叹
钉
搭
茎
笼
酷
偷
弓
锥
恒
杰
坑
鼻
翼
纶
叙
狱
逮
罐
络
棚
抑
膨
蔬
寺
骤
穆
冶
枯
册
尸
凸
绅
坯
牺
焰
轰
欣
晋
瘦
御
锭
锦
丧
旬
锻
垄
搜
扑
邀
亭
酯
迈
舒
脆
酶
闲
忧
酚
顽
羽
涨
卸
仗
陪
辟
惩
杭
姚
肚
捉
飘
漂
昆
欺
吾
郎
烷
汁
呵
饰
萧
雅
邮
迁
燕
撒
姻
赴
宴
烦
债
帐
斑
铃
旨
醇
董
饼
雏
姿
拌
傅
腹
妥
揉
贤
拆
歪
葡
胺
丢
浩
徽
昂
垫
挡
览
贪
慰
缴
汪
慌
冯
诺
姜
谊
凶
劣
诬
耀
昏
躺
盈
骑
乔
溪
丛
卢
抹
闷
咨
刮
驾
缆
悟
摘
铒
掷
颇
幻
柄
惠
惨
佳
仇
腊
窝
涤
剑
瞧
堡
泼
葱
罩
霍
捞
胎
苍
滨
俩
捅
湘
砍
霞
邵
萄
疯
淮
遂
熊
粪
烘
宿
档
戈
驳
嫂
裕
徙
箭
捐
肠
撑
晒
辨
殿
莲
摊
搅
酱
屏
疫
哀
蔡
堵
沫
皱
畅
叠
阁
莱
敲
辖
钩
痕
坝
巷
饿
祸
丘
玄
溜
曰
逻
彭
尝
卿
妨
艇
吞
韦
怨
矮
歇`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/spanish.js
var wordlist9 = `ábaco
abdomen
abeja
abierto
abogado
abono
aborto
abrazo
abrir
abuelo
abuso
acabar
academia
acceso
acción
aceite
acelga
acento
aceptar
ácido
aclarar
acné
acoger
acoso
activo
acto
actriz
actuar
acudir
acuerdo
acusar
adicto
admitir
adoptar
adorno
aduana
adulto
aéreo
afectar
afición
afinar
afirmar
ágil
agitar
agonía
agosto
agotar
agregar
agrio
agua
agudo
águila
aguja
ahogo
ahorro
aire
aislar
ajedrez
ajeno
ajuste
alacrán
alambre
alarma
alba
álbum
alcalde
aldea
alegre
alejar
alerta
aleta
alfiler
alga
algodón
aliado
aliento
alivio
alma
almeja
almíbar
altar
alteza
altivo
alto
altura
alumno
alzar
amable
amante
amapola
amargo
amasar
ámbar
ámbito
ameno
amigo
amistad
amor
amparo
amplio
ancho
anciano
ancla
andar
andén
anemia
ángulo
anillo
ánimo
anís
anotar
antena
antiguo
antojo
anual
anular
anuncio
añadir
añejo
año
apagar
aparato
apetito
apio
aplicar
apodo
aporte
apoyo
aprender
aprobar
apuesta
apuro
arado
araña
arar
árbitro
árbol
arbusto
archivo
arco
arder
ardilla
arduo
área
árido
aries
armonía
arnés
aroma
arpa
arpón
arreglo
arroz
arruga
arte
artista
asa
asado
asalto
ascenso
asegurar
aseo
asesor
asiento
asilo
asistir
asno
asombro
áspero
astilla
astro
astuto
asumir
asunto
atajo
ataque
atar
atento
ateo
ático
atleta
átomo
atraer
atroz
atún
audaz
audio
auge
aula
aumento
ausente
autor
aval
avance
avaro
ave
avellana
avena
avestruz
avión
aviso
ayer
ayuda
ayuno
azafrán
azar
azote
azúcar
azufre
azul
baba
babor
bache
bahía
baile
bajar
balanza
balcón
balde
bambú
banco
banda
baño
barba
barco
barniz
barro
báscula
bastón
basura
batalla
batería
batir
batuta
baúl
bazar
bebé
bebida
bello
besar
beso
bestia
bicho
bien
bingo
blanco
bloque
blusa
boa
bobina
bobo
boca
bocina
boda
bodega
boina
bola
bolero
bolsa
bomba
bondad
bonito
bono
bonsái
borde
borrar
bosque
bote
botín
bóveda
bozal
bravo
brazo
brecha
breve
brillo
brinco
brisa
broca
broma
bronce
brote
bruja
brusco
bruto
buceo
bucle
bueno
buey
bufanda
bufón
búho
buitre
bulto
burbuja
burla
burro
buscar
butaca
buzón
caballo
cabeza
cabina
cabra
cacao
cadáver
cadena
caer
café
caída
caimán
caja
cajón
cal
calamar
calcio
caldo
calidad
calle
calma
calor
calvo
cama
cambio
camello
camino
campo
cáncer
candil
canela
canguro
canica
canto
caña
cañón
caoba
caos
capaz
capitán
capote
captar
capucha
cara
carbón
cárcel
careta
carga
cariño
carne
carpeta
carro
carta
casa
casco
casero
caspa
castor
catorce
catre
caudal
causa
cazo
cebolla
ceder
cedro
celda
célebre
celoso
célula
cemento
ceniza
centro
cerca
cerdo
cereza
cero
cerrar
certeza
césped
cetro
chacal
chaleco
champú
chancla
chapa
charla
chico
chiste
chivo
choque
choza
chuleta
chupar
ciclón
ciego
cielo
cien
cierto
cifra
cigarro
cima
cinco
cine
cinta
ciprés
circo
ciruela
cisne
cita
ciudad
clamor
clan
claro
clase
clave
cliente
clima
clínica
cobre
cocción
cochino
cocina
coco
código
codo
cofre
coger
cohete
cojín
cojo
cola
colcha
colegio
colgar
colina
collar
colmo
columna
combate
comer
comida
cómodo
compra
conde
conejo
conga
conocer
consejo
contar
copa
copia
corazón
corbata
corcho
cordón
corona
correr
coser
cosmos
costa
cráneo
cráter
crear
crecer
creído
crema
cría
crimen
cripta
crisis
cromo
crónica
croqueta
crudo
cruz
cuadro
cuarto
cuatro
cubo
cubrir
cuchara
cuello
cuento
cuerda
cuesta
cueva
cuidar
culebra
culpa
culto
cumbre
cumplir
cuna
cuneta
cuota
cupón
cúpula
curar
curioso
curso
curva
cutis
dama
danza
dar
dardo
dátil
deber
débil
década
decir
dedo
defensa
definir
dejar
delfín
delgado
delito
demora
denso
dental
deporte
derecho
derrota
desayuno
deseo
desfile
desnudo
destino
desvío
detalle
detener
deuda
día
diablo
diadema
diamante
diana
diario
dibujo
dictar
diente
dieta
diez
difícil
digno
dilema
diluir
dinero
directo
dirigir
disco
diseño
disfraz
diva
divino
doble
doce
dolor
domingo
don
donar
dorado
dormir
dorso
dos
dosis
dragón
droga
ducha
duda
duelo
dueño
dulce
dúo
duque
durar
dureza
duro
ébano
ebrio
echar
eco
ecuador
edad
edición
edificio
editor
educar
efecto
eficaz
eje
ejemplo
elefante
elegir
elemento
elevar
elipse
élite
elixir
elogio
eludir
embudo
emitir
emoción
empate
empeño
empleo
empresa
enano
encargo
enchufe
encía
enemigo
enero
enfado
enfermo
engaño
enigma
enlace
enorme
enredo
ensayo
enseñar
entero
entrar
envase
envío
época
equipo
erizo
escala
escena
escolar
escribir
escudo
esencia
esfera
esfuerzo
espada
espejo
espía
esposa
espuma
esquí
estar
este
estilo
estufa
etapa
eterno
ética
etnia
evadir
evaluar
evento
evitar
exacto
examen
exceso
excusa
exento
exigir
exilio
existir
éxito
experto
explicar
exponer
extremo
fábrica
fábula
fachada
fácil
factor
faena
faja
falda
fallo
falso
faltar
fama
familia
famoso
faraón
farmacia
farol
farsa
fase
fatiga
fauna
favor
fax
febrero
fecha
feliz
feo
feria
feroz
fértil
fervor
festín
fiable
fianza
fiar
fibra
ficción
ficha
fideo
fiebre
fiel
fiera
fiesta
figura
fijar
fijo
fila
filete
filial
filtro
fin
finca
fingir
finito
firma
flaco
flauta
flecha
flor
flota
fluir
flujo
flúor
fobia
foca
fogata
fogón
folio
folleto
fondo
forma
forro
fortuna
forzar
fosa
foto
fracaso
frágil
franja
frase
fraude
freír
freno
fresa
frío
frito
fruta
fuego
fuente
fuerza
fuga
fumar
función
funda
furgón
furia
fusil
fútbol
futuro
gacela
gafas
gaita
gajo
gala
galería
gallo
gamba
ganar
gancho
ganga
ganso
garaje
garza
gasolina
gastar
gato
gavilán
gemelo
gemir
gen
género
genio
gente
geranio
gerente
germen
gesto
gigante
gimnasio
girar
giro
glaciar
globo
gloria
gol
golfo
goloso
golpe
goma
gordo
gorila
gorra
gota
goteo
gozar
grada
gráfico
grano
grasa
gratis
grave
grieta
grillo
gripe
gris
grito
grosor
grúa
grueso
grumo
grupo
guante
guapo
guardia
guerra
guía
guiño
guion
guiso
guitarra
gusano
gustar
haber
hábil
hablar
hacer
hacha
hada
hallar
hamaca
harina
haz
hazaña
hebilla
hebra
hecho
helado
helio
hembra
herir
hermano
héroe
hervir
hielo
hierro
hígado
higiene
hijo
himno
historia
hocico
hogar
hoguera
hoja
hombre
hongo
honor
honra
hora
hormiga
horno
hostil
hoyo
hueco
huelga
huerta
hueso
huevo
huida
huir
humano
húmedo
humilde
humo
hundir
huracán
hurto
icono
ideal
idioma
ídolo
iglesia
iglú
igual
ilegal
ilusión
imagen
imán
imitar
impar
imperio
imponer
impulso
incapaz
índice
inerte
infiel
informe
ingenio
inicio
inmenso
inmune
innato
insecto
instante
interés
íntimo
intuir
inútil
invierno
ira
iris
ironía
isla
islote
jabalí
jabón
jamón
jarabe
jardín
jarra
jaula
jazmín
jefe
jeringa
jinete
jornada
joroba
joven
joya
juerga
jueves
juez
jugador
jugo
juguete
juicio
junco
jungla
junio
juntar
júpiter
jurar
justo
juvenil
juzgar
kilo
koala
labio
lacio
lacra
lado
ladrón
lagarto
lágrima
laguna
laico
lamer
lámina
lámpara
lana
lancha
langosta
lanza
lápiz
largo
larva
lástima
lata
látex
latir
laurel
lavar
lazo
leal
lección
leche
lector
leer
legión
legumbre
lejano
lengua
lento
leña
león
leopardo
lesión
letal
letra
leve
leyenda
libertad
libro
licor
líder
lidiar
lienzo
liga
ligero
lima
límite
limón
limpio
lince
lindo
línea
lingote
lino
linterna
líquido
liso
lista
litera
litio
litro
llaga
llama
llanto
llave
llegar
llenar
llevar
llorar
llover
lluvia
lobo
loción
loco
locura
lógica
logro
lombriz
lomo
lonja
lote
lucha
lucir
lugar
lujo
luna
lunes
lupa
lustro
luto
luz
maceta
macho
madera
madre
maduro
maestro
mafia
magia
mago
maíz
maldad
maleta
malla
malo
mamá
mambo
mamut
manco
mando
manejar
manga
maniquí
manjar
mano
manso
manta
mañana
mapa
máquina
mar
marco
marea
marfil
margen
marido
mármol
marrón
martes
marzo
masa
máscara
masivo
matar
materia
matiz
matriz
máximo
mayor
mazorca
mecha
medalla
medio
médula
mejilla
mejor
melena
melón
memoria
menor
mensaje
mente
menú
mercado
merengue
mérito
mes
mesón
meta
meter
método
metro
mezcla
miedo
miel
miembro
miga
mil
milagro
militar
millón
mimo
mina
minero
mínimo
minuto
miope
mirar
misa
miseria
misil
mismo
mitad
mito
mochila
moción
moda
modelo
moho
mojar
molde
moler
molino
momento
momia
monarca
moneda
monja
monto
moño
morada
morder
moreno
morir
morro
morsa
mortal
mosca
mostrar
motivo
mover
móvil
mozo
mucho
mudar
mueble
muela
muerte
muestra
mugre
mujer
mula
muleta
multa
mundo
muñeca
mural
muro
músculo
museo
musgo
música
muslo
nácar
nación
nadar
naipe
naranja
nariz
narrar
nasal
natal
nativo
natural
náusea
naval
nave
navidad
necio
néctar
negar
negocio
negro
neón
nervio
neto
neutro
nevar
nevera
nicho
nido
niebla
nieto
niñez
niño
nítido
nivel
nobleza
noche
nómina
noria
norma
norte
nota
noticia
novato
novela
novio
nube
nuca
núcleo
nudillo
nudo
nuera
nueve
nuez
nulo
número
nutria
oasis
obeso
obispo
objeto
obra
obrero
observar
obtener
obvio
oca
ocaso
océano
ochenta
ocho
ocio
ocre
octavo
octubre
oculto
ocupar
ocurrir
odiar
odio
odisea
oeste
ofensa
oferta
oficio
ofrecer
ogro
oído
oír
ojo
ola
oleada
olfato
olivo
olla
olmo
olor
olvido
ombligo
onda
onza
opaco
opción
ópera
opinar
oponer
optar
óptica
opuesto
oración
orador
oral
órbita
orca
orden
oreja
órgano
orgía
orgullo
oriente
origen
orilla
oro
orquesta
oruga
osadía
oscuro
osezno
oso
ostra
otoño
otro
oveja
óvulo
óxido
oxígeno
oyente
ozono
pacto
padre
paella
página
pago
país
pájaro
palabra
palco
paleta
pálido
palma
paloma
palpar
pan
panal
pánico
pantera
pañuelo
papá
papel
papilla
paquete
parar
parcela
pared
parir
paro
párpado
parque
párrafo
parte
pasar
paseo
pasión
paso
pasta
pata
patio
patria
pausa
pauta
pavo
payaso
peatón
pecado
pecera
pecho
pedal
pedir
pegar
peine
pelar
peldaño
pelea
peligro
pellejo
pelo
peluca
pena
pensar
peñón
peón
peor
pepino
pequeño
pera
percha
perder
pereza
perfil
perico
perla
permiso
perro
persona
pesa
pesca
pésimo
pestaña
pétalo
petróleo
pez
pezuña
picar
pichón
pie
piedra
pierna
pieza
pijama
pilar
piloto
pimienta
pino
pintor
pinza
piña
piojo
pipa
pirata
pisar
piscina
piso
pista
pitón
pizca
placa
plan
plata
playa
plaza
pleito
pleno
plomo
pluma
plural
pobre
poco
poder
podio
poema
poesía
poeta
polen
policía
pollo
polvo
pomada
pomelo
pomo
pompa
poner
porción
portal
posada
poseer
posible
poste
potencia
potro
pozo
prado
precoz
pregunta
premio
prensa
preso
previo
primo
príncipe
prisión
privar
proa
probar
proceso
producto
proeza
profesor
programa
prole
promesa
pronto
propio
próximo
prueba
público
puchero
pudor
pueblo
puerta
puesto
pulga
pulir
pulmón
pulpo
pulso
puma
punto
puñal
puño
pupa
pupila
puré
quedar
queja
quemar
querer
queso
quieto
química
quince
quitar
rábano
rabia
rabo
ración
radical
raíz
rama
rampa
rancho
rango
rapaz
rápido
rapto
rasgo
raspa
rato
rayo
raza
razón
reacción
realidad
rebaño
rebote
recaer
receta
rechazo
recoger
recreo
recto
recurso
red
redondo
reducir
reflejo
reforma
refrán
refugio
regalo
regir
regla
regreso
rehén
reino
reír
reja
relato
relevo
relieve
relleno
reloj
remar
remedio
remo
rencor
rendir
renta
reparto
repetir
reposo
reptil
res
rescate
resina
respeto
resto
resumen
retiro
retorno
retrato
reunir
revés
revista
rey
rezar
rico
riego
rienda
riesgo
rifa
rígido
rigor
rincón
riñón
río
riqueza
risa
ritmo
rito
rizo
roble
roce
rociar
rodar
rodeo
rodilla
roer
rojizo
rojo
romero
romper
ron
ronco
ronda
ropa
ropero
rosa
rosca
rostro
rotar
rubí
rubor
rudo
rueda
rugir
ruido
ruina
ruleta
rulo
rumbo
rumor
ruptura
ruta
rutina
sábado
saber
sabio
sable
sacar
sagaz
sagrado
sala
saldo
salero
salir
salmón
salón
salsa
salto
salud
salvar
samba
sanción
sandía
sanear
sangre
sanidad
sano
santo
sapo
saque
sardina
sartén
sastre
satán
sauna
saxofón
sección
seco
secreto
secta
sed
seguir
seis
sello
selva
semana
semilla
senda
sensor
señal
señor
separar
sepia
sequía
ser
serie
sermón
servir
sesenta
sesión
seta
setenta
severo
sexo
sexto
sidra
siesta
siete
siglo
signo
sílaba
silbar
silencio
silla
símbolo
simio
sirena
sistema
sitio
situar
sobre
socio
sodio
sol
solapa
soldado
soledad
sólido
soltar
solución
sombra
sondeo
sonido
sonoro
sonrisa
sopa
soplar
soporte
sordo
sorpresa
sorteo
sostén
sótano
suave
subir
suceso
sudor
suegra
suelo
sueño
suerte
sufrir
sujeto
sultán
sumar
superar
suplir
suponer
supremo
sur
surco
sureño
surgir
susto
sutil
tabaco
tabique
tabla
tabú
taco
tacto
tajo
talar
talco
talento
talla
talón
tamaño
tambor
tango
tanque
tapa
tapete
tapia
tapón
taquilla
tarde
tarea
tarifa
tarjeta
tarot
tarro
tarta
tatuaje
tauro
taza
tazón
teatro
techo
tecla
técnica
tejado
tejer
tejido
tela
teléfono
tema
temor
templo
tenaz
tender
tener
tenis
tenso
teoría
terapia
terco
término
ternura
terror
tesis
tesoro
testigo
tetera
texto
tez
tibio
tiburón
tiempo
tienda
tierra
tieso
tigre
tijera
tilde
timbre
tímido
timo
tinta
tío
típico
tipo
tira
tirón
titán
títere
título
tiza
toalla
tobillo
tocar
tocino
todo
toga
toldo
tomar
tono
tonto
topar
tope
toque
tórax
torero
tormenta
torneo
toro
torpedo
torre
torso
tortuga
tos
tosco
toser
tóxico
trabajo
tractor
traer
tráfico
trago
traje
tramo
trance
trato
trauma
trazar
trébol
tregua
treinta
tren
trepar
tres
tribu
trigo
tripa
triste
triunfo
trofeo
trompa
tronco
tropa
trote
trozo
truco
trueno
trufa
tubería
tubo
tuerto
tumba
tumor
túnel
túnica
turbina
turismo
turno
tutor
ubicar
úlcera
umbral
unidad
unir
universo
uno
untar
uña
urbano
urbe
urgente
urna
usar
usuario
útil
utopía
uva
vaca
vacío
vacuna
vagar
vago
vaina
vajilla
vale
válido
valle
valor
válvula
vampiro
vara
variar
varón
vaso
vecino
vector
vehículo
veinte
vejez
vela
velero
veloz
vena
vencer
venda
veneno
vengar
venir
venta
venus
ver
verano
verbo
verde
vereda
verja
verso
verter
vía
viaje
vibrar
vicio
víctima
vida
vídeo
vidrio
viejo
viernes
vigor
vil
villa
vinagre
vino
viñedo
violín
viral
virgo
virtud
visor
víspera
vista
vitamina
viudo
vivaz
vivero
vivir
vivo
volcán
volumen
volver
voraz
votar
voto
voz
vuelo
vulgar
yacer
yate
yegua
yema
yerno
yeso
yodo
yoga
yogur
zafiro
zanja
zapato
zarza
zona
zorro
zumo
zurdo`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/traditional-chinese.js
var wordlist10 = `的
一
是
在
不
了
有
和
人
這
中
大
為
上
個
國
我
以
要
他
時
來
用
們
生
到
作
地
於
出
就
分
對
成
會
可
主
發
年
動
同
工
也
能
下
過
子
說
產
種
面
而
方
後
多
定
行
學
法
所
民
得
經
十
三
之
進
著
等
部
度
家
電
力
裡
如
水
化
高
自
二
理
起
小
物
現
實
加
量
都
兩
體
制
機
當
使
點
從
業
本
去
把
性
好
應
開
它
合
還
因
由
其
些
然
前
外
天
政
四
日
那
社
義
事
平
形
相
全
表
間
樣
與
關
各
重
新
線
內
數
正
心
反
你
明
看
原
又
麼
利
比
或
但
質
氣
第
向
道
命
此
變
條
只
沒
結
解
問
意
建
月
公
無
系
軍
很
情
者
最
立
代
想
已
通
並
提
直
題
黨
程
展
五
果
料
象
員
革
位
入
常
文
總
次
品
式
活
設
及
管
特
件
長
求
老
頭
基
資
邊
流
路
級
少
圖
山
統
接
知
較
將
組
見
計
別
她
手
角
期
根
論
運
農
指
幾
九
區
強
放
決
西
被
幹
做
必
戰
先
回
則
任
取
據
處
隊
南
給
色
光
門
即
保
治
北
造
百
規
熱
領
七
海
口
東
導
器
壓
志
世
金
增
爭
濟
階
油
思
術
極
交
受
聯
什
認
六
共
權
收
證
改
清
美
再
採
轉
更
單
風
切
打
白
教
速
花
帶
安
場
身
車
例
真
務
具
萬
每
目
至
達
走
積
示
議
聲
報
鬥
完
類
八
離
華
名
確
才
科
張
信
馬
節
話
米
整
空
元
況
今
集
溫
傳
土
許
步
群
廣
石
記
需
段
研
界
拉
林
律
叫
且
究
觀
越
織
裝
影
算
低
持
音
眾
書
布
复
容
兒
須
際
商
非
驗
連
斷
深
難
近
礦
千
週
委
素
技
備
半
辦
青
省
列
習
響
約
支
般
史
感
勞
便
團
往
酸
歷
市
克
何
除
消
構
府
稱
太
準
精
值
號
率
族
維
劃
選
標
寫
存
候
毛
親
快
效
斯
院
查
江
型
眼
王
按
格
養
易
置
派
層
片
始
卻
專
狀
育
廠
京
識
適
屬
圓
包
火
住
調
滿
縣
局
照
參
紅
細
引
聽
該
鐵
價
嚴
首
底
液
官
德
隨
病
蘇
失
爾
死
講
配
女
黃
推
顯
談
罪
神
藝
呢
席
含
企
望
密
批
營
項
防
舉
球
英
氧
勢
告
李
台
落
木
幫
輪
破
亞
師
圍
注
遠
字
材
排
供
河
態
封
另
施
減
樹
溶
怎
止
案
言
士
均
武
固
葉
魚
波
視
僅
費
緊
愛
左
章
早
朝
害
續
輕
服
試
食
充
兵
源
判
護
司
足
某
練
差
致
板
田
降
黑
犯
負
擊
范
繼
興
似
餘
堅
曲
輸
修
故
城
夫
夠
送
筆
船
佔
右
財
吃
富
春
職
覺
漢
畫
功
巴
跟
雖
雜
飛
檢
吸
助
昇
陽
互
初
創
抗
考
投
壞
策
古
徑
換
未
跑
留
鋼
曾
端
責
站
簡
述
錢
副
盡
帝
射
草
衝
承
獨
令
限
阿
宣
環
雙
請
超
微
讓
控
州
良
軸
找
否
紀
益
依
優
頂
礎
載
倒
房
突
坐
粉
敵
略
客
袁
冷
勝
絕
析
塊
劑
測
絲
協
訴
念
陳
仍
羅
鹽
友
洋
錯
苦
夜
刑
移
頻
逐
靠
混
母
短
皮
終
聚
汽
村
雲
哪
既
距
衛
停
烈
央
察
燒
迅
境
若
印
洲
刻
括
激
孔
搞
甚
室
待
核
校
散
侵
吧
甲
遊
久
菜
味
舊
模
湖
貨
損
預
阻
毫
普
穩
乙
媽
植
息
擴
銀
語
揮
酒
守
拿
序
紙
醫
缺
雨
嗎
針
劉
啊
急
唱
誤
訓
願
審
附
獲
茶
鮮
糧
斤
孩
脫
硫
肥
善
龍
演
父
漸
血
歡
械
掌
歌
沙
剛
攻
謂
盾
討
晚
粒
亂
燃
矛
乎
殺
藥
寧
魯
貴
鐘
煤
讀
班
伯
香
介
迫
句
豐
培
握
蘭
擔
弦
蛋
沉
假
穿
執
答
樂
誰
順
煙
縮
徵
臉
喜
松
腳
困
異
免
背
星
福
買
染
井
概
慢
怕
磁
倍
祖
皇
促
靜
補
評
翻
肉
踐
尼
衣
寬
揚
棉
希
傷
操
垂
秋
宜
氫
套
督
振
架
亮
末
憲
慶
編
牛
觸
映
雷
銷
詩
座
居
抓
裂
胞
呼
娘
景
威
綠
晶
厚
盟
衡
雞
孫
延
危
膠
屋
鄉
臨
陸
顧
掉
呀
燈
歲
措
束
耐
劇
玉
趙
跳
哥
季
課
凱
胡
額
款
紹
卷
齊
偉
蒸
殖
永
宗
苗
川
爐
岩
弱
零
楊
奏
沿
露
桿
探
滑
鎮
飯
濃
航
懷
趕
庫
奪
伊
靈
稅
途
滅
賽
歸
召
鼓
播
盤
裁
險
康
唯
錄
菌
純
借
糖
蓋
橫
符
私
努
堂
域
槍
潤
幅
哈
竟
熟
蟲
澤
腦
壤
碳
歐
遍
側
寨
敢
徹
慮
斜
薄
庭
納
彈
飼
伸
折
麥
濕
暗
荷
瓦
塞
床
築
惡
戶
訪
塔
奇
透
梁
刀
旋
跡
卡
氯
遇
份
毒
泥
退
洗
擺
灰
彩
賣
耗
夏
擇
忙
銅
獻
硬
予
繁
圈
雪
函
亦
抽
篇
陣
陰
丁
尺
追
堆
雄
迎
泛
爸
樓
避
謀
噸
野
豬
旗
累
偏
典
館
索
秦
脂
潮
爺
豆
忽
托
驚
塑
遺
愈
朱
替
纖
粗
傾
尚
痛
楚
謝
奮
購
磨
君
池
旁
碎
骨
監
捕
弟
暴
割
貫
殊
釋
詞
亡
壁
頓
寶
午
塵
聞
揭
炮
殘
冬
橋
婦
警
綜
招
吳
付
浮
遭
徐
您
搖
谷
贊
箱
隔
訂
男
吹
園
紛
唐
敗
宋
玻
巨
耕
坦
榮
閉
灣
鍵
凡
駐
鍋
救
恩
剝
凝
鹼
齒
截
煉
麻
紡
禁
廢
盛
版
緩
淨
睛
昌
婚
涉
筒
嘴
插
岸
朗
莊
街
藏
姑
貿
腐
奴
啦
慣
乘
夥
恢
勻
紗
扎
辯
耳
彪
臣
億
璃
抵
脈
秀
薩
俄
網
舞
店
噴
縱
寸
汗
掛
洪
賀
閃
柬
爆
烯
津
稻
牆
軟
勇
像
滾
厘
蒙
芳
肯
坡
柱
盪
腿
儀
旅
尾
軋
冰
貢
登
黎
削
鑽
勒
逃
障
氨
郭
峰
幣
港
伏
軌
畝
畢
擦
莫
刺
浪
秘
援
株
健
售
股
島
甘
泡
睡
童
鑄
湯
閥
休
匯
舍
牧
繞
炸
哲
磷
績
朋
淡
尖
啟
陷
柴
呈
徒
顏
淚
稍
忘
泵
藍
拖
洞
授
鏡
辛
壯
鋒
貧
虛
彎
摩
泰
幼
廷
尊
窗
綱
弄
隸
疑
氏
宮
姐
震
瑞
怪
尤
琴
循
描
膜
違
夾
腰
緣
珠
窮
森
枝
竹
溝
催
繩
憶
邦
剩
幸
漿
欄
擁
牙
貯
禮
濾
鈉
紋
罷
拍
咱
喊
袖
埃
勤
罰
焦
潛
伍
墨
欲
縫
姓
刊
飽
仿
獎
鋁
鬼
麗
跨
默
挖
鏈
掃
喝
袋
炭
污
幕
諸
弧
勵
梅
奶
潔
災
舟
鑑
苯
訟
抱
毀
懂
寒
智
埔
寄
屆
躍
渡
挑
丹
艱
貝
碰
拔
爹
戴
碼
夢
芽
熔
赤
漁
哭
敬
顆
奔
鉛
仲
虎
稀
妹
乏
珍
申
桌
遵
允
隆
螺
倉
魏
銳
曉
氮
兼
隱
礙
赫
撥
忠
肅
缸
牽
搶
博
巧
殼
兄
杜
訊
誠
碧
祥
柯
頁
巡
矩
悲
灌
齡
倫
票
尋
桂
鋪
聖
恐
恰
鄭
趣
抬
荒
騰
貼
柔
滴
猛
闊
輛
妻
填
撤
儲
簽
鬧
擾
紫
砂
遞
戲
吊
陶
伐
餵
療
瓶
婆
撫
臂
摸
忍
蝦
蠟
鄰
胸
鞏
擠
偶
棄
槽
勁
乳
鄧
吉
仁
爛
磚
租
烏
艦
伴
瓜
淺
丙
暫
燥
橡
柳
迷
暖
牌
秧
膽
詳
簧
踏
瓷
譜
呆
賓
糊
洛
輝
憤
競
隙
怒
粘
乃
緒
肩
籍
敏
塗
熙
皆
偵
懸
掘
享
糾
醒
狂
鎖
淀
恨
牲
霸
爬
賞
逆
玩
陵
祝
秒
浙
貌
役
彼
悉
鴨
趨
鳳
晨
畜
輩
秩
卵
署
梯
炎
灘
棋
驅
篩
峽
冒
啥
壽
譯
浸
泉
帽
遲
矽
疆
貸
漏
稿
冠
嫩
脅
芯
牢
叛
蝕
奧
鳴
嶺
羊
憑
串
塘
繪
酵
融
盆
錫
廟
籌
凍
輔
攝
襲
筋
拒
僚
旱
鉀
鳥
漆
沈
眉
疏
添
棒
穗
硝
韓
逼
扭
僑
涼
挺
碗
栽
炒
杯
患
餾
勸
豪
遼
勃
鴻
旦
吏
拜
狗
埋
輥
掩
飲
搬
罵
辭
勾
扣
估
蔣
絨
霧
丈
朵
姆
擬
宇
輯
陝
雕
償
蓄
崇
剪
倡
廳
咬
駛
薯
刷
斥
番
賦
奉
佛
澆
漫
曼
扇
鈣
桃
扶
仔
返
俗
虧
腔
鞋
棱
覆
框
悄
叔
撞
騙
勘
旺
沸
孤
吐
孟
渠
屈
疾
妙
惜
仰
狠
脹
諧
拋
黴
桑
崗
嘛
衰
盜
滲
臟
賴
湧
甜
曹
閱
肌
哩
厲
烴
緯
毅
昨
偽
症
煮
嘆
釘
搭
莖
籠
酷
偷
弓
錐
恆
傑
坑
鼻
翼
綸
敘
獄
逮
罐
絡
棚
抑
膨
蔬
寺
驟
穆
冶
枯
冊
屍
凸
紳
坯
犧
焰
轟
欣
晉
瘦
禦
錠
錦
喪
旬
鍛
壟
搜
撲
邀
亭
酯
邁
舒
脆
酶
閒
憂
酚
頑
羽
漲
卸
仗
陪
闢
懲
杭
姚
肚
捉
飄
漂
昆
欺
吾
郎
烷
汁
呵
飾
蕭
雅
郵
遷
燕
撒
姻
赴
宴
煩
債
帳
斑
鈴
旨
醇
董
餅
雛
姿
拌
傅
腹
妥
揉
賢
拆
歪
葡
胺
丟
浩
徽
昂
墊
擋
覽
貪
慰
繳
汪
慌
馮
諾
姜
誼
兇
劣
誣
耀
昏
躺
盈
騎
喬
溪
叢
盧
抹
悶
諮
刮
駕
纜
悟
摘
鉺
擲
頗
幻
柄
惠
慘
佳
仇
臘
窩
滌
劍
瞧
堡
潑
蔥
罩
霍
撈
胎
蒼
濱
倆
捅
湘
砍
霞
邵
萄
瘋
淮
遂
熊
糞
烘
宿
檔
戈
駁
嫂
裕
徙
箭
捐
腸
撐
曬
辨
殿
蓮
攤
攪
醬
屏
疫
哀
蔡
堵
沫
皺
暢
疊
閣
萊
敲
轄
鉤
痕
壩
巷
餓
禍
丘
玄
溜
曰
邏
彭
嘗
卿
妨
艇
吞
韋
怨
矮
歇`.split("\n");

// node_modules/ox/node_modules/@noble/curves/esm/nist.js
var Fp256 = Field(BigInt("0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff"));
var p256_a = Fp256.create(BigInt("-3"));
var p256_b = BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b");
var p256 = createCurve({
  a: p256_a,
  b: p256_b,
  Fp: Fp256,
  n: BigInt("0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551"),
  Gx: BigInt("0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"),
  Gy: BigInt("0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"),
  h: BigInt(1),
  lowS: false
}, sha256);
var secp256r1 = p256;
var p256_mapSWU = (() => mapToCurveSimpleSWU(Fp256, {
  A: p256_a,
  B: p256_b,
  Z: Fp256.create(BigInt("-10"))
}))();
var p256_hasher = (() => createHasher(secp256r1.ProjectivePoint, (scalars) => p256_mapSWU(scalars[0]), {
  DST: "P256_XMD:SHA-256_SSWU_RO_",
  encodeDST: "P256_XMD:SHA-256_SSWU_NU_",
  p: Fp256.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha256
}))();
var Fp384 = Field(BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff"));
var p384_a = Fp384.create(BigInt("-3"));
var p384_b = BigInt("0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef");
var p384 = createCurve({
  a: p384_a,
  b: p384_b,
  Fp: Fp384,
  n: BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973"),
  Gx: BigInt("0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7"),
  Gy: BigInt("0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f"),
  h: BigInt(1),
  lowS: false
}, sha384);
var secp384r1 = p384;
var p384_mapSWU = (() => mapToCurveSimpleSWU(Fp384, {
  A: p384_a,
  B: p384_b,
  Z: Fp384.create(BigInt("-12"))
}))();
var p384_hasher = (() => createHasher(secp384r1.ProjectivePoint, (scalars) => p384_mapSWU(scalars[0]), {
  DST: "P384_XMD:SHA-384_SSWU_RO_",
  encodeDST: "P384_XMD:SHA-384_SSWU_NU_",
  p: Fp384.ORDER,
  m: 1,
  k: 192,
  expand: "xmd",
  hash: sha384
}))();
var Fp521 = Field(BigInt("0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
var p521_a = Fp521.create(BigInt("-3"));
var p521_b = BigInt("0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00");
var p521 = createCurve({
  a: p521_a,
  b: p521_b,
  Fp: Fp521,
  n: BigInt("0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409"),
  Gx: BigInt("0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66"),
  Gy: BigInt("0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650"),
  h: BigInt(1),
  lowS: false,
  allowedPrivateKeyLengths: [130, 131, 132]
  // P521 keys are variable-length. Normalize to 132b
}, sha512);
var secp521r1 = p521;
var p521_mapSWU = (() => mapToCurveSimpleSWU(Fp521, {
  A: p521_a,
  B: p521_b,
  Z: Fp521.create(BigInt("-4"))
}))();
var p521_hasher = (() => createHasher(secp521r1.ProjectivePoint, (scalars) => p521_mapSWU(scalars[0]), {
  DST: "P521_XMD:SHA-512_SSWU_RO_",
  encodeDST: "P521_XMD:SHA-512_SSWU_NU_",
  p: Fp521.ORDER,
  m: 1,
  k: 256,
  expand: "xmd",
  hash: sha512
}))();

// node_modules/ox/node_modules/@noble/curves/esm/p256.js
var hashToCurve4 = (() => p256_hasher.hashToCurve)();
var encodeToCurve4 = (() => p256_hasher.encodeToCurve)();

// node_modules/ox/_esm/core/RpcResponse.js
var BaseError3 = class extends Error {
  constructor(errorObject) {
    const { cause, code: code2, message, data, stack } = errorObject;
    super(message, { cause });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.BaseError"
    });
    Object.defineProperty(this, "cause", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "stack", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "data", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.cause = cause;
    this.code = code2;
    this.data = data;
    this.stack = stack ?? "";
  }
};
var InvalidInputError2 = class _InvalidInputError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      code: _InvalidInputError.code,
      data: parameters.data,
      message: parameters.message ?? "Missing or invalid parameters."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32e3
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.InvalidInputError"
    });
  }
};
Object.defineProperty(InvalidInputError2, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32e3
});
var ResourceNotFoundError = class _ResourceNotFoundError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      code: _ResourceNotFoundError.code,
      data: parameters.data,
      message: parameters.message ?? "Requested resource not found."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32001
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.ResourceNotFoundError"
    });
  }
};
Object.defineProperty(ResourceNotFoundError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32001
});
var ResourceUnavailableError = class _ResourceUnavailableError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      code: _ResourceUnavailableError.code,
      data: parameters.data,
      message: parameters.message ?? "Requested resource not available."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32002
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.ResourceUnavailableError"
    });
  }
};
Object.defineProperty(ResourceUnavailableError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32002
});
var TransactionRejectedError = class _TransactionRejectedError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      code: _TransactionRejectedError.code,
      data: parameters.data,
      message: parameters.message ?? "Transaction creation failed."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32003
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.TransactionRejectedError"
    });
  }
};
Object.defineProperty(TransactionRejectedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32003
});
var MethodNotSupportedError = class _MethodNotSupportedError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      code: _MethodNotSupportedError.code,
      data: parameters.data,
      message: parameters.message ?? "Method is not implemented."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32004
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.MethodNotSupportedError"
    });
  }
};
Object.defineProperty(MethodNotSupportedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32004
});
var LimitExceededError = class _LimitExceededError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      code: _LimitExceededError.code,
      data: parameters.data,
      message: parameters.message ?? "Rate limit exceeded."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32005
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.LimitExceededError"
    });
  }
};
Object.defineProperty(LimitExceededError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32005
});
var VersionNotSupportedError = class _VersionNotSupportedError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      code: _VersionNotSupportedError.code,
      data: parameters.data,
      message: parameters.message ?? "JSON-RPC version not supported."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32006
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.VersionNotSupportedError"
    });
  }
};
Object.defineProperty(VersionNotSupportedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32006
});
var InvalidRequestError = class _InvalidRequestError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      code: _InvalidRequestError.code,
      data: parameters.data,
      message: parameters.message ?? "Input is not a valid JSON-RPC request."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32600
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.InvalidRequestError"
    });
  }
};
Object.defineProperty(InvalidRequestError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32600
});
var MethodNotFoundError = class _MethodNotFoundError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      code: _MethodNotFoundError.code,
      data: parameters.data,
      message: parameters.message ?? "Method does not exist."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32601
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.MethodNotFoundError"
    });
  }
};
Object.defineProperty(MethodNotFoundError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32601
});
var InvalidParamsError = class _InvalidParamsError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      code: _InvalidParamsError.code,
      data: parameters.data,
      message: parameters.message ?? "Invalid method parameters."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32602
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.InvalidParamsError"
    });
  }
};
Object.defineProperty(InvalidParamsError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32602
});
var InternalError = class _InternalError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      cause: parameters.cause,
      code: _InternalError.code,
      data: parameters.data,
      message: parameters.message ?? "Internal JSON-RPC error.",
      stack: parameters.stack
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32603
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.InternalError"
    });
  }
};
Object.defineProperty(InternalError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32603
});
var ParseError = class _ParseError extends BaseError3 {
  constructor(parameters = {}) {
    super({
      code: _ParseError.code,
      data: parameters.data,
      message: parameters.message ?? "Failed to parse JSON-RPC response."
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32700
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "RpcResponse.ParseError"
    });
  }
};
Object.defineProperty(ParseError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: -32700
});

// node_modules/ox/_esm/core/Provider.js
var ProviderRpcError = class extends Error {
  constructor(code2, message) {
    super(message);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "ProviderRpcError"
    });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "details", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.code = code2;
    this.details = message;
  }
};
var UserRejectedRequestError2 = class extends ProviderRpcError {
  constructor({ message = "The user rejected the request." } = {}) {
    super(4001, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4001
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.UserRejectedRequestError"
    });
  }
};
Object.defineProperty(UserRejectedRequestError2, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 4001
});
var UnauthorizedError = class extends ProviderRpcError {
  constructor({ message = "The requested method and/or account has not been authorized by the user." } = {}) {
    super(4100, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4100
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.UnauthorizedError"
    });
  }
};
Object.defineProperty(UnauthorizedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 4100
});
var UnsupportedMethodError = class extends ProviderRpcError {
  constructor({ message = "The provider does not support the requested method." } = {}) {
    super(4200, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4200
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.UnsupportedMethodError"
    });
  }
};
Object.defineProperty(UnsupportedMethodError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 4200
});
var DisconnectedError = class extends ProviderRpcError {
  constructor({ message = "The provider is disconnected from all chains." } = {}) {
    super(4900, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4900
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.DisconnectedError"
    });
  }
};
Object.defineProperty(DisconnectedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 4900
});
var ChainDisconnectedError = class extends ProviderRpcError {
  constructor({ message = "The provider is not connected to the requested chain." } = {}) {
    super(4901, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4901
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.ChainDisconnectedError"
    });
  }
};
Object.defineProperty(ChainDisconnectedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 4901
});
var SwitchChainError = class extends ProviderRpcError {
  constructor({ message = "An error occurred when attempting to switch chain." } = {}) {
    super(4902, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4902
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.SwitchChainError"
    });
  }
};
Object.defineProperty(SwitchChainError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 4902
});
var UnsupportedNonOptionalCapabilityError = class extends ProviderRpcError {
  constructor({ message = "This Wallet does not support a capability that was not marked as optional." } = {}) {
    super(5700, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 5700
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.UnsupportedNonOptionalCapabilityError"
    });
  }
};
Object.defineProperty(UnsupportedNonOptionalCapabilityError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 5700
});
var UnsupportedChainIdError = class extends ProviderRpcError {
  constructor({ message = "This Wallet does not support the requested chain ID." } = {}) {
    super(5710, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 5710
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.UnsupportedChainIdError"
    });
  }
};
Object.defineProperty(UnsupportedChainIdError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 5710
});
var DuplicateIdError = class extends ProviderRpcError {
  constructor({ message = "There is already a bundle submitted with this ID." } = {}) {
    super(5720, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 5720
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.DuplicateIdError"
    });
  }
};
Object.defineProperty(DuplicateIdError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 5720
});
var UnknownBundleIdError = class extends ProviderRpcError {
  constructor({ message = "This bundle id is unknown / has not been submitted." } = {}) {
    super(5730, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 5730
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.UnknownBundleIdError"
    });
  }
};
Object.defineProperty(UnknownBundleIdError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 5730
});
var BundleTooLargeError = class extends ProviderRpcError {
  constructor({ message = "The call bundle is too large for the Wallet to process." } = {}) {
    super(5740, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 5740
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.BundleTooLargeError"
    });
  }
};
Object.defineProperty(BundleTooLargeError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 5740
});
var AtomicReadyWalletRejectedUpgradeError = class extends ProviderRpcError {
  constructor({ message = "The Wallet can support atomicity after an upgrade, but the user rejected the upgrade." } = {}) {
    super(5750, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 5750
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.AtomicReadyWalletRejectedUpgradeError"
    });
  }
};
Object.defineProperty(AtomicReadyWalletRejectedUpgradeError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 5750
});
var AtomicityNotSupportedError = class extends ProviderRpcError {
  constructor({ message = "The wallet does not support atomic execution but the request requires it." } = {}) {
    super(5760, message);
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 5760
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Provider.AtomicityNotSupportedError"
    });
  }
};
Object.defineProperty(AtomicityNotSupportedError, "code", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 5760
});

// node_modules/ox/_esm/core/WebAuthnP256.js
var createChallenge = Uint8Array.from([
  105,
  171,
  180,
  181,
  160,
  222,
  75,
  198,
  42,
  42,
  32,
  31,
  141,
  37,
  186,
  233
]);

// node_modules/base-x/src/esm/index.js
function base(ALPHABET2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  const BASE_MAP = new Uint8Array(256);
  for (let j6 = 0; j6 < BASE_MAP.length; j6++) {
    BASE_MAP[j6] = 255;
  }
  for (let i3 = 0; i3 < ALPHABET2.length; i3++) {
    const x5 = ALPHABET2.charAt(i3);
    const xc2 = x5.charCodeAt(0);
    if (BASE_MAP[xc2] !== 255) {
      throw new TypeError(x5 + " is ambiguous");
    }
    BASE_MAP[xc2] = i3;
  }
  const BASE = ALPHABET2.length;
  const LEADER = ALPHABET2.charAt(0);
  const FACTOR = Math.log(BASE) / Math.log(256);
  const iFACTOR = Math.log(256) / Math.log(BASE);
  function encode8(source) {
    if (source instanceof Uint8Array) {
    } else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    let zeroes = 0;
    let length2 = 0;
    let pbegin = 0;
    const pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    const size3 = (pend - pbegin) * iFACTOR + 1 >>> 0;
    const b58 = new Uint8Array(size3);
    while (pbegin !== pend) {
      let carry = source[pbegin];
      let i3 = 0;
      for (let it1 = size3 - 1; (carry !== 0 || i3 < length2) && it1 !== -1; it1--, i3++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i3;
      pbegin++;
    }
    let it22 = size3 - length2;
    while (it22 !== size3 && b58[it22] === 0) {
      it22++;
    }
    let str = LEADER.repeat(zeroes);
    for (; it22 < size3; ++it22) {
      str += ALPHABET2.charAt(b58[it22]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    let psz = 0;
    let zeroes = 0;
    let length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    const size3 = (source.length - psz) * FACTOR + 1 >>> 0;
    const b256 = new Uint8Array(size3);
    while (psz < source.length) {
      const charCode = source.charCodeAt(psz);
      if (charCode > 255) {
        return;
      }
      let carry = BASE_MAP[charCode];
      if (carry === 255) {
        return;
      }
      let i3 = 0;
      for (let it32 = size3 - 1; (carry !== 0 || i3 < length2) && it32 !== -1; it32--, i3++) {
        carry += BASE * b256[it32] >>> 0;
        b256[it32] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i3;
      psz++;
    }
    let it4 = size3 - length2;
    while (it4 !== size3 && b256[it4] === 0) {
      it4++;
    }
    const vch = new Uint8Array(zeroes + (size3 - it4));
    let j6 = zeroes;
    while (it4 !== size3) {
      vch[j6++] = b256[it4++];
    }
    return vch;
  }
  function decode8(string2) {
    const buffer = decodeUnsafe(string2);
    if (buffer) {
      return buffer;
    }
    throw new Error("Non-base" + BASE + " character");
  }
  return {
    encode: encode8,
    decodeUnsafe,
    decode: decode8
  };
}
var esm_default = base;

// node_modules/bs58/src/esm/index.js
var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var esm_default2 = esm_default(ALPHABET);

// node_modules/@msgpack/msgpack/dist.esm/utils/utf8.mjs
function utf8Count(str) {
  const strLength = str.length;
  let byteLength = 0;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      byteLength++;
      continue;
    } else if ((value & 4294965248) === 0) {
      byteLength += 2;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        byteLength += 3;
      } else {
        byteLength += 4;
      }
    }
  }
  return byteLength;
}
function utf8EncodeJs(str, output, outputOffset) {
  const strLength = str.length;
  let offset = outputOffset;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      output[offset++] = value;
      continue;
    } else if ((value & 4294965248) === 0) {
      output[offset++] = value >> 6 & 31 | 192;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        output[offset++] = value >> 12 & 15 | 224;
        output[offset++] = value >> 6 & 63 | 128;
      } else {
        output[offset++] = value >> 18 & 7 | 240;
        output[offset++] = value >> 12 & 63 | 128;
        output[offset++] = value >> 6 & 63 | 128;
      }
    }
    output[offset++] = value & 63 | 128;
  }
}
var sharedTextEncoder = new TextEncoder();
var TEXT_ENCODER_THRESHOLD = 50;
function utf8EncodeTE(str, output, outputOffset) {
  sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));
}
function utf8Encode(str, output, outputOffset) {
  if (str.length > TEXT_ENCODER_THRESHOLD) {
    utf8EncodeTE(str, output, outputOffset);
  } else {
    utf8EncodeJs(str, output, outputOffset);
  }
}
var CHUNK_SIZE = 4096;
function utf8DecodeJs(bytes, inputOffset, byteLength) {
  let offset = inputOffset;
  const end = offset + byteLength;
  const units = [];
  let result = "";
  while (offset < end) {
    const byte1 = bytes[offset++];
    if ((byte1 & 128) === 0) {
      units.push(byte1);
    } else if ((byte1 & 224) === 192) {
      const byte2 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 6 | byte2);
    } else if ((byte1 & 240) === 224) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 12 | byte2 << 6 | byte3);
    } else if ((byte1 & 248) === 240) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      const byte4 = bytes[offset++] & 63;
      let unit = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
      if (unit > 65535) {
        unit -= 65536;
        units.push(unit >>> 10 & 1023 | 55296);
        unit = 56320 | unit & 1023;
      }
      units.push(unit);
    } else {
      units.push(byte1);
    }
    if (units.length >= CHUNK_SIZE) {
      result += String.fromCharCode(...units);
      units.length = 0;
    }
  }
  if (units.length > 0) {
    result += String.fromCharCode(...units);
  }
  return result;
}
var sharedTextDecoder = new TextDecoder();
var TEXT_DECODER_THRESHOLD = 200;
function utf8DecodeTD(bytes, inputOffset, byteLength) {
  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);
  return sharedTextDecoder.decode(stringBytes);
}
function utf8Decode(bytes, inputOffset, byteLength) {
  if (byteLength > TEXT_DECODER_THRESHOLD) {
    return utf8DecodeTD(bytes, inputOffset, byteLength);
  } else {
    return utf8DecodeJs(bytes, inputOffset, byteLength);
  }
}

// node_modules/@msgpack/msgpack/dist.esm/ExtData.mjs
var ExtData = class {
  constructor(type, data) {
    this.type = type;
    this.data = data;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/DecodeError.mjs
var DecodeError = class _DecodeError extends Error {
  constructor(message) {
    super(message);
    const proto = Object.create(_DecodeError.prototype);
    Object.setPrototypeOf(this, proto);
    Object.defineProperty(this, "name", {
      configurable: true,
      enumerable: false,
      value: _DecodeError.name
    });
  }
};

// node_modules/@msgpack/msgpack/dist.esm/utils/int.mjs
var UINT32_MAX = 4294967295;
function setUint64(view, offset, value) {
  const high = value / 4294967296;
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function setInt64(view, offset, value) {
  const high = Math.floor(value / 4294967296);
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function getInt64(view, offset) {
  const high = view.getInt32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}
function getUint64(view, offset) {
  const high = view.getUint32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}

// node_modules/@msgpack/msgpack/dist.esm/timestamp.mjs
var EXT_TIMESTAMP = -1;
var TIMESTAMP32_MAX_SEC = 4294967296 - 1;
var TIMESTAMP64_MAX_SEC = 17179869184 - 1;
function encodeTimeSpecToTimestamp({ sec, nsec }) {
  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {
    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {
      const rv = new Uint8Array(4);
      const view = new DataView(rv.buffer);
      view.setUint32(0, sec);
      return rv;
    } else {
      const secHigh = sec / 4294967296;
      const secLow = sec & 4294967295;
      const rv = new Uint8Array(8);
      const view = new DataView(rv.buffer);
      view.setUint32(0, nsec << 2 | secHigh & 3);
      view.setUint32(4, secLow);
      return rv;
    }
  } else {
    const rv = new Uint8Array(12);
    const view = new DataView(rv.buffer);
    view.setUint32(0, nsec);
    setInt64(view, 4, sec);
    return rv;
  }
}
function encodeDateToTimeSpec(date) {
  const msec = date.getTime();
  const sec = Math.floor(msec / 1e3);
  const nsec = (msec - sec * 1e3) * 1e6;
  const nsecInSec = Math.floor(nsec / 1e9);
  return {
    sec: sec + nsecInSec,
    nsec: nsec - nsecInSec * 1e9
  };
}
function encodeTimestampExtension(object) {
  if (object instanceof Date) {
    const timeSpec = encodeDateToTimeSpec(object);
    return encodeTimeSpecToTimestamp(timeSpec);
  } else {
    return null;
  }
}
function decodeTimestampToTimeSpec(data) {
  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);
  switch (data.byteLength) {
    case 4: {
      const sec = view.getUint32(0);
      const nsec = 0;
      return { sec, nsec };
    }
    case 8: {
      const nsec30AndSecHigh2 = view.getUint32(0);
      const secLow32 = view.getUint32(4);
      const sec = (nsec30AndSecHigh2 & 3) * 4294967296 + secLow32;
      const nsec = nsec30AndSecHigh2 >>> 2;
      return { sec, nsec };
    }
    case 12: {
      const sec = getInt64(view, 4);
      const nsec = view.getUint32(0);
      return { sec, nsec };
    }
    default:
      throw new DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.length}`);
  }
}
function decodeTimestampExtension(data) {
  const timeSpec = decodeTimestampToTimeSpec(data);
  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);
}
var timestampExtension = {
  type: EXT_TIMESTAMP,
  encode: encodeTimestampExtension,
  decode: decodeTimestampExtension
};

// node_modules/@msgpack/msgpack/dist.esm/ExtensionCodec.mjs
var ExtensionCodec = class {
  constructor() {
    this.builtInEncoders = [];
    this.builtInDecoders = [];
    this.encoders = [];
    this.decoders = [];
    this.register(timestampExtension);
  }
  register({ type, encode: encode8, decode: decode8 }) {
    if (type >= 0) {
      this.encoders[type] = encode8;
      this.decoders[type] = decode8;
    } else {
      const index = -1 - type;
      this.builtInEncoders[index] = encode8;
      this.builtInDecoders[index] = decode8;
    }
  }
  tryToEncode(object, context) {
    for (let i3 = 0; i3 < this.builtInEncoders.length; i3++) {
      const encodeExt = this.builtInEncoders[i3];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = -1 - i3;
          return new ExtData(type, data);
        }
      }
    }
    for (let i3 = 0; i3 < this.encoders.length; i3++) {
      const encodeExt = this.encoders[i3];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = i3;
          return new ExtData(type, data);
        }
      }
    }
    if (object instanceof ExtData) {
      return object;
    }
    return null;
  }
  decode(data, type, context) {
    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];
    if (decodeExt) {
      return decodeExt(data, type, context);
    } else {
      return new ExtData(type, data);
    }
  }
};
ExtensionCodec.defaultCodec = new ExtensionCodec();

// node_modules/@msgpack/msgpack/dist.esm/utils/typedArrays.mjs
function isArrayBufferLike(buffer) {
  return buffer instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && buffer instanceof SharedArrayBuffer;
}
function ensureUint8Array(buffer) {
  if (buffer instanceof Uint8Array) {
    return buffer;
  } else if (ArrayBuffer.isView(buffer)) {
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
  } else if (isArrayBufferLike(buffer)) {
    return new Uint8Array(buffer);
  } else {
    return Uint8Array.from(buffer);
  }
}

// node_modules/@msgpack/msgpack/dist.esm/Encoder.mjs
var DEFAULT_MAX_DEPTH = 100;
var DEFAULT_INITIAL_BUFFER_SIZE = 2048;
var Encoder = class _Encoder {
  constructor(options) {
    this.entered = false;
    this.extensionCodec = options?.extensionCodec ?? ExtensionCodec.defaultCodec;
    this.context = options?.context;
    this.useBigInt64 = options?.useBigInt64 ?? false;
    this.maxDepth = options?.maxDepth ?? DEFAULT_MAX_DEPTH;
    this.initialBufferSize = options?.initialBufferSize ?? DEFAULT_INITIAL_BUFFER_SIZE;
    this.sortKeys = options?.sortKeys ?? false;
    this.forceFloat32 = options?.forceFloat32 ?? false;
    this.ignoreUndefined = options?.ignoreUndefined ?? false;
    this.forceIntegerToFloat = options?.forceIntegerToFloat ?? false;
    this.pos = 0;
    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));
    this.bytes = new Uint8Array(this.view.buffer);
  }
  clone() {
    return new _Encoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      maxDepth: this.maxDepth,
      initialBufferSize: this.initialBufferSize,
      sortKeys: this.sortKeys,
      forceFloat32: this.forceFloat32,
      ignoreUndefined: this.ignoreUndefined,
      forceIntegerToFloat: this.forceIntegerToFloat
    });
  }
  reinitializeState() {
    this.pos = 0;
  }
  /**
   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.
   *
   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.
   */
  encodeSharedRef(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encodeSharedRef(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.subarray(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  /**
   * @returns Encodes the object and returns a copy of the encoder's internal buffer.
   */
  encode(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encode(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.slice(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  doEncode(object, depth) {
    if (depth > this.maxDepth) {
      throw new Error(`Too deep objects in depth ${depth}`);
    }
    if (object == null) {
      this.encodeNil();
    } else if (typeof object === "boolean") {
      this.encodeBoolean(object);
    } else if (typeof object === "number") {
      if (!this.forceIntegerToFloat) {
        this.encodeNumber(object);
      } else {
        this.encodeNumberAsFloat(object);
      }
    } else if (typeof object === "string") {
      this.encodeString(object);
    } else if (this.useBigInt64 && typeof object === "bigint") {
      this.encodeBigInt64(object);
    } else {
      this.encodeObject(object, depth);
    }
  }
  ensureBufferSizeToWrite(sizeToWrite) {
    const requiredSize = this.pos + sizeToWrite;
    if (this.view.byteLength < requiredSize) {
      this.resizeBuffer(requiredSize * 2);
    }
  }
  resizeBuffer(newSize) {
    const newBuffer = new ArrayBuffer(newSize);
    const newBytes = new Uint8Array(newBuffer);
    const newView = new DataView(newBuffer);
    newBytes.set(this.bytes);
    this.view = newView;
    this.bytes = newBytes;
  }
  encodeNil() {
    this.writeU8(192);
  }
  encodeBoolean(object) {
    if (object === false) {
      this.writeU8(194);
    } else {
      this.writeU8(195);
    }
  }
  encodeNumber(object) {
    if (!this.forceIntegerToFloat && Number.isSafeInteger(object)) {
      if (object >= 0) {
        if (object < 128) {
          this.writeU8(object);
        } else if (object < 256) {
          this.writeU8(204);
          this.writeU8(object);
        } else if (object < 65536) {
          this.writeU8(205);
          this.writeU16(object);
        } else if (object < 4294967296) {
          this.writeU8(206);
          this.writeU32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(207);
          this.writeU64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      } else {
        if (object >= -32) {
          this.writeU8(224 | object + 32);
        } else if (object >= -128) {
          this.writeU8(208);
          this.writeI8(object);
        } else if (object >= -32768) {
          this.writeU8(209);
          this.writeI16(object);
        } else if (object >= -2147483648) {
          this.writeU8(210);
          this.writeI32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(211);
          this.writeI64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      }
    } else {
      this.encodeNumberAsFloat(object);
    }
  }
  encodeNumberAsFloat(object) {
    if (this.forceFloat32) {
      this.writeU8(202);
      this.writeF32(object);
    } else {
      this.writeU8(203);
      this.writeF64(object);
    }
  }
  encodeBigInt64(object) {
    if (object >= BigInt(0)) {
      this.writeU8(207);
      this.writeBigUint64(object);
    } else {
      this.writeU8(211);
      this.writeBigInt64(object);
    }
  }
  writeStringHeader(byteLength) {
    if (byteLength < 32) {
      this.writeU8(160 + byteLength);
    } else if (byteLength < 256) {
      this.writeU8(217);
      this.writeU8(byteLength);
    } else if (byteLength < 65536) {
      this.writeU8(218);
      this.writeU16(byteLength);
    } else if (byteLength < 4294967296) {
      this.writeU8(219);
      this.writeU32(byteLength);
    } else {
      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);
    }
  }
  encodeString(object) {
    const maxHeaderSize = 1 + 4;
    const byteLength = utf8Count(object);
    this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);
    this.writeStringHeader(byteLength);
    utf8Encode(object, this.bytes, this.pos);
    this.pos += byteLength;
  }
  encodeObject(object, depth) {
    const ext = this.extensionCodec.tryToEncode(object, this.context);
    if (ext != null) {
      this.encodeExtension(ext);
    } else if (Array.isArray(object)) {
      this.encodeArray(object, depth);
    } else if (ArrayBuffer.isView(object)) {
      this.encodeBinary(object);
    } else if (typeof object === "object") {
      this.encodeMap(object, depth);
    } else {
      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);
    }
  }
  encodeBinary(object) {
    const size3 = object.byteLength;
    if (size3 < 256) {
      this.writeU8(196);
      this.writeU8(size3);
    } else if (size3 < 65536) {
      this.writeU8(197);
      this.writeU16(size3);
    } else if (size3 < 4294967296) {
      this.writeU8(198);
      this.writeU32(size3);
    } else {
      throw new Error(`Too large binary: ${size3}`);
    }
    const bytes = ensureUint8Array(object);
    this.writeU8a(bytes);
  }
  encodeArray(object, depth) {
    const size3 = object.length;
    if (size3 < 16) {
      this.writeU8(144 + size3);
    } else if (size3 < 65536) {
      this.writeU8(220);
      this.writeU16(size3);
    } else if (size3 < 4294967296) {
      this.writeU8(221);
      this.writeU32(size3);
    } else {
      throw new Error(`Too large array: ${size3}`);
    }
    for (const item of object) {
      this.doEncode(item, depth + 1);
    }
  }
  countWithoutUndefined(object, keys2) {
    let count = 0;
    for (const key of keys2) {
      if (object[key] !== void 0) {
        count++;
      }
    }
    return count;
  }
  encodeMap(object, depth) {
    const keys2 = Object.keys(object);
    if (this.sortKeys) {
      keys2.sort();
    }
    const size3 = this.ignoreUndefined ? this.countWithoutUndefined(object, keys2) : keys2.length;
    if (size3 < 16) {
      this.writeU8(128 + size3);
    } else if (size3 < 65536) {
      this.writeU8(222);
      this.writeU16(size3);
    } else if (size3 < 4294967296) {
      this.writeU8(223);
      this.writeU32(size3);
    } else {
      throw new Error(`Too large map object: ${size3}`);
    }
    for (const key of keys2) {
      const value = object[key];
      if (!(this.ignoreUndefined && value === void 0)) {
        this.encodeString(key);
        this.doEncode(value, depth + 1);
      }
    }
  }
  encodeExtension(ext) {
    if (typeof ext.data === "function") {
      const data = ext.data(this.pos + 6);
      const size4 = data.length;
      if (size4 >= 4294967296) {
        throw new Error(`Too large extension object: ${size4}`);
      }
      this.writeU8(201);
      this.writeU32(size4);
      this.writeI8(ext.type);
      this.writeU8a(data);
      return;
    }
    const size3 = ext.data.length;
    if (size3 === 1) {
      this.writeU8(212);
    } else if (size3 === 2) {
      this.writeU8(213);
    } else if (size3 === 4) {
      this.writeU8(214);
    } else if (size3 === 8) {
      this.writeU8(215);
    } else if (size3 === 16) {
      this.writeU8(216);
    } else if (size3 < 256) {
      this.writeU8(199);
      this.writeU8(size3);
    } else if (size3 < 65536) {
      this.writeU8(200);
      this.writeU16(size3);
    } else if (size3 < 4294967296) {
      this.writeU8(201);
      this.writeU32(size3);
    } else {
      throw new Error(`Too large extension object: ${size3}`);
    }
    this.writeI8(ext.type);
    this.writeU8a(ext.data);
  }
  writeU8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setUint8(this.pos, value);
    this.pos++;
  }
  writeU8a(values) {
    const size3 = values.length;
    this.ensureBufferSizeToWrite(size3);
    this.bytes.set(values, this.pos);
    this.pos += size3;
  }
  writeI8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setInt8(this.pos, value);
    this.pos++;
  }
  writeU16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setUint16(this.pos, value);
    this.pos += 2;
  }
  writeI16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setInt16(this.pos, value);
    this.pos += 2;
  }
  writeU32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setUint32(this.pos, value);
    this.pos += 4;
  }
  writeI32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setInt32(this.pos, value);
    this.pos += 4;
  }
  writeF32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setFloat32(this.pos, value);
    this.pos += 4;
  }
  writeF64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setFloat64(this.pos, value);
    this.pos += 8;
  }
  writeU64(value) {
    this.ensureBufferSizeToWrite(8);
    setUint64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeI64(value) {
    this.ensureBufferSizeToWrite(8);
    setInt64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeBigUint64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigUint64(this.pos, value);
    this.pos += 8;
  }
  writeBigInt64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigInt64(this.pos, value);
    this.pos += 8;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/encode.mjs
function encode3(value, options) {
  const encoder4 = new Encoder(options);
  return encoder4.encodeSharedRef(value);
}

// node_modules/@msgpack/msgpack/dist.esm/utils/prettyByte.mjs
function prettyByte(byte) {
  return `${byte < 0 ? "-" : ""}0x${Math.abs(byte).toString(16).padStart(2, "0")}`;
}

// node_modules/@msgpack/msgpack/dist.esm/CachedKeyDecoder.mjs
var DEFAULT_MAX_KEY_LENGTH = 16;
var DEFAULT_MAX_LENGTH_PER_KEY = 16;
var CachedKeyDecoder = class {
  constructor(maxKeyLength = DEFAULT_MAX_KEY_LENGTH, maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY) {
    this.hit = 0;
    this.miss = 0;
    this.maxKeyLength = maxKeyLength;
    this.maxLengthPerKey = maxLengthPerKey;
    this.caches = [];
    for (let i3 = 0; i3 < this.maxKeyLength; i3++) {
      this.caches.push([]);
    }
  }
  canBeCached(byteLength) {
    return byteLength > 0 && byteLength <= this.maxKeyLength;
  }
  find(bytes, inputOffset, byteLength) {
    const records = this.caches[byteLength - 1];
    FIND_CHUNK: for (const record of records) {
      const recordBytes = record.bytes;
      for (let j6 = 0; j6 < byteLength; j6++) {
        if (recordBytes[j6] !== bytes[inputOffset + j6]) {
          continue FIND_CHUNK;
        }
      }
      return record.str;
    }
    return null;
  }
  store(bytes, value) {
    const records = this.caches[bytes.length - 1];
    const record = { bytes, str: value };
    if (records.length >= this.maxLengthPerKey) {
      records[Math.random() * records.length | 0] = record;
    } else {
      records.push(record);
    }
  }
  decode(bytes, inputOffset, byteLength) {
    const cachedValue = this.find(bytes, inputOffset, byteLength);
    if (cachedValue != null) {
      this.hit++;
      return cachedValue;
    }
    this.miss++;
    const str = utf8DecodeJs(bytes, inputOffset, byteLength);
    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);
    this.store(slicedCopyOfBytes, str);
    return str;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/Decoder.mjs
var STATE_ARRAY = "array";
var STATE_MAP_KEY = "map_key";
var STATE_MAP_VALUE = "map_value";
var mapKeyConverter = (key) => {
  if (typeof key === "string" || typeof key === "number") {
    return key;
  }
  throw new DecodeError("The type of key must be string or number but " + typeof key);
};
var StackPool = class {
  constructor() {
    this.stack = [];
    this.stackHeadPosition = -1;
  }
  get length() {
    return this.stackHeadPosition + 1;
  }
  top() {
    return this.stack[this.stackHeadPosition];
  }
  pushArrayState(size3) {
    const state8 = this.getUninitializedStateFromPool();
    state8.type = STATE_ARRAY;
    state8.position = 0;
    state8.size = size3;
    state8.array = new Array(size3);
  }
  pushMapState(size3) {
    const state8 = this.getUninitializedStateFromPool();
    state8.type = STATE_MAP_KEY;
    state8.readCount = 0;
    state8.size = size3;
    state8.map = {};
  }
  getUninitializedStateFromPool() {
    this.stackHeadPosition++;
    if (this.stackHeadPosition === this.stack.length) {
      const partialState = {
        type: void 0,
        size: 0,
        array: void 0,
        position: 0,
        readCount: 0,
        map: void 0,
        key: null
      };
      this.stack.push(partialState);
    }
    return this.stack[this.stackHeadPosition];
  }
  release(state8) {
    const topStackState = this.stack[this.stackHeadPosition];
    if (topStackState !== state8) {
      throw new Error("Invalid stack state. Released state is not on top of the stack.");
    }
    if (state8.type === STATE_ARRAY) {
      const partialState = state8;
      partialState.size = 0;
      partialState.array = void 0;
      partialState.position = 0;
      partialState.type = void 0;
    }
    if (state8.type === STATE_MAP_KEY || state8.type === STATE_MAP_VALUE) {
      const partialState = state8;
      partialState.size = 0;
      partialState.map = void 0;
      partialState.readCount = 0;
      partialState.type = void 0;
    }
    this.stackHeadPosition--;
  }
  reset() {
    this.stack.length = 0;
    this.stackHeadPosition = -1;
  }
};
var HEAD_BYTE_REQUIRED = -1;
var EMPTY_VIEW = new DataView(new ArrayBuffer(0));
var EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);
try {
  EMPTY_VIEW.getInt8(0);
} catch (e2) {
  if (!(e2 instanceof RangeError)) {
    throw new Error("This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access");
  }
}
var MORE_DATA = new RangeError("Insufficient data");
var sharedCachedKeyDecoder = new CachedKeyDecoder();
var Decoder = class _Decoder {
  constructor(options) {
    this.totalPos = 0;
    this.pos = 0;
    this.view = EMPTY_VIEW;
    this.bytes = EMPTY_BYTES;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack = new StackPool();
    this.entered = false;
    this.extensionCodec = options?.extensionCodec ?? ExtensionCodec.defaultCodec;
    this.context = options?.context;
    this.useBigInt64 = options?.useBigInt64 ?? false;
    this.rawStrings = options?.rawStrings ?? false;
    this.maxStrLength = options?.maxStrLength ?? UINT32_MAX;
    this.maxBinLength = options?.maxBinLength ?? UINT32_MAX;
    this.maxArrayLength = options?.maxArrayLength ?? UINT32_MAX;
    this.maxMapLength = options?.maxMapLength ?? UINT32_MAX;
    this.maxExtLength = options?.maxExtLength ?? UINT32_MAX;
    this.keyDecoder = options?.keyDecoder !== void 0 ? options.keyDecoder : sharedCachedKeyDecoder;
    this.mapKeyConverter = options?.mapKeyConverter ?? mapKeyConverter;
  }
  clone() {
    return new _Decoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      rawStrings: this.rawStrings,
      maxStrLength: this.maxStrLength,
      maxBinLength: this.maxBinLength,
      maxArrayLength: this.maxArrayLength,
      maxMapLength: this.maxMapLength,
      maxExtLength: this.maxExtLength,
      keyDecoder: this.keyDecoder
    });
  }
  reinitializeState() {
    this.totalPos = 0;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack.reset();
  }
  setBuffer(buffer) {
    const bytes = ensureUint8Array(buffer);
    this.bytes = bytes;
    this.view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    this.pos = 0;
  }
  appendBuffer(buffer) {
    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {
      this.setBuffer(buffer);
    } else {
      const remainingData = this.bytes.subarray(this.pos);
      const newData = ensureUint8Array(buffer);
      const newBuffer = new Uint8Array(remainingData.length + newData.length);
      newBuffer.set(remainingData);
      newBuffer.set(newData, remainingData.length);
      this.setBuffer(newBuffer);
    }
  }
  hasRemaining(size3) {
    return this.view.byteLength - this.pos >= size3;
  }
  createExtraByteError(posToShow) {
    const { view, pos } = this;
    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);
  }
  /**
   * @throws {@link DecodeError}
   * @throws {@link RangeError}
   */
  decode(buffer) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decode(buffer);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer);
      const object = this.doDecodeSync();
      if (this.hasRemaining(1)) {
        throw this.createExtraByteError(this.pos);
      }
      return object;
    } finally {
      this.entered = false;
    }
  }
  *decodeMulti(buffer) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMulti(buffer);
      return;
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer);
      while (this.hasRemaining(1)) {
        yield this.doDecodeSync();
      }
    } finally {
      this.entered = false;
    }
  }
  async decodeAsync(stream) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decodeAsync(stream);
    }
    try {
      this.entered = true;
      let decoded = false;
      let object;
      for await (const buffer of stream) {
        if (decoded) {
          this.entered = false;
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer);
        try {
          object = this.doDecodeSync();
          decoded = true;
        } catch (e2) {
          if (!(e2 instanceof RangeError)) {
            throw e2;
          }
        }
        this.totalPos += this.pos;
      }
      if (decoded) {
        if (this.hasRemaining(1)) {
          throw this.createExtraByteError(this.totalPos);
        }
        return object;
      }
      const { headByte, pos, totalPos } = this;
      throw new RangeError(`Insufficient data in parsing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`);
    } finally {
      this.entered = false;
    }
  }
  decodeArrayStream(stream) {
    return this.decodeMultiAsync(stream, true);
  }
  decodeStream(stream) {
    return this.decodeMultiAsync(stream, false);
  }
  async *decodeMultiAsync(stream, isArray2) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMultiAsync(stream, isArray2);
      return;
    }
    try {
      this.entered = true;
      let isArrayHeaderRequired = isArray2;
      let arrayItemsLeft = -1;
      for await (const buffer of stream) {
        if (isArray2 && arrayItemsLeft === 0) {
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer);
        if (isArrayHeaderRequired) {
          arrayItemsLeft = this.readArraySize();
          isArrayHeaderRequired = false;
          this.complete();
        }
        try {
          while (true) {
            yield this.doDecodeSync();
            if (--arrayItemsLeft === 0) {
              break;
            }
          }
        } catch (e2) {
          if (!(e2 instanceof RangeError)) {
            throw e2;
          }
        }
        this.totalPos += this.pos;
      }
    } finally {
      this.entered = false;
    }
  }
  doDecodeSync() {
    DECODE: while (true) {
      const headByte = this.readHeadByte();
      let object;
      if (headByte >= 224) {
        object = headByte - 256;
      } else if (headByte < 192) {
        if (headByte < 128) {
          object = headByte;
        } else if (headByte < 144) {
          const size3 = headByte - 128;
          if (size3 !== 0) {
            this.pushMapState(size3);
            this.complete();
            continue DECODE;
          } else {
            object = {};
          }
        } else if (headByte < 160) {
          const size3 = headByte - 144;
          if (size3 !== 0) {
            this.pushArrayState(size3);
            this.complete();
            continue DECODE;
          } else {
            object = [];
          }
        } else {
          const byteLength = headByte - 160;
          object = this.decodeString(byteLength, 0);
        }
      } else if (headByte === 192) {
        object = null;
      } else if (headByte === 194) {
        object = false;
      } else if (headByte === 195) {
        object = true;
      } else if (headByte === 202) {
        object = this.readF32();
      } else if (headByte === 203) {
        object = this.readF64();
      } else if (headByte === 204) {
        object = this.readU8();
      } else if (headByte === 205) {
        object = this.readU16();
      } else if (headByte === 206) {
        object = this.readU32();
      } else if (headByte === 207) {
        if (this.useBigInt64) {
          object = this.readU64AsBigInt();
        } else {
          object = this.readU64();
        }
      } else if (headByte === 208) {
        object = this.readI8();
      } else if (headByte === 209) {
        object = this.readI16();
      } else if (headByte === 210) {
        object = this.readI32();
      } else if (headByte === 211) {
        if (this.useBigInt64) {
          object = this.readI64AsBigInt();
        } else {
          object = this.readI64();
        }
      } else if (headByte === 217) {
        const byteLength = this.lookU8();
        object = this.decodeString(byteLength, 1);
      } else if (headByte === 218) {
        const byteLength = this.lookU16();
        object = this.decodeString(byteLength, 2);
      } else if (headByte === 219) {
        const byteLength = this.lookU32();
        object = this.decodeString(byteLength, 4);
      } else if (headByte === 220) {
        const size3 = this.readU16();
        if (size3 !== 0) {
          this.pushArrayState(size3);
          this.complete();
          continue DECODE;
        } else {
          object = [];
        }
      } else if (headByte === 221) {
        const size3 = this.readU32();
        if (size3 !== 0) {
          this.pushArrayState(size3);
          this.complete();
          continue DECODE;
        } else {
          object = [];
        }
      } else if (headByte === 222) {
        const size3 = this.readU16();
        if (size3 !== 0) {
          this.pushMapState(size3);
          this.complete();
          continue DECODE;
        } else {
          object = {};
        }
      } else if (headByte === 223) {
        const size3 = this.readU32();
        if (size3 !== 0) {
          this.pushMapState(size3);
          this.complete();
          continue DECODE;
        } else {
          object = {};
        }
      } else if (headByte === 196) {
        const size3 = this.lookU8();
        object = this.decodeBinary(size3, 1);
      } else if (headByte === 197) {
        const size3 = this.lookU16();
        object = this.decodeBinary(size3, 2);
      } else if (headByte === 198) {
        const size3 = this.lookU32();
        object = this.decodeBinary(size3, 4);
      } else if (headByte === 212) {
        object = this.decodeExtension(1, 0);
      } else if (headByte === 213) {
        object = this.decodeExtension(2, 0);
      } else if (headByte === 214) {
        object = this.decodeExtension(4, 0);
      } else if (headByte === 215) {
        object = this.decodeExtension(8, 0);
      } else if (headByte === 216) {
        object = this.decodeExtension(16, 0);
      } else if (headByte === 199) {
        const size3 = this.lookU8();
        object = this.decodeExtension(size3, 1);
      } else if (headByte === 200) {
        const size3 = this.lookU16();
        object = this.decodeExtension(size3, 2);
      } else if (headByte === 201) {
        const size3 = this.lookU32();
        object = this.decodeExtension(size3, 4);
      } else {
        throw new DecodeError(`Unrecognized type byte: ${prettyByte(headByte)}`);
      }
      this.complete();
      const stack = this.stack;
      while (stack.length > 0) {
        const state8 = stack.top();
        if (state8.type === STATE_ARRAY) {
          state8.array[state8.position] = object;
          state8.position++;
          if (state8.position === state8.size) {
            object = state8.array;
            stack.release(state8);
          } else {
            continue DECODE;
          }
        } else if (state8.type === STATE_MAP_KEY) {
          if (object === "__proto__") {
            throw new DecodeError("The key __proto__ is not allowed");
          }
          state8.key = this.mapKeyConverter(object);
          state8.type = STATE_MAP_VALUE;
          continue DECODE;
        } else {
          state8.map[state8.key] = object;
          state8.readCount++;
          if (state8.readCount === state8.size) {
            object = state8.map;
            stack.release(state8);
          } else {
            state8.key = null;
            state8.type = STATE_MAP_KEY;
            continue DECODE;
          }
        }
      }
      return object;
    }
  }
  readHeadByte() {
    if (this.headByte === HEAD_BYTE_REQUIRED) {
      this.headByte = this.readU8();
    }
    return this.headByte;
  }
  complete() {
    this.headByte = HEAD_BYTE_REQUIRED;
  }
  readArraySize() {
    const headByte = this.readHeadByte();
    switch (headByte) {
      case 220:
        return this.readU16();
      case 221:
        return this.readU32();
      default: {
        if (headByte < 160) {
          return headByte - 144;
        } else {
          throw new DecodeError(`Unrecognized array type byte: ${prettyByte(headByte)}`);
        }
      }
    }
  }
  pushMapState(size3) {
    if (size3 > this.maxMapLength) {
      throw new DecodeError(`Max length exceeded: map length (${size3}) > maxMapLengthLength (${this.maxMapLength})`);
    }
    this.stack.pushMapState(size3);
  }
  pushArrayState(size3) {
    if (size3 > this.maxArrayLength) {
      throw new DecodeError(`Max length exceeded: array length (${size3}) > maxArrayLength (${this.maxArrayLength})`);
    }
    this.stack.pushArrayState(size3);
  }
  decodeString(byteLength, headerOffset) {
    if (!this.rawStrings || this.stateIsMapKey()) {
      return this.decodeUtf8String(byteLength, headerOffset);
    }
    return this.decodeBinary(byteLength, headerOffset);
  }
  /**
   * @throws {@link RangeError}
   */
  decodeUtf8String(byteLength, headerOffset) {
    if (byteLength > this.maxStrLength) {
      throw new DecodeError(`Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`);
    }
    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {
      throw MORE_DATA;
    }
    const offset = this.pos + headerOffset;
    let object;
    if (this.stateIsMapKey() && this.keyDecoder?.canBeCached(byteLength)) {
      object = this.keyDecoder.decode(this.bytes, offset, byteLength);
    } else {
      object = utf8Decode(this.bytes, offset, byteLength);
    }
    this.pos += headerOffset + byteLength;
    return object;
  }
  stateIsMapKey() {
    if (this.stack.length > 0) {
      const state8 = this.stack.top();
      return state8.type === STATE_MAP_KEY;
    }
    return false;
  }
  /**
   * @throws {@link RangeError}
   */
  decodeBinary(byteLength, headOffset) {
    if (byteLength > this.maxBinLength) {
      throw new DecodeError(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);
    }
    if (!this.hasRemaining(byteLength + headOffset)) {
      throw MORE_DATA;
    }
    const offset = this.pos + headOffset;
    const object = this.bytes.subarray(offset, offset + byteLength);
    this.pos += headOffset + byteLength;
    return object;
  }
  decodeExtension(size3, headOffset) {
    if (size3 > this.maxExtLength) {
      throw new DecodeError(`Max length exceeded: ext length (${size3}) > maxExtLength (${this.maxExtLength})`);
    }
    const extType = this.view.getInt8(this.pos + headOffset);
    const data = this.decodeBinary(
      size3,
      headOffset + 1
      /* extType */
    );
    return this.extensionCodec.decode(data, extType, this.context);
  }
  lookU8() {
    return this.view.getUint8(this.pos);
  }
  lookU16() {
    return this.view.getUint16(this.pos);
  }
  lookU32() {
    return this.view.getUint32(this.pos);
  }
  readU8() {
    const value = this.view.getUint8(this.pos);
    this.pos++;
    return value;
  }
  readI8() {
    const value = this.view.getInt8(this.pos);
    this.pos++;
    return value;
  }
  readU16() {
    const value = this.view.getUint16(this.pos);
    this.pos += 2;
    return value;
  }
  readI16() {
    const value = this.view.getInt16(this.pos);
    this.pos += 2;
    return value;
  }
  readU32() {
    const value = this.view.getUint32(this.pos);
    this.pos += 4;
    return value;
  }
  readI32() {
    const value = this.view.getInt32(this.pos);
    this.pos += 4;
    return value;
  }
  readU64() {
    const value = getUint64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readI64() {
    const value = getInt64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readU64AsBigInt() {
    const value = this.view.getBigUint64(this.pos);
    this.pos += 8;
    return value;
  }
  readI64AsBigInt() {
    const value = this.view.getBigInt64(this.pos);
    this.pos += 8;
    return value;
  }
  readF32() {
    const value = this.view.getFloat32(this.pos);
    this.pos += 4;
    return value;
  }
  readF64() {
    const value = this.view.getFloat64(this.pos);
    this.pos += 8;
    return value;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/decode.mjs
function decode2(buffer, options) {
  const decoder3 = new Decoder(options);
  return decoder3.decode(buffer);
}

// node_modules/uint8arrays/esm/src/util/as-uint8array.js
function asUint8Array(buf) {
  if (globalThis.Buffer != null) {
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }
  return buf;
}

// node_modules/uint8arrays/esm/src/alloc.js
function allocUnsafe(size3 = 0) {
  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
    return asUint8Array(globalThis.Buffer.allocUnsafe(size3));
  }
  return new Uint8Array(size3);
}

// node_modules/uint8arrays/esm/src/concat.js
function concat3(arrays, length2) {
  if (!length2) {
    length2 = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = allocUnsafe(length2);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return asUint8Array(output);
}

// node_modules/multiformats/esm/src/bases/identity.js
var identity_exports = {};
__export(identity_exports, {
  identity: () => identity
});

// node_modules/multiformats/esm/vendor/base-x.js
function base2(ALPHABET2, name2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  var BASE_MAP = new Uint8Array(256);
  for (var j6 = 0; j6 < BASE_MAP.length; j6++) {
    BASE_MAP[j6] = 255;
  }
  for (var i3 = 0; i3 < ALPHABET2.length; i3++) {
    var x5 = ALPHABET2.charAt(i3);
    var xc2 = x5.charCodeAt(0);
    if (BASE_MAP[xc2] !== 255) {
      throw new TypeError(x5 + " is ambiguous");
    }
    BASE_MAP[xc2] = i3;
  }
  var BASE = ALPHABET2.length;
  var LEADER = ALPHABET2.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256);
  var iFACTOR = Math.log(256) / Math.log(BASE);
  function encode8(source) {
    if (source instanceof Uint8Array) ;
    else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    var zeroes = 0;
    var length2 = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    var size3 = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size3);
    while (pbegin !== pend) {
      var carry = source[pbegin];
      var i4 = 0;
      for (var it1 = size3 - 1; (carry !== 0 || i4 < length2) && it1 !== -1; it1--, i4++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i4;
      pbegin++;
    }
    var it22 = size3 - length2;
    while (it22 !== size3 && b58[it22] === 0) {
      it22++;
    }
    var str = LEADER.repeat(zeroes);
    for (; it22 < size3; ++it22) {
      str += ALPHABET2.charAt(b58[it22]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    var psz = 0;
    if (source[psz] === " ") {
      return;
    }
    var zeroes = 0;
    var length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    var size3 = (source.length - psz) * FACTOR + 1 >>> 0;
    var b256 = new Uint8Array(size3);
    while (source[psz]) {
      var carry = BASE_MAP[source.charCodeAt(psz)];
      if (carry === 255) {
        return;
      }
      var i4 = 0;
      for (var it32 = size3 - 1; (carry !== 0 || i4 < length2) && it32 !== -1; it32--, i4++) {
        carry += BASE * b256[it32] >>> 0;
        b256[it32] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i4;
      psz++;
    }
    if (source[psz] === " ") {
      return;
    }
    var it4 = size3 - length2;
    while (it4 !== size3 && b256[it4] === 0) {
      it4++;
    }
    var vch = new Uint8Array(zeroes + (size3 - it4));
    var j7 = zeroes;
    while (it4 !== size3) {
      vch[j7++] = b256[it4++];
    }
    return vch;
  }
  function decode8(string2) {
    var buffer = decodeUnsafe(string2);
    if (buffer) {
      return buffer;
    }
    throw new Error(`Non-${name2} character`);
  }
  return {
    encode: encode8,
    decodeUnsafe,
    decode: decode8
  };
}
var src = base2;
var _brrp__multiformats_scope_baseX = src;
var base_x_default = _brrp__multiformats_scope_baseX;

// node_modules/multiformats/esm/src/bytes.js
var empty = new Uint8Array(0);
var equals = (aa2, bb) => {
  if (aa2 === bb)
    return true;
  if (aa2.byteLength !== bb.byteLength) {
    return false;
  }
  for (let ii3 = 0; ii3 < aa2.byteLength; ii3++) {
    if (aa2[ii3] !== bb[ii3]) {
      return false;
    }
  }
  return true;
};
var coerce = (o5) => {
  if (o5 instanceof Uint8Array && o5.constructor.name === "Uint8Array")
    return o5;
  if (o5 instanceof ArrayBuffer)
    return new Uint8Array(o5);
  if (ArrayBuffer.isView(o5)) {
    return new Uint8Array(o5.buffer, o5.byteOffset, o5.byteLength);
  }
  throw new Error("Unknown type, must be binary type");
};
var fromString3 = (str) => new TextEncoder().encode(str);
var toString3 = (b4) => new TextDecoder().decode(b4);

// node_modules/multiformats/esm/src/bases/base.js
var Encoder2 = class {
  constructor(name2, prefix, baseEncode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
  }
  encode(bytes) {
    if (bytes instanceof Uint8Array) {
      return `${this.prefix}${this.baseEncode(bytes)}`;
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};
var Decoder2 = class {
  constructor(name2, prefix, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    if (prefix.codePointAt(0) === void 0) {
      throw new Error("Invalid prefix character");
    }
    this.prefixCodePoint = prefix.codePointAt(0);
    this.baseDecode = baseDecode;
  }
  decode(text) {
    if (typeof text === "string") {
      if (text.codePointAt(0) !== this.prefixCodePoint) {
        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      }
      return this.baseDecode(text.slice(this.prefix.length));
    } else {
      throw Error("Can only multibase decode strings");
    }
  }
  or(decoder3) {
    return or2(this, decoder3);
  }
};
var ComposedDecoder = class {
  constructor(decoders) {
    this.decoders = decoders;
  }
  or(decoder3) {
    return or2(this, decoder3);
  }
  decode(input) {
    const prefix = input[0];
    const decoder3 = this.decoders[prefix];
    if (decoder3) {
      return decoder3.decode(input);
    } else {
      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
  }
};
var or2 = (left, right) => new ComposedDecoder({
  ...left.decoders || { [left.prefix]: left },
  ...right.decoders || { [right.prefix]: right }
});
var Codec = class {
  constructor(name2, prefix, baseEncode, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
    this.baseDecode = baseDecode;
    this.encoder = new Encoder2(name2, prefix, baseEncode);
    this.decoder = new Decoder2(name2, prefix, baseDecode);
  }
  encode(input) {
    return this.encoder.encode(input);
  }
  decode(input) {
    return this.decoder.decode(input);
  }
};
var from9 = ({ name: name2, prefix, encode: encode8, decode: decode8 }) => new Codec(name2, prefix, encode8, decode8);
var baseX = ({ prefix, name: name2, alphabet: alphabet3 }) => {
  const { encode: encode8, decode: decode8 } = base_x_default(alphabet3, name2);
  return from9({
    prefix,
    name: name2,
    encode: encode8,
    decode: (text) => coerce(decode8(text))
  });
};
var decode3 = (string2, alphabet3, bitsPerChar, name2) => {
  const codes = {};
  for (let i3 = 0; i3 < alphabet3.length; ++i3) {
    codes[alphabet3[i3]] = i3;
  }
  let end = string2.length;
  while (string2[end - 1] === "=") {
    --end;
  }
  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
  let bits = 0;
  let buffer = 0;
  let written = 0;
  for (let i3 = 0; i3 < end; ++i3) {
    const value = codes[string2[i3]];
    if (value === void 0) {
      throw new SyntaxError(`Non-${name2} character`);
    }
    buffer = buffer << bitsPerChar | value;
    bits += bitsPerChar;
    if (bits >= 8) {
      bits -= 8;
      out[written++] = 255 & buffer >> bits;
    }
  }
  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
    throw new SyntaxError("Unexpected end of data");
  }
  return out;
};
var encode4 = (data, alphabet3, bitsPerChar) => {
  const pad3 = alphabet3[alphabet3.length - 1] === "=";
  const mask = (1 << bitsPerChar) - 1;
  let out = "";
  let bits = 0;
  let buffer = 0;
  for (let i3 = 0; i3 < data.length; ++i3) {
    buffer = buffer << 8 | data[i3];
    bits += 8;
    while (bits > bitsPerChar) {
      bits -= bitsPerChar;
      out += alphabet3[mask & buffer >> bits];
    }
  }
  if (bits) {
    out += alphabet3[mask & buffer << bitsPerChar - bits];
  }
  if (pad3) {
    while (out.length * bitsPerChar & 7) {
      out += "=";
    }
  }
  return out;
};
var rfc4648 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet3 }) => {
  return from9({
    prefix,
    name: name2,
    encode(input) {
      return encode4(input, alphabet3, bitsPerChar);
    },
    decode(input) {
      return decode3(input, alphabet3, bitsPerChar, name2);
    }
  });
};

// node_modules/multiformats/esm/src/bases/identity.js
var identity = from9({
  prefix: "\0",
  name: "identity",
  encode: (buf) => toString3(buf),
  decode: (str) => fromString3(str)
});

// node_modules/multiformats/esm/src/bases/base2.js
var base2_exports = {};
__export(base2_exports, {
  base2: () => base22
});
var base22 = rfc4648({
  prefix: "0",
  name: "base2",
  alphabet: "01",
  bitsPerChar: 1
});

// node_modules/multiformats/esm/src/bases/base8.js
var base8_exports = {};
__export(base8_exports, {
  base8: () => base8
});
var base8 = rfc4648({
  prefix: "7",
  name: "base8",
  alphabet: "01234567",
  bitsPerChar: 3
});

// node_modules/multiformats/esm/src/bases/base10.js
var base10_exports = {};
__export(base10_exports, {
  base10: () => base10
});
var base10 = baseX({
  prefix: "9",
  name: "base10",
  alphabet: "0123456789"
});

// node_modules/multiformats/esm/src/bases/base16.js
var base16_exports = {};
__export(base16_exports, {
  base16: () => base162,
  base16upper: () => base16upper
});
var base162 = rfc4648({
  prefix: "f",
  name: "base16",
  alphabet: "0123456789abcdef",
  bitsPerChar: 4
});
var base16upper = rfc4648({
  prefix: "F",
  name: "base16upper",
  alphabet: "0123456789ABCDEF",
  bitsPerChar: 4
});

// node_modules/multiformats/esm/src/bases/base32.js
var base32_exports = {};
__export(base32_exports, {
  base32: () => base322,
  base32hex: () => base32hex2,
  base32hexpad: () => base32hexpad,
  base32hexpadupper: () => base32hexpadupper,
  base32hexupper: () => base32hexupper,
  base32pad: () => base32pad,
  base32padupper: () => base32padupper,
  base32upper: () => base32upper,
  base32z: () => base32z
});
var base322 = rfc4648({
  prefix: "b",
  name: "base32",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567",
  bitsPerChar: 5
});
var base32upper = rfc4648({
  prefix: "B",
  name: "base32upper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
  bitsPerChar: 5
});
var base32pad = rfc4648({
  prefix: "c",
  name: "base32pad",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
  bitsPerChar: 5
});
var base32padupper = rfc4648({
  prefix: "C",
  name: "base32padupper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
  bitsPerChar: 5
});
var base32hex2 = rfc4648({
  prefix: "v",
  name: "base32hex",
  alphabet: "0123456789abcdefghijklmnopqrstuv",
  bitsPerChar: 5
});
var base32hexupper = rfc4648({
  prefix: "V",
  name: "base32hexupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
  bitsPerChar: 5
});
var base32hexpad = rfc4648({
  prefix: "t",
  name: "base32hexpad",
  alphabet: "0123456789abcdefghijklmnopqrstuv=",
  bitsPerChar: 5
});
var base32hexpadupper = rfc4648({
  prefix: "T",
  name: "base32hexpadupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
  bitsPerChar: 5
});
var base32z = rfc4648({
  prefix: "h",
  name: "base32z",
  alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
  bitsPerChar: 5
});

// node_modules/multiformats/esm/src/bases/base36.js
var base36_exports = {};
__export(base36_exports, {
  base36: () => base36,
  base36upper: () => base36upper
});
var base36 = baseX({
  prefix: "k",
  name: "base36",
  alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
});
var base36upper = baseX({
  prefix: "K",
  name: "base36upper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
});

// node_modules/multiformats/esm/src/bases/base58.js
var base58_exports2 = {};
__export(base58_exports2, {
  base58btc: () => base58btc,
  base58flickr: () => base58flickr2
});
var base58btc = baseX({
  name: "base58btc",
  prefix: "z",
  alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
});
var base58flickr2 = baseX({
  name: "base58flickr",
  prefix: "Z",
  alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
});

// node_modules/multiformats/esm/src/bases/base64.js
var base64_exports = {};
__export(base64_exports, {
  base64: () => base642,
  base64pad: () => base64pad,
  base64url: () => base64url2,
  base64urlpad: () => base64urlpad
});
var base642 = rfc4648({
  prefix: "m",
  name: "base64",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  bitsPerChar: 6
});
var base64pad = rfc4648({
  prefix: "M",
  name: "base64pad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  bitsPerChar: 6
});
var base64url2 = rfc4648({
  prefix: "u",
  name: "base64url",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
  bitsPerChar: 6
});
var base64urlpad = rfc4648({
  prefix: "U",
  name: "base64urlpad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
  bitsPerChar: 6
});

// node_modules/multiformats/esm/src/bases/base256emoji.js
var base256emoji_exports = {};
__export(base256emoji_exports, {
  base256emoji: () => base256emoji
});
var alphabet2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var alphabetBytesToChars = alphabet2.reduce((p4, c6, i3) => {
  p4[i3] = c6;
  return p4;
}, []);
var alphabetCharsToBytes = alphabet2.reduce((p4, c6, i3) => {
  p4[c6.codePointAt(0)] = i3;
  return p4;
}, []);
function encode5(data) {
  return data.reduce((p4, c6) => {
    p4 += alphabetBytesToChars[c6];
    return p4;
  }, "");
}
function decode4(str) {
  const byts = [];
  for (const char of str) {
    const byt = alphabetCharsToBytes[char.codePointAt(0)];
    if (byt === void 0) {
      throw new Error(`Non-base256emoji character: ${char}`);
    }
    byts.push(byt);
  }
  return new Uint8Array(byts);
}
var base256emoji = from9({
  prefix: "🚀",
  name: "base256emoji",
  encode: encode5,
  decode: decode4
});

// node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha2_browser_exports = {};
__export(sha2_browser_exports, {
  sha256: () => sha2564,
  sha512: () => sha5122
});

// node_modules/multiformats/esm/vendor/varint.js
var encode_1 = encode6;
var MSB = 128;
var REST = 127;
var MSBALL = ~REST;
var INT = Math.pow(2, 31);
function encode6(num3, out, offset) {
  out = out || [];
  offset = offset || 0;
  var oldOffset = offset;
  while (num3 >= INT) {
    out[offset++] = num3 & 255 | MSB;
    num3 /= 128;
  }
  while (num3 & MSBALL) {
    out[offset++] = num3 & 255 | MSB;
    num3 >>>= 7;
  }
  out[offset] = num3 | 0;
  encode6.bytes = offset - oldOffset + 1;
  return out;
}
var decode5 = read;
var MSB$1 = 128;
var REST$1 = 127;
function read(buf, offset) {
  var res = 0, offset = offset || 0, shift = 0, counter = offset, b4, l6 = buf.length;
  do {
    if (counter >= l6) {
      read.bytes = 0;
      throw new RangeError("Could not decode varint");
    }
    b4 = buf[counter++];
    res += shift < 28 ? (b4 & REST$1) << shift : (b4 & REST$1) * Math.pow(2, shift);
    shift += 7;
  } while (b4 >= MSB$1);
  read.bytes = counter - offset;
  return res;
}
var N1 = Math.pow(2, 7);
var N22 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);
var length = function(value) {
  return value < N1 ? 1 : value < N22 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};
var varint = {
  encode: encode_1,
  decode: decode5,
  encodingLength: length
};
var _brrp_varint = varint;
var varint_default = _brrp_varint;

// node_modules/multiformats/esm/src/varint.js
var decode6 = (data, offset = 0) => {
  const code2 = varint_default.decode(data, offset);
  return [
    code2,
    varint_default.decode.bytes
  ];
};
var encodeTo = (int, target, offset = 0) => {
  varint_default.encode(int, target, offset);
  return target;
};
var encodingLength = (int) => {
  return varint_default.encodingLength(int);
};

// node_modules/multiformats/esm/src/hashes/digest.js
var create3 = (code2, digest2) => {
  const size3 = digest2.byteLength;
  const sizeOffset = encodingLength(code2);
  const digestOffset = sizeOffset + encodingLength(size3);
  const bytes = new Uint8Array(digestOffset + size3);
  encodeTo(code2, bytes, 0);
  encodeTo(size3, bytes, sizeOffset);
  bytes.set(digest2, digestOffset);
  return new Digest(code2, size3, digest2, bytes);
};
var decode7 = (multihash) => {
  const bytes = coerce(multihash);
  const [code2, sizeOffset] = decode6(bytes);
  const [size3, digestOffset] = decode6(bytes.subarray(sizeOffset));
  const digest2 = bytes.subarray(sizeOffset + digestOffset);
  if (digest2.byteLength !== size3) {
    throw new Error("Incorrect length");
  }
  return new Digest(code2, size3, digest2, bytes);
};
var equals2 = (a3, b4) => {
  if (a3 === b4) {
    return true;
  } else {
    return a3.code === b4.code && a3.size === b4.size && equals(a3.bytes, b4.bytes);
  }
};
var Digest = class {
  constructor(code2, size3, digest2, bytes) {
    this.code = code2;
    this.size = size3;
    this.digest = digest2;
    this.bytes = bytes;
  }
};

// node_modules/multiformats/esm/src/hashes/hasher.js
var from10 = ({ name: name2, code: code2, encode: encode8 }) => new Hasher(name2, code2, encode8);
var Hasher = class {
  constructor(name2, code2, encode8) {
    this.name = name2;
    this.code = code2;
    this.encode = encode8;
  }
  digest(input) {
    if (input instanceof Uint8Array) {
      const result = this.encode(input);
      return result instanceof Uint8Array ? create3(this.code, result) : result.then((digest2) => create3(this.code, digest2));
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};

// node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha = (name2) => async (data) => new Uint8Array(await crypto.subtle.digest(name2, data));
var sha2564 = from10({
  name: "sha2-256",
  code: 18,
  encode: sha("SHA-256")
});
var sha5122 = from10({
  name: "sha2-512",
  code: 19,
  encode: sha("SHA-512")
});

// node_modules/multiformats/esm/src/hashes/identity.js
var identity_exports2 = {};
__export(identity_exports2, {
  identity: () => identity2
});
var code = 0;
var name = "identity";
var encode7 = coerce;
var digest = (input) => create3(code, encode7(input));
var identity2 = {
  code,
  name,
  encode: encode7,
  digest
};

// node_modules/multiformats/esm/src/codecs/json.js
var textEncoder = new TextEncoder();
var textDecoder = new TextDecoder();

// node_modules/multiformats/esm/src/cid.js
var CID = class _CID {
  constructor(version4, code2, multihash, bytes) {
    this.code = code2;
    this.version = version4;
    this.multihash = multihash;
    this.bytes = bytes;
    this.byteOffset = bytes.byteOffset;
    this.byteLength = bytes.byteLength;
    this.asCID = this;
    this._baseCache = /* @__PURE__ */ new Map();
    Object.defineProperties(this, {
      byteOffset: hidden,
      byteLength: hidden,
      code: readonly,
      version: readonly,
      multihash: readonly,
      bytes: readonly,
      _baseCache: hidden,
      asCID: hidden
    });
  }
  toV0() {
    switch (this.version) {
      case 0: {
        return this;
      }
      default: {
        const { code: code2, multihash } = this;
        if (code2 !== DAG_PB_CODE) {
          throw new Error("Cannot convert a non dag-pb CID to CIDv0");
        }
        if (multihash.code !== SHA_256_CODE) {
          throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
        }
        return _CID.createV0(multihash);
      }
    }
  }
  toV1() {
    switch (this.version) {
      case 0: {
        const { code: code2, digest: digest2 } = this.multihash;
        const multihash = create3(code2, digest2);
        return _CID.createV1(this.code, multihash);
      }
      case 1: {
        return this;
      }
      default: {
        throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
      }
    }
  }
  equals(other) {
    return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);
  }
  toString(base3) {
    const { bytes, version: version4, _baseCache } = this;
    switch (version4) {
      case 0:
        return toStringV0(bytes, _baseCache, base3 || base58btc.encoder);
      default:
        return toStringV1(bytes, _baseCache, base3 || base322.encoder);
    }
  }
  toJSON() {
    return {
      code: this.code,
      version: this.version,
      hash: this.multihash.bytes
    };
  }
  get [Symbol.toStringTag]() {
    return "CID";
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return "CID(" + this.toString() + ")";
  }
  static isCID(value) {
    deprecate(/^0\.0/, IS_CID_DEPRECATION);
    return !!(value && (value[cidSymbol] || value.asCID === value));
  }
  get toBaseEncodedString() {
    throw new Error("Deprecated, use .toString()");
  }
  get codec() {
    throw new Error('"codec" property is deprecated, use integer "code" property instead');
  }
  get buffer() {
    throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
  }
  get multibaseName() {
    throw new Error('"multibaseName" property is deprecated');
  }
  get prefix() {
    throw new Error('"prefix" property is deprecated');
  }
  static asCID(value) {
    if (value instanceof _CID) {
      return value;
    } else if (value != null && value.asCID === value) {
      const { version: version4, code: code2, multihash, bytes } = value;
      return new _CID(version4, code2, multihash, bytes || encodeCID(version4, code2, multihash.bytes));
    } else if (value != null && value[cidSymbol] === true) {
      const { version: version4, multihash, code: code2 } = value;
      const digest2 = decode7(multihash);
      return _CID.create(version4, code2, digest2);
    } else {
      return null;
    }
  }
  static create(version4, code2, digest2) {
    if (typeof code2 !== "number") {
      throw new Error("String codecs are no longer supported");
    }
    switch (version4) {
      case 0: {
        if (code2 !== DAG_PB_CODE) {
          throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
        } else {
          return new _CID(version4, code2, digest2, digest2.bytes);
        }
      }
      case 1: {
        const bytes = encodeCID(version4, code2, digest2.bytes);
        return new _CID(version4, code2, digest2, bytes);
      }
      default: {
        throw new Error("Invalid version");
      }
    }
  }
  static createV0(digest2) {
    return _CID.create(0, DAG_PB_CODE, digest2);
  }
  static createV1(code2, digest2) {
    return _CID.create(1, code2, digest2);
  }
  static decode(bytes) {
    const [cid, remainder] = _CID.decodeFirst(bytes);
    if (remainder.length) {
      throw new Error("Incorrect length");
    }
    return cid;
  }
  static decodeFirst(bytes) {
    const specs = _CID.inspectBytes(bytes);
    const prefixSize = specs.size - specs.multihashSize;
    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
    if (multihashBytes.byteLength !== specs.multihashSize) {
      throw new Error("Incorrect length");
    }
    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
    const digest2 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
    const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
    return [
      cid,
      bytes.subarray(specs.size)
    ];
  }
  static inspectBytes(initialBytes) {
    let offset = 0;
    const next = () => {
      const [i3, length2] = decode6(initialBytes.subarray(offset));
      offset += length2;
      return i3;
    };
    let version4 = next();
    let codec = DAG_PB_CODE;
    if (version4 === 18) {
      version4 = 0;
      offset = 0;
    } else if (version4 === 1) {
      codec = next();
    }
    if (version4 !== 0 && version4 !== 1) {
      throw new RangeError(`Invalid CID version ${version4}`);
    }
    const prefixSize = offset;
    const multihashCode = next();
    const digestSize = next();
    const size3 = offset + digestSize;
    const multihashSize = size3 - prefixSize;
    return {
      version: version4,
      codec,
      multihashCode,
      digestSize,
      multihashSize,
      size: size3
    };
  }
  static parse(source, base3) {
    const [prefix, bytes] = parseCIDtoBytes(source, base3);
    const cid = _CID.decode(bytes);
    cid._baseCache.set(prefix, source);
    return cid;
  }
};
var parseCIDtoBytes = (source, base3) => {
  switch (source[0]) {
    case "Q": {
      const decoder3 = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder3.decode(`${base58btc.prefix}${source}`)
      ];
    }
    case base58btc.prefix: {
      const decoder3 = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder3.decode(source)
      ];
    }
    case base322.prefix: {
      const decoder3 = base3 || base322;
      return [
        base322.prefix,
        decoder3.decode(source)
      ];
    }
    default: {
      if (base3 == null) {
        throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
      }
      return [
        source[0],
        base3.decode(source)
      ];
    }
  }
};
var toStringV0 = (bytes, cache, base3) => {
  const { prefix } = base3;
  if (prefix !== base58btc.prefix) {
    throw Error(`Cannot string encode V0 in ${base3.name} encoding`);
  }
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes).slice(1);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var toStringV1 = (bytes, cache, base3) => {
  const { prefix } = base3;
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var DAG_PB_CODE = 112;
var SHA_256_CODE = 18;
var encodeCID = (version4, code2, multihash) => {
  const codeOffset = encodingLength(version4);
  const hashOffset = codeOffset + encodingLength(code2);
  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
  encodeTo(version4, bytes, 0);
  encodeTo(code2, bytes, codeOffset);
  bytes.set(multihash, hashOffset);
  return bytes;
};
var cidSymbol = Symbol.for("@ipld/js-cid/CID");
var readonly = {
  writable: false,
  configurable: false,
  enumerable: true
};
var hidden = {
  writable: false,
  enumerable: false,
  configurable: false
};
var version3 = "0.0.0-dev";
var deprecate = (range, message) => {
  if (range.test(version3)) {
    console.warn(message);
  } else {
    throw new Error(message);
  }
};
var IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;

// node_modules/multiformats/esm/src/basics.js
var bases = {
  ...identity_exports,
  ...base2_exports,
  ...base8_exports,
  ...base10_exports,
  ...base16_exports,
  ...base32_exports,
  ...base36_exports,
  ...base58_exports2,
  ...base64_exports,
  ...base256emoji_exports
};
var hashes = {
  ...sha2_browser_exports,
  ...identity_exports2
};

// node_modules/uint8arrays/esm/src/util/bases.js
function createCodec(name2, prefix, encode8, decode8) {
  return {
    name: name2,
    prefix,
    encoder: {
      name: name2,
      prefix,
      encode: encode8
    },
    decoder: { decode: decode8 }
  };
}
var string = createCodec("utf8", "u", (buf) => {
  const decoder3 = new TextDecoder("utf8");
  return "u" + decoder3.decode(buf);
}, (str) => {
  const encoder4 = new TextEncoder();
  return encoder4.encode(str.substring(1));
});
var ascii = createCodec("ascii", "a", (buf) => {
  let string2 = "a";
  for (let i3 = 0; i3 < buf.length; i3++) {
    string2 += String.fromCharCode(buf[i3]);
  }
  return string2;
}, (str) => {
  str = str.substring(1);
  const buf = allocUnsafe(str.length);
  for (let i3 = 0; i3 < str.length; i3++) {
    buf[i3] = str.charCodeAt(i3);
  }
  return buf;
});
var BASES = {
  utf8: string,
  "utf-8": string,
  hex: bases.base16,
  latin1: ascii,
  ascii,
  binary: ascii,
  ...bases
};
var bases_default = BASES;

// node_modules/uint8arrays/esm/src/from-string.js
function fromString4(string2, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return asUint8Array(globalThis.Buffer.from(string2, "utf-8"));
  }
  return base3.decoder.decode(`${base3.prefix}${string2}`);
}

// node_modules/uint8arrays/esm/src/to-string.js
function toString4(array, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
  }
  return base3.encoder.encode(array).substring(1);
}

// node_modules/@walletconnect/relay-api/dist/index.es.js
var C = { waku: { publish: "waku_publish", batchPublish: "waku_batchPublish", subscribe: "waku_subscribe", batchSubscribe: "waku_batchSubscribe", subscription: "waku_subscription", unsubscribe: "waku_unsubscribe", batchUnsubscribe: "waku_batchUnsubscribe", batchFetchMessages: "waku_batchFetchMessages" }, irn: { publish: "irn_publish", batchPublish: "irn_batchPublish", subscribe: "irn_subscribe", batchSubscribe: "irn_batchSubscribe", subscription: "irn_subscription", unsubscribe: "irn_unsubscribe", batchUnsubscribe: "irn_batchUnsubscribe", batchFetchMessages: "irn_batchFetchMessages" }, iridium: { publish: "iridium_publish", batchPublish: "iridium_batchPublish", subscribe: "iridium_subscribe", batchSubscribe: "iridium_batchSubscribe", subscription: "iridium_subscription", unsubscribe: "iridium_unsubscribe", batchUnsubscribe: "iridium_batchUnsubscribe", batchFetchMessages: "iridium_batchFetchMessages" } };

// node_modules/@walletconnect/utils/dist/index.js
var import_blakejs = __toESM(require_blakejs());
var Ae2 = ":";
function Je2(t) {
  const [e2, n4] = t.split(Ae2);
  return { namespace: e2, reference: n4 };
}
function Ie2(t, e2) {
  return t.includes(":") ? [t] : e2.chains || [];
}
var ei = Object.defineProperty;
var ni = Object.defineProperties;
var ri = Object.getOwnPropertyDescriptors;
var ar2 = Object.getOwnPropertySymbols;
var oi = Object.prototype.hasOwnProperty;
var si = Object.prototype.propertyIsEnumerable;
var en2 = (t, e2, n4) => e2 in t ? ei(t, e2, { enumerable: true, configurable: true, writable: true, value: n4 }) : t[e2] = n4;
var ur2 = (t, e2) => {
  for (var n4 in e2 || (e2 = {})) oi.call(e2, n4) && en2(t, n4, e2[n4]);
  if (ar2) for (var n4 of ar2(e2)) si.call(e2, n4) && en2(t, n4, e2[n4]);
  return t;
};
var ii = (t, e2) => ni(t, ri(e2));
var lr2 = (t, e2, n4) => en2(t, typeof e2 != "symbol" ? e2 + "" : e2, n4);
var dr2 = "ReactNative";
var et = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
var pr2 = "js";
function rn2() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function At() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === dr2;
}
function ai() {
  return At() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "android";
}
function ui() {
  return At() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "ios";
}
function Wt2() {
  return !rn2() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function Vt2() {
  return At() ? et.reactNative : rn2() ? et.node : Wt2() ? et.browser : et.unknown;
}
function li() {
  var t;
  try {
    return At() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u" ? (t = global.Application) == null ? void 0 : t.applicationId : void 0;
  } catch {
    return;
  }
}
function gr2(t, e2) {
  const n4 = new URLSearchParams(t);
  return Object.entries(e2).sort(([r3], [o5]) => r3.localeCompare(o5)).forEach(([r3, o5]) => {
    o5 != null && n4.set(r3, String(o5));
  }), n4.toString();
}
function di(t) {
  var e2, n4;
  const r3 = br2();
  try {
    return t != null && t.url && r3.url && new URL(t.url).host !== new URL(r3.url).host && (console.warn(`The configured WalletConnect 'metadata.url':${t.url} differs from the actual page url:${r3.url}. This is probably unintended and can lead to issues.`), t.url = r3.url), (e2 = t?.icons) != null && e2.length && t.icons.length > 0 && (t.icons = t.icons.filter((o5) => o5 !== "")), ii(ur2(ur2({}, r3), t), { url: t?.url || r3.url, name: t?.name || r3.name, description: t?.description || r3.description, icons: (n4 = t?.icons) != null && n4.length && t.icons.length > 0 ? t.icons : r3.icons });
  } catch (o5) {
    return console.warn("Error populating app metadata", o5), t || r3;
  }
}
function br2() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function yr2() {
  if (Vt2() === et.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: n4, Version: r3 } = global.Platform;
    return [n4, r3].join("-");
  }
  const t = detect();
  if (t === null) return "unknown";
  const e2 = t.os ? t.os.replace(" ", "").toLowerCase() : "unknown";
  return t.type === "browser" ? [e2, t.name, t.version].join("-") : [e2, t.version].join("-");
}
function mr2() {
  var t;
  const e2 = Vt2();
  return e2 === et.browser ? [e2, ((t = (0, import_window_getters.getLocation)()) == null ? void 0 : t.host) || "unknown"].join(":") : e2;
}
function wr2(t, e2, n4) {
  const r3 = yr2(), o5 = mr2();
  return [[t, e2].join("-"), [pr2, n4].join("-"), r3, o5].join("/");
}
function pi({ protocol: t, version: e2, relayUrl: n4, sdkVersion: r3, auth: o5, projectId: s2, useOnCloseEvent: i3, bundleId: c6, packageName: f6 }) {
  const u2 = n4.split("?"), a3 = wr2(t, e2, r3), l6 = { auth: o5, ua: a3, projectId: s2, useOnCloseEvent: i3 || void 0, packageName: f6 || void 0, bundleId: c6 || void 0 }, d7 = gr2(u2[1] || "", l6);
  return u2[0] + "?" + d7;
}
function It2(t, e2) {
  return t.filter((n4) => e2.includes(n4)).length === t.length;
}
function mi(t) {
  return Object.fromEntries(t.entries());
}
function wi(t) {
  return new Map(Object.entries(t));
}
function Bi(t = import_time3.FIVE_MINUTES, e2) {
  const n4 = (0, import_time3.toMiliseconds)(t || import_time3.FIVE_MINUTES);
  let r3, o5, s2, i3;
  return { resolve: (c6) => {
    s2 && r3 && (clearTimeout(s2), r3(c6), i3 = Promise.resolve(c6));
  }, reject: (c6) => {
    s2 && o5 && (clearTimeout(s2), o5(c6));
  }, done: () => new Promise((c6, f6) => {
    if (i3) return c6(i3);
    s2 = setTimeout(() => {
      const u2 = new Error(e2);
      i3 = Promise.reject(u2), f6(u2);
    }, n4), r3 = c6, o5 = f6;
  }) };
}
function Ai(t, e2, n4) {
  return new Promise(async (r3, o5) => {
    const s2 = setTimeout(() => o5(new Error(n4)), e2);
    try {
      const i3 = await t;
      r3(i3);
    } catch (i3) {
      o5(i3);
    }
    clearTimeout(s2);
  });
}
function on2(t, e2) {
  if (typeof e2 == "string" && e2.startsWith(`${t}:`)) return e2;
  if (t.toLowerCase() === "topic") {
    if (typeof e2 != "string") throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${e2}`;
  } else if (t.toLowerCase() === "id") {
    if (typeof e2 != "number") throw new Error('Value must be "number" for expirer target type: id');
    return `id:${e2}`;
  }
  throw new Error(`Unknown expirer target type: ${t}`);
}
function Ii(t) {
  return on2("topic", t);
}
function Si(t) {
  return on2("id", t);
}
function Oi(t) {
  const [e2, n4] = t.split(":"), r3 = { id: void 0, topic: void 0 };
  if (e2 === "topic" && typeof n4 == "string") r3.topic = n4;
  else if (e2 === "id" && Number.isInteger(Number(n4))) r3.id = Number(n4);
  else throw new Error(`Invalid target, expected id:number or topic:string, got ${e2}:${n4}`);
  return r3;
}
function Ni(t, e2) {
  return (0, import_time3.fromMiliseconds)((e2 || Date.now()) + (0, import_time3.toMiliseconds)(t));
}
function Ui(t) {
  return Date.now() >= (0, import_time3.toMiliseconds)(t);
}
function _i(t, e2) {
  return `${t}${e2 ? `:${e2}` : ""}`;
}
function ut2(t = [], e2 = []) {
  return [.../* @__PURE__ */ new Set([...t, ...e2])];
}
async function Ri({ id: t, topic: e2, wcDeepLink: n4 }) {
  var r3;
  try {
    if (!n4) return;
    const o5 = typeof n4 == "string" ? JSON.parse(n4) : n4, s2 = o5?.href;
    if (typeof s2 != "string") return;
    const i3 = Br2(s2, t, e2), c6 = Vt2();
    if (c6 === et.browser) {
      if (!((r3 = (0, import_window_getters.getDocument)()) != null && r3.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      Ar2(i3);
    } else c6 === et.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(i3);
  } catch (o5) {
    console.error(o5);
  }
}
function Br2(t, e2, n4) {
  const r3 = `requestId=${e2}&sessionTopic=${n4}`;
  t.endsWith("/") && (t = t.slice(0, -1));
  let o5 = `${t}`;
  if (t.startsWith("https://t.me")) {
    const s2 = t.includes("?") ? "&startapp=" : "?startapp=";
    o5 = `${o5}${s2}${Or2(r3, true)}`;
  } else o5 = `${o5}/wc?${r3}`;
  return o5;
}
function Ar2(t) {
  let e2 = "_self";
  Sr2() ? e2 = "_top" : (Ir2() || t.startsWith("https://") || t.startsWith("http://")) && (e2 = "_blank"), window.open(t, e2, "noreferrer noopener");
}
async function $i(t, e2) {
  let n4 = "";
  try {
    if (Wt2() && (n4 = localStorage.getItem(e2), n4)) return n4;
    n4 = await t.getItem(e2);
  } catch (r3) {
    console.error(r3);
  }
  return n4;
}
function Ti(t, e2) {
  if (!t.includes(e2)) return null;
  const n4 = t.split(/([&,?,=])/), r3 = n4.indexOf(e2);
  return n4[r3 + 2];
}
function Ci() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (t) => {
    const e2 = Math.random() * 16 | 0;
    return (t === "x" ? e2 : e2 & 3 | 8).toString(16);
  });
}
function ji() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function Ir2() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function Sr2() {
  try {
    return window.self !== window.top;
  } catch {
    return false;
  }
}
function Or2(t, e2 = false) {
  const n4 = Buffer.from(t).toString("base64");
  return e2 ? n4.replace(/[=]/g, "") : n4;
}
function cn(t) {
  return Buffer.from(t, "base64").toString("utf-8");
}
function Li(t) {
  return new Promise((e2) => setTimeout(e2, t));
}
var ki = class {
  constructor({ limit: e2 }) {
    lr2(this, "limit"), lr2(this, "set"), this.limit = e2, this.set = /* @__PURE__ */ new Set();
  }
  add(e2) {
    if (!this.set.has(e2)) {
      if (this.set.size >= this.limit) {
        const n4 = this.set.values().next().value;
        n4 && this.set.delete(n4);
      }
      this.set.add(e2);
    }
  }
  has(e2) {
    return this.set.has(e2);
  }
};
var Oe2 = BigInt(2 ** 32 - 1);
var Nr2 = BigInt(32);
function Ur2(t, e2 = false) {
  return e2 ? { h: Number(t & Oe2), l: Number(t >> Nr2 & Oe2) } : { h: Number(t >> Nr2 & Oe2) | 0, l: Number(t & Oe2) | 0 };
}
function _r2(t, e2 = false) {
  const n4 = t.length;
  let r3 = new Uint32Array(n4), o5 = new Uint32Array(n4);
  for (let s2 = 0; s2 < n4; s2++) {
    const { h: i3, l: c6 } = Ur2(t[s2], e2);
    [r3[s2], o5[s2]] = [i3, c6];
  }
  return [r3, o5];
}
var Rr2 = (t, e2, n4) => t >>> n4;
var $r2 = (t, e2, n4) => t << 32 - n4 | e2 >>> n4;
var St2 = (t, e2, n4) => t >>> n4 | e2 << 32 - n4;
var Ot2 = (t, e2, n4) => t << 32 - n4 | e2 >>> n4;
var de2 = (t, e2, n4) => t << 64 - n4 | e2 >>> n4 - 32;
var he2 = (t, e2, n4) => t >>> n4 - 32 | e2 << 64 - n4;
var Pi = (t, e2) => e2;
var Hi = (t, e2) => t;
var Di = (t, e2, n4) => t << n4 | e2 >>> 32 - n4;
var Vi = (t, e2, n4) => e2 << n4 | t >>> 32 - n4;
var Mi = (t, e2, n4) => e2 << n4 - 32 | t >>> 64 - n4;
var Ki = (t, e2, n4) => t << n4 - 32 | e2 >>> 64 - n4;
function dt2(t, e2, n4, r3) {
  const o5 = (e2 >>> 0) + (r3 >>> 0);
  return { h: t + n4 + (o5 / 2 ** 32 | 0) | 0, l: o5 | 0 };
}
var fn = (t, e2, n4) => (t >>> 0) + (e2 >>> 0) + (n4 >>> 0);
var an = (t, e2, n4, r3) => e2 + n4 + r3 + (t / 2 ** 32 | 0) | 0;
var qi = (t, e2, n4, r3) => (t >>> 0) + (e2 >>> 0) + (n4 >>> 0) + (r3 >>> 0);
var Fi = (t, e2, n4, r3, o5) => e2 + n4 + r3 + o5 + (t / 2 ** 32 | 0) | 0;
var Zi = (t, e2, n4, r3, o5) => (t >>> 0) + (e2 >>> 0) + (n4 >>> 0) + (r3 >>> 0) + (o5 >>> 0);
var Gi = (t, e2, n4, r3, o5, s2) => e2 + n4 + r3 + o5 + s2 + (t / 2 ** 32 | 0) | 0;
var Xt2 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function Ne2(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function mt(t) {
  if (!Number.isSafeInteger(t) || t < 0) throw new Error("positive integer expected, got " + t);
}
function ht2(t, ...e2) {
  if (!Ne2(t)) throw new Error("Uint8Array expected");
  if (e2.length > 0 && !e2.includes(t.length)) throw new Error("Uint8Array expected of length " + e2 + ", got length=" + t.length);
}
function Ue2(t) {
  if (typeof t != "function" || typeof t.create != "function") throw new Error("Hash should be wrapped by utils.createHasher");
  mt(t.outputLen), mt(t.blockLen);
}
function Nt2(t, e2 = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e2 && t.finished) throw new Error("Hash#digest() has already been called");
}
function un(t, e2) {
  ht2(t);
  const n4 = e2.outputLen;
  if (t.length < n4) throw new Error("digestInto() expects output buffer of length at least " + n4);
}
function pe2(t) {
  return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
}
function lt2(...t) {
  for (let e2 = 0; e2 < t.length; e2++) t[e2].fill(0);
}
function ln(t) {
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
function bt2(t, e2) {
  return t << 32 - e2 | t >>> e2;
}
var Tr2 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Cr2(t) {
  return t << 24 & 4278190080 | t << 8 & 16711680 | t >>> 8 & 65280 | t >>> 24 & 255;
}
var wt2 = Tr2 ? (t) => t : (t) => Cr2(t);
function zi(t) {
  for (let e2 = 0; e2 < t.length; e2++) t[e2] = Cr2(t[e2]);
  return t;
}
var Ut2 = Tr2 ? (t) => t : zi;
var jr2 = typeof Uint8Array.from([]).toHex == "function" && typeof Uint8Array.fromHex == "function";
var Yi = Array.from({ length: 256 }, (t, e2) => e2.toString(16).padStart(2, "0"));
function Jt2(t) {
  if (ht2(t), jr2) return t.toHex();
  let e2 = "";
  for (let n4 = 0; n4 < t.length; n4++) e2 += Yi[t[n4]];
  return e2;
}
var vt2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function Lr2(t) {
  if (t >= vt2._0 && t <= vt2._9) return t - vt2._0;
  if (t >= vt2.A && t <= vt2.F) return t - (vt2.A - 10);
  if (t >= vt2.a && t <= vt2.f) return t - (vt2.a - 10);
}
function _e2(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  if (jr2) return Uint8Array.fromHex(t);
  const e2 = t.length, n4 = e2 / 2;
  if (e2 % 2) throw new Error("hex string expected, got unpadded hex of length " + e2);
  const r3 = new Uint8Array(n4);
  for (let o5 = 0, s2 = 0; o5 < n4; o5++, s2 += 2) {
    const i3 = Lr2(t.charCodeAt(s2)), c6 = Lr2(t.charCodeAt(s2 + 1));
    if (i3 === void 0 || c6 === void 0) {
      const f6 = t[s2] + t[s2 + 1];
      throw new Error('hex string expected, got non-hex character "' + f6 + '" at index ' + s2);
    }
    r3[o5] = i3 * 16 + c6;
  }
  return r3;
}
function kr2(t) {
  if (typeof t != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
function pt(t) {
  return typeof t == "string" && (t = kr2(t)), ht2(t), t;
}
function _t2(...t) {
  let e2 = 0;
  for (let r3 = 0; r3 < t.length; r3++) {
    const o5 = t[r3];
    ht2(o5), e2 += o5.length;
  }
  const n4 = new Uint8Array(e2);
  for (let r3 = 0, o5 = 0; r3 < t.length; r3++) {
    const s2 = t[r3];
    n4.set(s2, o5), o5 += s2.length;
  }
  return n4;
}
var Re2 = class {
};
function ge2(t) {
  const e2 = (r3) => t().update(pt(r3)).digest(), n4 = t();
  return e2.outputLen = n4.outputLen, e2.blockLen = n4.blockLen, e2.create = () => t(), e2;
}
function Wi(t) {
  const e2 = (r3, o5) => t(o5).update(pt(r3)).digest(), n4 = t({});
  return e2.outputLen = n4.outputLen, e2.blockLen = n4.blockLen, e2.create = (r3) => t(r3), e2;
}
function Mt2(t = 32) {
  if (Xt2 && typeof Xt2.getRandomValues == "function") return Xt2.getRandomValues(new Uint8Array(t));
  if (Xt2 && typeof Xt2.randomBytes == "function") return Uint8Array.from(Xt2.randomBytes(t));
  throw new Error("crypto.getRandomValues must be defined");
}
var Xi = BigInt(0);
var be2 = BigInt(1);
var Ji = BigInt(2);
var Qi = BigInt(7);
var tc = BigInt(256);
var ec = BigInt(113);
var Pr2 = [];
var Hr2 = [];
var Dr2 = [];
for (let t = 0, e2 = be2, n4 = 1, r3 = 0; t < 24; t++) {
  [n4, r3] = [r3, (2 * n4 + 3 * r3) % 5], Pr2.push(2 * (5 * r3 + n4)), Hr2.push((t + 1) * (t + 2) / 2 % 64);
  let o5 = Xi;
  for (let s2 = 0; s2 < 7; s2++) e2 = (e2 << be2 ^ (e2 >> Qi) * ec) % tc, e2 & Ji && (o5 ^= be2 << (be2 << BigInt(s2)) - be2);
  Dr2.push(o5);
}
var Vr2 = _r2(Dr2, true);
var nc = Vr2[0];
var rc = Vr2[1];
var Mr2 = (t, e2, n4) => n4 > 32 ? Mi(t, e2, n4) : Di(t, e2, n4);
var Kr2 = (t, e2, n4) => n4 > 32 ? Ki(t, e2, n4) : Vi(t, e2, n4);
function oc(t, e2 = 24) {
  const n4 = new Uint32Array(10);
  for (let r3 = 24 - e2; r3 < 24; r3++) {
    for (let i3 = 0; i3 < 10; i3++) n4[i3] = t[i3] ^ t[i3 + 10] ^ t[i3 + 20] ^ t[i3 + 30] ^ t[i3 + 40];
    for (let i3 = 0; i3 < 10; i3 += 2) {
      const c6 = (i3 + 8) % 10, f6 = (i3 + 2) % 10, u2 = n4[f6], a3 = n4[f6 + 1], l6 = Mr2(u2, a3, 1) ^ n4[c6], d7 = Kr2(u2, a3, 1) ^ n4[c6 + 1];
      for (let h4 = 0; h4 < 50; h4 += 10) t[i3 + h4] ^= l6, t[i3 + h4 + 1] ^= d7;
    }
    let o5 = t[2], s2 = t[3];
    for (let i3 = 0; i3 < 24; i3++) {
      const c6 = Hr2[i3], f6 = Mr2(o5, s2, c6), u2 = Kr2(o5, s2, c6), a3 = Pr2[i3];
      o5 = t[a3], s2 = t[a3 + 1], t[a3] = f6, t[a3 + 1] = u2;
    }
    for (let i3 = 0; i3 < 50; i3 += 10) {
      for (let c6 = 0; c6 < 10; c6++) n4[c6] = t[i3 + c6];
      for (let c6 = 0; c6 < 10; c6++) t[i3 + c6] ^= ~n4[(c6 + 2) % 10] & n4[(c6 + 4) % 10];
    }
    t[0] ^= nc[r3], t[1] ^= rc[r3];
  }
  lt2(n4);
}
var Jn2 = class _Jn extends Re2 {
  constructor(e2, n4, r3, o5 = false, s2 = 24) {
    if (super(), this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, this.enableXOF = false, this.blockLen = e2, this.suffix = n4, this.outputLen = r3, this.enableXOF = o5, this.rounds = s2, mt(r3), !(0 < e2 && e2 < 200)) throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200), this.state32 = pe2(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    Ut2(this.state32), oc(this.state32, this.rounds), Ut2(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(e2) {
    Nt2(this), e2 = pt(e2), ht2(e2);
    const { blockLen: n4, state: r3 } = this, o5 = e2.length;
    for (let s2 = 0; s2 < o5; ) {
      const i3 = Math.min(n4 - this.pos, o5 - s2);
      for (let c6 = 0; c6 < i3; c6++) r3[this.pos++] ^= e2[s2++];
      this.pos === n4 && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished) return;
    this.finished = true;
    const { state: e2, suffix: n4, pos: r3, blockLen: o5 } = this;
    e2[r3] ^= n4, (n4 & 128) !== 0 && r3 === o5 - 1 && this.keccak(), e2[o5 - 1] ^= 128, this.keccak();
  }
  writeInto(e2) {
    Nt2(this, false), ht2(e2), this.finish();
    const n4 = this.state, { blockLen: r3 } = this;
    for (let o5 = 0, s2 = e2.length; o5 < s2; ) {
      this.posOut >= r3 && this.keccak();
      const i3 = Math.min(r3 - this.posOut, s2 - o5);
      e2.set(n4.subarray(this.posOut, this.posOut + i3), o5), this.posOut += i3, o5 += i3;
    }
    return e2;
  }
  xofInto(e2) {
    if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
    return this.writeInto(e2);
  }
  xof(e2) {
    return mt(e2), this.xofInto(new Uint8Array(e2));
  }
  digestInto(e2) {
    if (un(e2, this), this.finished) throw new Error("digest() was already called");
    return this.writeInto(e2), this.destroy(), e2;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, lt2(this.state);
  }
  _cloneInto(e2) {
    const { blockLen: n4, suffix: r3, outputLen: o5, rounds: s2, enableXOF: i3 } = this;
    return e2 || (e2 = new _Jn(n4, r3, o5, i3, s2)), e2.state32.set(this.state32), e2.pos = this.pos, e2.posOut = this.posOut, e2.finished = this.finished, e2.rounds = s2, e2.suffix = r3, e2.outputLen = o5, e2.enableXOF = i3, e2.destroyed = this.destroyed, e2;
  }
};
var sc = (t, e2, n4) => ge2(() => new Jn2(e2, t, n4));
var ic = sc(1, 136, 256 / 8);
function cc(t, e2, n4, r3) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e2, n4, r3);
  const o5 = BigInt(32), s2 = BigInt(4294967295), i3 = Number(n4 >> o5 & s2), c6 = Number(n4 & s2), f6 = r3 ? 4 : 0, u2 = r3 ? 0 : 4;
  t.setUint32(e2 + f6, i3, r3), t.setUint32(e2 + u2, c6, r3);
}
function fc(t, e2, n4) {
  return t & e2 ^ ~t & n4;
}
function ac(t, e2, n4) {
  return t & e2 ^ t & n4 ^ e2 & n4;
}
var qr2 = class extends Re2 {
  constructor(e2, n4, r3, o5) {
    super(), this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.blockLen = e2, this.outputLen = n4, this.padOffset = r3, this.isLE = o5, this.buffer = new Uint8Array(e2), this.view = ln(this.buffer);
  }
  update(e2) {
    Nt2(this), e2 = pt(e2), ht2(e2);
    const { view: n4, buffer: r3, blockLen: o5 } = this, s2 = e2.length;
    for (let i3 = 0; i3 < s2; ) {
      const c6 = Math.min(o5 - this.pos, s2 - i3);
      if (c6 === o5) {
        const f6 = ln(e2);
        for (; o5 <= s2 - i3; i3 += o5) this.process(f6, i3);
        continue;
      }
      r3.set(e2.subarray(i3, i3 + c6), this.pos), this.pos += c6, i3 += c6, this.pos === o5 && (this.process(n4, 0), this.pos = 0);
    }
    return this.length += e2.length, this.roundClean(), this;
  }
  digestInto(e2) {
    Nt2(this), un(e2, this), this.finished = true;
    const { buffer: n4, view: r3, blockLen: o5, isLE: s2 } = this;
    let { pos: i3 } = this;
    n4[i3++] = 128, lt2(this.buffer.subarray(i3)), this.padOffset > o5 - i3 && (this.process(r3, 0), i3 = 0);
    for (let l6 = i3; l6 < o5; l6++) n4[l6] = 0;
    cc(r3, o5 - 8, BigInt(this.length * 8), s2), this.process(r3, 0);
    const c6 = ln(e2), f6 = this.outputLen;
    if (f6 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u2 = f6 / 4, a3 = this.get();
    if (u2 > a3.length) throw new Error("_sha2: outputLen bigger than state");
    for (let l6 = 0; l6 < u2; l6++) c6.setUint32(4 * l6, a3[l6], s2);
  }
  digest() {
    const { buffer: e2, outputLen: n4 } = this;
    this.digestInto(e2);
    const r3 = e2.slice(0, n4);
    return this.destroy(), r3;
  }
  _cloneInto(e2) {
    e2 || (e2 = new this.constructor()), e2.set(...this.get());
    const { blockLen: n4, buffer: r3, length: o5, finished: s2, destroyed: i3, pos: c6 } = this;
    return e2.destroyed = i3, e2.finished = s2, e2.length = o5, e2.pos = c6, o5 % n4 && e2.buffer.set(r3), e2;
  }
  clone() {
    return this._cloneInto();
  }
};
var Rt2 = Uint32Array.from([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
var X2 = Uint32Array.from([3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428]);
var J3 = Uint32Array.from([1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209]);
var uc = Uint32Array.from([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
var $t2 = new Uint32Array(64);
var lc = class extends qr2 {
  constructor(e2 = 32) {
    super(64, e2, 8, false), this.A = Rt2[0] | 0, this.B = Rt2[1] | 0, this.C = Rt2[2] | 0, this.D = Rt2[3] | 0, this.E = Rt2[4] | 0, this.F = Rt2[5] | 0, this.G = Rt2[6] | 0, this.H = Rt2[7] | 0;
  }
  get() {
    const { A: e2, B: n4, C: r3, D: o5, E: s2, F: i3, G: c6, H: f6 } = this;
    return [e2, n4, r3, o5, s2, i3, c6, f6];
  }
  set(e2, n4, r3, o5, s2, i3, c6, f6) {
    this.A = e2 | 0, this.B = n4 | 0, this.C = r3 | 0, this.D = o5 | 0, this.E = s2 | 0, this.F = i3 | 0, this.G = c6 | 0, this.H = f6 | 0;
  }
  process(e2, n4) {
    for (let l6 = 0; l6 < 16; l6++, n4 += 4) $t2[l6] = e2.getUint32(n4, false);
    for (let l6 = 16; l6 < 64; l6++) {
      const d7 = $t2[l6 - 15], h4 = $t2[l6 - 2], y4 = bt2(d7, 7) ^ bt2(d7, 18) ^ d7 >>> 3, m4 = bt2(h4, 17) ^ bt2(h4, 19) ^ h4 >>> 10;
      $t2[l6] = m4 + $t2[l6 - 7] + y4 + $t2[l6 - 16] | 0;
    }
    let { A: r3, B: o5, C: s2, D: i3, E: c6, F: f6, G: u2, H: a3 } = this;
    for (let l6 = 0; l6 < 64; l6++) {
      const d7 = bt2(c6, 6) ^ bt2(c6, 11) ^ bt2(c6, 25), h4 = a3 + d7 + fc(c6, f6, u2) + uc[l6] + $t2[l6] | 0, m4 = (bt2(r3, 2) ^ bt2(r3, 13) ^ bt2(r3, 22)) + ac(r3, o5, s2) | 0;
      a3 = u2, u2 = f6, f6 = c6, c6 = i3 + h4 | 0, i3 = s2, s2 = o5, o5 = r3, r3 = h4 + m4 | 0;
    }
    r3 = r3 + this.A | 0, o5 = o5 + this.B | 0, s2 = s2 + this.C | 0, i3 = i3 + this.D | 0, c6 = c6 + this.E | 0, f6 = f6 + this.F | 0, u2 = u2 + this.G | 0, a3 = a3 + this.H | 0, this.set(r3, o5, s2, i3, c6, f6, u2, a3);
  }
  roundClean() {
    lt2($t2);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), lt2(this.buffer);
  }
};
var Fr3 = _r2(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t) => BigInt(t)));
var dc = Fr3[0];
var hc = Fr3[1];
var Tt2 = new Uint32Array(80);
var Ct = new Uint32Array(80);
var dn = class extends qr2 {
  constructor(e2 = 64) {
    super(128, e2, 16, false), this.Ah = J3[0] | 0, this.Al = J3[1] | 0, this.Bh = J3[2] | 0, this.Bl = J3[3] | 0, this.Ch = J3[4] | 0, this.Cl = J3[5] | 0, this.Dh = J3[6] | 0, this.Dl = J3[7] | 0, this.Eh = J3[8] | 0, this.El = J3[9] | 0, this.Fh = J3[10] | 0, this.Fl = J3[11] | 0, this.Gh = J3[12] | 0, this.Gl = J3[13] | 0, this.Hh = J3[14] | 0, this.Hl = J3[15] | 0;
  }
  get() {
    const { Ah: e2, Al: n4, Bh: r3, Bl: o5, Ch: s2, Cl: i3, Dh: c6, Dl: f6, Eh: u2, El: a3, Fh: l6, Fl: d7, Gh: h4, Gl: y4, Hh: m4, Hl: v6 } = this;
    return [e2, n4, r3, o5, s2, i3, c6, f6, u2, a3, l6, d7, h4, y4, m4, v6];
  }
  set(e2, n4, r3, o5, s2, i3, c6, f6, u2, a3, l6, d7, h4, y4, m4, v6) {
    this.Ah = e2 | 0, this.Al = n4 | 0, this.Bh = r3 | 0, this.Bl = o5 | 0, this.Ch = s2 | 0, this.Cl = i3 | 0, this.Dh = c6 | 0, this.Dl = f6 | 0, this.Eh = u2 | 0, this.El = a3 | 0, this.Fh = l6 | 0, this.Fl = d7 | 0, this.Gh = h4 | 0, this.Gl = y4 | 0, this.Hh = m4 | 0, this.Hl = v6 | 0;
  }
  process(e2, n4) {
    for (let R4 = 0; R4 < 16; R4++, n4 += 4) Tt2[R4] = e2.getUint32(n4), Ct[R4] = e2.getUint32(n4 += 4);
    for (let R4 = 16; R4 < 80; R4++) {
      const Z2 = Tt2[R4 - 15] | 0, H3 = Ct[R4 - 15] | 0, j6 = St2(Z2, H3, 1) ^ St2(Z2, H3, 8) ^ Rr2(Z2, H3, 7), L3 = Ot2(Z2, H3, 1) ^ Ot2(Z2, H3, 8) ^ $r2(Z2, H3, 7), k4 = Tt2[R4 - 2] | 0, O5 = Ct[R4 - 2] | 0, T4 = St2(k4, O5, 19) ^ de2(k4, O5, 61) ^ Rr2(k4, O5, 6), C5 = Ot2(k4, O5, 19) ^ he2(k4, O5, 61) ^ $r2(k4, O5, 6), _3 = qi(L3, C5, Ct[R4 - 7], Ct[R4 - 16]), p4 = Fi(_3, j6, T4, Tt2[R4 - 7], Tt2[R4 - 16]);
      Tt2[R4] = p4 | 0, Ct[R4] = _3 | 0;
    }
    let { Ah: r3, Al: o5, Bh: s2, Bl: i3, Ch: c6, Cl: f6, Dh: u2, Dl: a3, Eh: l6, El: d7, Fh: h4, Fl: y4, Gh: m4, Gl: v6, Hh: U3, Hl: F2 } = this;
    for (let R4 = 0; R4 < 80; R4++) {
      const Z2 = St2(l6, d7, 14) ^ St2(l6, d7, 18) ^ de2(l6, d7, 41), H3 = Ot2(l6, d7, 14) ^ Ot2(l6, d7, 18) ^ he2(l6, d7, 41), j6 = l6 & h4 ^ ~l6 & m4, L3 = d7 & y4 ^ ~d7 & v6, k4 = Zi(F2, H3, L3, hc[R4], Ct[R4]), O5 = Gi(k4, U3, Z2, j6, dc[R4], Tt2[R4]), T4 = k4 | 0, C5 = St2(r3, o5, 28) ^ de2(r3, o5, 34) ^ de2(r3, o5, 39), _3 = Ot2(r3, o5, 28) ^ he2(r3, o5, 34) ^ he2(r3, o5, 39), p4 = r3 & s2 ^ r3 & c6 ^ s2 & c6, b4 = o5 & i3 ^ o5 & f6 ^ i3 & f6;
      U3 = m4 | 0, F2 = v6 | 0, m4 = h4 | 0, v6 = y4 | 0, h4 = l6 | 0, y4 = d7 | 0, { h: l6, l: d7 } = dt2(u2 | 0, a3 | 0, O5 | 0, T4 | 0), u2 = c6 | 0, a3 = f6 | 0, c6 = s2 | 0, f6 = i3 | 0, s2 = r3 | 0, i3 = o5 | 0;
      const g4 = fn(T4, _3, b4);
      r3 = an(g4, O5, C5, p4), o5 = g4 | 0;
    }
    ({ h: r3, l: o5 } = dt2(this.Ah | 0, this.Al | 0, r3 | 0, o5 | 0)), { h: s2, l: i3 } = dt2(this.Bh | 0, this.Bl | 0, s2 | 0, i3 | 0), { h: c6, l: f6 } = dt2(this.Ch | 0, this.Cl | 0, c6 | 0, f6 | 0), { h: u2, l: a3 } = dt2(this.Dh | 0, this.Dl | 0, u2 | 0, a3 | 0), { h: l6, l: d7 } = dt2(this.Eh | 0, this.El | 0, l6 | 0, d7 | 0), { h: h4, l: y4 } = dt2(this.Fh | 0, this.Fl | 0, h4 | 0, y4 | 0), { h: m4, l: v6 } = dt2(this.Gh | 0, this.Gl | 0, m4 | 0, v6 | 0), { h: U3, l: F2 } = dt2(this.Hh | 0, this.Hl | 0, U3 | 0, F2 | 0), this.set(r3, o5, s2, i3, c6, f6, u2, a3, l6, d7, h4, y4, m4, v6, U3, F2);
  }
  roundClean() {
    lt2(Tt2, Ct);
  }
  destroy() {
    lt2(this.buffer), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var pc = class extends dn {
  constructor() {
    super(48), this.Ah = X2[0] | 0, this.Al = X2[1] | 0, this.Bh = X2[2] | 0, this.Bl = X2[3] | 0, this.Ch = X2[4] | 0, this.Cl = X2[5] | 0, this.Dh = X2[6] | 0, this.Dl = X2[7] | 0, this.Eh = X2[8] | 0, this.El = X2[9] | 0, this.Fh = X2[10] | 0, this.Fl = X2[11] | 0, this.Gh = X2[12] | 0, this.Gl = X2[13] | 0, this.Hh = X2[14] | 0, this.Hl = X2[15] | 0;
  }
};
var Q2 = Uint32Array.from([573645204, 4230739756, 2673172387, 3360449730, 596883563, 1867755857, 2520282905, 1497426621, 2519219938, 2827943907, 3193839141, 1401305490, 721525244, 746961066, 246885852, 2177182882]);
var gc = class extends dn {
  constructor() {
    super(32), this.Ah = Q2[0] | 0, this.Al = Q2[1] | 0, this.Bh = Q2[2] | 0, this.Bl = Q2[3] | 0, this.Ch = Q2[4] | 0, this.Cl = Q2[5] | 0, this.Dh = Q2[6] | 0, this.Dl = Q2[7] | 0, this.Eh = Q2[8] | 0, this.El = Q2[9] | 0, this.Fh = Q2[10] | 0, this.Fl = Q2[11] | 0, this.Gh = Q2[12] | 0, this.Gl = Q2[13] | 0, this.Hh = Q2[14] | 0, this.Hl = Q2[15] | 0;
  }
};
var $e2 = ge2(() => new lc());
var bc = ge2(() => new dn());
var yc = ge2(() => new pc());
var mc = ge2(() => new gc());
var wc = Uint8Array.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9]);
var z2 = Uint32Array.from([4089235720, 1779033703, 2227873595, 3144134277, 4271175723, 1013904242, 1595750129, 2773480762, 2917565137, 1359893119, 725511199, 2600822924, 4215389547, 528734635, 327033209, 1541459225]);
var S2 = new Uint32Array(32);
function jt2(t, e2, n4, r3, o5, s2) {
  const i3 = o5[s2], c6 = o5[s2 + 1];
  let f6 = S2[2 * t], u2 = S2[2 * t + 1], a3 = S2[2 * e2], l6 = S2[2 * e2 + 1], d7 = S2[2 * n4], h4 = S2[2 * n4 + 1], y4 = S2[2 * r3], m4 = S2[2 * r3 + 1], v6 = fn(f6, a3, i3);
  u2 = an(v6, u2, l6, c6), f6 = v6 | 0, { Dh: m4, Dl: y4 } = { Dh: m4 ^ u2, Dl: y4 ^ f6 }, { Dh: m4, Dl: y4 } = { Dh: Pi(m4, y4), Dl: Hi(m4) }, { h: h4, l: d7 } = dt2(h4, d7, m4, y4), { Bh: l6, Bl: a3 } = { Bh: l6 ^ h4, Bl: a3 ^ d7 }, { Bh: l6, Bl: a3 } = { Bh: St2(l6, a3, 24), Bl: Ot2(l6, a3, 24) }, S2[2 * t] = f6, S2[2 * t + 1] = u2, S2[2 * e2] = a3, S2[2 * e2 + 1] = l6, S2[2 * n4] = d7, S2[2 * n4 + 1] = h4, S2[2 * r3] = y4, S2[2 * r3 + 1] = m4;
}
function Lt2(t, e2, n4, r3, o5, s2) {
  const i3 = o5[s2], c6 = o5[s2 + 1];
  let f6 = S2[2 * t], u2 = S2[2 * t + 1], a3 = S2[2 * e2], l6 = S2[2 * e2 + 1], d7 = S2[2 * n4], h4 = S2[2 * n4 + 1], y4 = S2[2 * r3], m4 = S2[2 * r3 + 1], v6 = fn(f6, a3, i3);
  u2 = an(v6, u2, l6, c6), f6 = v6 | 0, { Dh: m4, Dl: y4 } = { Dh: m4 ^ u2, Dl: y4 ^ f6 }, { Dh: m4, Dl: y4 } = { Dh: St2(m4, y4, 16), Dl: Ot2(m4, y4, 16) }, { h: h4, l: d7 } = dt2(h4, d7, m4, y4), { Bh: l6, Bl: a3 } = { Bh: l6 ^ h4, Bl: a3 ^ d7 }, { Bh: l6, Bl: a3 } = { Bh: de2(l6, a3, 63), Bl: he2(l6, a3, 63) }, S2[2 * t] = f6, S2[2 * t + 1] = u2, S2[2 * e2] = a3, S2[2 * e2 + 1] = l6, S2[2 * n4] = d7, S2[2 * n4 + 1] = h4, S2[2 * r3] = y4, S2[2 * r3 + 1] = m4;
}
function vc(t, e2 = {}, n4, r3, o5) {
  if (mt(n4), t < 0 || t > n4) throw new Error("outputLen bigger than keyLen");
  const { key: s2, salt: i3, personalization: c6 } = e2;
  if (s2 !== void 0 && (s2.length < 1 || s2.length > n4)) throw new Error("key length must be undefined or 1.." + n4);
  if (i3 !== void 0 && i3.length !== r3) throw new Error("salt must be undefined or " + r3);
  if (c6 !== void 0 && c6.length !== o5) throw new Error("personalization must be undefined or " + o5);
}
var xc = class extends Re2 {
  constructor(e2, n4) {
    super(), this.finished = false, this.destroyed = false, this.length = 0, this.pos = 0, mt(e2), mt(n4), this.blockLen = e2, this.outputLen = n4, this.buffer = new Uint8Array(e2), this.buffer32 = pe2(this.buffer);
  }
  update(e2) {
    Nt2(this), e2 = pt(e2), ht2(e2);
    const { blockLen: n4, buffer: r3, buffer32: o5 } = this, s2 = e2.length, i3 = e2.byteOffset, c6 = e2.buffer;
    for (let f6 = 0; f6 < s2; ) {
      this.pos === n4 && (Ut2(o5), this.compress(o5, 0, false), Ut2(o5), this.pos = 0);
      const u2 = Math.min(n4 - this.pos, s2 - f6), a3 = i3 + f6;
      if (u2 === n4 && !(a3 % 4) && f6 + u2 < s2) {
        const l6 = new Uint32Array(c6, a3, Math.floor((s2 - f6) / 4));
        Ut2(l6);
        for (let d7 = 0; f6 + n4 < s2; d7 += o5.length, f6 += n4) this.length += n4, this.compress(l6, d7, false);
        Ut2(l6);
        continue;
      }
      r3.set(e2.subarray(f6, f6 + u2), this.pos), this.pos += u2, this.length += u2, f6 += u2;
    }
    return this;
  }
  digestInto(e2) {
    Nt2(this), un(e2, this);
    const { pos: n4, buffer32: r3 } = this;
    this.finished = true, lt2(this.buffer.subarray(n4)), Ut2(r3), this.compress(r3, 0, true), Ut2(r3);
    const o5 = pe2(e2);
    this.get().forEach((s2, i3) => o5[i3] = wt2(s2));
  }
  digest() {
    const { buffer: e2, outputLen: n4 } = this;
    this.digestInto(e2);
    const r3 = e2.slice(0, n4);
    return this.destroy(), r3;
  }
  _cloneInto(e2) {
    const { buffer: n4, length: r3, finished: o5, destroyed: s2, outputLen: i3, pos: c6 } = this;
    return e2 || (e2 = new this.constructor({ dkLen: i3 })), e2.set(...this.get()), e2.buffer.set(n4), e2.destroyed = s2, e2.finished = o5, e2.length = r3, e2.pos = c6, e2.outputLen = i3, e2;
  }
  clone() {
    return this._cloneInto();
  }
};
var Ec = class extends xc {
  constructor(e2 = {}) {
    const n4 = e2.dkLen === void 0 ? 64 : e2.dkLen;
    super(128, n4), this.v0l = z2[0] | 0, this.v0h = z2[1] | 0, this.v1l = z2[2] | 0, this.v1h = z2[3] | 0, this.v2l = z2[4] | 0, this.v2h = z2[5] | 0, this.v3l = z2[6] | 0, this.v3h = z2[7] | 0, this.v4l = z2[8] | 0, this.v4h = z2[9] | 0, this.v5l = z2[10] | 0, this.v5h = z2[11] | 0, this.v6l = z2[12] | 0, this.v6h = z2[13] | 0, this.v7l = z2[14] | 0, this.v7h = z2[15] | 0, vc(n4, e2, 64, 16, 16);
    let { key: r3, personalization: o5, salt: s2 } = e2, i3 = 0;
    if (r3 !== void 0 && (r3 = pt(r3), i3 = r3.length), this.v0l ^= this.outputLen | i3 << 8 | 65536 | 1 << 24, s2 !== void 0) {
      s2 = pt(s2);
      const c6 = pe2(s2);
      this.v4l ^= wt2(c6[0]), this.v4h ^= wt2(c6[1]), this.v5l ^= wt2(c6[2]), this.v5h ^= wt2(c6[3]);
    }
    if (o5 !== void 0) {
      o5 = pt(o5);
      const c6 = pe2(o5);
      this.v6l ^= wt2(c6[0]), this.v6h ^= wt2(c6[1]), this.v7l ^= wt2(c6[2]), this.v7h ^= wt2(c6[3]);
    }
    if (r3 !== void 0) {
      const c6 = new Uint8Array(this.blockLen);
      c6.set(r3), this.update(c6);
    }
  }
  get() {
    let { v0l: e2, v0h: n4, v1l: r3, v1h: o5, v2l: s2, v2h: i3, v3l: c6, v3h: f6, v4l: u2, v4h: a3, v5l: l6, v5h: d7, v6l: h4, v6h: y4, v7l: m4, v7h: v6 } = this;
    return [e2, n4, r3, o5, s2, i3, c6, f6, u2, a3, l6, d7, h4, y4, m4, v6];
  }
  set(e2, n4, r3, o5, s2, i3, c6, f6, u2, a3, l6, d7, h4, y4, m4, v6) {
    this.v0l = e2 | 0, this.v0h = n4 | 0, this.v1l = r3 | 0, this.v1h = o5 | 0, this.v2l = s2 | 0, this.v2h = i3 | 0, this.v3l = c6 | 0, this.v3h = f6 | 0, this.v4l = u2 | 0, this.v4h = a3 | 0, this.v5l = l6 | 0, this.v5h = d7 | 0, this.v6l = h4 | 0, this.v6h = y4 | 0, this.v7l = m4 | 0, this.v7h = v6 | 0;
  }
  compress(e2, n4, r3) {
    this.get().forEach((f6, u2) => S2[u2] = f6), S2.set(z2, 16);
    let { h: o5, l: s2 } = Ur2(BigInt(this.length));
    S2[24] = z2[8] ^ s2, S2[25] = z2[9] ^ o5, r3 && (S2[28] = ~S2[28], S2[29] = ~S2[29]);
    let i3 = 0;
    const c6 = wc;
    for (let f6 = 0; f6 < 12; f6++) jt2(0, 4, 8, 12, e2, n4 + 2 * c6[i3++]), Lt2(0, 4, 8, 12, e2, n4 + 2 * c6[i3++]), jt2(1, 5, 9, 13, e2, n4 + 2 * c6[i3++]), Lt2(1, 5, 9, 13, e2, n4 + 2 * c6[i3++]), jt2(2, 6, 10, 14, e2, n4 + 2 * c6[i3++]), Lt2(2, 6, 10, 14, e2, n4 + 2 * c6[i3++]), jt2(3, 7, 11, 15, e2, n4 + 2 * c6[i3++]), Lt2(3, 7, 11, 15, e2, n4 + 2 * c6[i3++]), jt2(0, 5, 10, 15, e2, n4 + 2 * c6[i3++]), Lt2(0, 5, 10, 15, e2, n4 + 2 * c6[i3++]), jt2(1, 6, 11, 12, e2, n4 + 2 * c6[i3++]), Lt2(1, 6, 11, 12, e2, n4 + 2 * c6[i3++]), jt2(2, 7, 8, 13, e2, n4 + 2 * c6[i3++]), Lt2(2, 7, 8, 13, e2, n4 + 2 * c6[i3++]), jt2(3, 4, 9, 14, e2, n4 + 2 * c6[i3++]), Lt2(3, 4, 9, 14, e2, n4 + 2 * c6[i3++]);
    this.v0l ^= S2[0] ^ S2[16], this.v0h ^= S2[1] ^ S2[17], this.v1l ^= S2[2] ^ S2[18], this.v1h ^= S2[3] ^ S2[19], this.v2l ^= S2[4] ^ S2[20], this.v2h ^= S2[5] ^ S2[21], this.v3l ^= S2[6] ^ S2[22], this.v3h ^= S2[7] ^ S2[23], this.v4l ^= S2[8] ^ S2[24], this.v4h ^= S2[9] ^ S2[25], this.v5l ^= S2[10] ^ S2[26], this.v5h ^= S2[11] ^ S2[27], this.v6l ^= S2[12] ^ S2[28], this.v6h ^= S2[13] ^ S2[29], this.v7l ^= S2[14] ^ S2[30], this.v7h ^= S2[15] ^ S2[31], lt2(S2);
  }
  destroy() {
    this.destroyed = true, lt2(this.buffer32), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Bc = Wi((t) => new Ec(t));
var Ac = "https://rpc.walletconnect.org/v1";
function hn(t) {
  const e2 = `Ethereum Signed Message:
${t.length}`, n4 = new TextEncoder().encode(e2 + t);
  return "0x" + Buffer.from(ic(n4)).toString("hex");
}
async function Zr2(t, e2, n4, r3, o5, s2) {
  switch (n4.t) {
    case "eip191":
      return await Gr2(t, e2, n4.s);
    case "eip1271":
      return await zr2(t, e2, n4.s, r3, o5, s2);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${n4.t}`);
  }
}
function Gr2(t, e2, n4) {
  const r3 = Signature_exports.fromHex(n4);
  return Secp256k1_exports.recoverAddress({ payload: hn(e2), signature: r3 }).toLowerCase() === t.toLowerCase();
}
async function zr2(t, e2, n4, r3, o5, s2) {
  const i3 = Je2(r3);
  if (!i3.namespace || !i3.reference) throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r3}`);
  try {
    const c6 = "0x1626ba7e", f6 = "0000000000000000000000000000000000000000000000000000000000000040", u2 = n4.substring(2), a3 = (u2.length / 2).toString(16).padStart(64, "0"), l6 = (e2.startsWith("0x") ? e2 : hn(e2)).substring(2), d7 = c6 + l6 + f6 + a3 + u2, h4 = await fetch(`${s2 || Ac}/?chainId=${r3}&projectId=${o5}`, { headers: { "Content-Type": "application/json" }, method: "POST", body: JSON.stringify({ id: Ic(), jsonrpc: "2.0", method: "eth_call", params: [{ to: t, data: d7 }, "latest"] }) }), { result: y4 } = await h4.json();
    return y4 ? y4.slice(0, c6.length).toLowerCase() === c6.toLowerCase() : false;
  } catch (c6) {
    return console.error("isValidEip1271Signature: ", c6), false;
  }
}
function Ic() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
function Sc(t) {
  const e2 = atob(t), n4 = new Uint8Array(e2.length);
  for (let i3 = 0; i3 < e2.length; i3++) n4[i3] = e2.charCodeAt(i3);
  const r3 = n4[0];
  if (r3 === 0) throw new Error("No signatures found");
  const o5 = 1 + r3 * 64;
  if (n4.length < o5) throw new Error("Transaction data too short for claimed signature count");
  if (n4.length < 100) throw new Error("Transaction too short");
  const s2 = Buffer.from(t, "base64").slice(1, 65);
  return esm_default2.encode(s2);
}
function Oc(t) {
  const e2 = new Uint8Array(Buffer.from(t, "base64")), n4 = Array.from("TransactionData::").map((s2) => s2.charCodeAt(0)), r3 = new Uint8Array(n4.length + e2.length);
  r3.set(n4), r3.set(e2, n4.length);
  const o5 = Bc(r3, { dkLen: 32 });
  return esm_default2.encode(o5);
}
function Nc(t) {
  const e2 = new Uint8Array($e2(Yr2(t)));
  return esm_default2.encode(e2);
}
function Yr2(t) {
  if (t instanceof Uint8Array) return t;
  if (Array.isArray(t)) return new Uint8Array(t);
  if (typeof t == "object" && t != null && t.data) return new Uint8Array(Object.values(t.data));
  if (typeof t == "object" && t) return new Uint8Array(Object.values(t));
  throw new Error("getNearUint8ArrayFromBytes: Unexpected result type from bytes array");
}
function Uc(t) {
  const e2 = Buffer.from(t, "base64"), n4 = decode2(e2).txn;
  if (!n4) throw new Error("Invalid signed transaction: missing 'txn' field");
  const r3 = encode3(n4), o5 = Buffer.from("TX"), s2 = Buffer.concat([o5, Buffer.from(r3)]), i3 = mc(s2);
  return base32.encode(i3).replace(/=+$/, "");
}
function pn(t) {
  const e2 = [];
  let n4 = BigInt(t);
  for (; n4 >= BigInt(128); ) e2.push(Number(n4 & BigInt(127) | BigInt(128))), n4 >>= BigInt(7);
  return e2.push(Number(n4)), Buffer.from(e2);
}
function _c(t) {
  const e2 = Buffer.from(t.signed.bodyBytes, "base64"), n4 = Buffer.from(t.signed.authInfoBytes, "base64"), r3 = Buffer.from(t.signature.signature, "base64"), o5 = [];
  o5.push(Buffer.from([10])), o5.push(pn(e2.length)), o5.push(e2), o5.push(Buffer.from([18])), o5.push(pn(n4.length)), o5.push(n4), o5.push(Buffer.from([26])), o5.push(pn(r3.length)), o5.push(r3);
  const s2 = Buffer.concat(o5), i3 = $e2(s2);
  return Buffer.from(i3).toString("hex").toUpperCase();
}
function Rc(t) {
  var e2, n4;
  const r3 = [];
  try {
    if (typeof t == "string") return r3.push(t), r3;
    if (typeof t != "object") return r3;
    t != null && t.id && r3.push(t.id);
    const o5 = (n4 = (e2 = t?.capabilities) == null ? void 0 : e2.caip345) == null ? void 0 : n4.transactionHashes;
    o5 && r3.push(...o5);
  } catch (o5) {
    console.warn("getWalletSendCallsHashes failed: ", o5);
  }
  return r3;
}
var $c = Object.defineProperty;
var Tc = Object.defineProperties;
var Cc = Object.getOwnPropertyDescriptors;
var Wr2 = Object.getOwnPropertySymbols;
var jc = Object.prototype.hasOwnProperty;
var Lc = Object.prototype.propertyIsEnumerable;
var Xr2 = (t, e2, n4) => e2 in t ? $c(t, e2, { enumerable: true, configurable: true, writable: true, value: n4 }) : t[e2] = n4;
var gn2 = (t, e2) => {
  for (var n4 in e2 || (e2 = {})) jc.call(e2, n4) && Xr2(t, n4, e2[n4]);
  if (Wr2) for (var n4 of Wr2(e2)) Lc.call(e2, n4) && Xr2(t, n4, e2[n4]);
  return t;
};
var Jr2 = (t, e2) => Tc(t, Cc(e2));
var kc = "did:pkh:";
var Te2 = (t) => t?.split(":");
var Qr2 = (t) => {
  const e2 = t && Te2(t);
  if (e2) return t.includes(kc) ? e2[3] : e2[1];
};
var to2 = (t) => {
  const e2 = t && Te2(t);
  if (e2) return e2[2] + ":" + e2[3];
};
var bn2 = (t) => {
  const e2 = t && Te2(t);
  if (e2) return e2.pop();
};
async function Pc(t) {
  const { cacao: e2, projectId: n4 } = t, { s: r3, p: o5 } = e2, s2 = eo2(o5, o5.iss), i3 = bn2(o5.iss);
  return await Zr2(i3, s2, r3, to2(o5.iss), n4);
}
var eo2 = (t, e2) => {
  const n4 = `${t.domain} wants you to sign in with your Ethereum account:`, r3 = bn2(e2);
  if (!t.aud && !t.uri) throw new Error("Either `aud` or `uri` is required to construct the message");
  let o5 = t.statement || void 0;
  const s2 = `URI: ${t.aud || t.uri}`, i3 = `Version: ${t.version}`, c6 = `Chain ID: ${Qr2(e2)}`, f6 = `Nonce: ${t.nonce}`, u2 = `Issued At: ${t.iat}`, a3 = t.exp ? `Expiration Time: ${t.exp}` : void 0, l6 = t.nbf ? `Not Before: ${t.nbf}` : void 0, d7 = t.requestId ? `Request ID: ${t.requestId}` : void 0, h4 = t.resources ? `Resources:${t.resources.map((m4) => `
- ${m4}`).join("")}` : void 0, y4 = je2(t.resources);
  if (y4) {
    const m4 = kt2(y4);
    o5 = wn(o5, m4);
  }
  return [n4, r3, "", o5, "", s2, i3, c6, f6, u2, a3, l6, d7, h4].filter((m4) => m4 != null).join(`
`);
};
function so2(t) {
  return Buffer.from(JSON.stringify(t)).toString("base64");
}
function io2(t) {
  return JSON.parse(Buffer.from(t, "base64").toString("utf-8"));
}
function yt2(t) {
  if (!t) throw new Error("No recap provided, value is undefined");
  if (!t.att) throw new Error("No `att` property found");
  const e2 = Object.keys(t.att);
  if (!(e2 != null && e2.length)) throw new Error("No resources found in `att` property");
  e2.forEach((n4) => {
    const r3 = t.att[n4];
    if (Array.isArray(r3)) throw new Error(`Resource must be an object: ${n4}`);
    if (typeof r3 != "object") throw new Error(`Resource must be an object: ${n4}`);
    if (!Object.keys(r3).length) throw new Error(`Resource object is empty: ${n4}`);
    Object.keys(r3).forEach((o5) => {
      const s2 = r3[o5];
      if (!Array.isArray(s2)) throw new Error(`Ability limits ${o5} must be an array of objects, found: ${s2}`);
      if (!s2.length) throw new Error(`Value of ${o5} is empty array, must be an array with objects`);
      s2.forEach((i3) => {
        if (typeof i3 != "object") throw new Error(`Ability limits (${o5}) must be an array of objects, found: ${i3}`);
      });
    });
  });
}
function co2(t, e2, n4, r3 = {}) {
  return n4?.sort((o5, s2) => o5.localeCompare(s2)), { att: { [t]: yn2(e2, n4, r3) } };
}
function yn2(t, e2, n4 = {}) {
  e2 = e2?.sort((o5, s2) => o5.localeCompare(s2));
  const r3 = e2.map((o5) => ({ [`${t}/${o5}`]: [n4] }));
  return Object.assign({}, ...r3);
}
function Ce2(t) {
  return yt2(t), `urn:recap:${so2(t).replace(/=/g, "")}`;
}
function kt2(t) {
  const e2 = io2(t.replace("urn:recap:", ""));
  return yt2(e2), e2;
}
function Kc(t, e2, n4) {
  const r3 = co2(t, e2, n4);
  return Ce2(r3);
}
function mn2(t) {
  return t && t.includes("urn:recap:");
}
function qc(t, e2) {
  const n4 = kt2(t), r3 = kt2(e2), o5 = ao2(n4, r3);
  return Ce2(o5);
}
function ao2(t, e2) {
  yt2(t), yt2(e2);
  const n4 = Object.keys(t.att).concat(Object.keys(e2.att)).sort((o5, s2) => o5.localeCompare(s2)), r3 = { att: {} };
  return n4.forEach((o5) => {
    var s2, i3;
    Object.keys(((s2 = t.att) == null ? void 0 : s2[o5]) || {}).concat(Object.keys(((i3 = e2.att) == null ? void 0 : i3[o5]) || {})).sort((c6, f6) => c6.localeCompare(f6)).forEach((c6) => {
      var f6, u2;
      r3.att[o5] = Jr2(gn2({}, r3.att[o5]), { [c6]: ((f6 = t.att[o5]) == null ? void 0 : f6[c6]) || ((u2 = e2.att[o5]) == null ? void 0 : u2[c6]) });
    });
  }), r3;
}
function wn(t = "", e2) {
  yt2(e2);
  const n4 = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (t.includes(n4)) return t;
  const r3 = [];
  let o5 = 0;
  Object.keys(e2.att).forEach((c6) => {
    const f6 = Object.keys(e2.att[c6]).map((l6) => ({ ability: l6.split("/")[0], action: l6.split("/")[1] }));
    f6.sort((l6, d7) => l6.action.localeCompare(d7.action));
    const u2 = {};
    f6.forEach((l6) => {
      u2[l6.ability] || (u2[l6.ability] = []), u2[l6.ability].push(l6.action);
    });
    const a3 = Object.keys(u2).map((l6) => (o5++, `(${o5}) '${l6}': '${u2[l6].join("', '")}' for '${c6}'.`));
    r3.push(a3.join(", ").replace(".,", "."));
  });
  const s2 = r3.join(" "), i3 = `${n4}${s2}`;
  return `${t ? t + " " : ""}${i3}`;
}
function Fc(t) {
  var e2;
  const n4 = kt2(t);
  yt2(n4);
  const r3 = (e2 = n4.att) == null ? void 0 : e2.eip155;
  return r3 ? Object.keys(r3).map((o5) => o5.split("/")[1]) : [];
}
function Zc(t) {
  const e2 = kt2(t);
  yt2(e2);
  const n4 = [];
  return Object.values(e2.att).forEach((r3) => {
    Object.values(r3).forEach((o5) => {
      var s2;
      (s2 = o5?.[0]) != null && s2.chains && n4.push(o5[0].chains);
    });
  }), [...new Set(n4.flat())];
}
function je2(t) {
  if (!t) return;
  const e2 = t?.[t.length - 1];
  return mn2(e2) ? e2 : void 0;
}
function lo2(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function vn2(t) {
  if (typeof t != "boolean") throw new Error(`boolean expected, not ${t}`);
}
function xn2(t) {
  if (!Number.isSafeInteger(t) || t < 0) throw new Error("positive integer expected, got " + t);
}
function ot(t, ...e2) {
  if (!lo2(t)) throw new Error("Uint8Array expected");
  if (e2.length > 0 && !e2.includes(t.length)) throw new Error("Uint8Array expected of length " + e2 + ", got length=" + t.length);
}
function ho2(t, e2 = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e2 && t.finished) throw new Error("Hash#digest() has already been called");
}
function Gc(t, e2) {
  ot(t);
  const n4 = e2.outputLen;
  if (t.length < n4) throw new Error("digestInto() expects output buffer of length at least " + n4);
}
function Pt2(t) {
  return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
}
function Qt2(...t) {
  for (let e2 = 0; e2 < t.length; e2++) t[e2].fill(0);
}
function zc(t) {
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
var Yc = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Wc(t) {
  if (typeof t != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
function En2(t) {
  if (typeof t == "string") t = Wc(t);
  else if (lo2(t)) t = Bn2(t);
  else throw new Error("Uint8Array expected, got " + typeof t);
  return t;
}
function Xc(t, e2) {
  if (e2 == null || typeof e2 != "object") throw new Error("options must be defined");
  return Object.assign(t, e2);
}
function Jc(t, e2) {
  if (t.length !== e2.length) return false;
  let n4 = 0;
  for (let r3 = 0; r3 < t.length; r3++) n4 |= t[r3] ^ e2[r3];
  return n4 === 0;
}
var Qc = (t, e2) => {
  function n4(r3, ...o5) {
    if (ot(r3), !Yc) throw new Error("Non little-endian hardware is not yet supported");
    if (t.nonceLength !== void 0) {
      const a3 = o5[0];
      if (!a3) throw new Error("nonce / iv required");
      t.varSizeNonce ? ot(a3) : ot(a3, t.nonceLength);
    }
    const s2 = t.tagLength;
    s2 && o5[1] !== void 0 && ot(o5[1]);
    const i3 = e2(r3, ...o5), c6 = (a3, l6) => {
      if (l6 !== void 0) {
        if (a3 !== 2) throw new Error("cipher output not supported");
        ot(l6);
      }
    };
    let f6 = false;
    return { encrypt(a3, l6) {
      if (f6) throw new Error("cannot encrypt() twice with same key + nonce");
      return f6 = true, ot(a3), c6(i3.encrypt.length, l6), i3.encrypt(a3, l6);
    }, decrypt(a3, l6) {
      if (ot(a3), s2 && a3.length < s2) throw new Error("invalid ciphertext length: smaller than tagLength=" + s2);
      return c6(i3.decrypt.length, l6), i3.decrypt(a3, l6);
    } };
  }
  return Object.assign(n4, t), n4;
};
function po2(t, e2, n4 = true) {
  if (e2 === void 0) return new Uint8Array(t);
  if (e2.length !== t) throw new Error("invalid output length, expected " + t + ", got: " + e2.length);
  if (n4 && !ef(e2)) throw new Error("invalid output, must be aligned");
  return e2;
}
function go2(t, e2, n4, r3) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e2, n4, r3);
  const o5 = BigInt(32), s2 = BigInt(4294967295), i3 = Number(n4 >> o5 & s2), c6 = Number(n4 & s2), f6 = r3 ? 4 : 0, u2 = r3 ? 0 : 4;
  t.setUint32(e2 + f6, i3, r3), t.setUint32(e2 + u2, c6, r3);
}
function tf(t, e2, n4) {
  vn2(n4);
  const r3 = new Uint8Array(16), o5 = zc(r3);
  return go2(o5, 0, BigInt(e2), n4), go2(o5, 8, BigInt(t), n4), r3;
}
function ef(t) {
  return t.byteOffset % 4 === 0;
}
function Bn2(t) {
  return Uint8Array.from(t);
}
var bo2 = (t) => Uint8Array.from(t.split("").map((e2) => e2.charCodeAt(0)));
var nf = bo2("expand 16-byte k");
var rf = bo2("expand 32-byte k");
var of = Pt2(nf);
var sf = Pt2(rf);
function K3(t, e2) {
  return t << e2 | t >>> 32 - e2;
}
function An2(t) {
  return t.byteOffset % 4 === 0;
}
var Le2 = 64;
var cf = 16;
var yo2 = 2 ** 32 - 1;
var mo2 = new Uint32Array();
function ff(t, e2, n4, r3, o5, s2, i3, c6) {
  const f6 = o5.length, u2 = new Uint8Array(Le2), a3 = Pt2(u2), l6 = An2(o5) && An2(s2), d7 = l6 ? Pt2(o5) : mo2, h4 = l6 ? Pt2(s2) : mo2;
  for (let y4 = 0; y4 < f6; i3++) {
    if (t(e2, n4, r3, a3, i3, c6), i3 >= yo2) throw new Error("arx: counter overflow");
    const m4 = Math.min(Le2, f6 - y4);
    if (l6 && m4 === Le2) {
      const v6 = y4 / 4;
      if (y4 % 4 !== 0) throw new Error("arx: invalid block position");
      for (let U3 = 0, F2; U3 < cf; U3++) F2 = v6 + U3, h4[F2] = d7[F2] ^ a3[U3];
      y4 += Le2;
      continue;
    }
    for (let v6 = 0, U3; v6 < m4; v6++) U3 = y4 + v6, s2[U3] = o5[U3] ^ u2[v6];
    y4 += m4;
  }
}
function af(t, e2) {
  const { allowShortKeys: n4, extendNonceFn: r3, counterLength: o5, counterRight: s2, rounds: i3 } = Xc({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, e2);
  if (typeof t != "function") throw new Error("core must be a function");
  return xn2(o5), xn2(i3), vn2(s2), vn2(n4), (c6, f6, u2, a3, l6 = 0) => {
    ot(c6), ot(f6), ot(u2);
    const d7 = u2.length;
    if (a3 === void 0 && (a3 = new Uint8Array(d7)), ot(a3), xn2(l6), l6 < 0 || l6 >= yo2) throw new Error("arx: counter overflow");
    if (a3.length < d7) throw new Error(`arx: output (${a3.length}) is shorter than data (${d7})`);
    const h4 = [];
    let y4 = c6.length, m4, v6;
    if (y4 === 32) h4.push(m4 = Bn2(c6)), v6 = sf;
    else if (y4 === 16 && n4) m4 = new Uint8Array(32), m4.set(c6), m4.set(c6, 16), v6 = of, h4.push(m4);
    else throw new Error(`arx: invalid 32-byte key, got length=${y4}`);
    An2(f6) || h4.push(f6 = Bn2(f6));
    const U3 = Pt2(m4);
    if (r3) {
      if (f6.length !== 24) throw new Error("arx: extended nonce must be 24 bytes");
      r3(v6, U3, Pt2(f6.subarray(0, 16)), U3), f6 = f6.subarray(16);
    }
    const F2 = 16 - o5;
    if (F2 !== f6.length) throw new Error(`arx: nonce must be ${F2} or 16 bytes`);
    if (F2 !== 12) {
      const Z2 = new Uint8Array(12);
      Z2.set(f6, s2 ? 0 : 12 - f6.length), f6 = Z2, h4.push(f6);
    }
    const R4 = Pt2(f6);
    return ff(t, v6, U3, R4, u2, a3, l6, i3), Qt2(...h4), a3;
  };
}
var W2 = (t, e2) => t[e2++] & 255 | (t[e2++] & 255) << 8;
var uf = class {
  constructor(e2) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = false, e2 = En2(e2), ot(e2, 32);
    const n4 = W2(e2, 0), r3 = W2(e2, 2), o5 = W2(e2, 4), s2 = W2(e2, 6), i3 = W2(e2, 8), c6 = W2(e2, 10), f6 = W2(e2, 12), u2 = W2(e2, 14);
    this.r[0] = n4 & 8191, this.r[1] = (n4 >>> 13 | r3 << 3) & 8191, this.r[2] = (r3 >>> 10 | o5 << 6) & 7939, this.r[3] = (o5 >>> 7 | s2 << 9) & 8191, this.r[4] = (s2 >>> 4 | i3 << 12) & 255, this.r[5] = i3 >>> 1 & 8190, this.r[6] = (i3 >>> 14 | c6 << 2) & 8191, this.r[7] = (c6 >>> 11 | f6 << 5) & 8065, this.r[8] = (f6 >>> 8 | u2 << 8) & 8191, this.r[9] = u2 >>> 5 & 127;
    for (let a3 = 0; a3 < 8; a3++) this.pad[a3] = W2(e2, 16 + 2 * a3);
  }
  process(e2, n4, r3 = false) {
    const o5 = r3 ? 0 : 2048, { h: s2, r: i3 } = this, c6 = i3[0], f6 = i3[1], u2 = i3[2], a3 = i3[3], l6 = i3[4], d7 = i3[5], h4 = i3[6], y4 = i3[7], m4 = i3[8], v6 = i3[9], U3 = W2(e2, n4 + 0), F2 = W2(e2, n4 + 2), R4 = W2(e2, n4 + 4), Z2 = W2(e2, n4 + 6), H3 = W2(e2, n4 + 8), j6 = W2(e2, n4 + 10), L3 = W2(e2, n4 + 12), k4 = W2(e2, n4 + 14);
    let O5 = s2[0] + (U3 & 8191), T4 = s2[1] + ((U3 >>> 13 | F2 << 3) & 8191), C5 = s2[2] + ((F2 >>> 10 | R4 << 6) & 8191), _3 = s2[3] + ((R4 >>> 7 | Z2 << 9) & 8191), p4 = s2[4] + ((Z2 >>> 4 | H3 << 12) & 8191), b4 = s2[5] + (H3 >>> 1 & 8191), g4 = s2[6] + ((H3 >>> 14 | j6 << 2) & 8191), x5 = s2[7] + ((j6 >>> 11 | L3 << 5) & 8191), E4 = s2[8] + ((L3 >>> 8 | k4 << 8) & 8191), A3 = s2[9] + (k4 >>> 5 | o5), w5 = 0, B2 = w5 + O5 * c6 + T4 * (5 * v6) + C5 * (5 * m4) + _3 * (5 * y4) + p4 * (5 * h4);
    w5 = B2 >>> 13, B2 &= 8191, B2 += b4 * (5 * d7) + g4 * (5 * l6) + x5 * (5 * a3) + E4 * (5 * u2) + A3 * (5 * f6), w5 += B2 >>> 13, B2 &= 8191;
    let I2 = w5 + O5 * f6 + T4 * c6 + C5 * (5 * v6) + _3 * (5 * m4) + p4 * (5 * y4);
    w5 = I2 >>> 13, I2 &= 8191, I2 += b4 * (5 * h4) + g4 * (5 * d7) + x5 * (5 * l6) + E4 * (5 * a3) + A3 * (5 * u2), w5 += I2 >>> 13, I2 &= 8191;
    let N12 = w5 + O5 * u2 + T4 * f6 + C5 * c6 + _3 * (5 * v6) + p4 * (5 * m4);
    w5 = N12 >>> 13, N12 &= 8191, N12 += b4 * (5 * y4) + g4 * (5 * h4) + x5 * (5 * d7) + E4 * (5 * l6) + A3 * (5 * a3), w5 += N12 >>> 13, N12 &= 8191;
    let D3 = w5 + O5 * a3 + T4 * u2 + C5 * f6 + _3 * c6 + p4 * (5 * v6);
    w5 = D3 >>> 13, D3 &= 8191, D3 += b4 * (5 * m4) + g4 * (5 * y4) + x5 * (5 * h4) + E4 * (5 * d7) + A3 * (5 * l6), w5 += D3 >>> 13, D3 &= 8191;
    let P6 = w5 + O5 * l6 + T4 * a3 + C5 * u2 + _3 * f6 + p4 * c6;
    w5 = P6 >>> 13, P6 &= 8191, P6 += b4 * (5 * v6) + g4 * (5 * m4) + x5 * (5 * y4) + E4 * (5 * h4) + A3 * (5 * d7), w5 += P6 >>> 13, P6 &= 8191;
    let $4 = w5 + O5 * d7 + T4 * l6 + C5 * a3 + _3 * u2 + p4 * f6;
    w5 = $4 >>> 13, $4 &= 8191, $4 += b4 * c6 + g4 * (5 * v6) + x5 * (5 * m4) + E4 * (5 * y4) + A3 * (5 * h4), w5 += $4 >>> 13, $4 &= 8191;
    let V3 = w5 + O5 * h4 + T4 * d7 + C5 * l6 + _3 * a3 + p4 * u2;
    w5 = V3 >>> 13, V3 &= 8191, V3 += b4 * f6 + g4 * c6 + x5 * (5 * v6) + E4 * (5 * m4) + A3 * (5 * y4), w5 += V3 >>> 13, V3 &= 8191;
    let q2 = w5 + O5 * y4 + T4 * h4 + C5 * d7 + _3 * l6 + p4 * a3;
    w5 = q2 >>> 13, q2 &= 8191, q2 += b4 * u2 + g4 * f6 + x5 * c6 + E4 * (5 * v6) + A3 * (5 * m4), w5 += q2 >>> 13, q2 &= 8191;
    let G5 = w5 + O5 * m4 + T4 * y4 + C5 * h4 + _3 * d7 + p4 * l6;
    w5 = G5 >>> 13, G5 &= 8191, G5 += b4 * a3 + g4 * u2 + x5 * f6 + E4 * c6 + A3 * (5 * v6), w5 += G5 >>> 13, G5 &= 8191;
    let M5 = w5 + O5 * v6 + T4 * m4 + C5 * y4 + _3 * h4 + p4 * d7;
    w5 = M5 >>> 13, M5 &= 8191, M5 += b4 * l6 + g4 * a3 + x5 * u2 + E4 * f6 + A3 * c6, w5 += M5 >>> 13, M5 &= 8191, w5 = (w5 << 2) + w5 | 0, w5 = w5 + B2 | 0, B2 = w5 & 8191, w5 = w5 >>> 13, I2 += w5, s2[0] = B2, s2[1] = I2, s2[2] = N12, s2[3] = D3, s2[4] = P6, s2[5] = $4, s2[6] = V3, s2[7] = q2, s2[8] = G5, s2[9] = M5;
  }
  finalize() {
    const { h: e2, pad: n4 } = this, r3 = new Uint16Array(10);
    let o5 = e2[1] >>> 13;
    e2[1] &= 8191;
    for (let c6 = 2; c6 < 10; c6++) e2[c6] += o5, o5 = e2[c6] >>> 13, e2[c6] &= 8191;
    e2[0] += o5 * 5, o5 = e2[0] >>> 13, e2[0] &= 8191, e2[1] += o5, o5 = e2[1] >>> 13, e2[1] &= 8191, e2[2] += o5, r3[0] = e2[0] + 5, o5 = r3[0] >>> 13, r3[0] &= 8191;
    for (let c6 = 1; c6 < 10; c6++) r3[c6] = e2[c6] + o5, o5 = r3[c6] >>> 13, r3[c6] &= 8191;
    r3[9] -= 8192;
    let s2 = (o5 ^ 1) - 1;
    for (let c6 = 0; c6 < 10; c6++) r3[c6] &= s2;
    s2 = ~s2;
    for (let c6 = 0; c6 < 10; c6++) e2[c6] = e2[c6] & s2 | r3[c6];
    e2[0] = (e2[0] | e2[1] << 13) & 65535, e2[1] = (e2[1] >>> 3 | e2[2] << 10) & 65535, e2[2] = (e2[2] >>> 6 | e2[3] << 7) & 65535, e2[3] = (e2[3] >>> 9 | e2[4] << 4) & 65535, e2[4] = (e2[4] >>> 12 | e2[5] << 1 | e2[6] << 14) & 65535, e2[5] = (e2[6] >>> 2 | e2[7] << 11) & 65535, e2[6] = (e2[7] >>> 5 | e2[8] << 8) & 65535, e2[7] = (e2[8] >>> 8 | e2[9] << 5) & 65535;
    let i3 = e2[0] + n4[0];
    e2[0] = i3 & 65535;
    for (let c6 = 1; c6 < 8; c6++) i3 = (e2[c6] + n4[c6] | 0) + (i3 >>> 16) | 0, e2[c6] = i3 & 65535;
    Qt2(r3);
  }
  update(e2) {
    ho2(this), e2 = En2(e2), ot(e2);
    const { buffer: n4, blockLen: r3 } = this, o5 = e2.length;
    for (let s2 = 0; s2 < o5; ) {
      const i3 = Math.min(r3 - this.pos, o5 - s2);
      if (i3 === r3) {
        for (; r3 <= o5 - s2; s2 += r3) this.process(e2, s2);
        continue;
      }
      n4.set(e2.subarray(s2, s2 + i3), this.pos), this.pos += i3, s2 += i3, this.pos === r3 && (this.process(n4, 0, false), this.pos = 0);
    }
    return this;
  }
  destroy() {
    Qt2(this.h, this.r, this.buffer, this.pad);
  }
  digestInto(e2) {
    ho2(this), Gc(e2, this), this.finished = true;
    const { buffer: n4, h: r3 } = this;
    let { pos: o5 } = this;
    if (o5) {
      for (n4[o5++] = 1; o5 < 16; o5++) n4[o5] = 0;
      this.process(n4, 0, true);
    }
    this.finalize();
    let s2 = 0;
    for (let i3 = 0; i3 < 8; i3++) e2[s2++] = r3[i3] >>> 0, e2[s2++] = r3[i3] >>> 8;
    return e2;
  }
  digest() {
    const { buffer: e2, outputLen: n4 } = this;
    this.digestInto(e2);
    const r3 = e2.slice(0, n4);
    return this.destroy(), r3;
  }
};
function lf(t) {
  const e2 = (r3, o5) => t(o5).update(En2(r3)).digest(), n4 = t(new Uint8Array(32));
  return e2.outputLen = n4.outputLen, e2.blockLen = n4.blockLen, e2.create = (r3) => t(r3), e2;
}
var df = lf((t) => new uf(t));
function hf(t, e2, n4, r3, o5, s2 = 20) {
  let i3 = t[0], c6 = t[1], f6 = t[2], u2 = t[3], a3 = e2[0], l6 = e2[1], d7 = e2[2], h4 = e2[3], y4 = e2[4], m4 = e2[5], v6 = e2[6], U3 = e2[7], F2 = o5, R4 = n4[0], Z2 = n4[1], H3 = n4[2], j6 = i3, L3 = c6, k4 = f6, O5 = u2, T4 = a3, C5 = l6, _3 = d7, p4 = h4, b4 = y4, g4 = m4, x5 = v6, E4 = U3, A3 = F2, w5 = R4, B2 = Z2, I2 = H3;
  for (let D3 = 0; D3 < s2; D3 += 2) j6 = j6 + T4 | 0, A3 = K3(A3 ^ j6, 16), b4 = b4 + A3 | 0, T4 = K3(T4 ^ b4, 12), j6 = j6 + T4 | 0, A3 = K3(A3 ^ j6, 8), b4 = b4 + A3 | 0, T4 = K3(T4 ^ b4, 7), L3 = L3 + C5 | 0, w5 = K3(w5 ^ L3, 16), g4 = g4 + w5 | 0, C5 = K3(C5 ^ g4, 12), L3 = L3 + C5 | 0, w5 = K3(w5 ^ L3, 8), g4 = g4 + w5 | 0, C5 = K3(C5 ^ g4, 7), k4 = k4 + _3 | 0, B2 = K3(B2 ^ k4, 16), x5 = x5 + B2 | 0, _3 = K3(_3 ^ x5, 12), k4 = k4 + _3 | 0, B2 = K3(B2 ^ k4, 8), x5 = x5 + B2 | 0, _3 = K3(_3 ^ x5, 7), O5 = O5 + p4 | 0, I2 = K3(I2 ^ O5, 16), E4 = E4 + I2 | 0, p4 = K3(p4 ^ E4, 12), O5 = O5 + p4 | 0, I2 = K3(I2 ^ O5, 8), E4 = E4 + I2 | 0, p4 = K3(p4 ^ E4, 7), j6 = j6 + C5 | 0, I2 = K3(I2 ^ j6, 16), x5 = x5 + I2 | 0, C5 = K3(C5 ^ x5, 12), j6 = j6 + C5 | 0, I2 = K3(I2 ^ j6, 8), x5 = x5 + I2 | 0, C5 = K3(C5 ^ x5, 7), L3 = L3 + _3 | 0, A3 = K3(A3 ^ L3, 16), E4 = E4 + A3 | 0, _3 = K3(_3 ^ E4, 12), L3 = L3 + _3 | 0, A3 = K3(A3 ^ L3, 8), E4 = E4 + A3 | 0, _3 = K3(_3 ^ E4, 7), k4 = k4 + p4 | 0, w5 = K3(w5 ^ k4, 16), b4 = b4 + w5 | 0, p4 = K3(p4 ^ b4, 12), k4 = k4 + p4 | 0, w5 = K3(w5 ^ k4, 8), b4 = b4 + w5 | 0, p4 = K3(p4 ^ b4, 7), O5 = O5 + T4 | 0, B2 = K3(B2 ^ O5, 16), g4 = g4 + B2 | 0, T4 = K3(T4 ^ g4, 12), O5 = O5 + T4 | 0, B2 = K3(B2 ^ O5, 8), g4 = g4 + B2 | 0, T4 = K3(T4 ^ g4, 7);
  let N12 = 0;
  r3[N12++] = i3 + j6 | 0, r3[N12++] = c6 + L3 | 0, r3[N12++] = f6 + k4 | 0, r3[N12++] = u2 + O5 | 0, r3[N12++] = a3 + T4 | 0, r3[N12++] = l6 + C5 | 0, r3[N12++] = d7 + _3 | 0, r3[N12++] = h4 + p4 | 0, r3[N12++] = y4 + b4 | 0, r3[N12++] = m4 + g4 | 0, r3[N12++] = v6 + x5 | 0, r3[N12++] = U3 + E4 | 0, r3[N12++] = F2 + A3 | 0, r3[N12++] = R4 + w5 | 0, r3[N12++] = Z2 + B2 | 0, r3[N12++] = H3 + I2 | 0;
}
var pf = af(hf, { counterRight: false, counterLength: 4, allowShortKeys: false });
var gf = new Uint8Array(16);
var wo2 = (t, e2) => {
  t.update(e2);
  const n4 = e2.length % 16;
  n4 && t.update(gf.subarray(n4));
};
var bf = new Uint8Array(32);
function vo2(t, e2, n4, r3, o5) {
  const s2 = t(e2, n4, bf), i3 = df.create(s2);
  o5 && wo2(i3, o5), wo2(i3, r3);
  const c6 = tf(r3.length, o5 ? o5.length : 0, true);
  i3.update(c6);
  const f6 = i3.digest();
  return Qt2(s2, c6), f6;
}
var yf = (t) => (e2, n4, r3) => ({ encrypt(s2, i3) {
  const c6 = s2.length;
  i3 = po2(c6 + 16, i3, false), i3.set(s2);
  const f6 = i3.subarray(0, -16);
  t(e2, n4, f6, f6, 1);
  const u2 = vo2(t, e2, n4, f6, r3);
  return i3.set(u2, c6), Qt2(u2), i3;
}, decrypt(s2, i3) {
  i3 = po2(s2.length - 16, i3, false);
  const c6 = s2.subarray(0, -16), f6 = s2.subarray(-16), u2 = vo2(t, e2, n4, c6, r3);
  if (!Jc(f6, u2)) throw new Error("invalid tag");
  return i3.set(s2.subarray(0, -16)), t(e2, n4, i3, i3, 1), Qt2(u2), i3;
} });
var xo2 = Qc({ blockSize: 64, nonceLength: 12, tagLength: 16 }, yf(pf));
var Eo2 = class extends Re2 {
  constructor(e2, n4) {
    super(), this.finished = false, this.destroyed = false, Ue2(e2);
    const r3 = pt(n4);
    if (this.iHash = e2.create(), typeof this.iHash.update != "function") throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o5 = this.blockLen, s2 = new Uint8Array(o5);
    s2.set(r3.length > o5 ? e2.create().update(r3).digest() : r3);
    for (let i3 = 0; i3 < s2.length; i3++) s2[i3] ^= 54;
    this.iHash.update(s2), this.oHash = e2.create();
    for (let i3 = 0; i3 < s2.length; i3++) s2[i3] ^= 106;
    this.oHash.update(s2), lt2(s2);
  }
  update(e2) {
    return Nt2(this), this.iHash.update(e2), this;
  }
  digestInto(e2) {
    Nt2(this), ht2(e2, this.outputLen), this.finished = true, this.iHash.digestInto(e2), this.oHash.update(e2), this.oHash.digestInto(e2), this.destroy();
  }
  digest() {
    const e2 = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e2), e2;
  }
  _cloneInto(e2) {
    e2 || (e2 = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n4, iHash: r3, finished: o5, destroyed: s2, blockLen: i3, outputLen: c6 } = this;
    return e2 = e2, e2.finished = o5, e2.destroyed = s2, e2.blockLen = i3, e2.outputLen = c6, e2.oHash = n4._cloneInto(e2.oHash), e2.iHash = r3._cloneInto(e2.iHash), e2;
  }
  clone() {
    return this._cloneInto();
  }
  destroy() {
    this.destroyed = true, this.oHash.destroy(), this.iHash.destroy();
  }
};
var ke2 = (t, e2, n4) => new Eo2(t, e2).update(n4).digest();
ke2.create = (t, e2) => new Eo2(t, e2);
function mf(t, e2, n4) {
  return Ue2(t), n4 === void 0 && (n4 = new Uint8Array(t.outputLen)), ke2(t, pt(n4), pt(e2));
}
var In2 = Uint8Array.from([0]);
var Bo2 = Uint8Array.of();
function wf(t, e2, n4, r3 = 32) {
  Ue2(t), mt(r3);
  const o5 = t.outputLen;
  if (r3 > 255 * o5) throw new Error("Length should be <= 255*HashLen");
  const s2 = Math.ceil(r3 / o5);
  n4 === void 0 && (n4 = Bo2);
  const i3 = new Uint8Array(s2 * o5), c6 = ke2.create(t, e2), f6 = c6._cloneInto(), u2 = new Uint8Array(c6.outputLen);
  for (let a3 = 0; a3 < s2; a3++) In2[0] = a3 + 1, f6.update(a3 === 0 ? Bo2 : u2).update(n4).update(In2).digestInto(u2), i3.set(u2, o5 * a3), c6._cloneInto(f6);
  return c6.destroy(), f6.destroy(), lt2(u2, In2), i3.slice(0, r3);
}
var vf = (t, e2, n4, r3, o5) => wf(t, mf(t, e2, n4), r3, o5);
var Pe2 = $e2;
var Sn2 = BigInt(0);
var On2 = BigInt(1);
function He2(t, e2 = "") {
  if (typeof t != "boolean") {
    const n4 = e2 && `"${e2}"`;
    throw new Error(n4 + "expected boolean, got type=" + typeof t);
  }
  return t;
}
function Kt2(t, e2, n4 = "") {
  const r3 = Ne2(t), o5 = t?.length, s2 = e2 !== void 0;
  if (!r3 || s2 && o5 !== e2) {
    const i3 = n4 && `"${n4}" `, c6 = s2 ? ` of length ${e2}` : "", f6 = r3 ? `length=${o5}` : `type=${typeof t}`;
    throw new Error(i3 + "expected Uint8Array" + c6 + ", got " + f6);
  }
  return t;
}
function De2(t) {
  const e2 = t.toString(16);
  return e2.length & 1 ? "0" + e2 : e2;
}
function Ao2(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  return t === "" ? Sn2 : BigInt("0x" + t);
}
function Ve2(t) {
  return Ao2(Jt2(t));
}
function Me2(t) {
  return ht2(t), Ao2(Jt2(Uint8Array.from(t).reverse()));
}
function Nn2(t, e2) {
  return _e2(t.toString(16).padStart(e2 * 2, "0"));
}
function Un2(t, e2) {
  return Nn2(t, e2).reverse();
}
function tt(t, e2, n4) {
  let r3;
  if (typeof e2 == "string") try {
    r3 = _e2(e2);
  } catch (s2) {
    throw new Error(t + " must be hex string or Uint8Array, cause: " + s2);
  }
  else if (Ne2(e2)) r3 = Uint8Array.from(e2);
  else throw new Error(t + " must be hex string or Uint8Array");
  const o5 = r3.length;
  if (typeof n4 == "number" && o5 !== n4) throw new Error(t + " of length " + n4 + " expected, got " + o5);
  return r3;
}
var _n2 = (t) => typeof t == "bigint" && Sn2 <= t;
function xf(t, e2, n4) {
  return _n2(t) && _n2(e2) && _n2(n4) && e2 <= t && t < n4;
}
function Rn2(t, e2, n4, r3) {
  if (!xf(e2, n4, r3)) throw new Error("expected valid " + t + ": " + n4 + " <= n < " + r3 + ", got " + e2);
}
function Io2(t) {
  let e2;
  for (e2 = 0; t > Sn2; t >>= On2, e2 += 1) ;
  return e2;
}
var ye2 = (t) => (On2 << BigInt(t)) - On2;
function Ef(t, e2, n4) {
  if (typeof t != "number" || t < 2) throw new Error("hashLen must be a number");
  if (typeof e2 != "number" || e2 < 2) throw new Error("qByteLen must be a number");
  if (typeof n4 != "function") throw new Error("hmacFn must be a function");
  const r3 = (h4) => new Uint8Array(h4), o5 = (h4) => Uint8Array.of(h4);
  let s2 = r3(t), i3 = r3(t), c6 = 0;
  const f6 = () => {
    s2.fill(1), i3.fill(0), c6 = 0;
  }, u2 = (...h4) => n4(i3, s2, ...h4), a3 = (h4 = r3(0)) => {
    i3 = u2(o5(0), h4), s2 = u2(), h4.length !== 0 && (i3 = u2(o5(1), h4), s2 = u2());
  }, l6 = () => {
    if (c6++ >= 1e3) throw new Error("drbg: tried 1000 values");
    let h4 = 0;
    const y4 = [];
    for (; h4 < e2; ) {
      s2 = u2();
      const m4 = s2.slice();
      y4.push(m4), h4 += s2.length;
    }
    return _t2(...y4);
  };
  return (h4, y4) => {
    f6(), a3(h4);
    let m4;
    for (; !(m4 = y4(l6())); ) a3();
    return f6(), m4;
  };
}
function Ke2(t, e2, n4 = {}) {
  if (!t || typeof t != "object") throw new Error("expected valid options object");
  function r3(o5, s2, i3) {
    const c6 = t[o5];
    if (i3 && c6 === void 0) return;
    const f6 = typeof c6;
    if (f6 !== s2 || c6 === null) throw new Error(`param "${o5}" is invalid: expected ${s2}, got ${f6}`);
  }
  Object.entries(e2).forEach(([o5, s2]) => r3(o5, s2, false)), Object.entries(n4).forEach(([o5, s2]) => r3(o5, s2, true));
}
function So2(t) {
  const e2 = /* @__PURE__ */ new WeakMap();
  return (n4, ...r3) => {
    const o5 = e2.get(n4);
    if (o5 !== void 0) return o5;
    const s2 = t(n4, ...r3);
    return e2.set(n4, s2), s2;
  };
}
var st = BigInt(0);
var nt2 = BigInt(1);
var qt2 = BigInt(2);
var Oo2 = BigInt(3);
var No2 = BigInt(4);
var Uo2 = BigInt(5);
var Bf = BigInt(7);
var _o2 = BigInt(8);
var Af = BigInt(9);
var Ro2 = BigInt(16);
function ct2(t, e2) {
  const n4 = t % e2;
  return n4 >= st ? n4 : e2 + n4;
}
function gt2(t, e2, n4) {
  let r3 = t;
  for (; e2-- > st; ) r3 *= r3, r3 %= n4;
  return r3;
}
function $o2(t, e2) {
  if (t === st) throw new Error("invert: expected non-zero number");
  if (e2 <= st) throw new Error("invert: expected positive modulus, got " + e2);
  let n4 = ct2(t, e2), r3 = e2, o5 = st, s2 = nt2;
  for (; n4 !== st; ) {
    const c6 = r3 / n4, f6 = r3 % n4, u2 = o5 - s2 * c6;
    r3 = n4, n4 = f6, o5 = s2, s2 = u2;
  }
  if (r3 !== nt2) throw new Error("invert: does not exist");
  return ct2(o5, e2);
}
function $n2(t, e2, n4) {
  if (!t.eql(t.sqr(e2), n4)) throw new Error("Cannot find square root");
}
function To2(t, e2) {
  const n4 = (t.ORDER + nt2) / No2, r3 = t.pow(e2, n4);
  return $n2(t, r3, e2), r3;
}
function If(t, e2) {
  const n4 = (t.ORDER - Uo2) / _o2, r3 = t.mul(e2, qt2), o5 = t.pow(r3, n4), s2 = t.mul(e2, o5), i3 = t.mul(t.mul(s2, qt2), o5), c6 = t.mul(s2, t.sub(i3, t.ONE));
  return $n2(t, c6, e2), c6;
}
function Sf(t) {
  const e2 = Ht2(t), n4 = Co2(t), r3 = n4(e2, e2.neg(e2.ONE)), o5 = n4(e2, r3), s2 = n4(e2, e2.neg(r3)), i3 = (t + Bf) / Ro2;
  return (c6, f6) => {
    let u2 = c6.pow(f6, i3), a3 = c6.mul(u2, r3);
    const l6 = c6.mul(u2, o5), d7 = c6.mul(u2, s2), h4 = c6.eql(c6.sqr(a3), f6), y4 = c6.eql(c6.sqr(l6), f6);
    u2 = c6.cmov(u2, a3, h4), a3 = c6.cmov(d7, l6, y4);
    const m4 = c6.eql(c6.sqr(a3), f6), v6 = c6.cmov(u2, a3, m4);
    return $n2(c6, v6, f6), v6;
  };
}
function Co2(t) {
  if (t < Oo2) throw new Error("sqrt is not defined for small field");
  let e2 = t - nt2, n4 = 0;
  for (; e2 % qt2 === st; ) e2 /= qt2, n4++;
  let r3 = qt2;
  const o5 = Ht2(t);
  for (; Lo2(o5, r3) === 1; ) if (r3++ > 1e3) throw new Error("Cannot find square root: probably non-prime P");
  if (n4 === 1) return To2;
  let s2 = o5.pow(r3, e2);
  const i3 = (e2 + nt2) / qt2;
  return function(f6, u2) {
    if (f6.is0(u2)) return u2;
    if (Lo2(f6, u2) !== 1) throw new Error("Cannot find square root");
    let a3 = n4, l6 = f6.mul(f6.ONE, s2), d7 = f6.pow(u2, e2), h4 = f6.pow(u2, i3);
    for (; !f6.eql(d7, f6.ONE); ) {
      if (f6.is0(d7)) return f6.ZERO;
      let y4 = 1, m4 = f6.sqr(d7);
      for (; !f6.eql(m4, f6.ONE); ) if (y4++, m4 = f6.sqr(m4), y4 === a3) throw new Error("Cannot find square root");
      const v6 = nt2 << BigInt(a3 - y4 - 1), U3 = f6.pow(l6, v6);
      a3 = y4, l6 = f6.sqr(U3), d7 = f6.mul(d7, l6), h4 = f6.mul(h4, U3);
    }
    return h4;
  };
}
function Of(t) {
  return t % No2 === Oo2 ? To2 : t % _o2 === Uo2 ? If : t % Ro2 === Af ? Sf(t) : Co2(t);
}
var Nf = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function Uf(t) {
  const e2 = { ORDER: "bigint", MASK: "bigint", BYTES: "number", BITS: "number" }, n4 = Nf.reduce((r3, o5) => (r3[o5] = "function", r3), e2);
  return Ke2(t, n4), t;
}
function _f(t, e2, n4) {
  if (n4 < st) throw new Error("invalid exponent, negatives unsupported");
  if (n4 === st) return t.ONE;
  if (n4 === nt2) return e2;
  let r3 = t.ONE, o5 = e2;
  for (; n4 > st; ) n4 & nt2 && (r3 = t.mul(r3, o5)), o5 = t.sqr(o5), n4 >>= nt2;
  return r3;
}
function jo2(t, e2, n4 = false) {
  const r3 = new Array(e2.length).fill(n4 ? t.ZERO : void 0), o5 = e2.reduce((i3, c6, f6) => t.is0(c6) ? i3 : (r3[f6] = i3, t.mul(i3, c6)), t.ONE), s2 = t.inv(o5);
  return e2.reduceRight((i3, c6, f6) => t.is0(c6) ? i3 : (r3[f6] = t.mul(i3, r3[f6]), t.mul(i3, c6)), s2), r3;
}
function Lo2(t, e2) {
  const n4 = (t.ORDER - nt2) / qt2, r3 = t.pow(e2, n4), o5 = t.eql(r3, t.ONE), s2 = t.eql(r3, t.ZERO), i3 = t.eql(r3, t.neg(t.ONE));
  if (!o5 && !s2 && !i3) throw new Error("invalid Legendre symbol result");
  return o5 ? 1 : s2 ? 0 : -1;
}
function ko2(t, e2) {
  e2 !== void 0 && mt(e2);
  const n4 = e2 !== void 0 ? e2 : t.toString(2).length, r3 = Math.ceil(n4 / 8);
  return { nBitLength: n4, nByteLength: r3 };
}
function Ht2(t, e2, n4 = false, r3 = {}) {
  if (t <= st) throw new Error("invalid field: expected ORDER > 0, got " + t);
  let o5, s2, i3 = false, c6;
  if (typeof e2 == "object" && e2 != null) {
    if (r3.sqrt || n4) throw new Error("cannot specify opts in two arguments");
    const d7 = e2;
    d7.BITS && (o5 = d7.BITS), d7.sqrt && (s2 = d7.sqrt), typeof d7.isLE == "boolean" && (n4 = d7.isLE), typeof d7.modFromBytes == "boolean" && (i3 = d7.modFromBytes), c6 = d7.allowedLengths;
  } else typeof e2 == "number" && (o5 = e2), r3.sqrt && (s2 = r3.sqrt);
  const { nBitLength: f6, nByteLength: u2 } = ko2(t, o5);
  if (u2 > 2048) throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a3;
  const l6 = Object.freeze({ ORDER: t, isLE: n4, BITS: f6, BYTES: u2, MASK: ye2(f6), ZERO: st, ONE: nt2, allowedLengths: c6, create: (d7) => ct2(d7, t), isValid: (d7) => {
    if (typeof d7 != "bigint") throw new Error("invalid field element: expected bigint, got " + typeof d7);
    return st <= d7 && d7 < t;
  }, is0: (d7) => d7 === st, isValidNot0: (d7) => !l6.is0(d7) && l6.isValid(d7), isOdd: (d7) => (d7 & nt2) === nt2, neg: (d7) => ct2(-d7, t), eql: (d7, h4) => d7 === h4, sqr: (d7) => ct2(d7 * d7, t), add: (d7, h4) => ct2(d7 + h4, t), sub: (d7, h4) => ct2(d7 - h4, t), mul: (d7, h4) => ct2(d7 * h4, t), pow: (d7, h4) => _f(l6, d7, h4), div: (d7, h4) => ct2(d7 * $o2(h4, t), t), sqrN: (d7) => d7 * d7, addN: (d7, h4) => d7 + h4, subN: (d7, h4) => d7 - h4, mulN: (d7, h4) => d7 * h4, inv: (d7) => $o2(d7, t), sqrt: s2 || ((d7) => (a3 || (a3 = Of(t)), a3(l6, d7))), toBytes: (d7) => n4 ? Un2(d7, u2) : Nn2(d7, u2), fromBytes: (d7, h4 = true) => {
    if (c6) {
      if (!c6.includes(d7.length) || d7.length > u2) throw new Error("Field.fromBytes: expected " + c6 + " bytes, got " + d7.length);
      const m4 = new Uint8Array(u2);
      m4.set(d7, n4 ? 0 : m4.length - d7.length), d7 = m4;
    }
    if (d7.length !== u2) throw new Error("Field.fromBytes: expected " + u2 + " bytes, got " + d7.length);
    let y4 = n4 ? Me2(d7) : Ve2(d7);
    if (i3 && (y4 = ct2(y4, t)), !h4 && !l6.isValid(y4)) throw new Error("invalid field element: outside of range 0..ORDER");
    return y4;
  }, invertBatch: (d7) => jo2(l6, d7), cmov: (d7, h4, y4) => y4 ? h4 : d7 });
  return Object.freeze(l6);
}
function Po2(t) {
  if (typeof t != "bigint") throw new Error("field order must be bigint");
  const e2 = t.toString(2).length;
  return Math.ceil(e2 / 8);
}
function Ho2(t) {
  const e2 = Po2(t);
  return e2 + Math.ceil(e2 / 2);
}
function Rf(t, e2, n4 = false) {
  const r3 = t.length, o5 = Po2(e2), s2 = Ho2(e2);
  if (r3 < 16 || r3 < s2 || r3 > 1024) throw new Error("expected " + s2 + "-1024 bytes of input, got " + r3);
  const i3 = n4 ? Me2(t) : Ve2(t), c6 = ct2(i3, e2 - nt2) + nt2;
  return n4 ? Un2(c6, o5) : Nn2(c6, o5);
}
var te2 = BigInt(0);
var Ft2 = BigInt(1);
function qe2(t, e2) {
  const n4 = e2.negate();
  return t ? n4 : e2;
}
function Tn2(t, e2) {
  const n4 = jo2(t.Fp, e2.map((r3) => r3.Z));
  return e2.map((r3, o5) => t.fromAffine(r3.toAffine(n4[o5])));
}
function Do2(t, e2) {
  if (!Number.isSafeInteger(t) || t <= 0 || t > e2) throw new Error("invalid window size, expected [1.." + e2 + "], got W=" + t);
}
function Cn2(t, e2) {
  Do2(t, e2);
  const n4 = Math.ceil(e2 / t) + 1, r3 = 2 ** (t - 1), o5 = 2 ** t, s2 = ye2(t), i3 = BigInt(t);
  return { windows: n4, windowSize: r3, mask: s2, maxNumber: o5, shiftBy: i3 };
}
function Vo2(t, e2, n4) {
  const { windowSize: r3, mask: o5, maxNumber: s2, shiftBy: i3 } = n4;
  let c6 = Number(t & o5), f6 = t >> i3;
  c6 > r3 && (c6 -= s2, f6 += Ft2);
  const u2 = e2 * r3, a3 = u2 + Math.abs(c6) - 1, l6 = c6 === 0, d7 = c6 < 0, h4 = e2 % 2 !== 0;
  return { nextN: f6, offset: a3, isZero: l6, isNeg: d7, isNegF: h4, offsetF: u2 };
}
function $f(t, e2) {
  if (!Array.isArray(t)) throw new Error("array expected");
  t.forEach((n4, r3) => {
    if (!(n4 instanceof e2)) throw new Error("invalid point at index " + r3);
  });
}
function Tf(t, e2) {
  if (!Array.isArray(t)) throw new Error("array of scalars expected");
  t.forEach((n4, r3) => {
    if (!e2.isValid(n4)) throw new Error("invalid scalar at index " + r3);
  });
}
var jn2 = /* @__PURE__ */ new WeakMap();
var Mo2 = /* @__PURE__ */ new WeakMap();
function Ln2(t) {
  return Mo2.get(t) || 1;
}
function Ko2(t) {
  if (t !== te2) throw new Error("invalid wNAF");
}
var Cf = class {
  constructor(e2, n4) {
    this.BASE = e2.BASE, this.ZERO = e2.ZERO, this.Fn = e2.Fn, this.bits = n4;
  }
  _unsafeLadder(e2, n4, r3 = this.ZERO) {
    let o5 = e2;
    for (; n4 > te2; ) n4 & Ft2 && (r3 = r3.add(o5)), o5 = o5.double(), n4 >>= Ft2;
    return r3;
  }
  precomputeWindow(e2, n4) {
    const { windows: r3, windowSize: o5 } = Cn2(n4, this.bits), s2 = [];
    let i3 = e2, c6 = i3;
    for (let f6 = 0; f6 < r3; f6++) {
      c6 = i3, s2.push(c6);
      for (let u2 = 1; u2 < o5; u2++) c6 = c6.add(i3), s2.push(c6);
      i3 = c6.double();
    }
    return s2;
  }
  wNAF(e2, n4, r3) {
    if (!this.Fn.isValid(r3)) throw new Error("invalid scalar");
    let o5 = this.ZERO, s2 = this.BASE;
    const i3 = Cn2(e2, this.bits);
    for (let c6 = 0; c6 < i3.windows; c6++) {
      const { nextN: f6, offset: u2, isZero: a3, isNeg: l6, isNegF: d7, offsetF: h4 } = Vo2(r3, c6, i3);
      r3 = f6, a3 ? s2 = s2.add(qe2(d7, n4[h4])) : o5 = o5.add(qe2(l6, n4[u2]));
    }
    return Ko2(r3), { p: o5, f: s2 };
  }
  wNAFUnsafe(e2, n4, r3, o5 = this.ZERO) {
    const s2 = Cn2(e2, this.bits);
    for (let i3 = 0; i3 < s2.windows && r3 !== te2; i3++) {
      const { nextN: c6, offset: f6, isZero: u2, isNeg: a3 } = Vo2(r3, i3, s2);
      if (r3 = c6, !u2) {
        const l6 = n4[f6];
        o5 = o5.add(a3 ? l6.negate() : l6);
      }
    }
    return Ko2(r3), o5;
  }
  getPrecomputes(e2, n4, r3) {
    let o5 = jn2.get(n4);
    return o5 || (o5 = this.precomputeWindow(n4, e2), e2 !== 1 && (typeof r3 == "function" && (o5 = r3(o5)), jn2.set(n4, o5))), o5;
  }
  cached(e2, n4, r3) {
    const o5 = Ln2(e2);
    return this.wNAF(o5, this.getPrecomputes(o5, e2, r3), n4);
  }
  unsafe(e2, n4, r3, o5) {
    const s2 = Ln2(e2);
    return s2 === 1 ? this._unsafeLadder(e2, n4, o5) : this.wNAFUnsafe(s2, this.getPrecomputes(s2, e2, r3), n4, o5);
  }
  createCache(e2, n4) {
    Do2(n4, this.bits), Mo2.set(e2, n4), jn2.delete(e2);
  }
  hasCache(e2) {
    return Ln2(e2) !== 1;
  }
};
function jf(t, e2, n4, r3) {
  let o5 = e2, s2 = t.ZERO, i3 = t.ZERO;
  for (; n4 > te2 || r3 > te2; ) n4 & Ft2 && (s2 = s2.add(o5)), r3 & Ft2 && (i3 = i3.add(o5)), o5 = o5.double(), n4 >>= Ft2, r3 >>= Ft2;
  return { p1: s2, p2: i3 };
}
function Lf(t, e2, n4, r3) {
  $f(n4, t), Tf(r3, e2);
  const o5 = n4.length, s2 = r3.length;
  if (o5 !== s2) throw new Error("arrays of points and scalars must have equal length");
  const i3 = t.ZERO, c6 = Io2(BigInt(o5));
  let f6 = 1;
  c6 > 12 ? f6 = c6 - 3 : c6 > 4 ? f6 = c6 - 2 : c6 > 0 && (f6 = 2);
  const u2 = ye2(f6), a3 = new Array(Number(u2) + 1).fill(i3), l6 = Math.floor((e2.BITS - 1) / f6) * f6;
  let d7 = i3;
  for (let h4 = l6; h4 >= 0; h4 -= f6) {
    a3.fill(i3);
    for (let m4 = 0; m4 < s2; m4++) {
      const v6 = r3[m4], U3 = Number(v6 >> BigInt(h4) & u2);
      a3[U3] = a3[U3].add(n4[m4]);
    }
    let y4 = i3;
    for (let m4 = a3.length - 1, v6 = i3; m4 > 0; m4--) v6 = v6.add(a3[m4]), y4 = y4.add(v6);
    if (d7 = d7.add(y4), h4 !== 0) for (let m4 = 0; m4 < f6; m4++) d7 = d7.double();
  }
  return d7;
}
function qo2(t, e2, n4) {
  if (e2) {
    if (e2.ORDER !== t) throw new Error("Field.ORDER must match order: Fp == p, Fn == n");
    return Uf(e2), e2;
  } else return Ht2(t, { isLE: n4 });
}
function kf(t, e2, n4 = {}, r3) {
  if (r3 === void 0 && (r3 = t === "edwards"), !e2 || typeof e2 != "object") throw new Error(`expected valid ${t} CURVE object`);
  for (const f6 of ["p", "n", "h"]) {
    const u2 = e2[f6];
    if (!(typeof u2 == "bigint" && u2 > te2)) throw new Error(`CURVE.${f6} must be positive bigint`);
  }
  const o5 = qo2(e2.p, n4.Fp, r3), s2 = qo2(e2.n, n4.Fn, r3), c6 = ["Gx", "Gy", "a", t === "weierstrass" ? "b" : "d"];
  for (const f6 of c6) if (!o5.isValid(e2[f6])) throw new Error(`CURVE.${f6} must be valid field element of CURVE.Fp`);
  return e2 = Object.freeze(Object.assign({}, e2)), { CURVE: e2, Fp: o5, Fn: s2 };
}
BigInt(0), BigInt(1), BigInt(2), BigInt(8), kr2("HashToScalar-");
var me2 = BigInt(0);
var ee = BigInt(1);
var Fe = BigInt(2);
function Pf(t) {
  return Ke2(t, { adjustScalarBytes: "function", powPminus2: "function" }), Object.freeze({ ...t });
}
function Hf(t) {
  const e2 = Pf(t), { P: n4, type: r3, adjustScalarBytes: o5, powPminus2: s2, randomBytes: i3 } = e2, c6 = r3 === "x25519";
  if (!c6 && r3 !== "x448") throw new Error("invalid type");
  const f6 = i3 || Mt2, u2 = c6 ? 255 : 448, a3 = c6 ? 32 : 56, l6 = BigInt(c6 ? 9 : 5), d7 = BigInt(c6 ? 121665 : 39081), h4 = c6 ? Fe ** BigInt(254) : Fe ** BigInt(447), y4 = c6 ? BigInt(8) * Fe ** BigInt(251) - ee : BigInt(4) * Fe ** BigInt(445) - ee, m4 = h4 + y4 + ee, v6 = (p4) => ct2(p4, n4), U3 = F2(l6);
  function F2(p4) {
    return Un2(v6(p4), a3);
  }
  function R4(p4) {
    const b4 = tt("u coordinate", p4, a3);
    return c6 && (b4[31] &= 127), v6(Me2(b4));
  }
  function Z2(p4) {
    return Me2(o5(tt("scalar", p4, a3)));
  }
  function H3(p4, b4) {
    const g4 = k4(R4(b4), Z2(p4));
    if (g4 === me2) throw new Error("invalid private or public key received");
    return F2(g4);
  }
  function j6(p4) {
    return H3(p4, U3);
  }
  function L3(p4, b4, g4) {
    const x5 = v6(p4 * (b4 - g4));
    return b4 = v6(b4 - x5), g4 = v6(g4 + x5), { x_2: b4, x_3: g4 };
  }
  function k4(p4, b4) {
    Rn2("u", p4, me2, n4), Rn2("scalar", b4, h4, m4);
    const g4 = b4, x5 = p4;
    let E4 = ee, A3 = me2, w5 = p4, B2 = ee, I2 = me2;
    for (let D3 = BigInt(u2 - 1); D3 >= me2; D3--) {
      const P6 = g4 >> D3 & ee;
      I2 ^= P6, { x_2: E4, x_3: w5 } = L3(I2, E4, w5), { x_2: A3, x_3: B2 } = L3(I2, A3, B2), I2 = P6;
      const $4 = E4 + A3, V3 = v6($4 * $4), q2 = E4 - A3, G5 = v6(q2 * q2), M5 = V3 - G5, Y3 = w5 + B2, Yt4 = w5 - B2, ce3 = v6(Yt4 * $4), fe5 = v6(Y3 * q2), Qn3 = ce3 + fe5, tr2 = ce3 - fe5;
      w5 = v6(Qn3 * Qn3), B2 = v6(x5 * v6(tr2 * tr2)), E4 = v6(V3 * G5), A3 = v6(M5 * (V3 + v6(d7 * M5)));
    }
    ({ x_2: E4, x_3: w5 } = L3(I2, E4, w5)), { x_2: A3, x_3: B2 } = L3(I2, A3, B2);
    const N12 = s2(A3);
    return v6(E4 * N12);
  }
  const O5 = { secretKey: a3, publicKey: a3, seed: a3 }, T4 = (p4 = f6(a3)) => (ht2(p4, O5.seed), p4);
  function C5(p4) {
    const b4 = T4(p4);
    return { secretKey: b4, publicKey: j6(b4) };
  }
  return { keygen: C5, getSharedSecret: (p4, b4) => H3(p4, b4), getPublicKey: (p4) => j6(p4), scalarMult: H3, scalarMultBase: j6, utils: { randomSecretKey: T4, randomPrivateKey: T4 }, GuBytes: U3.slice(), lengths: O5 };
}
var Df = BigInt(1);
var Fo2 = BigInt(2);
var Vf = BigInt(3);
var Mf = BigInt(5);
var Kf = BigInt(8);
var Zo2 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed");
var qf = { p: Zo2, n: BigInt("0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed"), h: Kf, a: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec"), d: BigInt("0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3"), Gx: BigInt("0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a"), Gy: BigInt("0x6666666666666666666666666666666666666666666666666666666666666658") };
function Ff(t) {
  const e2 = BigInt(10), n4 = BigInt(20), r3 = BigInt(40), o5 = BigInt(80), s2 = Zo2, c6 = t * t % s2 * t % s2, f6 = gt2(c6, Fo2, s2) * c6 % s2, u2 = gt2(f6, Df, s2) * t % s2, a3 = gt2(u2, Mf, s2) * u2 % s2, l6 = gt2(a3, e2, s2) * a3 % s2, d7 = gt2(l6, n4, s2) * l6 % s2, h4 = gt2(d7, r3, s2) * d7 % s2, y4 = gt2(h4, o5, s2) * h4 % s2, m4 = gt2(y4, o5, s2) * h4 % s2, v6 = gt2(m4, e2, s2) * a3 % s2;
  return { pow_p_5_8: gt2(v6, Fo2, s2) * t % s2, b2: c6 };
}
function Zf(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
var Gf = Ht2(qf.p, { isLE: true });
var kn2 = (() => {
  const t = Gf.ORDER;
  return Hf({ P: t, type: "x25519", powPminus2: (e2) => {
    const { pow_p_5_8: n4, b2: r3 } = Ff(e2);
    return ct2(gt2(n4, Vf, t) * r3, t);
  }, adjustScalarBytes: Zf });
})();
var Go2 = (t, e2) => (t + (t >= 0 ? e2 : -e2) / zo2) / e2;
function zf(t, e2, n4) {
  const [[r3, o5], [s2, i3]] = e2, c6 = Go2(i3 * t, n4), f6 = Go2(-o5 * t, n4);
  let u2 = t - c6 * r3 - f6 * s2, a3 = -c6 * o5 - f6 * i3;
  const l6 = u2 < Et2, d7 = a3 < Et2;
  l6 && (u2 = -u2), d7 && (a3 = -a3);
  const h4 = ye2(Math.ceil(Io2(n4) / 2)) + ne;
  if (u2 < Et2 || u2 >= h4 || a3 < Et2 || a3 >= h4) throw new Error("splitScalar (endomorphism): failed, k=" + t);
  return { k1neg: l6, k1: u2, k2neg: d7, k2: a3 };
}
function Pn2(t) {
  if (!["compact", "recovered", "der"].includes(t)) throw new Error('Signature format must be "compact", "recovered", or "der"');
  return t;
}
function Hn2(t, e2) {
  const n4 = {};
  for (let r3 of Object.keys(e2)) n4[r3] = t[r3] === void 0 ? e2[r3] : t[r3];
  return He2(n4.lowS, "lowS"), He2(n4.prehash, "prehash"), n4.format !== void 0 && Pn2(n4.format), n4;
}
var Yf = class extends Error {
  constructor(e2 = "") {
    super(e2);
  }
};
var xt2 = { Err: Yf, _tlv: { encode: (t, e2) => {
  const { Err: n4 } = xt2;
  if (t < 0 || t > 256) throw new n4("tlv.encode: wrong tag");
  if (e2.length & 1) throw new n4("tlv.encode: unpadded data");
  const r3 = e2.length / 2, o5 = De2(r3);
  if (o5.length / 2 & 128) throw new n4("tlv.encode: long form length too big");
  const s2 = r3 > 127 ? De2(o5.length / 2 | 128) : "";
  return De2(t) + s2 + o5 + e2;
}, decode(t, e2) {
  const { Err: n4 } = xt2;
  let r3 = 0;
  if (t < 0 || t > 256) throw new n4("tlv.encode: wrong tag");
  if (e2.length < 2 || e2[r3++] !== t) throw new n4("tlv.decode: wrong tlv");
  const o5 = e2[r3++], s2 = !!(o5 & 128);
  let i3 = 0;
  if (!s2) i3 = o5;
  else {
    const f6 = o5 & 127;
    if (!f6) throw new n4("tlv.decode(long): indefinite length not supported");
    if (f6 > 4) throw new n4("tlv.decode(long): byte length is too big");
    const u2 = e2.subarray(r3, r3 + f6);
    if (u2.length !== f6) throw new n4("tlv.decode: length bytes not complete");
    if (u2[0] === 0) throw new n4("tlv.decode(long): zero leftmost byte");
    for (const a3 of u2) i3 = i3 << 8 | a3;
    if (r3 += f6, i3 < 128) throw new n4("tlv.decode(long): not minimal encoding");
  }
  const c6 = e2.subarray(r3, r3 + i3);
  if (c6.length !== i3) throw new n4("tlv.decode: wrong value length");
  return { v: c6, l: e2.subarray(r3 + i3) };
} }, _int: { encode(t) {
  const { Err: e2 } = xt2;
  if (t < Et2) throw new e2("integer: negative integers are not allowed");
  let n4 = De2(t);
  if (Number.parseInt(n4[0], 16) & 8 && (n4 = "00" + n4), n4.length & 1) throw new e2("unexpected DER parsing assertion: unpadded hex");
  return n4;
}, decode(t) {
  const { Err: e2 } = xt2;
  if (t[0] & 128) throw new e2("invalid signature integer: negative");
  if (t[0] === 0 && !(t[1] & 128)) throw new e2("invalid signature integer: unnecessary leading zero");
  return Ve2(t);
} }, toSig(t) {
  const { Err: e2, _int: n4, _tlv: r3 } = xt2, o5 = tt("signature", t), { v: s2, l: i3 } = r3.decode(48, o5);
  if (i3.length) throw new e2("invalid signature: left bytes after parsing");
  const { v: c6, l: f6 } = r3.decode(2, s2), { v: u2, l: a3 } = r3.decode(2, f6);
  if (a3.length) throw new e2("invalid signature: left bytes after parsing");
  return { r: n4.decode(c6), s: n4.decode(u2) };
}, hexFromSig(t) {
  const { _tlv: e2, _int: n4 } = xt2, r3 = e2.encode(2, n4.encode(t.r)), o5 = e2.encode(2, n4.encode(t.s)), s2 = r3 + o5;
  return e2.encode(48, s2);
} };
var Et2 = BigInt(0);
var ne = BigInt(1);
var zo2 = BigInt(2);
var Ze2 = BigInt(3);
var Wf = BigInt(4);
function re(t, e2) {
  const { BYTES: n4 } = t;
  let r3;
  if (typeof e2 == "bigint") r3 = e2;
  else {
    let o5 = tt("private key", e2);
    try {
      r3 = t.fromBytes(o5);
    } catch {
      throw new Error(`invalid private key: expected ui8a of size ${n4}, got ${typeof e2}`);
    }
  }
  if (!t.isValidNot0(r3)) throw new Error("invalid private key: out of range [1..N-1]");
  return r3;
}
function Xf(t, e2 = {}) {
  const n4 = kf("weierstrass", t, e2), { Fp: r3, Fn: o5 } = n4;
  let s2 = n4.CURVE;
  const { h: i3, n: c6 } = s2;
  Ke2(e2, {}, { allowInfinityPoint: "boolean", clearCofactor: "function", isTorsionFree: "function", fromBytes: "function", toBytes: "function", endo: "object", wrapPrivateKey: "boolean" });
  const { endo: f6 } = e2;
  if (f6 && (!r3.is0(s2.a) || typeof f6.beta != "bigint" || !Array.isArray(f6.basises))) throw new Error('invalid endo: expected "beta": bigint and "basises": array');
  const u2 = Wo2(r3, o5);
  function a3() {
    if (!r3.isOdd) throw new Error("compression is not supported: Field does not have .isOdd()");
  }
  function l6(_3, p4, b4) {
    const { x: g4, y: x5 } = p4.toAffine(), E4 = r3.toBytes(g4);
    if (He2(b4, "isCompressed"), b4) {
      a3();
      const A3 = !r3.isOdd(x5);
      return _t2(Yo2(A3), E4);
    } else return _t2(Uint8Array.of(4), E4, r3.toBytes(x5));
  }
  function d7(_3) {
    Kt2(_3, void 0, "Point");
    const { publicKey: p4, publicKeyUncompressed: b4 } = u2, g4 = _3.length, x5 = _3[0], E4 = _3.subarray(1);
    if (g4 === p4 && (x5 === 2 || x5 === 3)) {
      const A3 = r3.fromBytes(E4);
      if (!r3.isValid(A3)) throw new Error("bad point: is not on curve, wrong x");
      const w5 = m4(A3);
      let B2;
      try {
        B2 = r3.sqrt(w5);
      } catch (D3) {
        const P6 = D3 instanceof Error ? ": " + D3.message : "";
        throw new Error("bad point: is not on curve, sqrt error" + P6);
      }
      a3();
      const I2 = r3.isOdd(B2);
      return (x5 & 1) === 1 !== I2 && (B2 = r3.neg(B2)), { x: A3, y: B2 };
    } else if (g4 === b4 && x5 === 4) {
      const A3 = r3.BYTES, w5 = r3.fromBytes(E4.subarray(0, A3)), B2 = r3.fromBytes(E4.subarray(A3, A3 * 2));
      if (!v6(w5, B2)) throw new Error("bad point: is not on curve");
      return { x: w5, y: B2 };
    } else throw new Error(`bad point: got length ${g4}, expected compressed=${p4} or uncompressed=${b4}`);
  }
  const h4 = e2.toBytes || l6, y4 = e2.fromBytes || d7;
  function m4(_3) {
    const p4 = r3.sqr(_3), b4 = r3.mul(p4, _3);
    return r3.add(r3.add(b4, r3.mul(_3, s2.a)), s2.b);
  }
  function v6(_3, p4) {
    const b4 = r3.sqr(p4), g4 = m4(_3);
    return r3.eql(b4, g4);
  }
  if (!v6(s2.Gx, s2.Gy)) throw new Error("bad curve params: generator point");
  const U3 = r3.mul(r3.pow(s2.a, Ze2), Wf), F2 = r3.mul(r3.sqr(s2.b), BigInt(27));
  if (r3.is0(r3.add(U3, F2))) throw new Error("bad curve params: a or b");
  function R4(_3, p4, b4 = false) {
    if (!r3.isValid(p4) || b4 && r3.is0(p4)) throw new Error(`bad point coordinate ${_3}`);
    return p4;
  }
  function Z2(_3) {
    if (!(_3 instanceof O5)) throw new Error("ProjectivePoint expected");
  }
  function H3(_3) {
    if (!f6 || !f6.basises) throw new Error("no endo");
    return zf(_3, f6.basises, o5.ORDER);
  }
  const j6 = So2((_3, p4) => {
    const { X: b4, Y: g4, Z: x5 } = _3;
    if (r3.eql(x5, r3.ONE)) return { x: b4, y: g4 };
    const E4 = _3.is0();
    p4 == null && (p4 = E4 ? r3.ONE : r3.inv(x5));
    const A3 = r3.mul(b4, p4), w5 = r3.mul(g4, p4), B2 = r3.mul(x5, p4);
    if (E4) return { x: r3.ZERO, y: r3.ZERO };
    if (!r3.eql(B2, r3.ONE)) throw new Error("invZ was invalid");
    return { x: A3, y: w5 };
  }), L3 = So2((_3) => {
    if (_3.is0()) {
      if (e2.allowInfinityPoint && !r3.is0(_3.Y)) return;
      throw new Error("bad point: ZERO");
    }
    const { x: p4, y: b4 } = _3.toAffine();
    if (!r3.isValid(p4) || !r3.isValid(b4)) throw new Error("bad point: x or y not field elements");
    if (!v6(p4, b4)) throw new Error("bad point: equation left != right");
    if (!_3.isTorsionFree()) throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  function k4(_3, p4, b4, g4, x5) {
    return b4 = new O5(r3.mul(b4.X, _3), b4.Y, b4.Z), p4 = qe2(g4, p4), b4 = qe2(x5, b4), p4.add(b4);
  }
  class O5 {
    constructor(p4, b4, g4) {
      this.X = R4("x", p4), this.Y = R4("y", b4, true), this.Z = R4("z", g4), Object.freeze(this);
    }
    static CURVE() {
      return s2;
    }
    static fromAffine(p4) {
      const { x: b4, y: g4 } = p4 || {};
      if (!p4 || !r3.isValid(b4) || !r3.isValid(g4)) throw new Error("invalid affine point");
      if (p4 instanceof O5) throw new Error("projective point not allowed");
      return r3.is0(b4) && r3.is0(g4) ? O5.ZERO : new O5(b4, g4, r3.ONE);
    }
    static fromBytes(p4) {
      const b4 = O5.fromAffine(y4(Kt2(p4, void 0, "point")));
      return b4.assertValidity(), b4;
    }
    static fromHex(p4) {
      return O5.fromBytes(tt("pointHex", p4));
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    precompute(p4 = 8, b4 = true) {
      return C5.createCache(this, p4), b4 || this.multiply(Ze2), this;
    }
    assertValidity() {
      L3(this);
    }
    hasEvenY() {
      const { y: p4 } = this.toAffine();
      if (!r3.isOdd) throw new Error("Field doesn't support isOdd");
      return !r3.isOdd(p4);
    }
    equals(p4) {
      Z2(p4);
      const { X: b4, Y: g4, Z: x5 } = this, { X: E4, Y: A3, Z: w5 } = p4, B2 = r3.eql(r3.mul(b4, w5), r3.mul(E4, x5)), I2 = r3.eql(r3.mul(g4, w5), r3.mul(A3, x5));
      return B2 && I2;
    }
    negate() {
      return new O5(this.X, r3.neg(this.Y), this.Z);
    }
    double() {
      const { a: p4, b: b4 } = s2, g4 = r3.mul(b4, Ze2), { X: x5, Y: E4, Z: A3 } = this;
      let w5 = r3.ZERO, B2 = r3.ZERO, I2 = r3.ZERO, N12 = r3.mul(x5, x5), D3 = r3.mul(E4, E4), P6 = r3.mul(A3, A3), $4 = r3.mul(x5, E4);
      return $4 = r3.add($4, $4), I2 = r3.mul(x5, A3), I2 = r3.add(I2, I2), w5 = r3.mul(p4, I2), B2 = r3.mul(g4, P6), B2 = r3.add(w5, B2), w5 = r3.sub(D3, B2), B2 = r3.add(D3, B2), B2 = r3.mul(w5, B2), w5 = r3.mul($4, w5), I2 = r3.mul(g4, I2), P6 = r3.mul(p4, P6), $4 = r3.sub(N12, P6), $4 = r3.mul(p4, $4), $4 = r3.add($4, I2), I2 = r3.add(N12, N12), N12 = r3.add(I2, N12), N12 = r3.add(N12, P6), N12 = r3.mul(N12, $4), B2 = r3.add(B2, N12), P6 = r3.mul(E4, A3), P6 = r3.add(P6, P6), N12 = r3.mul(P6, $4), w5 = r3.sub(w5, N12), I2 = r3.mul(P6, D3), I2 = r3.add(I2, I2), I2 = r3.add(I2, I2), new O5(w5, B2, I2);
    }
    add(p4) {
      Z2(p4);
      const { X: b4, Y: g4, Z: x5 } = this, { X: E4, Y: A3, Z: w5 } = p4;
      let B2 = r3.ZERO, I2 = r3.ZERO, N12 = r3.ZERO;
      const D3 = s2.a, P6 = r3.mul(s2.b, Ze2);
      let $4 = r3.mul(b4, E4), V3 = r3.mul(g4, A3), q2 = r3.mul(x5, w5), G5 = r3.add(b4, g4), M5 = r3.add(E4, A3);
      G5 = r3.mul(G5, M5), M5 = r3.add($4, V3), G5 = r3.sub(G5, M5), M5 = r3.add(b4, x5);
      let Y3 = r3.add(E4, w5);
      return M5 = r3.mul(M5, Y3), Y3 = r3.add($4, q2), M5 = r3.sub(M5, Y3), Y3 = r3.add(g4, x5), B2 = r3.add(A3, w5), Y3 = r3.mul(Y3, B2), B2 = r3.add(V3, q2), Y3 = r3.sub(Y3, B2), N12 = r3.mul(D3, M5), B2 = r3.mul(P6, q2), N12 = r3.add(B2, N12), B2 = r3.sub(V3, N12), N12 = r3.add(V3, N12), I2 = r3.mul(B2, N12), V3 = r3.add($4, $4), V3 = r3.add(V3, $4), q2 = r3.mul(D3, q2), M5 = r3.mul(P6, M5), V3 = r3.add(V3, q2), q2 = r3.sub($4, q2), q2 = r3.mul(D3, q2), M5 = r3.add(M5, q2), $4 = r3.mul(V3, M5), I2 = r3.add(I2, $4), $4 = r3.mul(Y3, M5), B2 = r3.mul(G5, B2), B2 = r3.sub(B2, $4), $4 = r3.mul(G5, V3), N12 = r3.mul(Y3, N12), N12 = r3.add(N12, $4), new O5(B2, I2, N12);
    }
    subtract(p4) {
      return this.add(p4.negate());
    }
    is0() {
      return this.equals(O5.ZERO);
    }
    multiply(p4) {
      const { endo: b4 } = e2;
      if (!o5.isValidNot0(p4)) throw new Error("invalid scalar: out of range");
      let g4, x5;
      const E4 = (A3) => C5.cached(this, A3, (w5) => Tn2(O5, w5));
      if (b4) {
        const { k1neg: A3, k1: w5, k2neg: B2, k2: I2 } = H3(p4), { p: N12, f: D3 } = E4(w5), { p: P6, f: $4 } = E4(I2);
        x5 = D3.add($4), g4 = k4(b4.beta, N12, P6, A3, B2);
      } else {
        const { p: A3, f: w5 } = E4(p4);
        g4 = A3, x5 = w5;
      }
      return Tn2(O5, [g4, x5])[0];
    }
    multiplyUnsafe(p4) {
      const { endo: b4 } = e2, g4 = this;
      if (!o5.isValid(p4)) throw new Error("invalid scalar: out of range");
      if (p4 === Et2 || g4.is0()) return O5.ZERO;
      if (p4 === ne) return g4;
      if (C5.hasCache(this)) return this.multiply(p4);
      if (b4) {
        const { k1neg: x5, k1: E4, k2neg: A3, k2: w5 } = H3(p4), { p1: B2, p2: I2 } = jf(O5, g4, E4, w5);
        return k4(b4.beta, B2, I2, x5, A3);
      } else return C5.unsafe(g4, p4);
    }
    multiplyAndAddUnsafe(p4, b4, g4) {
      const x5 = this.multiplyUnsafe(b4).add(p4.multiplyUnsafe(g4));
      return x5.is0() ? void 0 : x5;
    }
    toAffine(p4) {
      return j6(this, p4);
    }
    isTorsionFree() {
      const { isTorsionFree: p4 } = e2;
      return i3 === ne ? true : p4 ? p4(O5, this) : C5.unsafe(this, c6).is0();
    }
    clearCofactor() {
      const { clearCofactor: p4 } = e2;
      return i3 === ne ? this : p4 ? p4(O5, this) : this.multiplyUnsafe(i3);
    }
    isSmallOrder() {
      return this.multiplyUnsafe(i3).is0();
    }
    toBytes(p4 = true) {
      return He2(p4, "isCompressed"), this.assertValidity(), h4(O5, this, p4);
    }
    toHex(p4 = true) {
      return Jt2(this.toBytes(p4));
    }
    toString() {
      return `<Point ${this.is0() ? "ZERO" : this.toHex()}>`;
    }
    get px() {
      return this.X;
    }
    get py() {
      return this.X;
    }
    get pz() {
      return this.Z;
    }
    toRawBytes(p4 = true) {
      return this.toBytes(p4);
    }
    _setWindowSize(p4) {
      this.precompute(p4);
    }
    static normalizeZ(p4) {
      return Tn2(O5, p4);
    }
    static msm(p4, b4) {
      return Lf(O5, o5, p4, b4);
    }
    static fromPrivateKey(p4) {
      return O5.BASE.multiply(re(o5, p4));
    }
  }
  O5.BASE = new O5(s2.Gx, s2.Gy, r3.ONE), O5.ZERO = new O5(r3.ZERO, r3.ONE, r3.ZERO), O5.Fp = r3, O5.Fn = o5;
  const T4 = o5.BITS, C5 = new Cf(O5, e2.endo ? Math.ceil(T4 / 2) : T4);
  return O5.BASE.precompute(8), O5;
}
function Yo2(t) {
  return Uint8Array.of(t ? 2 : 3);
}
function Wo2(t, e2) {
  return { secretKey: e2.BYTES, publicKey: 1 + t.BYTES, publicKeyUncompressed: 1 + 2 * t.BYTES, publicKeyHasPrefix: true, signature: 2 * e2.BYTES };
}
function Jf(t, e2 = {}) {
  const { Fn: n4 } = t, r3 = e2.randomBytes || Mt2, o5 = Object.assign(Wo2(t.Fp, n4), { seed: Ho2(n4.ORDER) });
  function s2(h4) {
    try {
      return !!re(n4, h4);
    } catch {
      return false;
    }
  }
  function i3(h4, y4) {
    const { publicKey: m4, publicKeyUncompressed: v6 } = o5;
    try {
      const U3 = h4.length;
      return y4 === true && U3 !== m4 || y4 === false && U3 !== v6 ? false : !!t.fromBytes(h4);
    } catch {
      return false;
    }
  }
  function c6(h4 = r3(o5.seed)) {
    return Rf(Kt2(h4, o5.seed, "seed"), n4.ORDER);
  }
  function f6(h4, y4 = true) {
    return t.BASE.multiply(re(n4, h4)).toBytes(y4);
  }
  function u2(h4) {
    const y4 = c6(h4);
    return { secretKey: y4, publicKey: f6(y4) };
  }
  function a3(h4) {
    if (typeof h4 == "bigint") return false;
    if (h4 instanceof t) return true;
    const { secretKey: y4, publicKey: m4, publicKeyUncompressed: v6 } = o5;
    if (n4.allowedLengths || y4 === m4) return;
    const U3 = tt("key", h4).length;
    return U3 === m4 || U3 === v6;
  }
  function l6(h4, y4, m4 = true) {
    if (a3(h4) === true) throw new Error("first arg must be private key");
    if (a3(y4) === false) throw new Error("second arg must be public key");
    const v6 = re(n4, h4);
    return t.fromHex(y4).multiply(v6).toBytes(m4);
  }
  return Object.freeze({ getPublicKey: f6, getSharedSecret: l6, keygen: u2, Point: t, utils: { isValidSecretKey: s2, isValidPublicKey: i3, randomSecretKey: c6, isValidPrivateKey: s2, randomPrivateKey: c6, normPrivateKeyToScalar: (h4) => re(n4, h4), precompute(h4 = 8, y4 = t.BASE) {
    return y4.precompute(h4, false);
  } }, lengths: o5 });
}
function Qf(t, e2, n4 = {}) {
  Ue2(e2), Ke2(n4, {}, { hmac: "function", lowS: "boolean", randomBytes: "function", bits2int: "function", bits2int_modN: "function" });
  const r3 = n4.randomBytes || Mt2, o5 = n4.hmac || ((b4, ...g4) => ke2(e2, b4, _t2(...g4))), { Fp: s2, Fn: i3 } = t, { ORDER: c6, BITS: f6 } = i3, { keygen: u2, getPublicKey: a3, getSharedSecret: l6, utils: d7, lengths: h4 } = Jf(t, n4), y4 = { prehash: false, lowS: typeof n4.lowS == "boolean" ? n4.lowS : false, format: void 0, extraEntropy: false }, m4 = "compact";
  function v6(b4) {
    const g4 = c6 >> ne;
    return b4 > g4;
  }
  function U3(b4, g4) {
    if (!i3.isValidNot0(g4)) throw new Error(`invalid signature ${b4}: out of range 1..Point.Fn.ORDER`);
    return g4;
  }
  function F2(b4, g4) {
    Pn2(g4);
    const x5 = h4.signature, E4 = g4 === "compact" ? x5 : g4 === "recovered" ? x5 + 1 : void 0;
    return Kt2(b4, E4, `${g4} signature`);
  }
  class R4 {
    constructor(g4, x5, E4) {
      this.r = U3("r", g4), this.s = U3("s", x5), E4 != null && (this.recovery = E4), Object.freeze(this);
    }
    static fromBytes(g4, x5 = m4) {
      F2(g4, x5);
      let E4;
      if (x5 === "der") {
        const { r: I2, s: N12 } = xt2.toSig(Kt2(g4));
        return new R4(I2, N12);
      }
      x5 === "recovered" && (E4 = g4[0], x5 = "compact", g4 = g4.subarray(1));
      const A3 = i3.BYTES, w5 = g4.subarray(0, A3), B2 = g4.subarray(A3, A3 * 2);
      return new R4(i3.fromBytes(w5), i3.fromBytes(B2), E4);
    }
    static fromHex(g4, x5) {
      return this.fromBytes(_e2(g4), x5);
    }
    addRecoveryBit(g4) {
      return new R4(this.r, this.s, g4);
    }
    recoverPublicKey(g4) {
      const x5 = s2.ORDER, { r: E4, s: A3, recovery: w5 } = this;
      if (w5 == null || ![0, 1, 2, 3].includes(w5)) throw new Error("recovery id invalid");
      if (c6 * zo2 < x5 && w5 > 1) throw new Error("recovery id is ambiguous for h>1 curve");
      const I2 = w5 === 2 || w5 === 3 ? E4 + c6 : E4;
      if (!s2.isValid(I2)) throw new Error("recovery id 2 or 3 invalid");
      const N12 = s2.toBytes(I2), D3 = t.fromBytes(_t2(Yo2((w5 & 1) === 0), N12)), P6 = i3.inv(I2), $4 = H3(tt("msgHash", g4)), V3 = i3.create(-$4 * P6), q2 = i3.create(A3 * P6), G5 = t.BASE.multiplyUnsafe(V3).add(D3.multiplyUnsafe(q2));
      if (G5.is0()) throw new Error("point at infinify");
      return G5.assertValidity(), G5;
    }
    hasHighS() {
      return v6(this.s);
    }
    toBytes(g4 = m4) {
      if (Pn2(g4), g4 === "der") return _e2(xt2.hexFromSig(this));
      const x5 = i3.toBytes(this.r), E4 = i3.toBytes(this.s);
      if (g4 === "recovered") {
        if (this.recovery == null) throw new Error("recovery bit must be present");
        return _t2(Uint8Array.of(this.recovery), x5, E4);
      }
      return _t2(x5, E4);
    }
    toHex(g4) {
      return Jt2(this.toBytes(g4));
    }
    assertValidity() {
    }
    static fromCompact(g4) {
      return R4.fromBytes(tt("sig", g4), "compact");
    }
    static fromDER(g4) {
      return R4.fromBytes(tt("sig", g4), "der");
    }
    normalizeS() {
      return this.hasHighS() ? new R4(this.r, i3.neg(this.s), this.recovery) : this;
    }
    toDERRawBytes() {
      return this.toBytes("der");
    }
    toDERHex() {
      return Jt2(this.toBytes("der"));
    }
    toCompactRawBytes() {
      return this.toBytes("compact");
    }
    toCompactHex() {
      return Jt2(this.toBytes("compact"));
    }
  }
  const Z2 = n4.bits2int || function(g4) {
    if (g4.length > 8192) throw new Error("input is too large");
    const x5 = Ve2(g4), E4 = g4.length * 8 - f6;
    return E4 > 0 ? x5 >> BigInt(E4) : x5;
  }, H3 = n4.bits2int_modN || function(g4) {
    return i3.create(Z2(g4));
  }, j6 = ye2(f6);
  function L3(b4) {
    return Rn2("num < 2^" + f6, b4, Et2, j6), i3.toBytes(b4);
  }
  function k4(b4, g4) {
    return Kt2(b4, void 0, "message"), g4 ? Kt2(e2(b4), void 0, "prehashed message") : b4;
  }
  function O5(b4, g4, x5) {
    if (["recovered", "canonical"].some((V3) => V3 in x5)) throw new Error("sign() legacy options not supported");
    const { lowS: E4, prehash: A3, extraEntropy: w5 } = Hn2(x5, y4);
    b4 = k4(b4, A3);
    const B2 = H3(b4), I2 = re(i3, g4), N12 = [L3(I2), L3(B2)];
    if (w5 != null && w5 !== false) {
      const V3 = w5 === true ? r3(h4.secretKey) : w5;
      N12.push(tt("extraEntropy", V3));
    }
    const D3 = _t2(...N12), P6 = B2;
    function $4(V3) {
      const q2 = Z2(V3);
      if (!i3.isValidNot0(q2)) return;
      const G5 = i3.inv(q2), M5 = t.BASE.multiply(q2).toAffine(), Y3 = i3.create(M5.x);
      if (Y3 === Et2) return;
      const Yt4 = i3.create(G5 * i3.create(P6 + Y3 * I2));
      if (Yt4 === Et2) return;
      let ce3 = (M5.x === Y3 ? 0 : 2) | Number(M5.y & ne), fe5 = Yt4;
      return E4 && v6(Yt4) && (fe5 = i3.neg(Yt4), ce3 ^= 1), new R4(Y3, fe5, ce3);
    }
    return { seed: D3, k2sig: $4 };
  }
  function T4(b4, g4, x5 = {}) {
    b4 = tt("message", b4);
    const { seed: E4, k2sig: A3 } = O5(b4, g4, x5);
    return Ef(e2.outputLen, i3.BYTES, o5)(E4, A3);
  }
  function C5(b4) {
    let g4;
    const x5 = typeof b4 == "string" || Ne2(b4), E4 = !x5 && b4 !== null && typeof b4 == "object" && typeof b4.r == "bigint" && typeof b4.s == "bigint";
    if (!x5 && !E4) throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    if (E4) g4 = new R4(b4.r, b4.s);
    else if (x5) {
      try {
        g4 = R4.fromBytes(tt("sig", b4), "der");
      } catch (A3) {
        if (!(A3 instanceof xt2.Err)) throw A3;
      }
      if (!g4) try {
        g4 = R4.fromBytes(tt("sig", b4), "compact");
      } catch {
        return false;
      }
    }
    return g4 || false;
  }
  function _3(b4, g4, x5, E4 = {}) {
    const { lowS: A3, prehash: w5, format: B2 } = Hn2(E4, y4);
    if (x5 = tt("publicKey", x5), g4 = k4(tt("message", g4), w5), "strict" in E4) throw new Error("options.strict was renamed to lowS");
    const I2 = B2 === void 0 ? C5(b4) : R4.fromBytes(tt("sig", b4), B2);
    if (I2 === false) return false;
    try {
      const N12 = t.fromBytes(x5);
      if (A3 && I2.hasHighS()) return false;
      const { r: D3, s: P6 } = I2, $4 = H3(g4), V3 = i3.inv(P6), q2 = i3.create($4 * V3), G5 = i3.create(D3 * V3), M5 = t.BASE.multiplyUnsafe(q2).add(N12.multiplyUnsafe(G5));
      return M5.is0() ? false : i3.create(M5.x) === D3;
    } catch {
      return false;
    }
  }
  function p4(b4, g4, x5 = {}) {
    const { prehash: E4 } = Hn2(x5, y4);
    return g4 = k4(g4, E4), R4.fromBytes(b4, "recovered").recoverPublicKey(g4).toBytes();
  }
  return Object.freeze({ keygen: u2, getPublicKey: a3, getSharedSecret: l6, utils: d7, lengths: h4, Point: t, sign: T4, verify: _3, recoverPublicKey: p4, Signature: R4, hash: e2 });
}
function ta(t) {
  const e2 = { a: t.a, b: t.b, p: t.Fp.ORDER, n: t.n, h: t.h, Gx: t.Gx, Gy: t.Gy }, n4 = t.Fp;
  let r3 = t.allowedPrivateKeyLengths ? Array.from(new Set(t.allowedPrivateKeyLengths.map((i3) => Math.ceil(i3 / 2)))) : void 0;
  const o5 = Ht2(e2.n, { BITS: t.nBitLength, allowedLengths: r3, modFromBytes: t.wrapPrivateKey }), s2 = { Fp: n4, Fn: o5, allowInfinityPoint: t.allowInfinityPoint, endo: t.endo, isTorsionFree: t.isTorsionFree, clearCofactor: t.clearCofactor, fromBytes: t.fromBytes, toBytes: t.toBytes };
  return { CURVE: e2, curveOpts: s2 };
}
function ea(t) {
  const { CURVE: e2, curveOpts: n4 } = ta(t), r3 = { hmac: t.hmac, randomBytes: t.randomBytes, lowS: t.lowS, bits2int: t.bits2int, bits2int_modN: t.bits2int_modN };
  return { CURVE: e2, curveOpts: n4, hash: t.hash, ecdsaOpts: r3 };
}
function na(t, e2) {
  const n4 = e2.Point;
  return Object.assign({}, e2, { ProjectivePoint: n4, CURVE: Object.assign({}, t, ko2(n4.Fn.ORDER, n4.Fn.BITS)) });
}
function ra(t) {
  const { CURVE: e2, curveOpts: n4, hash: r3, ecdsaOpts: o5 } = ea(t), s2 = Xf(e2, n4), i3 = Qf(s2, r3, o5);
  return na(t, i3);
}
function Dn(t, e2) {
  const n4 = (r3) => ra({ ...t, hash: r3 });
  return { ...n4(e2), create: n4 };
}
var Xo = { p: BigInt("0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff"), n: BigInt("0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551"), h: BigInt(1), a: BigInt("0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc"), b: BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b"), Gx: BigInt("0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"), Gy: BigInt("0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5") };
var Jo2 = { p: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff"), n: BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973"), h: BigInt(1), a: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc"), b: BigInt("0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef"), Gx: BigInt("0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7"), Gy: BigInt("0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f") };
var Qo2 = { p: BigInt("0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), n: BigInt("0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409"), h: BigInt(1), a: BigInt("0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc"), b: BigInt("0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00"), Gx: BigInt("0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66"), Gy: BigInt("0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650") };
var oa = Ht2(Xo.p);
var sa = Ht2(Jo2.p);
var ia = Ht2(Qo2.p);
var ca = Dn({ ...Xo, Fp: oa, lowS: false }, $e2);
Dn({ ...Jo2, Fp: sa, lowS: false }, yc), Dn({ ...Qo2, Fp: ia, lowS: false, allowedPrivateKeyLengths: [130, 131, 132] }, bc);
var fa = ca;
var Vn2 = "base10";
var rt2 = "base16";
var oe = "base64pad";
var Ge2 = "base64url";
var se = "utf8";
var Mn2 = 0;
var ie = 1;
var we2 = 2;
var aa = 0;
var ts = 1;
var ve2 = 12;
var Kn2 = 32;
function ua() {
  const t = kn2.utils.randomPrivateKey(), e2 = kn2.getPublicKey(t);
  return { privateKey: toString4(t, rt2), publicKey: toString4(e2, rt2) };
}
function la() {
  const t = Mt2(Kn2);
  return toString4(t, rt2);
}
function da(t, e2) {
  const n4 = kn2.getSharedSecret(fromString4(t, rt2), fromString4(e2, rt2)), r3 = vf(Pe2, n4, void 0, void 0, Kn2);
  return toString4(r3, rt2);
}
function ha(t) {
  const e2 = Pe2(fromString4(t, rt2));
  return toString4(e2, rt2);
}
function pa(t) {
  const e2 = Pe2(fromString4(t, se));
  return toString4(e2, rt2);
}
function qn2(t) {
  return fromString4(`${t}`, Vn2);
}
function Zt2(t) {
  return Number(toString4(t, Vn2));
}
function es(t) {
  return t.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
function ns(t) {
  const e2 = t.replace(/-/g, "+").replace(/_/g, "/"), n4 = (4 - e2.length % 4) % 4;
  return e2 + "=".repeat(n4);
}
function ga(t) {
  const e2 = qn2(typeof t.type < "u" ? t.type : Mn2);
  if (Zt2(e2) === ie && typeof t.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
  const n4 = typeof t.senderPublicKey < "u" ? fromString4(t.senderPublicKey, rt2) : void 0, r3 = typeof t.iv < "u" ? fromString4(t.iv, rt2) : Mt2(ve2), o5 = fromString4(t.symKey, rt2), s2 = xo2(o5, r3).encrypt(fromString4(t.message, se)), i3 = Fn2({ type: e2, sealed: s2, iv: r3, senderPublicKey: n4 });
  return t.encoding === Ge2 ? es(i3) : i3;
}
function ba(t) {
  const e2 = fromString4(t.symKey, rt2), { sealed: n4, iv: r3 } = ze2({ encoded: t.encoded, encoding: t.encoding }), o5 = xo2(e2, r3).decrypt(n4);
  if (o5 === null) throw new Error("Failed to decrypt");
  return toString4(o5, se);
}
function ya(t, e2) {
  const n4 = qn2(we2), r3 = Mt2(ve2), o5 = fromString4(t, se), s2 = Fn2({ type: n4, sealed: o5, iv: r3 });
  return e2 === Ge2 ? es(s2) : s2;
}
function ma(t, e2) {
  const { sealed: n4 } = ze2({ encoded: t, encoding: e2 });
  return toString4(n4, se);
}
function Fn2(t) {
  if (Zt2(t.type) === we2) return toString4(concat3([t.type, t.sealed]), oe);
  if (Zt2(t.type) === ie) {
    if (typeof t.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
    return toString4(concat3([t.type, t.senderPublicKey, t.iv, t.sealed]), oe);
  }
  return toString4(concat3([t.type, t.iv, t.sealed]), oe);
}
function ze2(t) {
  const e2 = (t.encoding || oe) === Ge2 ? ns(t.encoded) : t.encoded, n4 = fromString4(e2, oe), r3 = n4.slice(aa, ts), o5 = ts;
  if (Zt2(r3) === ie) {
    const f6 = o5 + Kn2, u2 = f6 + ve2, a3 = n4.slice(o5, f6), l6 = n4.slice(f6, u2), d7 = n4.slice(u2);
    return { type: r3, sealed: d7, iv: l6, senderPublicKey: a3 };
  }
  if (Zt2(r3) === we2) {
    const f6 = n4.slice(o5), u2 = Mt2(ve2);
    return { type: r3, sealed: f6, iv: u2 };
  }
  const s2 = o5 + ve2, i3 = n4.slice(o5, s2), c6 = n4.slice(s2);
  return { type: r3, sealed: c6, iv: i3 };
}
function wa(t, e2) {
  const n4 = ze2({ encoded: t, encoding: e2?.encoding });
  return rs({ type: Zt2(n4.type), senderPublicKey: typeof n4.senderPublicKey < "u" ? toString4(n4.senderPublicKey, rt2) : void 0, receiverPublicKey: e2?.receiverPublicKey });
}
function rs(t) {
  const e2 = t?.type || Mn2;
  if (e2 === ie) {
    if (typeof t?.senderPublicKey > "u") throw new Error("missing sender public key");
    if (typeof t?.receiverPublicKey > "u") throw new Error("missing receiver public key");
  }
  return { type: e2, senderPublicKey: t?.senderPublicKey, receiverPublicKey: t?.receiverPublicKey };
}
function va(t) {
  return t.type === ie && typeof t.senderPublicKey == "string" && typeof t.receiverPublicKey == "string";
}
function xa(t) {
  return t.type === we2;
}
function os(t) {
  const e2 = Buffer.from(t.x, "base64"), n4 = Buffer.from(t.y, "base64");
  return concat3([new Uint8Array([4]), e2, n4]);
}
function Ea(t, e2) {
  const [n4, r3, o5] = t.split("."), s2 = Buffer.from(ns(o5), "base64");
  if (s2.length !== 64) throw new Error("Invalid signature length");
  const i3 = s2.slice(0, 32), c6 = s2.slice(32, 64), f6 = `${n4}.${r3}`, u2 = Pe2(f6), a3 = os(e2);
  if (!fa.verify(concat3([i3, c6]), u2, a3)) throw new Error("Invalid signature");
  return sn(t).payload;
}
var ss = "irn";
function Ba(t) {
  return t?.relay || { protocol: ss };
}
function Aa(t) {
  const e2 = C[t];
  if (typeof e2 > "u") throw new Error(`Relay Protocol not supported: ${t}`);
  return e2;
}
var Ia = Object.defineProperty;
var Sa = Object.defineProperties;
var Oa = Object.getOwnPropertyDescriptors;
var is = Object.getOwnPropertySymbols;
var Na = Object.prototype.hasOwnProperty;
var Ua = Object.prototype.propertyIsEnumerable;
var cs = (t, e2, n4) => e2 in t ? Ia(t, e2, { enumerable: true, configurable: true, writable: true, value: n4 }) : t[e2] = n4;
var Zn2 = (t, e2) => {
  for (var n4 in e2 || (e2 = {})) Na.call(e2, n4) && cs(t, n4, e2[n4]);
  if (is) for (var n4 of is(e2)) Ua.call(e2, n4) && cs(t, n4, e2[n4]);
  return t;
};
var _a = (t, e2) => Sa(t, Oa(e2));
function fs(t, e2 = "-") {
  const n4 = {}, r3 = "relay" + e2;
  return Object.keys(t).forEach((o5) => {
    if (o5.startsWith(r3)) {
      const s2 = o5.replace(r3, ""), i3 = t[o5];
      n4[s2] = i3;
    }
  }), n4;
}
function Ra(t) {
  if (!t.includes("wc:")) {
    const u2 = cn(t);
    u2 != null && u2.includes("wc:") && (t = u2);
  }
  t = t.includes("wc://") ? t.replace("wc://", "") : t, t = t.includes("wc:") ? t.replace("wc:", "") : t;
  const e2 = t.indexOf(":"), n4 = t.indexOf("?") !== -1 ? t.indexOf("?") : void 0, r3 = t.substring(0, e2), o5 = t.substring(e2 + 1, n4).split("@"), s2 = typeof n4 < "u" ? t.substring(n4) : "", i3 = new URLSearchParams(s2), c6 = Object.fromEntries(i3.entries()), f6 = typeof c6.methods == "string" ? c6.methods.split(",") : void 0;
  return { protocol: r3, topic: as(o5[0]), version: parseInt(o5[1], 10), symKey: c6.symKey, relay: fs(c6), methods: f6, expiryTimestamp: c6.expiryTimestamp ? parseInt(c6.expiryTimestamp, 10) : void 0 };
}
function as(t) {
  return t.startsWith("//") ? t.substring(2) : t;
}
function us(t, e2 = "-") {
  const n4 = "relay", r3 = {};
  return Object.keys(t).forEach((o5) => {
    const s2 = o5, i3 = n4 + e2 + s2;
    t[s2] && (r3[i3] = t[s2]);
  }), r3;
}
function $a(t) {
  const e2 = new URLSearchParams(), n4 = Zn2(Zn2(_a(Zn2({}, us(t.relay)), { symKey: t.symKey }), t.expiryTimestamp && { expiryTimestamp: t.expiryTimestamp.toString() }), t.methods && { methods: t.methods.join(",") });
  return Object.entries(n4).sort(([r3], [o5]) => r3.localeCompare(o5)).forEach(([r3, o5]) => {
    o5 !== void 0 && e2.append(r3, String(o5));
  }), `${t.protocol}:${t.topic}@${t.version}?${e2}`;
}
function Ta(t, e2, n4) {
  return `${t}?wc_ev=${n4}&topic=${e2}`;
}
var Ca = Object.defineProperty;
var ja = Object.defineProperties;
var La = Object.getOwnPropertyDescriptors;
var ls = Object.getOwnPropertySymbols;
var ka = Object.prototype.hasOwnProperty;
var Pa = Object.prototype.propertyIsEnumerable;
var ds = (t, e2, n4) => e2 in t ? Ca(t, e2, { enumerable: true, configurable: true, writable: true, value: n4 }) : t[e2] = n4;
var Ha = (t, e2) => {
  for (var n4 in e2 || (e2 = {})) ka.call(e2, n4) && ds(t, n4, e2[n4]);
  if (ls) for (var n4 of ls(e2)) Pa.call(e2, n4) && ds(t, n4, e2[n4]);
  return t;
};
var Da = (t, e2) => ja(t, La(e2));
function Gt2(t) {
  const e2 = [];
  return t.forEach((n4) => {
    const [r3, o5] = n4.split(":");
    e2.push(`${r3}:${o5}`);
  }), e2;
}
function hs(t) {
  const e2 = [];
  return Object.values(t).forEach((n4) => {
    e2.push(...Gt2(n4.accounts));
  }), e2;
}
function ps(t, e2) {
  const n4 = [];
  return Object.values(t).forEach((r3) => {
    Gt2(r3.accounts).includes(e2) && n4.push(...r3.methods);
  }), n4;
}
function gs(t, e2) {
  const n4 = [];
  return Object.values(t).forEach((r3) => {
    Gt2(r3.accounts).includes(e2) && n4.push(...r3.events);
  }), n4;
}
function Gn2(t) {
  return t.includes(":");
}
function bs(t) {
  return Gn2(t) ? t.split(":")[0] : t;
}
function xe2(t) {
  var e2, n4, r3;
  const o5 = {};
  if (!Ye2(t)) return o5;
  for (const [s2, i3] of Object.entries(t)) {
    const c6 = Gn2(s2) ? [s2] : i3.chains, f6 = i3.methods || [], u2 = i3.events || [], a3 = bs(s2);
    o5[a3] = Da(Ha({}, o5[a3]), { chains: ut2(c6, (e2 = o5[a3]) == null ? void 0 : e2.chains), methods: ut2(f6, (n4 = o5[a3]) == null ? void 0 : n4.methods), events: ut2(u2, (r3 = o5[a3]) == null ? void 0 : r3.events) });
  }
  return o5;
}
function ys(t) {
  const e2 = {};
  return t?.forEach((n4) => {
    var r3;
    const [o5, s2] = n4.split(":");
    e2[o5] || (e2[o5] = { accounts: [], chains: [], events: [], methods: [] }), e2[o5].accounts.push(n4), (r3 = e2[o5].chains) == null || r3.push(`${o5}:${s2}`);
  }), e2;
}
function Ka(t, e2) {
  e2 = e2.map((r3) => r3.replace("did:pkh:", ""));
  const n4 = ys(e2);
  for (const [r3, o5] of Object.entries(n4)) o5.methods ? o5.methods = ut2(o5.methods, t) : o5.methods = t, o5.events = ["chainChanged", "accountsChanged"];
  return n4;
}
function qa(t, e2) {
  var n4, r3, o5, s2, i3, c6;
  const f6 = xe2(t), u2 = xe2(e2), a3 = {}, l6 = Object.keys(f6).concat(Object.keys(u2));
  for (const d7 of l6) a3[d7] = { chains: ut2((n4 = f6[d7]) == null ? void 0 : n4.chains, (r3 = u2[d7]) == null ? void 0 : r3.chains), methods: ut2((o5 = f6[d7]) == null ? void 0 : o5.methods, (s2 = u2[d7]) == null ? void 0 : s2.methods), events: ut2((i3 = f6[d7]) == null ? void 0 : i3.events, (c6 = u2[d7]) == null ? void 0 : c6.events) };
  return a3;
}
var ms = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var ws = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function Bt2(t, e2) {
  const { message: n4, code: r3 } = ws[t];
  return { message: e2 ? `${n4} ${e2}` : n4, code: r3 };
}
function zt2(t, e2) {
  const { message: n4, code: r3 } = ms[t];
  return { message: e2 ? `${n4} ${e2}` : n4, code: r3 };
}
function Ee2(t, e2) {
  return Array.isArray(t) ? typeof e2 < "u" && t.length ? t.every(e2) : true : false;
}
function Ye2(t) {
  return Object.getPrototypeOf(t) === Object.prototype && Object.keys(t).length;
}
function Dt2(t) {
  return typeof t > "u";
}
function ft2(t, e2) {
  return e2 && Dt2(t) ? true : typeof t == "string" && !!t.trim().length;
}
function We2(t, e2) {
  return e2 && Dt2(t) ? true : typeof t == "number" && !isNaN(t);
}
function Fa(t, e2) {
  const { requiredNamespaces: n4 } = e2, r3 = Object.keys(t.namespaces), o5 = Object.keys(n4);
  let s2 = true;
  return It2(o5, r3) ? (r3.forEach((i3) => {
    const { accounts: c6, methods: f6, events: u2 } = t.namespaces[i3], a3 = Gt2(c6), l6 = n4[i3];
    (!It2(Ie2(i3, l6), a3) || !It2(l6.methods, f6) || !It2(l6.events, u2)) && (s2 = false);
  }), s2) : false;
}
function Be2(t) {
  return ft2(t, false) && t.includes(":") ? t.split(":").length === 2 : false;
}
function vs(t) {
  if (ft2(t, false) && t.includes(":")) {
    const e2 = t.split(":");
    if (e2.length === 3) {
      const n4 = e2[0] + ":" + e2[1];
      return !!e2[2] && Be2(n4);
    }
  }
  return false;
}
function Za(t) {
  function e2(n4) {
    try {
      return typeof new URL(n4) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (ft2(t, false)) {
      if (e2(t)) return true;
      const n4 = cn(t);
      return e2(n4);
    }
  } catch {
  }
  return false;
}
function Ga(t) {
  var e2;
  return (e2 = t?.proposer) == null ? void 0 : e2.publicKey;
}
function za(t) {
  return t?.topic;
}
function Ya(t, e2) {
  let n4 = null;
  return ft2(t?.publicKey, false) || (n4 = Bt2("MISSING_OR_INVALID", `${e2} controller public key should be a string`)), n4;
}
function zn2(t) {
  let e2 = true;
  return Ee2(t) ? t.length && (e2 = t.every((n4) => ft2(n4, false))) : e2 = false, e2;
}
function xs(t, e2, n4) {
  let r3 = null;
  return Ee2(e2) && e2.length ? e2.forEach((o5) => {
    r3 || Be2(o5) || (r3 = zt2("UNSUPPORTED_CHAINS", `${n4}, chain ${o5} should be a string and conform to "namespace:chainId" format`));
  }) : Be2(t) || (r3 = zt2("UNSUPPORTED_CHAINS", `${n4}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r3;
}
function Es(t, e2, n4) {
  let r3 = null;
  return Object.entries(t).forEach(([o5, s2]) => {
    if (r3) return;
    const i3 = xs(o5, Ie2(o5, s2), `${e2} ${n4}`);
    i3 && (r3 = i3);
  }), r3;
}
function Bs(t, e2) {
  let n4 = null;
  return Ee2(t) ? t.forEach((r3) => {
    n4 || vs(r3) || (n4 = zt2("UNSUPPORTED_ACCOUNTS", `${e2}, account ${r3} should be a string and conform to "namespace:chainId:address" format`));
  }) : n4 = zt2("UNSUPPORTED_ACCOUNTS", `${e2}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), n4;
}
function As(t, e2) {
  let n4 = null;
  return Object.values(t).forEach((r3) => {
    if (n4) return;
    const o5 = Bs(r3?.accounts, `${e2} namespace`);
    o5 && (n4 = o5);
  }), n4;
}
function Is(t, e2) {
  let n4 = null;
  return zn2(t?.methods) ? zn2(t?.events) || (n4 = zt2("UNSUPPORTED_EVENTS", `${e2}, events should be an array of strings or empty array for no events`)) : n4 = zt2("UNSUPPORTED_METHODS", `${e2}, methods should be an array of strings or empty array for no methods`), n4;
}
function Yn2(t, e2) {
  let n4 = null;
  return Object.values(t).forEach((r3) => {
    if (n4) return;
    const o5 = Is(r3, `${e2}, namespace`);
    o5 && (n4 = o5);
  }), n4;
}
function Wa(t, e2, n4) {
  let r3 = null;
  if (t && Ye2(t)) {
    const o5 = Yn2(t, e2);
    o5 && (r3 = o5);
    const s2 = Es(t, e2, n4);
    s2 && (r3 = s2);
  } else r3 = Bt2("MISSING_OR_INVALID", `${e2}, ${n4} should be an object with data`);
  return r3;
}
function Ss(t, e2) {
  let n4 = null;
  if (t && Ye2(t)) {
    const r3 = Yn2(t, e2);
    r3 && (n4 = r3);
    const o5 = As(t, e2);
    o5 && (n4 = o5);
  } else n4 = Bt2("MISSING_OR_INVALID", `${e2}, namespaces should be an object with data`);
  return n4;
}
function Os(t) {
  return ft2(t.protocol, true);
}
function Xa(t, e2) {
  let n4 = false;
  return e2 && !t ? n4 = true : t && Ee2(t) && t.length && t.forEach((r3) => {
    n4 = Os(r3);
  }), n4;
}
function Ja(t) {
  return typeof t == "number";
}
function Qa(t) {
  return typeof t < "u" && typeof t !== null;
}
function tu(t) {
  return !(!t || typeof t != "object" || !t.code || !We2(t.code, false) || !t.message || !ft2(t.message, false));
}
function eu(t) {
  return !(Dt2(t) || !ft2(t.method, false));
}
function nu(t) {
  return !(Dt2(t) || Dt2(t.result) && Dt2(t.error) || !We2(t.id, false) || !ft2(t.jsonrpc, false));
}
function ru(t) {
  return !(Dt2(t) || !ft2(t.name, false));
}
function ou(t, e2) {
  return !(!Be2(e2) || !hs(t).includes(e2));
}
function su(t, e2, n4) {
  return ft2(n4, false) ? ps(t, e2).includes(n4) : false;
}
function iu(t, e2, n4) {
  return ft2(n4, false) ? gs(t, e2).includes(n4) : false;
}
function Ns(t, e2, n4) {
  let r3 = null;
  const o5 = cu(t), s2 = fu(e2), i3 = Object.keys(o5), c6 = Object.keys(s2), f6 = Us(Object.keys(t)), u2 = Us(Object.keys(e2)), a3 = f6.filter((l6) => !u2.includes(l6));
  return a3.length && (r3 = Bt2("NON_CONFORMING_NAMESPACES", `${n4} namespaces keys don't satisfy requiredNamespaces.
      Required: ${a3.toString()}
      Received: ${Object.keys(e2).toString()}`)), It2(i3, c6) || (r3 = Bt2("NON_CONFORMING_NAMESPACES", `${n4} namespaces chains don't satisfy required namespaces.
      Required: ${i3.toString()}
      Approved: ${c6.toString()}`)), Object.keys(e2).forEach((l6) => {
    if (!l6.includes(":") || r3) return;
    const d7 = Gt2(e2[l6].accounts);
    d7.includes(l6) || (r3 = Bt2("NON_CONFORMING_NAMESPACES", `${n4} namespaces accounts don't satisfy namespace accounts for ${l6}
        Required: ${l6}
        Approved: ${d7.toString()}`));
  }), i3.forEach((l6) => {
    r3 || (It2(o5[l6].methods, s2[l6].methods) ? It2(o5[l6].events, s2[l6].events) || (r3 = Bt2("NON_CONFORMING_NAMESPACES", `${n4} namespaces events don't satisfy namespace events for ${l6}`)) : r3 = Bt2("NON_CONFORMING_NAMESPACES", `${n4} namespaces methods don't satisfy namespace methods for ${l6}`));
  }), r3;
}
function cu(t) {
  const e2 = {};
  return Object.keys(t).forEach((n4) => {
    var r3;
    n4.includes(":") ? e2[n4] = t[n4] : (r3 = t[n4].chains) == null || r3.forEach((o5) => {
      e2[o5] = { methods: t[n4].methods, events: t[n4].events };
    });
  }), e2;
}
function Us(t) {
  return [...new Set(t.map((e2) => e2.includes(":") ? e2.split(":")[0] : e2))];
}
function fu(t) {
  const e2 = {};
  return Object.keys(t).forEach((n4) => {
    if (n4.includes(":")) e2[n4] = t[n4];
    else {
      const r3 = Gt2(t[n4].accounts);
      r3?.forEach((o5) => {
        e2[o5] = { accounts: t[n4].accounts.filter((s2) => s2.includes(`${o5}:`)), methods: t[n4].methods, events: t[n4].events };
      });
    }
  }), e2;
}
function au(t, e2) {
  return We2(t, false) && t <= e2.max && t >= e2.min;
}
function uu() {
  const t = Vt2();
  return new Promise((e2) => {
    switch (t) {
      case et.browser:
        e2(_s());
        break;
      case et.reactNative:
        e2(Rs());
        break;
      case et.node:
        e2($s());
        break;
      default:
        e2(true);
    }
  });
}
function _s() {
  return Wt2() && navigator?.onLine;
}
async function Rs() {
  if (At() && typeof global < "u" && global != null && global.NetInfo) {
    const t = await (global == null ? void 0 : global.NetInfo.fetch());
    return t?.isConnected;
  }
  return true;
}
function $s() {
  return true;
}
function lu(t) {
  switch (Vt2()) {
    case et.browser:
      Ts(t);
      break;
    case et.reactNative:
      Cs(t);
      break;
    case et.node:
      break;
  }
}
function Ts(t) {
  !At() && Wt2() && (window.addEventListener("online", () => t(true)), window.addEventListener("offline", () => t(false)));
}
function Cs(t) {
  At() && typeof global < "u" && global != null && global.NetInfo && global?.NetInfo.addEventListener((e2) => t(e2?.isConnected));
}
function du() {
  var t;
  return Wt2() && (0, import_window_getters.getDocument)() ? ((t = (0, import_window_getters.getDocument)()) == null ? void 0 : t.visibilityState) === "visible" : true;
}
var Wn2 = {};
var hu = class {
  static get(e2) {
    return Wn2[e2];
  }
  static set(e2, n4) {
    Wn2[e2] = n4;
  }
  static delete(e2) {
    delete Wn2[e2];
  }
};
function js(t) {
  const e2 = esm_default2.decode(t);
  if (e2.length < 33) throw new Error("Too short to contain a public key");
  return e2.slice(1, 33);
}
function Ls({ publicKey: t, signature: e2, payload: n4 }) {
  var r3;
  const o5 = Xn2(n4.method), s2 = 128 | parseInt(((r3 = n4.version) == null ? void 0 : r3.toString()) || "4"), i3 = gu(n4.address), c6 = n4.era === "00" ? new Uint8Array([0]) : Xn2(n4.era);
  if (c6.length !== 1 && c6.length !== 2) throw new Error("Invalid era length");
  const f6 = parseInt(n4.nonce, 16), u2 = new Uint8Array([f6 & 255, f6 >> 8 & 255]), a3 = BigInt(`0x${pu(n4.tip)}`), l6 = yu(a3), d7 = new Uint8Array([0, ...t, i3, ...e2, ...c6, ...u2, ...l6, ...o5]), h4 = bu(d7.length + 1);
  return new Uint8Array([...h4, s2, ...d7]);
}
function ks(t) {
  const e2 = Xn2(t), n4 = (0, import_blakejs.blake2b)(e2, void 0, 32);
  return "0x" + Buffer.from(n4).toString("hex");
}
function Xn2(t) {
  return new Uint8Array(t.replace(/^0x/, "").match(/.{1,2}/g).map((e2) => parseInt(e2, 16)));
}
function pu(t) {
  return t.startsWith("0x") ? t.slice(2) : t;
}
function gu(t) {
  const e2 = esm_default2.decode(t)[0];
  return e2 === 42 ? 0 : e2 === 60 ? 2 : 1;
}
function bu(t) {
  if (t < 64) return new Uint8Array([t << 2]);
  if (t < 16384) {
    const e2 = t << 2 | 1;
    return new Uint8Array([e2 & 255, e2 >> 8 & 255]);
  } else if (t < 1 << 30) {
    const e2 = t << 2 | 2;
    return new Uint8Array([e2 & 255, e2 >> 8 & 255, e2 >> 16 & 255, e2 >> 24 & 255]);
  } else throw new Error("Compact encoding > 2^30 not supported");
}
function yu(t) {
  if (t < BigInt(1) << BigInt(6)) return new Uint8Array([Number(t << BigInt(2))]);
  if (t < BigInt(1) << BigInt(14)) {
    const e2 = t << BigInt(2) | BigInt(1);
    return new Uint8Array([Number(e2 & BigInt(255)), Number(e2 >> BigInt(8) & BigInt(255))]);
  } else if (t < BigInt(1) << BigInt(30)) {
    const e2 = t << BigInt(2) | BigInt(2);
    return new Uint8Array([Number(e2 & BigInt(255)), Number(e2 >> BigInt(8) & BigInt(255)), Number(e2 >> BigInt(16) & BigInt(255)), Number(e2 >> BigInt(24) & BigInt(255))]);
  } else throw new Error("BigInt compact encoding not supported > 2^30");
}
function mu(t) {
  const e2 = Uint8Array.from(Buffer.from(t.signature, "hex")), n4 = js(t.transaction.address), r3 = Ls({ publicKey: n4, signature: e2, payload: t.transaction }), o5 = Buffer.from(r3).toString("hex");
  return ks(o5);
}
function wu({ logger: t, name: e2 }) {
  const n4 = typeof t == "string" ? Y({ opts: { level: t, name: e2 } }).logger : t;
  return n4.level = typeof t == "string" ? t : t.level, n4;
}

// node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var import_events5 = __toESM(require_events());

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  DEFAULT_ERROR: () => DEFAULT_ERROR,
  IBaseJsonRpcProvider: () => n3,
  IEvents: () => e,
  IJsonRpcConnection: () => o2,
  IJsonRpcProvider: () => r2,
  INTERNAL_ERROR: () => INTERNAL_ERROR,
  INVALID_PARAMS: () => INVALID_PARAMS,
  INVALID_REQUEST: () => INVALID_REQUEST,
  METHOD_NOT_FOUND: () => METHOD_NOT_FOUND,
  PARSE_ERROR: () => PARSE_ERROR,
  RESERVED_ERROR_CODES: () => RESERVED_ERROR_CODES,
  SERVER_ERROR: () => SERVER_ERROR,
  SERVER_ERROR_CODE_RANGE: () => SERVER_ERROR_CODE_RANGE,
  STANDARD_ERROR_MAP: () => STANDARD_ERROR_MAP,
  formatErrorMessage: () => formatErrorMessage,
  formatJsonRpcError: () => formatJsonRpcError,
  formatJsonRpcRequest: () => formatJsonRpcRequest,
  formatJsonRpcResult: () => formatJsonRpcResult,
  getBigIntRpcId: () => getBigIntRpcId,
  getError: () => getError,
  getErrorByCode: () => getErrorByCode,
  isHttpUrl: () => isHttpUrl,
  isJsonRpcError: () => isJsonRpcError,
  isJsonRpcPayload: () => isJsonRpcPayload,
  isJsonRpcRequest: () => isJsonRpcRequest,
  isJsonRpcResponse: () => isJsonRpcResponse,
  isJsonRpcResult: () => isJsonRpcResult,
  isJsonRpcValidationInvalid: () => isJsonRpcValidationInvalid,
  isLocalhostUrl: () => isLocalhostUrl,
  isNodeJs: () => isNodeJs,
  isReservedErrorCode: () => isReservedErrorCode,
  isServerErrorCode: () => isServerErrorCode,
  isValidDefaultRoute: () => isValidDefaultRoute,
  isValidErrorCode: () => isValidErrorCode,
  isValidLeadingWildcardRoute: () => isValidLeadingWildcardRoute,
  isValidRoute: () => isValidRoute,
  isValidTrailingWildcardRoute: () => isValidTrailingWildcardRoute,
  isValidWildcardRoute: () => isValidWildcardRoute,
  isWsUrl: () => isWsUrl,
  parseConnectionError: () => parseConnectionError,
  payloadId: () => payloadId,
  validateJsonRpcError: () => validateJsonRpcError
});

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js
var PARSE_ERROR = "PARSE_ERROR";
var INVALID_REQUEST = "INVALID_REQUEST";
var METHOD_NOT_FOUND = "METHOD_NOT_FOUND";
var INVALID_PARAMS = "INVALID_PARAMS";
var INTERNAL_ERROR = "INTERNAL_ERROR";
var SERVER_ERROR = "SERVER_ERROR";
var RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];
var SERVER_ERROR_CODE_RANGE = [-32e3, -32099];
var STANDARD_ERROR_MAP = {
  [PARSE_ERROR]: { code: -32700, message: "Parse error" },
  [INVALID_REQUEST]: { code: -32600, message: "Invalid Request" },
  [METHOD_NOT_FOUND]: { code: -32601, message: "Method not found" },
  [INVALID_PARAMS]: { code: -32602, message: "Invalid params" },
  [INTERNAL_ERROR]: { code: -32603, message: "Internal error" },
  [SERVER_ERROR]: { code: -32e3, message: "Server error" }
};
var DEFAULT_ERROR = SERVER_ERROR;

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js
function isServerErrorCode(code2) {
  return code2 <= SERVER_ERROR_CODE_RANGE[0] && code2 >= SERVER_ERROR_CODE_RANGE[1];
}
function isReservedErrorCode(code2) {
  return RESERVED_ERROR_CODES.includes(code2);
}
function isValidErrorCode(code2) {
  return typeof code2 === "number";
}
function getError(type) {
  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return STANDARD_ERROR_MAP[type];
}
function getErrorByCode(code2) {
  const match = Object.values(STANDARD_ERROR_MAP).find((e2) => e2.code === code2);
  if (!match) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return match;
}
function validateJsonRpcError(response) {
  if (typeof response.error.code === "undefined") {
    return { valid: false, error: "Missing code for JSON-RPC error" };
  }
  if (typeof response.error.message === "undefined") {
    return { valid: false, error: "Missing message for JSON-RPC error" };
  }
  if (!isValidErrorCode(response.error.code)) {
    return {
      valid: false,
      error: `Invalid error code type for JSON-RPC: ${response.error.code}`
    };
  }
  if (isReservedErrorCode(response.error.code)) {
    const error = getErrorByCode(response.error.code);
    if (error.message !== STANDARD_ERROR_MAP[DEFAULT_ERROR].message && response.error.message === error.message) {
      return {
        valid: false,
        error: `Invalid error code message for JSON-RPC: ${response.error.code}`
      };
    }
  }
  return { valid: true };
}
function parseConnectionError(e2, url, type) {
  return e2.message.includes("getaddrinfo ENOTFOUND") || e2.message.includes("connect ECONNREFUSED") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e2;
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js
var env_exports = {};
__export(env_exports, {
  isNodeJs: () => isNodeJs
});
var import_environment = __toESM(require_cjs4());
__reExport(env_exports, __toESM(require_cjs4()));
var isNodeJs = import_environment.isNode;

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
__reExport(esm_exports, env_exports);

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js
function payloadId(entropy = 3) {
  const date = Date.now() * Math.pow(10, entropy);
  const extra = Math.floor(Math.random() * Math.pow(10, entropy));
  return date + extra;
}
function getBigIntRpcId(entropy = 6) {
  return BigInt(payloadId(entropy));
}
function formatJsonRpcRequest(method, params, id) {
  return {
    id: id || payloadId(),
    jsonrpc: "2.0",
    method,
    params
  };
}
function formatJsonRpcResult(id, result) {
  return {
    id,
    jsonrpc: "2.0",
    result
  };
}
function formatJsonRpcError(id, error, data) {
  return {
    id,
    jsonrpc: "2.0",
    error: formatErrorMessage(error, data)
  };
}
function formatErrorMessage(error, data) {
  if (typeof error === "undefined") {
    return getError(INTERNAL_ERROR);
  }
  if (typeof error === "string") {
    error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), { message: error });
  }
  if (typeof data !== "undefined") {
    error.data = data;
  }
  if (isReservedErrorCode(error.code)) {
    error = getErrorByCode(error.code);
  }
  return error;
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js
function isValidRoute(route) {
  if (route.includes("*")) {
    return isValidWildcardRoute(route);
  }
  if (/\W/g.test(route)) {
    return false;
  }
  return true;
}
function isValidDefaultRoute(route) {
  return route === "*";
}
function isValidWildcardRoute(route) {
  if (isValidDefaultRoute(route)) {
    return true;
  }
  if (!route.includes("*")) {
    return false;
  }
  if (route.split("*").length !== 2) {
    return false;
  }
  if (route.split("*").filter((x5) => x5.trim() === "").length !== 1) {
    return false;
  }
  return true;
}
function isValidLeadingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[0].trim();
}
function isValidTrailingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[1].trim();
}

// node_modules/@walletconnect/jsonrpc-types/dist/index.es.js
var e = class {
};
var o2 = class extends e {
  constructor(c6) {
    super();
  }
};
var n3 = class extends e {
  constructor() {
    super();
  }
};
var r2 = class extends n3 {
  constructor(c6) {
    super();
  }
};

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js
var HTTP_REGEX = "^https?:";
var WS_REGEX = "^wss?:";
function getUrlProtocol(url) {
  const matches = url.match(new RegExp(/^\w+:/, "gi"));
  if (!matches || !matches.length)
    return;
  return matches[0];
}
function matchRegexProtocol(url, regex) {
  const protocol = getUrlProtocol(url);
  if (typeof protocol === "undefined")
    return false;
  return new RegExp(regex).test(protocol);
}
function isHttpUrl(url) {
  return matchRegexProtocol(url, HTTP_REGEX);
}
function isWsUrl(url) {
  return matchRegexProtocol(url, WS_REGEX);
}
function isLocalhostUrl(url) {
  return new RegExp("wss?://localhost(:d{2,5})?").test(url);
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js
function isJsonRpcPayload(payload) {
  return typeof payload === "object" && "id" in payload && "jsonrpc" in payload && payload.jsonrpc === "2.0";
}
function isJsonRpcRequest(payload) {
  return isJsonRpcPayload(payload) && "method" in payload;
}
function isJsonRpcResponse(payload) {
  return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));
}
function isJsonRpcResult(payload) {
  return "result" in payload;
}
function isJsonRpcError(payload) {
  return "error" in payload;
}
function isJsonRpcValidationInvalid(validation) {
  return "error" in validation && validation.valid === false;
}

// node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var o3 = class extends r2 {
  constructor(t) {
    super(t), this.events = new import_events5.EventEmitter(), this.hasRegisteredEventListeners = false, this.connection = this.setConnection(t), this.connection.connected && this.registerEventListeners();
  }
  async connect(t = this.connection) {
    await this.open(t);
  }
  async disconnect() {
    await this.close();
  }
  on(t, e2) {
    this.events.on(t, e2);
  }
  once(t, e2) {
    this.events.once(t, e2);
  }
  off(t, e2) {
    this.events.off(t, e2);
  }
  removeListener(t, e2) {
    this.events.removeListener(t, e2);
  }
  async request(t, e2) {
    return this.requestStrict(formatJsonRpcRequest(t.method, t.params || [], t.id || getBigIntRpcId().toString()), e2);
  }
  async requestStrict(t, e2) {
    return new Promise(async (i3, s2) => {
      if (!this.connection.connected) try {
        await this.open();
      } catch (n4) {
        s2(n4);
      }
      this.events.on(`${t.id}`, (n4) => {
        isJsonRpcError(n4) ? s2(n4.error) : i3(n4.result);
      });
      try {
        await this.connection.send(t, e2);
      } catch (n4) {
        s2(n4);
      }
    });
  }
  setConnection(t = this.connection) {
    return t;
  }
  onPayload(t) {
    this.events.emit("payload", t), isJsonRpcResponse(t) ? this.events.emit(`${t.id}`, t) : this.events.emit("message", { type: t.method, data: t.params });
  }
  onClose(t) {
    t && t.code === 3e3 && this.events.emit("error", new Error(`WebSocket connection closed abnormally with code: ${t.code} ${t.reason ? `(${t.reason})` : ""}`)), this.events.emit("disconnect");
  }
  async open(t = this.connection) {
    this.connection === t && this.connection.connected || (this.connection.connected && this.close(), typeof t == "string" && (await this.connection.open(t), t = this.connection), this.connection = this.setConnection(t), await this.connection.open(), this.registerEventListeners(), this.events.emit("connect"));
  }
  async close() {
    await this.connection.close();
  }
  registerEventListeners() {
    this.hasRegisteredEventListeners || (this.connection.on("payload", (t) => this.onPayload(t)), this.connection.on("close", (t) => this.onClose(t)), this.connection.on("error", (t) => this.events.emit("error", t)), this.connection.on("register_error", (t) => this.onClose()), this.hasRegisteredEventListeners = true);
  }
};

// node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js
var import_events6 = __toESM(require_events());
var v2 = () => typeof WebSocket < "u" ? WebSocket : typeof global < "u" && typeof global.WebSocket < "u" ? global.WebSocket : typeof window < "u" && typeof window.WebSocket < "u" ? window.WebSocket : typeof self < "u" && typeof self.WebSocket < "u" ? self.WebSocket : require_browser();
var w2 = () => typeof WebSocket < "u" || typeof global < "u" && typeof global.WebSocket < "u" || typeof window < "u" && typeof window.WebSocket < "u" || typeof self < "u" && typeof self.WebSocket < "u";
var d2 = (r3) => r3.split("?")[0];
var h3 = 10;
var b2 = v2();
var f2 = class {
  constructor(e2) {
    if (this.url = e2, this.events = new import_events6.EventEmitter(), this.registering = false, !isWsUrl(e2)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e2}`);
    this.url = e2;
  }
  get connected() {
    return typeof this.socket < "u";
  }
  get connecting() {
    return this.registering;
  }
  on(e2, t) {
    this.events.on(e2, t);
  }
  once(e2, t) {
    this.events.once(e2, t);
  }
  off(e2, t) {
    this.events.off(e2, t);
  }
  removeListener(e2, t) {
    this.events.removeListener(e2, t);
  }
  async open(e2 = this.url) {
    await this.register(e2);
  }
  async close() {
    return new Promise((e2, t) => {
      if (typeof this.socket > "u") {
        t(new Error("Connection already closed"));
        return;
      }
      this.socket.onclose = (n4) => {
        this.onClose(n4), e2();
      }, this.socket.close();
    });
  }
  async send(e2) {
    typeof this.socket > "u" && (this.socket = await this.register());
    try {
      this.socket.send(safeJsonStringify(e2));
    } catch (t) {
      this.onError(e2.id, t);
    }
  }
  register(e2 = this.url) {
    if (!isWsUrl(e2)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e2}`);
    if (this.registering) {
      const t = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= t || this.events.listenerCount("open") >= t) && this.events.setMaxListeners(t + 1), new Promise((n4, s2) => {
        this.events.once("register_error", (o5) => {
          this.resetMaxListeners(), s2(o5);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.socket > "u") return s2(new Error("WebSocket connection is missing or invalid"));
          n4(this.socket);
        });
      });
    }
    return this.url = e2, this.registering = true, new Promise((t, n4) => {
      const s2 = (0, esm_exports.isReactNative)() ? void 0 : { rejectUnauthorized: !isLocalhostUrl(e2) }, o5 = new b2(e2, [], s2);
      w2() ? o5.onerror = (i3) => {
        const a3 = i3;
        n4(this.emitError(a3.error));
      } : o5.on("error", (i3) => {
        n4(this.emitError(i3));
      }), o5.onopen = () => {
        this.onOpen(o5), t(o5);
      };
    });
  }
  onOpen(e2) {
    e2.onmessage = (t) => this.onPayload(t), e2.onclose = (t) => this.onClose(t), this.socket = e2, this.registering = false, this.events.emit("open");
  }
  onClose(e2) {
    this.socket = void 0, this.registering = false, this.events.emit("close", e2);
  }
  onPayload(e2) {
    if (typeof e2.data > "u") return;
    const t = typeof e2.data == "string" ? safeJsonParse(e2.data) : e2.data;
    this.events.emit("payload", t);
  }
  onError(e2, t) {
    const n4 = this.parseError(t), s2 = n4.message || n4.toString(), o5 = formatJsonRpcError(e2, s2);
    this.events.emit("payload", o5);
  }
  parseError(e2, t = this.url) {
    return parseConnectionError(e2, d2(t), "WS");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > h3 && this.events.setMaxListeners(h3);
  }
  emitError(e2) {
    const t = this.parseError(new Error(e2?.message || `WebSocket connection failed for host: ${d2(this.url)}`));
    return this.events.emit("register_error", t), t;
  }
};

// node_modules/@walletconnect/core/dist/index.js
var import_window_getters2 = __toESM(require_cjs2());
var Ue3 = "wc";
var Fe2 = 2;
var ge3 = "core";
var W3 = `${Ue3}@2:${ge3}:`;
var Et3 = { name: ge3, logger: "error" };
var It3 = { database: ":memory:" };
var Tt3 = "crypto";
var Me3 = "client_ed25519_seed";
var Ct2 = import_time4.ONE_DAY;
var Pt3 = "keychain";
var St3 = "0.3";
var Ot3 = "messages";
var Rt3 = "0.3";
var At2 = import_time4.SIX_HOURS;
var xt3 = "publisher";
var Nt3 = "irn";
var $t3 = "error";
var Ke3 = "wss://relay.walletconnect.org";
var zt3 = "relayer";
var C2 = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" };
var Lt3 = "_subscription";
var M3 = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" };
var kt3 = 0.1;
var Pe3 = "2.22.4";
var ee2 = { link_mode: "link_mode", relay: "relay" };
var ye3 = { inbound: "inbound", outbound: "outbound" };
var jt3 = "0.3";
var Ut3 = "WALLETCONNECT_CLIENT_ID";
var Be3 = "WALLETCONNECT_LINK_MODE_APPS";
var j3 = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" };
var Ft3 = "subscription";
var Mt3 = "0.3";
var Qs = import_time4.FIVE_SECONDS * 1e3;
var Kt3 = "pairing";
var Bt3 = "0.3";
var oe2 = { wc_pairingDelete: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1e3 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1001 } }, wc_pairingPing: { req: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1002 }, res: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1003 } }, unregistered_method: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 } } };
var ae2 = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" };
var V2 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
var Vt3 = "history";
var qt3 = "0.3";
var Gt3 = "expirer";
var q = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" };
var Wt3 = "0.3";
var Ht3 = "verify-api";
var ir2 = "https://verify.walletconnect.com";
var Yt2 = "https://verify.walletconnect.org";
var be3 = Yt2;
var Jt3 = `${be3}/v3`;
var Xt3 = [ir2, Yt2];
var Zt3 = "echo";
var Qt3 = "https://echo.walletconnect.com";
var Y2 = { pairing_started: "pairing_started", pairing_uri_validation_success: "pairing_uri_validation_success", pairing_uri_not_expired: "pairing_uri_not_expired", store_new_pairing: "store_new_pairing", subscribing_pairing_topic: "subscribing_pairing_topic", subscribe_pairing_topic_success: "subscribe_pairing_topic_success", existing_pairing: "existing_pairing", pairing_not_expired: "pairing_not_expired", emit_inactive_pairing: "emit_inactive_pairing", emit_session_proposal: "emit_session_proposal", subscribing_to_pairing_topic: "subscribing_to_pairing_topic" };
var X3 = { no_wss_connection: "no_wss_connection", no_internet_connection: "no_internet_connection", malformed_pairing_uri: "malformed_pairing_uri", active_pairing_already_exists: "active_pairing_already_exists", subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure", pairing_expired: "pairing_expired", proposal_expired: "proposal_expired", proposal_listener_not_found: "proposal_listener_not_found" };
var rr3 = { session_approve_started: "session_approve_started", proposal_not_expired: "proposal_not_expired", session_namespaces_validation_success: "session_namespaces_validation_success", create_session_topic: "create_session_topic", subscribing_session_topic: "subscribing_session_topic", subscribe_session_topic_success: "subscribe_session_topic_success", publishing_session_approve: "publishing_session_approve", session_approve_publish_success: "session_approve_publish_success", store_session: "store_session", publishing_session_settle: "publishing_session_settle", session_settle_publish_success: "session_settle_publish_success", session_request_response_started: "session_request_response_started", session_request_response_validation_success: "session_request_response_validation_success", session_request_response_publish_started: "session_request_response_publish_started" };
var nr3 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", proposal_expired: "proposal_expired", subscribe_session_topic_failure: "subscribe_session_topic_failure", session_approve_publish_failure: "session_approve_publish_failure", session_settle_publish_failure: "session_settle_publish_failure", session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure", proposal_not_found: "proposal_not_found", session_request_response_validation_failure: "session_request_response_validation_failure", session_request_response_publish_failure: "session_request_response_publish_failure" };
var or3 = { authenticated_session_approve_started: "authenticated_session_approve_started", authenticated_session_not_expired: "authenticated_session_not_expired", chains_caip2_compliant: "chains_caip2_compliant", chains_evm_compliant: "chains_evm_compliant", create_authenticated_session_topic: "create_authenticated_session_topic", cacaos_verified: "cacaos_verified", store_authenticated_session: "store_authenticated_session", subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic", subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success", publishing_authenticated_session_approve: "publishing_authenticated_session_approve", authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success" };
var ar3 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", missing_session_authenticate_request: "missing_session_authenticate_request", session_authenticate_request_expired: "session_authenticate_request_expired", chains_caip2_compliant_failure: "chains_caip2_compliant_failure", chains_evm_compliant_failure: "chains_evm_compliant_failure", invalid_cacao: "invalid_cacao", subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure", authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure", authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found" };
var ei2 = 0.1;
var ti = "event-client";
var ii2 = 86400;
var si2 = "https://pulse.walletconnect.org/batch";
function cr2(r3, e2) {
  if (r3.length >= 255) throw new TypeError("Alphabet too long");
  for (var t = new Uint8Array(256), i3 = 0; i3 < t.length; i3++) t[i3] = 255;
  for (var s2 = 0; s2 < r3.length; s2++) {
    var n4 = r3.charAt(s2), o5 = n4.charCodeAt(0);
    if (t[o5] !== 255) throw new TypeError(n4 + " is ambiguous");
    t[o5] = s2;
  }
  var a3 = r3.length, c6 = r3.charAt(0), h4 = Math.log(a3) / Math.log(256), l6 = Math.log(256) / Math.log(a3);
  function g4(u2) {
    if (u2 instanceof Uint8Array || (ArrayBuffer.isView(u2) ? u2 = new Uint8Array(u2.buffer, u2.byteOffset, u2.byteLength) : Array.isArray(u2) && (u2 = Uint8Array.from(u2))), !(u2 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (u2.length === 0) return "";
    for (var m4 = 0, D3 = 0, w5 = 0, E4 = u2.length; w5 !== E4 && u2[w5] === 0; ) w5++, m4++;
    for (var L3 = (E4 - w5) * l6 + 1 >>> 0, I2 = new Uint8Array(L3); w5 !== E4; ) {
      for (var k4 = u2[w5], T4 = 0, S4 = L3 - 1; (k4 !== 0 || T4 < D3) && S4 !== -1; S4--, T4++) k4 += 256 * I2[S4] >>> 0, I2[S4] = k4 % a3 >>> 0, k4 = k4 / a3 >>> 0;
      if (k4 !== 0) throw new Error("Non-zero carry");
      D3 = T4, w5++;
    }
    for (var O5 = L3 - D3; O5 !== L3 && I2[O5] === 0; ) O5++;
    for (var te4 = c6.repeat(m4); O5 < L3; ++O5) te4 += r3.charAt(I2[O5]);
    return te4;
  }
  function y4(u2) {
    if (typeof u2 != "string") throw new TypeError("Expected String");
    if (u2.length === 0) return new Uint8Array();
    var m4 = 0;
    if (u2[m4] !== " ") {
      for (var D3 = 0, w5 = 0; u2[m4] === c6; ) D3++, m4++;
      for (var E4 = (u2.length - m4) * h4 + 1 >>> 0, L3 = new Uint8Array(E4); u2[m4]; ) {
        var I2 = t[u2.charCodeAt(m4)];
        if (I2 === 255) return;
        for (var k4 = 0, T4 = E4 - 1; (I2 !== 0 || k4 < w5) && T4 !== -1; T4--, k4++) I2 += a3 * L3[T4] >>> 0, L3[T4] = I2 % 256 >>> 0, I2 = I2 / 256 >>> 0;
        if (I2 !== 0) throw new Error("Non-zero carry");
        w5 = k4, m4++;
      }
      if (u2[m4] !== " ") {
        for (var S4 = E4 - w5; S4 !== E4 && L3[S4] === 0; ) S4++;
        for (var O5 = new Uint8Array(D3 + (E4 - S4)), te4 = D3; S4 !== E4; ) O5[te4++] = L3[S4++];
        return O5;
      }
    }
  }
  function _3(u2) {
    var m4 = y4(u2);
    if (m4) return m4;
    throw new Error(`Non-${e2} character`);
  }
  return { encode: g4, decodeUnsafe: y4, decode: _3 };
}
var hr2 = cr2;
var lr3 = hr2;
var ri2 = (r3) => {
  if (r3 instanceof Uint8Array && r3.constructor.name === "Uint8Array") return r3;
  if (r3 instanceof ArrayBuffer) return new Uint8Array(r3);
  if (ArrayBuffer.isView(r3)) return new Uint8Array(r3.buffer, r3.byteOffset, r3.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var ur3 = (r3) => new TextEncoder().encode(r3);
var dr3 = (r3) => new TextDecoder().decode(r3);
var pr3 = class {
  constructor(e2, t, i3) {
    this.name = e2, this.prefix = t, this.baseEncode = i3;
  }
  encode(e2) {
    if (e2 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e2)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var gr3 = class {
  constructor(e2, t, i3) {
    if (this.name = e2, this.prefix = t, t.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = t.codePointAt(0), this.baseDecode = i3;
  }
  decode(e2) {
    if (typeof e2 == "string") {
      if (e2.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e2)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e2.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e2) {
    return ni2(this, e2);
  }
};
var yr3 = class {
  constructor(e2) {
    this.decoders = e2;
  }
  or(e2) {
    return ni2(this, e2);
  }
  decode(e2) {
    const t = e2[0], i3 = this.decoders[t];
    if (i3) return i3.decode(e2);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e2)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ni2 = (r3, e2) => new yr3({ ...r3.decoders || { [r3.prefix]: r3 }, ...e2.decoders || { [e2.prefix]: e2 } });
var br3 = class {
  constructor(e2, t, i3, s2) {
    this.name = e2, this.prefix = t, this.baseEncode = i3, this.baseDecode = s2, this.encoder = new pr3(e2, t, i3), this.decoder = new gr3(e2, t, s2);
  }
  encode(e2) {
    return this.encoder.encode(e2);
  }
  decode(e2) {
    return this.decoder.decode(e2);
  }
};
var Se2 = ({ name: r3, prefix: e2, encode: t, decode: i3 }) => new br3(r3, e2, t, i3);
var me3 = ({ prefix: r3, name: e2, alphabet: t }) => {
  const { encode: i3, decode: s2 } = lr3(t, e2);
  return Se2({ prefix: r3, name: e2, encode: i3, decode: (n4) => ri2(s2(n4)) });
};
var mr3 = (r3, e2, t, i3) => {
  const s2 = {};
  for (let l6 = 0; l6 < e2.length; ++l6) s2[e2[l6]] = l6;
  let n4 = r3.length;
  for (; r3[n4 - 1] === "="; ) --n4;
  const o5 = new Uint8Array(n4 * t / 8 | 0);
  let a3 = 0, c6 = 0, h4 = 0;
  for (let l6 = 0; l6 < n4; ++l6) {
    const g4 = s2[r3[l6]];
    if (g4 === void 0) throw new SyntaxError(`Non-${i3} character`);
    c6 = c6 << t | g4, a3 += t, a3 >= 8 && (a3 -= 8, o5[h4++] = 255 & c6 >> a3);
  }
  if (a3 >= t || 255 & c6 << 8 - a3) throw new SyntaxError("Unexpected end of data");
  return o5;
};
var fr2 = (r3, e2, t) => {
  const i3 = e2[e2.length - 1] === "=", s2 = (1 << t) - 1;
  let n4 = "", o5 = 0, a3 = 0;
  for (let c6 = 0; c6 < r3.length; ++c6) for (a3 = a3 << 8 | r3[c6], o5 += 8; o5 > t; ) o5 -= t, n4 += e2[s2 & a3 >> o5];
  if (o5 && (n4 += e2[s2 & a3 << t - o5]), i3) for (; n4.length * t & 7; ) n4 += "=";
  return n4;
};
var x3 = ({ name: r3, prefix: e2, bitsPerChar: t, alphabet: i3 }) => Se2({ prefix: e2, name: r3, encode(s2) {
  return fr2(s2, i3, t);
}, decode(s2) {
  return mr3(s2, i3, t, r3);
} });
var Dr3 = Se2({ prefix: "\0", name: "identity", encode: (r3) => dr3(r3), decode: (r3) => ur3(r3) });
var vr2 = Object.freeze({ __proto__: null, identity: Dr3 });
var _r3 = x3({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var wr3 = Object.freeze({ __proto__: null, base2: _r3 });
var Er2 = x3({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Ir3 = Object.freeze({ __proto__: null, base8: Er2 });
var Tr3 = me3({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Cr3 = Object.freeze({ __proto__: null, base10: Tr3 });
var Pr3 = x3({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Sr3 = x3({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Or3 = Object.freeze({ __proto__: null, base16: Pr3, base16upper: Sr3 });
var Rr3 = x3({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Ar3 = x3({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var xr2 = x3({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var Nr3 = x3({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var $r3 = x3({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var zr3 = x3({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var Lr3 = x3({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var kr3 = x3({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var jr3 = x3({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var Ur3 = Object.freeze({ __proto__: null, base32: Rr3, base32upper: Ar3, base32pad: xr2, base32padupper: Nr3, base32hex: $r3, base32hexupper: zr3, base32hexpad: Lr3, base32hexpadupper: kr3, base32z: jr3 });
var Fr4 = me3({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var Mr3 = me3({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var Kr3 = Object.freeze({ __proto__: null, base36: Fr4, base36upper: Mr3 });
var Br3 = me3({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Vr3 = me3({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var qr3 = Object.freeze({ __proto__: null, base58btc: Br3, base58flickr: Vr3 });
var Gr3 = x3({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var Wr3 = x3({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var Hr3 = x3({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var Yr3 = x3({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Jr3 = Object.freeze({ __proto__: null, base64: Gr3, base64pad: Wr3, base64url: Hr3, base64urlpad: Yr3 });
var oi2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var Xr3 = oi2.reduce((r3, e2, t) => (r3[t] = e2, r3), []);
var Zr3 = oi2.reduce((r3, e2, t) => (r3[e2.codePointAt(0)] = t, r3), []);
function Qr3(r3) {
  return r3.reduce((e2, t) => (e2 += Xr3[t], e2), "");
}
function en3(r3) {
  const e2 = [];
  for (const t of r3) {
    const i3 = Zr3[t.codePointAt(0)];
    if (i3 === void 0) throw new Error(`Non-base256emoji character: ${t}`);
    e2.push(i3);
  }
  return new Uint8Array(e2);
}
var tn = Se2({ prefix: "🚀", name: "base256emoji", encode: Qr3, decode: en3 });
var sn2 = Object.freeze({ __proto__: null, base256emoji: tn });
var rn3 = ci;
var ai2 = 128;
var nn2 = 127;
var on3 = ~nn2;
var an2 = Math.pow(2, 31);
function ci(r3, e2, t) {
  e2 = e2 || [], t = t || 0;
  for (var i3 = t; r3 >= an2; ) e2[t++] = r3 & 255 | ai2, r3 /= 128;
  for (; r3 & on3; ) e2[t++] = r3 & 255 | ai2, r3 >>>= 7;
  return e2[t] = r3 | 0, ci.bytes = t - i3 + 1, e2;
}
var cn2 = Ve3;
var hn2 = 128;
var hi = 127;
function Ve3(r3, i3) {
  var t = 0, i3 = i3 || 0, s2 = 0, n4 = i3, o5, a3 = r3.length;
  do {
    if (n4 >= a3) throw Ve3.bytes = 0, new RangeError("Could not decode varint");
    o5 = r3[n4++], t += s2 < 28 ? (o5 & hi) << s2 : (o5 & hi) * Math.pow(2, s2), s2 += 7;
  } while (o5 >= hn2);
  return Ve3.bytes = n4 - i3, t;
}
var ln2 = Math.pow(2, 7);
var un2 = Math.pow(2, 14);
var dn2 = Math.pow(2, 21);
var pn2 = Math.pow(2, 28);
var gn3 = Math.pow(2, 35);
var yn3 = Math.pow(2, 42);
var bn3 = Math.pow(2, 49);
var mn3 = Math.pow(2, 56);
var fn2 = Math.pow(2, 63);
var Dn2 = function(r3) {
  return r3 < ln2 ? 1 : r3 < un2 ? 2 : r3 < dn2 ? 3 : r3 < pn2 ? 4 : r3 < gn3 ? 5 : r3 < yn3 ? 6 : r3 < bn3 ? 7 : r3 < mn3 ? 8 : r3 < fn2 ? 9 : 10;
};
var vn3 = { encode: rn3, decode: cn2, encodingLength: Dn2 };
var li2 = vn3;
var ui2 = (r3, e2, t = 0) => (li2.encode(r3, e2, t), e2);
var di2 = (r3) => li2.encodingLength(r3);
var qe3 = (r3, e2) => {
  const t = e2.byteLength, i3 = di2(r3), s2 = i3 + di2(t), n4 = new Uint8Array(s2 + t);
  return ui2(r3, n4, 0), ui2(t, n4, i3), n4.set(e2, s2), new _n3(r3, t, e2, n4);
};
var _n3 = class {
  constructor(e2, t, i3, s2) {
    this.code = e2, this.size = t, this.digest = i3, this.bytes = s2;
  }
};
var pi2 = ({ name: r3, code: e2, encode: t }) => new wn2(r3, e2, t);
var wn2 = class {
  constructor(e2, t, i3) {
    this.name = e2, this.code = t, this.encode = i3;
  }
  digest(e2) {
    if (e2 instanceof Uint8Array) {
      const t = this.encode(e2);
      return t instanceof Uint8Array ? qe3(this.code, t) : t.then((i3) => qe3(this.code, i3));
    } else throw Error("Unknown type, must be binary type");
  }
};
var gi = (r3) => async (e2) => new Uint8Array(await crypto.subtle.digest(r3, e2));
var En3 = pi2({ name: "sha2-256", code: 18, encode: gi("SHA-256") });
var In3 = pi2({ name: "sha2-512", code: 19, encode: gi("SHA-512") });
var Tn3 = Object.freeze({ __proto__: null, sha256: En3, sha512: In3 });
var yi = 0;
var Cn3 = "identity";
var bi = ri2;
var Pn3 = (r3) => qe3(yi, bi(r3));
var Sn3 = { code: yi, name: Cn3, encode: bi, digest: Pn3 };
var On3 = Object.freeze({ __proto__: null, identity: Sn3 });
new TextEncoder(), new TextDecoder();
var mi2 = { ...vr2, ...wr3, ...Ir3, ...Cr3, ...Or3, ...Ur3, ...Kr3, ...qr3, ...Jr3, ...sn2 };
({ ...Tn3, ...On3 });
function fi(r3) {
  return globalThis.Buffer != null ? new Uint8Array(r3.buffer, r3.byteOffset, r3.byteLength) : r3;
}
function Rn3(r3 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? fi(globalThis.Buffer.allocUnsafe(r3)) : new Uint8Array(r3);
}
function Di2(r3, e2, t, i3) {
  return { name: r3, prefix: e2, encoder: { name: r3, prefix: e2, encode: t }, decoder: { decode: i3 } };
}
var vi = Di2("utf8", "u", (r3) => "u" + new TextDecoder("utf8").decode(r3), (r3) => new TextEncoder().encode(r3.substring(1)));
var Ge3 = Di2("ascii", "a", (r3) => {
  let e2 = "a";
  for (let t = 0; t < r3.length; t++) e2 += String.fromCharCode(r3[t]);
  return e2;
}, (r3) => {
  r3 = r3.substring(1);
  const e2 = Rn3(r3.length);
  for (let t = 0; t < r3.length; t++) e2[t] = r3.charCodeAt(t);
  return e2;
});
var An3 = { utf8: vi, "utf-8": vi, hex: mi2.base16, latin1: Ge3, ascii: Ge3, binary: Ge3, ...mi2 };
function xn3(r3, e2 = "utf8") {
  const t = An3[e2];
  if (!t) throw new Error(`Unsupported encoding "${e2}"`);
  return (e2 === "utf8" || e2 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? fi(globalThis.Buffer.from(r3, "utf-8")) : t.decoder.decode(`${t.prefix}${r3}`);
}
var Nn3 = Object.defineProperty;
var $n3 = (r3, e2, t) => e2 in r3 ? Nn3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var J4 = (r3, e2, t) => $n3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var _i2 = class {
  constructor(e2, t) {
    this.core = e2, this.logger = t, J4(this, "keychain", /* @__PURE__ */ new Map()), J4(this, "name", Pt3), J4(this, "version", St3), J4(this, "initialized", false), J4(this, "storagePrefix", W3), J4(this, "init", async () => {
      if (!this.initialized) {
        const i3 = await this.getKeyChain();
        typeof i3 < "u" && (this.keychain = i3), this.initialized = true;
      }
    }), J4(this, "has", (i3) => (this.isInitialized(), this.keychain.has(i3))), J4(this, "set", async (i3, s2) => {
      this.isInitialized(), this.keychain.set(i3, s2), await this.persist();
    }), J4(this, "get", (i3) => {
      this.isInitialized();
      const s2 = this.keychain.get(i3);
      if (typeof s2 > "u") {
        const { message: n4 } = Bt2("NO_MATCHING_KEY", `${this.name}: ${i3}`);
        throw new Error(n4);
      }
      return s2;
    }), J4(this, "del", async (i3) => {
      this.isInitialized(), this.keychain.delete(i3), await this.persist();
    }), this.core = e2, this.logger = X(t, this.name);
  }
  get context() {
    return w(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setKeyChain(e2) {
    await this.core.storage.setItem(this.storageKey, mi(e2));
  }
  async getKeyChain() {
    const e2 = await this.core.storage.getItem(this.storageKey);
    return typeof e2 < "u" ? wi(e2) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var zn3 = Object.defineProperty;
var Ln3 = (r3, e2, t) => e2 in r3 ? zn3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var R2 = (r3, e2, t) => Ln3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var wi2 = class {
  constructor(e2, t, i3) {
    this.core = e2, this.logger = t, R2(this, "name", Tt3), R2(this, "keychain"), R2(this, "randomSessionIdentifier", la()), R2(this, "initialized", false), R2(this, "clientId"), R2(this, "init", async () => {
      this.initialized || (await this.keychain.init(), this.initialized = true);
    }), R2(this, "hasKeys", (s2) => (this.isInitialized(), this.keychain.has(s2))), R2(this, "getClientId", async () => {
      if (this.isInitialized(), this.clientId) return this.clientId;
      const s2 = await this.getClientSeed(), n4 = Po(s2), o5 = Qe(n4.publicKey);
      return this.clientId = o5, o5;
    }), R2(this, "generateKeyPair", () => {
      this.isInitialized();
      const s2 = ua();
      return this.setPrivateKey(s2.publicKey, s2.privateKey);
    }), R2(this, "signJWT", async (s2) => {
      this.isInitialized();
      const n4 = await this.getClientSeed(), o5 = Po(n4), a3 = this.randomSessionIdentifier, c6 = Ct2;
      return await Qo(a3, s2, c6, o5);
    }), R2(this, "generateSharedKey", (s2, n4, o5) => {
      this.isInitialized();
      const a3 = this.getPrivateKey(s2), c6 = da(a3, n4);
      return this.setSymKey(c6, o5);
    }), R2(this, "setSymKey", async (s2, n4) => {
      this.isInitialized();
      const o5 = n4 || ha(s2);
      return await this.keychain.set(o5, s2), o5;
    }), R2(this, "deleteKeyPair", async (s2) => {
      this.isInitialized(), await this.keychain.del(s2);
    }), R2(this, "deleteSymKey", async (s2) => {
      this.isInitialized(), await this.keychain.del(s2);
    }), R2(this, "encode", async (s2, n4, o5) => {
      this.isInitialized();
      const a3 = rs(o5), c6 = safeJsonStringify(n4);
      if (xa(a3)) return ya(c6, o5?.encoding);
      if (va(a3)) {
        const y4 = a3.senderPublicKey, _3 = a3.receiverPublicKey;
        s2 = await this.generateSharedKey(y4, _3);
      }
      const h4 = this.getSymKey(s2), { type: l6, senderPublicKey: g4 } = a3;
      return ga({ type: l6, symKey: h4, message: c6, senderPublicKey: g4, encoding: o5?.encoding });
    }), R2(this, "decode", async (s2, n4, o5) => {
      this.isInitialized();
      const a3 = wa(n4, o5);
      if (xa(a3)) {
        const c6 = ma(n4, o5?.encoding);
        return safeJsonParse(c6);
      }
      if (va(a3)) {
        const c6 = a3.receiverPublicKey, h4 = a3.senderPublicKey;
        s2 = await this.generateSharedKey(c6, h4);
      }
      try {
        const c6 = this.getSymKey(s2), h4 = ba({ symKey: c6, encoded: n4, encoding: o5?.encoding });
        return safeJsonParse(h4);
      } catch (c6) {
        this.logger.error(`Failed to decode message from topic: '${s2}', clientId: '${await this.getClientId()}'`), this.logger.error(c6);
      }
    }), R2(this, "getPayloadType", (s2, n4 = oe) => {
      const o5 = ze2({ encoded: s2, encoding: n4 });
      return Zt2(o5.type);
    }), R2(this, "getPayloadSenderPublicKey", (s2, n4 = oe) => {
      const o5 = ze2({ encoded: s2, encoding: n4 });
      return o5.senderPublicKey ? toString4(o5.senderPublicKey, rt2) : void 0;
    }), this.core = e2, this.logger = X(t, this.name), this.keychain = i3 || new _i2(this.core, this.logger);
  }
  get context() {
    return w(this.logger);
  }
  async setPrivateKey(e2, t) {
    return await this.keychain.set(e2, t), e2;
  }
  getPrivateKey(e2) {
    return this.keychain.get(e2);
  }
  async getClientSeed() {
    let e2 = "";
    try {
      e2 = this.keychain.get(Me3);
    } catch {
      e2 = la(), await this.keychain.set(Me3, e2);
    }
    return xn3(e2, "base16");
  }
  getSymKey(e2) {
    return this.keychain.get(e2);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var kn3 = Object.defineProperty;
var jn3 = Object.defineProperties;
var Un3 = Object.getOwnPropertyDescriptors;
var Ei = Object.getOwnPropertySymbols;
var Fn3 = Object.prototype.hasOwnProperty;
var Mn3 = Object.prototype.propertyIsEnumerable;
var We3 = (r3, e2, t) => e2 in r3 ? kn3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var Kn3 = (r3, e2) => {
  for (var t in e2 || (e2 = {})) Fn3.call(e2, t) && We3(r3, t, e2[t]);
  if (Ei) for (var t of Ei(e2)) Mn3.call(e2, t) && We3(r3, t, e2[t]);
  return r3;
};
var Bn3 = (r3, e2) => jn3(r3, Un3(e2));
var K4 = (r3, e2, t) => We3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Ii2 = class extends y2 {
  constructor(e2, t) {
    super(e2, t), this.logger = e2, this.core = t, K4(this, "messages", /* @__PURE__ */ new Map()), K4(this, "messagesWithoutClientAck", /* @__PURE__ */ new Map()), K4(this, "name", Ot3), K4(this, "version", Rt3), K4(this, "initialized", false), K4(this, "storagePrefix", W3), K4(this, "init", async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const i3 = await this.getRelayerMessages();
          typeof i3 < "u" && (this.messages = i3);
          const s2 = await this.getRelayerMessagesWithoutClientAck();
          typeof s2 < "u" && (this.messagesWithoutClientAck = s2), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (i3) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(i3);
        } finally {
          this.initialized = true;
        }
      }
    }), K4(this, "set", async (i3, s2, n4) => {
      this.isInitialized();
      const o5 = pa(s2);
      let a3 = this.messages.get(i3);
      if (typeof a3 > "u" && (a3 = {}), typeof a3[o5] < "u") return o5;
      if (a3[o5] = s2, this.messages.set(i3, a3), n4 === ye3.inbound) {
        const c6 = this.messagesWithoutClientAck.get(i3) || {};
        this.messagesWithoutClientAck.set(i3, Bn3(Kn3({}, c6), { [o5]: s2 }));
      }
      return await this.persist(), o5;
    }), K4(this, "get", (i3) => {
      this.isInitialized();
      let s2 = this.messages.get(i3);
      return typeof s2 > "u" && (s2 = {}), s2;
    }), K4(this, "getWithoutAck", (i3) => {
      this.isInitialized();
      const s2 = {};
      for (const n4 of i3) {
        const o5 = this.messagesWithoutClientAck.get(n4) || {};
        s2[n4] = Object.values(o5);
      }
      return s2;
    }), K4(this, "has", (i3, s2) => {
      this.isInitialized();
      const n4 = this.get(i3), o5 = pa(s2);
      return typeof n4[o5] < "u";
    }), K4(this, "ack", async (i3, s2) => {
      this.isInitialized();
      const n4 = this.messagesWithoutClientAck.get(i3);
      if (typeof n4 > "u") return;
      const o5 = pa(s2);
      delete n4[o5], Object.keys(n4).length === 0 ? this.messagesWithoutClientAck.delete(i3) : this.messagesWithoutClientAck.set(i3, n4), await this.persist();
    }), K4(this, "del", async (i3) => {
      this.isInitialized(), this.messages.delete(i3), this.messagesWithoutClientAck.delete(i3), await this.persist();
    }), this.logger = X(e2, this.name), this.core = t;
  }
  get context() {
    return w(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get storageKeyWithoutClientAck() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name + "_withoutClientAck";
  }
  async setRelayerMessages(e2) {
    await this.core.storage.setItem(this.storageKey, mi(e2));
  }
  async setRelayerMessagesWithoutClientAck(e2) {
    await this.core.storage.setItem(this.storageKeyWithoutClientAck, mi(e2));
  }
  async getRelayerMessages() {
    const e2 = await this.core.storage.getItem(this.storageKey);
    return typeof e2 < "u" ? wi(e2) : void 0;
  }
  async getRelayerMessagesWithoutClientAck() {
    const e2 = await this.core.storage.getItem(this.storageKeyWithoutClientAck);
    return typeof e2 < "u" ? wi(e2) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages), await this.setRelayerMessagesWithoutClientAck(this.messagesWithoutClientAck);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Vn3 = Object.defineProperty;
var qn3 = Object.defineProperties;
var Gn3 = Object.getOwnPropertyDescriptors;
var Ti2 = Object.getOwnPropertySymbols;
var Wn3 = Object.prototype.hasOwnProperty;
var Hn3 = Object.prototype.propertyIsEnumerable;
var He3 = (r3, e2, t) => e2 in r3 ? Vn3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var ce = (r3, e2) => {
  for (var t in e2 || (e2 = {})) Wn3.call(e2, t) && He3(r3, t, e2[t]);
  if (Ti2) for (var t of Ti2(e2)) Hn3.call(e2, t) && He3(r3, t, e2[t]);
  return r3;
};
var Ci2 = (r3, e2) => qn3(r3, Gn3(e2));
var G2 = (r3, e2, t) => He3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Yn3 = class extends m {
  constructor(e2, t) {
    super(e2, t), this.relayer = e2, this.logger = t, G2(this, "events", new import_events7.EventEmitter()), G2(this, "name", xt3), G2(this, "queue", /* @__PURE__ */ new Map()), G2(this, "publishTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE)), G2(this, "initialPublishTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), G2(this, "needsTransportRestart", false), G2(this, "publish", async (i3, s2, n4) => {
      var o5, a3, c6, h4, l6;
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: i3, message: s2, opts: n4 } });
      const g4 = n4?.ttl || At2, y4 = n4?.prompt || false, _3 = n4?.tag || 0, u2 = n4?.id || getBigIntRpcId().toString(), m4 = Aa(Ba().protocol), D3 = { id: u2, method: n4?.publishMethod || m4.publish, params: ce({ topic: i3, message: s2, ttl: g4, prompt: y4, tag: _3, attestation: n4?.attestation }, n4?.tvf) }, w5 = `Failed to publish payload, please try again. id:${u2} tag:${_3}`;
      try {
        Dt2((o5 = D3.params) == null ? void 0 : o5.prompt) && ((a3 = D3.params) == null || delete a3.prompt), Dt2((c6 = D3.params) == null ? void 0 : c6.tag) && ((h4 = D3.params) == null || delete h4.tag);
        const E4 = new Promise(async (L3) => {
          const I2 = ({ id: T4 }) => {
            var S4;
            ((S4 = D3.id) == null ? void 0 : S4.toString()) === T4.toString() && (this.removeRequestFromQueue(T4), this.relayer.events.removeListener(C2.publish, I2), L3());
          };
          this.relayer.events.on(C2.publish, I2);
          const k4 = Ai(new Promise((T4, S4) => {
            this.rpcPublish(D3, n4).then(T4).catch((O5) => {
              this.logger.warn(O5, O5?.message), S4(O5);
            });
          }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${u2} tag:${_3}`);
          try {
            await k4, this.events.removeListener(C2.publish, I2);
          } catch (T4) {
            this.queue.set(u2, { request: D3, opts: n4, attempt: 1 }), this.logger.warn(T4, T4?.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: u2, topic: i3, message: s2, opts: n4 } }), await Ai(E4, this.publishTimeout, w5);
      } catch (E4) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(E4), (l6 = n4?.internal) != null && l6.throwOnFailedPublish) throw E4;
      } finally {
        this.queue.delete(u2);
      }
    }), G2(this, "publishCustom", async (i3) => {
      var s2, n4, o5, a3, c6;
      this.logger.debug("Publishing custom payload"), this.logger.trace({ type: "method", method: "publishCustom", params: i3 });
      const { payload: h4, opts: l6 = {} } = i3, { attestation: g4, tvf: y4, publishMethod: _3, prompt: u2, tag: m4, ttl: D3 = import_time4.FIVE_MINUTES } = l6, w5 = l6.id || getBigIntRpcId().toString(), E4 = Aa(Ba().protocol), L3 = _3 || E4.publish, I2 = { id: w5, method: L3, params: ce(Ci2(ce({}, h4), { ttl: D3, prompt: u2, tag: m4, attestation: g4 }), y4) }, k4 = `Failed to publish custom payload, please try again. id:${w5} tag:${m4}`;
      try {
        Dt2((s2 = I2.params) == null ? void 0 : s2.prompt) && ((n4 = I2.params) == null || delete n4.prompt), Dt2((o5 = I2.params) == null ? void 0 : o5.tag) && ((a3 = I2.params) == null || delete a3.tag);
        const T4 = new Promise(async (S4) => {
          const O5 = ({ id: Z2 }) => {
            var we5;
            ((we5 = I2.id) == null ? void 0 : we5.toString()) === Z2.toString() && (this.removeRequestFromQueue(Z2), this.relayer.events.removeListener(C2.publish, O5), S4());
          };
          this.relayer.events.on(C2.publish, O5);
          const te4 = Ai(new Promise((Z2, we5) => {
            this.rpcPublish(I2, l6).then(Z2).catch((Ee4) => {
              this.logger.warn(Ee4, Ee4?.message), we5(Ee4);
            });
          }), this.initialPublishTimeout, `Failed initial custom payload publish, retrying.... method:${L3} id:${w5} tag:${m4}`);
          try {
            await te4, this.events.removeListener(C2.publish, O5);
          } catch (Z2) {
            this.queue.set(w5, { request: I2, opts: l6, attempt: 1 }), this.logger.warn(Z2, Z2?.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: w5, payload: h4, opts: l6 } }), await Ai(T4, this.publishTimeout, k4);
      } catch (T4) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(T4), (c6 = l6?.internal) != null && c6.throwOnFailedPublish) throw T4;
      } finally {
        this.queue.delete(w5);
      }
    }), G2(this, "on", (i3, s2) => {
      this.events.on(i3, s2);
    }), G2(this, "once", (i3, s2) => {
      this.events.once(i3, s2);
    }), G2(this, "off", (i3, s2) => {
      this.events.off(i3, s2);
    }), G2(this, "removeListener", (i3, s2) => {
      this.events.removeListener(i3, s2);
    }), this.relayer = e2, this.logger = X(t, this.name), this.registerEventListeners();
  }
  get context() {
    return w(this.logger);
  }
  async rpcPublish(e2, t) {
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: e2 });
    const i3 = await this.relayer.request(e2);
    return this.relayer.events.emit(C2.publish, ce(ce({}, e2), t)), this.logger.debug("Successfully Published Payload"), i3;
  }
  removeRequestFromQueue(e2) {
    this.queue.delete(e2);
  }
  checkQueue() {
    this.queue.forEach(async (e2, t) => {
      var i3;
      const s2 = e2.attempt + 1;
      this.queue.set(t, Ci2(ce({}, e2), { attempt: s2 })), this.logger.warn({}, `Publisher: queue->publishing: ${e2.request.id}, tag: ${(i3 = e2.request.params) == null ? void 0 : i3.tag}, attempt: ${s2}`), await this.rpcPublish(e2.request, e2.opts), this.logger.warn({}, `Publisher: queue->published: ${e2.request.id}`);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(r.pulse, () => {
      if (this.needsTransportRestart) {
        this.needsTransportRestart = false, this.relayer.events.emit(C2.connection_stalled);
        return;
      }
      this.checkQueue();
    }), this.relayer.on(C2.message_ack, (e2) => {
      this.removeRequestFromQueue(e2.id.toString());
    });
  }
};
var Jn3 = Object.defineProperty;
var Xn3 = (r3, e2, t) => e2 in r3 ? Jn3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var he3 = (r3, e2, t) => Xn3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Zn3 = class {
  constructor() {
    he3(this, "map", /* @__PURE__ */ new Map()), he3(this, "set", (e2, t) => {
      const i3 = this.get(e2);
      this.exists(e2, t) || this.map.set(e2, [...i3, t]);
    }), he3(this, "get", (e2) => this.map.get(e2) || []), he3(this, "exists", (e2, t) => this.get(e2).includes(t)), he3(this, "delete", (e2, t) => {
      if (typeof t > "u") {
        this.map.delete(e2);
        return;
      }
      if (!this.map.has(e2)) return;
      const i3 = this.get(e2);
      if (!this.exists(e2, t)) return;
      const s2 = i3.filter((n4) => n4 !== t);
      if (!s2.length) {
        this.map.delete(e2);
        return;
      }
      this.map.set(e2, s2);
    }), he3(this, "clear", () => {
      this.map.clear();
    });
  }
  get topics() {
    return Array.from(this.map.keys());
  }
};
var Qn2 = Object.defineProperty;
var eo3 = Object.defineProperties;
var to3 = Object.getOwnPropertyDescriptors;
var Pi2 = Object.getOwnPropertySymbols;
var io3 = Object.prototype.hasOwnProperty;
var so3 = Object.prototype.propertyIsEnumerable;
var Ye3 = (r3, e2, t) => e2 in r3 ? Qn2(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var fe2 = (r3, e2) => {
  for (var t in e2 || (e2 = {})) io3.call(e2, t) && Ye3(r3, t, e2[t]);
  if (Pi2) for (var t of Pi2(e2)) so3.call(e2, t) && Ye3(r3, t, e2[t]);
  return r3;
};
var Je3 = (r3, e2) => eo3(r3, to3(e2));
var f3 = (r3, e2, t) => Ye3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Si2 = class extends P {
  constructor(e2, t) {
    super(e2, t), this.relayer = e2, this.logger = t, f3(this, "subscriptions", /* @__PURE__ */ new Map()), f3(this, "topicMap", new Zn3()), f3(this, "events", new import_events7.EventEmitter()), f3(this, "name", Ft3), f3(this, "version", Mt3), f3(this, "pending", /* @__PURE__ */ new Map()), f3(this, "cached", []), f3(this, "initialized", false), f3(this, "storagePrefix", W3), f3(this, "subscribeTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE)), f3(this, "initialSubscribeTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), f3(this, "clientId"), f3(this, "batchSubscribeTopicsLimit", 500), f3(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), await this.restore()), this.initialized = true;
    }), f3(this, "subscribe", async (i3, s2) => {
      var n4;
      this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i3, opts: s2 } });
      try {
        const o5 = Ba(s2), a3 = { topic: i3, relay: o5, transportType: s2?.transportType };
        (n4 = s2?.internal) != null && n4.skipSubscribe || this.pending.set(i3, a3);
        const c6 = await this.rpcSubscribe(i3, o5, s2);
        return typeof c6 == "string" && (this.onSubscribe(c6, a3), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i3, opts: s2 } })), c6;
      } catch (o5) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(o5), o5;
      }
    }), f3(this, "unsubscribe", async (i3, s2) => {
      this.isInitialized(), typeof s2?.id < "u" ? await this.unsubscribeById(i3, s2.id, s2) : await this.unsubscribeByTopic(i3, s2);
    }), f3(this, "isSubscribed", (i3) => new Promise((s2) => {
      s2(this.topicMap.topics.includes(i3));
    })), f3(this, "isKnownTopic", (i3) => new Promise((s2) => {
      s2(this.topicMap.topics.includes(i3) || this.pending.has(i3) || this.cached.some((n4) => n4.topic === i3));
    })), f3(this, "on", (i3, s2) => {
      this.events.on(i3, s2);
    }), f3(this, "once", (i3, s2) => {
      this.events.once(i3, s2);
    }), f3(this, "off", (i3, s2) => {
      this.events.off(i3, s2);
    }), f3(this, "removeListener", (i3, s2) => {
      this.events.removeListener(i3, s2);
    }), f3(this, "start", async () => {
      await this.onConnect();
    }), f3(this, "stop", async () => {
      await this.onDisconnect();
    }), f3(this, "restart", async () => {
      await this.restore(), await this.onRestart();
    }), f3(this, "checkPending", async () => {
      if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected)) return;
      const i3 = [];
      this.pending.forEach((s2) => {
        i3.push(s2);
      }), await this.batchSubscribe(i3);
    }), f3(this, "registerEventListeners", () => {
      this.relayer.core.heartbeat.on(r.pulse, async () => {
        await this.checkPending();
      }), this.events.on(j3.created, async (i3) => {
        const s2 = j3.created;
        this.logger.info(`Emitting ${s2}`), this.logger.debug({ type: "event", event: s2, data: i3 }), await this.persist();
      }), this.events.on(j3.deleted, async (i3) => {
        const s2 = j3.deleted;
        this.logger.info(`Emitting ${s2}`), this.logger.debug({ type: "event", event: s2, data: i3 }), await this.persist();
      });
    }), this.relayer = e2, this.logger = X(t, this.name), this.clientId = "";
  }
  get context() {
    return w(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  get hasAnyTopics() {
    return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;
  }
  hasSubscription(e2, t) {
    let i3 = false;
    try {
      i3 = this.getSubscription(e2).topic === t;
    } catch {
    }
    return i3;
  }
  reset() {
    this.cached = [], this.initialized = true;
  }
  onDisable() {
    this.values.length > 0 && (this.cached = this.values), this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e2, t) {
    const i3 = this.topicMap.get(e2);
    await Promise.all(i3.map(async (s2) => await this.unsubscribeById(e2, s2, t)));
  }
  async unsubscribeById(e2, t, i3) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e2, id: t, opts: i3 } });
    try {
      const s2 = Ba(i3);
      await this.restartToComplete({ topic: e2, id: t, relay: s2 }), await this.rpcUnsubscribe(e2, t, s2);
      const n4 = zt2("USER_DISCONNECTED", `${this.name}, ${e2}`);
      await this.onUnsubscribe(e2, t, n4), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e2, id: t, opts: i3 } });
    } catch (s2) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(s2), s2;
    }
  }
  async rpcSubscribe(e2, t, i3) {
    var s2, n4;
    const o5 = await this.getSubscriptionId(e2);
    if ((s2 = i3?.internal) != null && s2.skipSubscribe) return o5;
    (!i3 || i3?.transportType === ee2.relay) && await this.restartToComplete({ topic: e2, id: e2, relay: t });
    const a3 = { method: Aa(t.protocol).subscribe, params: { topic: e2 } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: a3 });
    const c6 = (n4 = i3?.internal) == null ? void 0 : n4.throwOnFailedPublish;
    try {
      if (i3?.transportType === ee2.link_mode) return setTimeout(() => {
        (this.relayer.connected || this.relayer.connecting) && this.relayer.request(a3).catch((g4) => this.logger.warn(g4));
      }, (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), o5;
      const h4 = new Promise(async (g4) => {
        const y4 = (_3) => {
          _3.topic === e2 && (this.events.removeListener(j3.created, y4), g4(_3.id));
        };
        this.events.on(j3.created, y4);
        try {
          const _3 = await Ai(new Promise((u2, m4) => {
            this.relayer.request(a3).catch((D3) => {
              this.logger.warn(D3, D3?.message), m4(D3);
            }).then(u2);
          }), this.initialSubscribeTimeout, `Subscribing to ${e2} failed, please try again`);
          this.events.removeListener(j3.created, y4), g4(_3);
        } catch {
        }
      }), l6 = await Ai(h4, this.subscribeTimeout, `Subscribing to ${e2} failed, please try again`);
      if (!l6 && c6) throw new Error(`Subscribing to ${e2} failed, please try again`);
      return l6 ? o5 : null;
    } catch (h4) {
      if (this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(C2.connection_stalled), c6) throw h4;
    }
    return null;
  }
  async rpcBatchSubscribe(e2) {
    if (!e2.length) return;
    const t = e2[0].relay, i3 = { method: Aa(t.protocol).batchSubscribe, params: { topics: e2.map((s2) => s2.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i3 });
    try {
      await await Ai(new Promise((s2) => {
        this.relayer.request(i3).catch((n4) => this.logger.warn(n4)).then(s2);
      }), this.subscribeTimeout, "rpcBatchSubscribe failed, please try again");
    } catch {
      this.relayer.events.emit(C2.connection_stalled);
    }
  }
  async rpcBatchFetchMessages(e2) {
    if (!e2.length) return;
    const t = e2[0].relay, i3 = { method: Aa(t.protocol).batchFetchMessages, params: { topics: e2.map((n4) => n4.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i3 });
    let s2;
    try {
      s2 = await await Ai(new Promise((n4, o5) => {
        this.relayer.request(i3).catch((a3) => {
          this.logger.warn(a3), o5(a3);
        }).then(n4);
      }), this.subscribeTimeout, "rpcBatchFetchMessages failed, please try again");
    } catch {
      this.relayer.events.emit(C2.connection_stalled);
    }
    return s2;
  }
  rpcUnsubscribe(e2, t, i3) {
    const s2 = { method: Aa(i3.protocol).unsubscribe, params: { topic: e2, id: t } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s2 }), this.relayer.request(s2);
  }
  onSubscribe(e2, t) {
    this.setSubscription(e2, Je3(fe2({}, t), { id: e2 })), this.pending.delete(t.topic);
  }
  onBatchSubscribe(e2) {
    e2.length && e2.forEach((t) => {
      this.setSubscription(t.id, fe2({}, t)), this.pending.delete(t.topic);
    });
  }
  async onUnsubscribe(e2, t, i3) {
    this.events.removeAllListeners(t), this.hasSubscription(t, e2) && this.deleteSubscription(t, i3), await this.relayer.messages.del(e2);
  }
  async setRelayerSubscriptions(e2) {
    await this.relayer.core.storage.setItem(this.storageKey, e2);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e2, t) {
    this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e2, subscription: t }), this.addSubscription(e2, t);
  }
  addSubscription(e2, t) {
    this.subscriptions.set(e2, fe2({}, t)), this.topicMap.set(t.topic, e2), this.events.emit(j3.created, t);
  }
  getSubscription(e2) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e2 });
    const t = this.subscriptions.get(e2);
    if (!t) {
      const { message: i3 } = Bt2("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw new Error(i3);
    }
    return t;
  }
  deleteSubscription(e2, t) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e2, reason: t });
    const i3 = this.getSubscription(e2);
    this.subscriptions.delete(e2), this.topicMap.delete(i3.topic, e2), this.events.emit(j3.deleted, Je3(fe2({}, i3), { reason: t }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit(j3.sync);
  }
  async onRestart() {
    if (this.cached.length) {
      const e2 = [...this.cached], t = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let i3 = 0; i3 < t; i3++) {
        const s2 = e2.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchSubscribe(s2);
      }
    }
    this.events.emit(j3.resubscribed);
  }
  async restore() {
    try {
      const e2 = await this.getRelayerSubscriptions();
      if (typeof e2 > "u" || !e2.length) return;
      if (this.subscriptions.size && !e2.every((t) => {
        var i3;
        return t.topic === ((i3 = this.subscriptions.get(t.id)) == null ? void 0 : i3.topic);
      })) {
        const { message: t } = Bt2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e2);
    }
  }
  async batchSubscribe(e2) {
    e2.length && (await this.rpcBatchSubscribe(e2), this.onBatchSubscribe(await Promise.all(e2.map(async (t) => Je3(fe2({}, t), { id: await this.getSubscriptionId(t.topic) })))));
  }
  async batchFetchMessages(e2) {
    if (!e2.length) return;
    this.logger.trace(`Fetching batch messages for ${e2.length} subscriptions`);
    const t = await this.rpcBatchFetchMessages(e2);
    t && t.messages && (await Li((0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t.messages));
  }
  async onConnect() {
    await this.restart(), this.reset();
  }
  onDisconnect() {
    this.onDisable();
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
  async restartToComplete(e2) {
    !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e2), await this.relayer.transportOpen());
  }
  async getClientId() {
    return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;
  }
  async getSubscriptionId(e2) {
    return pa(e2 + await this.getClientId());
  }
};
var ro2 = Object.defineProperty;
var Oi2 = Object.getOwnPropertySymbols;
var no2 = Object.prototype.hasOwnProperty;
var oo2 = Object.prototype.propertyIsEnumerable;
var Xe3 = (r3, e2, t) => e2 in r3 ? ro2(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var Ri2 = (r3, e2) => {
  for (var t in e2 || (e2 = {})) no2.call(e2, t) && Xe3(r3, t, e2[t]);
  if (Oi2) for (var t of Oi2(e2)) oo2.call(e2, t) && Xe3(r3, t, e2[t]);
  return r3;
};
var p2 = (r3, e2, t) => Xe3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Ai2 = class extends d {
  constructor(e2) {
    var t;
    super(e2), p2(this, "protocol", "wc"), p2(this, "version", 2), p2(this, "core"), p2(this, "logger"), p2(this, "events", new import_events7.EventEmitter()), p2(this, "provider"), p2(this, "messages"), p2(this, "subscriber"), p2(this, "publisher"), p2(this, "name", zt3), p2(this, "transportExplicitlyClosed", false), p2(this, "initialized", false), p2(this, "connectionAttemptInProgress", false), p2(this, "relayUrl"), p2(this, "projectId"), p2(this, "packageName"), p2(this, "bundleId"), p2(this, "hasExperiencedNetworkDisruption", false), p2(this, "pingTimeout"), p2(this, "heartBeatTimeout", (0, import_time4.toMiliseconds)(import_time4.THIRTY_SECONDS + import_time4.FIVE_SECONDS)), p2(this, "reconnectTimeout"), p2(this, "connectPromise"), p2(this, "reconnectInProgress", false), p2(this, "requestsInFlight", []), p2(this, "connectTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), p2(this, "request", async (i3) => {
      var s2, n4;
      this.logger.debug("Publishing Request Payload");
      const o5 = i3.id || getBigIntRpcId().toString();
      await this.toEstablishConnection();
      try {
        this.logger.trace({ id: o5, method: i3.method, topic: (s2 = i3.params) == null ? void 0 : s2.topic }, "relayer.request - publishing...");
        const a3 = `${o5}:${((n4 = i3.params) == null ? void 0 : n4.tag) || ""}`;
        this.requestsInFlight.push(a3);
        const c6 = await this.provider.request(i3);
        return this.requestsInFlight = this.requestsInFlight.filter((h4) => h4 !== a3), c6;
      } catch (a3) {
        throw this.logger.debug(`Failed to Publish Request: ${o5}`), a3;
      }
    }), p2(this, "resetPingTimeout", () => {
      rn2() && (clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {
        var i3, s2, n4, o5;
        try {
          this.logger.debug({}, "pingTimeout: Connection stalled, terminating..."), (o5 = (n4 = (s2 = (i3 = this.provider) == null ? void 0 : i3.connection) == null ? void 0 : s2.socket) == null ? void 0 : n4.terminate) == null || o5.call(n4);
        } catch (a3) {
          this.logger.warn(a3, a3?.message);
        }
      }, this.heartBeatTimeout));
    }), p2(this, "onPayloadHandler", (i3) => {
      this.onProviderPayload(i3), this.resetPingTimeout();
    }), p2(this, "onConnectHandler", () => {
      this.logger.warn({}, "Relayer connected 🛜"), this.startPingTimeout(), this.events.emit(C2.connect);
    }), p2(this, "onDisconnectHandler", () => {
      this.logger.warn({}, "Relayer disconnected 🛑"), this.requestsInFlight = [], this.onProviderDisconnect();
    }), p2(this, "onProviderErrorHandler", (i3) => {
      this.logger.fatal(`Fatal socket error: ${i3.message}`), this.events.emit(C2.error, i3), this.logger.fatal("Fatal socket error received, closing transport"), this.transportClose();
    }), p2(this, "registerProviderListeners", () => {
      this.provider.on(M3.payload, this.onPayloadHandler), this.provider.on(M3.connect, this.onConnectHandler), this.provider.on(M3.disconnect, this.onDisconnectHandler), this.provider.on(M3.error, this.onProviderErrorHandler);
    }), this.core = e2.core, this.logger = wu({ logger: (t = e2.logger) != null ? t : $t3, name: this.name }), this.messages = new Ii2(this.logger, e2.core), this.subscriber = new Si2(this, this.logger), this.publisher = new Yn3(this, this.logger), this.projectId = e2?.projectId, this.relayUrl = e2?.relayUrl || Ke3, ai() ? this.packageName = li() : ui() && (this.bundleId = li()), this.provider = {};
  }
  async init() {
    this.logger.trace("Initialized"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = true, this.transportOpen().catch((e2) => this.logger.warn(e2, e2?.message));
  }
  get context() {
    return w(this.logger);
  }
  get connected() {
    var e2, t, i3;
    return ((i3 = (t = (e2 = this.provider) == null ? void 0 : e2.connection) == null ? void 0 : t.socket) == null ? void 0 : i3.readyState) === 1 || false;
  }
  get connecting() {
    var e2, t, i3;
    return ((i3 = (t = (e2 = this.provider) == null ? void 0 : e2.connection) == null ? void 0 : t.socket) == null ? void 0 : i3.readyState) === 0 || this.connectPromise !== void 0 || false;
  }
  async publish(e2, t, i3) {
    this.isInitialized(), await this.publisher.publish(e2, t, i3), await this.recordMessageEvent({ topic: e2, message: t, publishedAt: Date.now(), transportType: ee2.relay }, ye3.outbound);
  }
  async publishCustom(e2) {
    this.isInitialized(), await this.publisher.publishCustom(e2);
  }
  async subscribe(e2, t) {
    var i3, s2, n4;
    this.isInitialized(), (!(t != null && t.transportType) || t?.transportType === "relay") && await this.toEstablishConnection();
    const o5 = typeof ((i3 = t?.internal) == null ? void 0 : i3.throwOnFailedPublish) > "u" ? true : (s2 = t?.internal) == null ? void 0 : s2.throwOnFailedPublish;
    let a3 = ((n4 = this.subscriber.topicMap.get(e2)) == null ? void 0 : n4[0]) || "", c6;
    const h4 = (l6) => {
      l6.topic === e2 && (this.subscriber.off(j3.created, h4), c6());
    };
    return await Promise.all([new Promise((l6) => {
      c6 = l6, this.subscriber.on(j3.created, h4);
    }), new Promise(async (l6, g4) => {
      a3 = await this.subscriber.subscribe(e2, Ri2({ internal: { throwOnFailedPublish: o5 } }, t)).catch((y4) => {
        o5 && g4(y4);
      }) || a3, l6();
    })]), a3;
  }
  async unsubscribe(e2, t) {
    this.isInitialized(), await this.subscriber.unsubscribe(e2, t);
  }
  on(e2, t) {
    this.events.on(e2, t);
  }
  once(e2, t) {
    this.events.once(e2, t);
  }
  off(e2, t) {
    this.events.off(e2, t);
  }
  removeListener(e2, t) {
    this.events.removeListener(e2, t);
  }
  async transportDisconnect() {
    this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await Ai(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();
  }
  async transportClose() {
    this.transportExplicitlyClosed = true, await this.transportDisconnect();
  }
  async transportOpen(e2) {
    if (!this.subscriber.hasAnyTopics) {
      this.logger.info("Starting WS connection skipped because the client has no topics to work with.");
      return;
    }
    if (this.connectPromise ? (this.logger.debug({}, "Waiting for existing connection attempt to resolve..."), await this.connectPromise, this.logger.debug({}, "Existing connection attempt resolved")) : (this.connectPromise = new Promise(async (t, i3) => {
      await this.connect(e2).then(t).catch(i3).finally(() => {
        this.connectPromise = void 0;
      });
    }), await this.connectPromise), !this.connected) throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);
  }
  async restartTransport(e2) {
    this.logger.debug({}, "Restarting transport..."), !this.connectionAttemptInProgress && (this.relayUrl = e2 || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
  }
  async confirmOnlineStateOrThrow() {
    if (!await uu()) throw new Error("No internet connection detected. Please restart your network and try again.");
  }
  async handleBatchMessageEvents(e2) {
    if (e2?.length === 0) {
      this.logger.trace("Batch message events is empty. Ignoring...");
      return;
    }
    const t = e2.sort((i3, s2) => i3.publishedAt - s2.publishedAt);
    this.logger.debug(`Batch of ${t.length} message events sorted`);
    for (const i3 of t) try {
      await this.onMessageEvent(i3);
    } catch (s2) {
      this.logger.warn(s2, "Error while processing batch message event: " + s2?.message);
    }
    this.logger.trace(`Batch of ${t.length} message events processed`);
  }
  async onLinkMessageEvent(e2, t) {
    const { topic: i3 } = e2;
    if (!t.sessionExists) {
      const s2 = Ni(import_time4.FIVE_MINUTES), n4 = { topic: i3, expiry: s2, relay: { protocol: "irn" }, active: false };
      await this.core.pairing.pairings.set(i3, n4);
    }
    this.events.emit(C2.message, e2), await this.recordMessageEvent(e2, ye3.inbound);
  }
  async connect(e2) {
    await this.confirmOnlineStateOrThrow(), e2 && e2 !== this.relayUrl && (this.relayUrl = e2, await this.transportDisconnect()), this.connectionAttemptInProgress = true, this.transportExplicitlyClosed = false;
    let t = 1;
    for (; t < 6; ) {
      try {
        if (this.transportExplicitlyClosed) break;
        this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t}...`), await this.createProvider(), await new Promise(async (i3, s2) => {
          const n4 = () => {
            s2(new Error("Connection interrupted while trying to connect"));
          };
          this.provider.once(M3.disconnect, n4), await Ai(new Promise((o5, a3) => {
            this.provider.connect().then(o5).catch(a3);
          }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((o5) => {
            s2(o5);
          }).finally(() => {
            this.provider.off(M3.disconnect, n4), clearTimeout(this.reconnectTimeout);
          }), await new Promise(async (o5, a3) => {
            const c6 = () => {
              s2(new Error("Connection interrupted while trying to subscribe"));
            };
            this.provider.once(M3.disconnect, c6), await this.subscriber.start().then(o5).catch(a3).finally(() => {
              this.provider.off(M3.disconnect, c6);
            });
          }), this.hasExperiencedNetworkDisruption = false, i3();
        });
      } catch (i3) {
        await this.subscriber.stop();
        const s2 = i3;
        this.logger.warn({}, s2.message), this.hasExperiencedNetworkDisruption = true;
      } finally {
        this.connectionAttemptInProgress = false;
      }
      if (this.connected) {
        this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t}`);
        break;
      }
      await new Promise((i3) => setTimeout(i3, (0, import_time4.toMiliseconds)(t * 1))), t++;
    }
  }
  startPingTimeout() {
    var e2, t, i3, s2, n4;
    if (rn2()) try {
      (t = (e2 = this.provider) == null ? void 0 : e2.connection) != null && t.socket && ((n4 = (s2 = (i3 = this.provider) == null ? void 0 : i3.connection) == null ? void 0 : s2.socket) == null || n4.on("ping", () => {
        this.resetPingTimeout();
      })), this.resetPingTimeout();
    } catch (o5) {
      this.logger.warn(o5, o5?.message);
    }
  }
  async createProvider() {
    this.provider.connection && this.unregisterProviderListeners();
    const e2 = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new o3(new f2(pi({ sdkVersion: Pe3, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e2, useOnCloseEvent: true, bundleId: this.bundleId, packageName: this.packageName }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e2, t) {
    const { topic: i3, message: s2 } = e2;
    await this.messages.set(i3, s2, t);
  }
  async shouldIgnoreMessageEvent(e2) {
    const { topic: t, message: i3 } = e2;
    if (!i3 || i3.length === 0) return this.logger.warn(`Ignoring invalid/empty message: ${i3}`), true;
    if (!await this.subscriber.isKnownTopic(t)) return this.logger.warn(`Ignoring message for unknown topic ${t}`), true;
    const s2 = this.messages.has(t, i3);
    return s2 && this.logger.warn(`Ignoring duplicate message: ${i3}`), s2;
  }
  async onProviderPayload(e2) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e2 }), isJsonRpcRequest(e2)) {
      if (!e2.method.endsWith(Lt3)) return;
      const t = e2.params, { topic: i3, message: s2, publishedAt: n4, attestation: o5 } = t.data, a3 = { topic: i3, message: s2, publishedAt: n4, transportType: ee2.relay, attestation: o5 };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(Ri2({ type: "event", event: t.id }, a3)), this.events.emit(t.id, a3), await this.acknowledgePayload(e2), await this.onMessageEvent(a3);
    } else isJsonRpcResponse(e2) && this.events.emit(C2.message_ack, e2);
  }
  async onMessageEvent(e2) {
    await this.shouldIgnoreMessageEvent(e2) || (await this.recordMessageEvent(e2, ye3.inbound), this.events.emit(C2.message, e2));
  }
  async acknowledgePayload(e2) {
    const t = formatJsonRpcResult(e2.id, true);
    await this.provider.connection.send(t);
  }
  unregisterProviderListeners() {
    this.provider.off(M3.payload, this.onPayloadHandler), this.provider.off(M3.connect, this.onConnectHandler), this.provider.off(M3.disconnect, this.onDisconnectHandler), this.provider.off(M3.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);
  }
  async registerEventListeners() {
    let e2 = await uu();
    lu(async (t) => {
      e2 !== t && (e2 = t, t ? await this.transportOpen().catch((i3) => this.logger.error(i3, i3?.message)) : (this.hasExperiencedNetworkDisruption = true, await this.transportDisconnect(), this.transportExplicitlyClosed = false));
    }), this.core.heartbeat.on(r.pulse, async () => {
      if (!this.transportExplicitlyClosed && !this.connected && du()) try {
        await this.confirmOnlineStateOrThrow(), await this.transportOpen();
      } catch (t) {
        this.logger.warn(t, t?.message);
      }
    });
  }
  async onProviderDisconnect() {
    clearTimeout(this.pingTimeout), this.events.emit(C2.disconnect), this.connectionAttemptInProgress = false, !this.reconnectInProgress && (this.reconnectInProgress = true, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async () => {
      await this.transportOpen().catch((e2) => this.logger.error(e2, e2?.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = false;
    }, (0, import_time4.toMiliseconds)(kt3)))));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
  async toEstablishConnection() {
    if (await this.confirmOnlineStateOrThrow(), !this.connected) {
      if (this.connectPromise) {
        await this.connectPromise;
        return;
      }
      await this.connect();
    }
  }
};
function ao3(r3, e2) {
  return r3 === e2 || Number.isNaN(r3) && Number.isNaN(e2);
}
function xi(r3) {
  return Object.getOwnPropertySymbols(r3).filter((e2) => Object.prototype.propertyIsEnumerable.call(r3, e2));
}
function Ni2(r3) {
  return r3 == null ? r3 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(r3);
}
var co3 = "[object RegExp]";
var ho3 = "[object String]";
var lo3 = "[object Number]";
var uo2 = "[object Boolean]";
var $i2 = "[object Arguments]";
var po3 = "[object Symbol]";
var go3 = "[object Date]";
var yo3 = "[object Map]";
var bo3 = "[object Set]";
var mo3 = "[object Array]";
var fo2 = "[object Function]";
var Do3 = "[object ArrayBuffer]";
var Ze3 = "[object Object]";
var vo3 = "[object Error]";
var _o3 = "[object DataView]";
var wo3 = "[object Uint8Array]";
var Eo3 = "[object Uint8ClampedArray]";
var Io3 = "[object Uint16Array]";
var To3 = "[object Uint32Array]";
var Co3 = "[object BigUint64Array]";
var Po3 = "[object Int8Array]";
var So3 = "[object Int16Array]";
var Oo3 = "[object Int32Array]";
var Ro3 = "[object BigInt64Array]";
var Ao3 = "[object Float32Array]";
var xo3 = "[object Float64Array]";
function No3() {
}
function zi2(r3) {
  if (!r3 || typeof r3 != "object") return false;
  const e2 = Object.getPrototypeOf(r3);
  return e2 === null || e2 === Object.prototype || Object.getPrototypeOf(e2) === null ? Object.prototype.toString.call(r3) === "[object Object]" : false;
}
function $o3(r3, e2, t) {
  return De3(r3, e2, void 0, void 0, void 0, void 0, t);
}
function De3(r3, e2, t, i3, s2, n4, o5) {
  const a3 = o5(r3, e2, t, i3, s2, n4);
  if (a3 !== void 0) return a3;
  if (typeof r3 == typeof e2) switch (typeof r3) {
    case "bigint":
    case "string":
    case "boolean":
    case "symbol":
    case "undefined":
      return r3 === e2;
    case "number":
      return r3 === e2 || Object.is(r3, e2);
    case "function":
      return r3 === e2;
    case "object":
      return ve3(r3, e2, n4, o5);
  }
  return ve3(r3, e2, n4, o5);
}
function ve3(r3, e2, t, i3) {
  if (Object.is(r3, e2)) return true;
  let s2 = Ni2(r3), n4 = Ni2(e2);
  if (s2 === $i2 && (s2 = Ze3), n4 === $i2 && (n4 = Ze3), s2 !== n4) return false;
  switch (s2) {
    case ho3:
      return r3.toString() === e2.toString();
    case lo3: {
      const c6 = r3.valueOf(), h4 = e2.valueOf();
      return ao3(c6, h4);
    }
    case uo2:
    case go3:
    case po3:
      return Object.is(r3.valueOf(), e2.valueOf());
    case co3:
      return r3.source === e2.source && r3.flags === e2.flags;
    case fo2:
      return r3 === e2;
  }
  t = t ?? /* @__PURE__ */ new Map();
  const o5 = t.get(r3), a3 = t.get(e2);
  if (o5 != null && a3 != null) return o5 === e2;
  t.set(r3, e2), t.set(e2, r3);
  try {
    switch (s2) {
      case yo3: {
        if (r3.size !== e2.size) return false;
        for (const [c6, h4] of r3.entries()) if (!e2.has(c6) || !De3(h4, e2.get(c6), c6, r3, e2, t, i3)) return false;
        return true;
      }
      case bo3: {
        if (r3.size !== e2.size) return false;
        const c6 = Array.from(r3.values()), h4 = Array.from(e2.values());
        for (let l6 = 0; l6 < c6.length; l6++) {
          const g4 = c6[l6], y4 = h4.findIndex((_3) => De3(g4, _3, void 0, r3, e2, t, i3));
          if (y4 === -1) return false;
          h4.splice(y4, 1);
        }
        return true;
      }
      case mo3:
      case wo3:
      case Eo3:
      case Io3:
      case To3:
      case Co3:
      case Po3:
      case So3:
      case Oo3:
      case Ro3:
      case Ao3:
      case xo3: {
        if (typeof Buffer < "u" && Buffer.isBuffer(r3) !== Buffer.isBuffer(e2) || r3.length !== e2.length) return false;
        for (let c6 = 0; c6 < r3.length; c6++) if (!De3(r3[c6], e2[c6], c6, r3, e2, t, i3)) return false;
        return true;
      }
      case Do3:
        return r3.byteLength !== e2.byteLength ? false : ve3(new Uint8Array(r3), new Uint8Array(e2), t, i3);
      case _o3:
        return r3.byteLength !== e2.byteLength || r3.byteOffset !== e2.byteOffset ? false : ve3(new Uint8Array(r3), new Uint8Array(e2), t, i3);
      case vo3:
        return r3.name === e2.name && r3.message === e2.message;
      case Ze3: {
        if (!(ve3(r3.constructor, e2.constructor, t, i3) || zi2(r3) && zi2(e2))) return false;
        const h4 = [...Object.keys(r3), ...xi(r3)], l6 = [...Object.keys(e2), ...xi(e2)];
        if (h4.length !== l6.length) return false;
        for (let g4 = 0; g4 < h4.length; g4++) {
          const y4 = h4[g4], _3 = r3[y4];
          if (!Object.hasOwn(e2, y4)) return false;
          const u2 = e2[y4];
          if (!De3(_3, u2, y4, r3, e2, t, i3)) return false;
        }
        return true;
      }
      default:
        return false;
    }
  } finally {
    t.delete(r3), t.delete(e2);
  }
}
function zo3(r3, e2) {
  return $o3(r3, e2, No3);
}
var Lo3 = Object.defineProperty;
var Li2 = Object.getOwnPropertySymbols;
var ko3 = Object.prototype.hasOwnProperty;
var jo3 = Object.prototype.propertyIsEnumerable;
var Qe2 = (r3, e2, t) => e2 in r3 ? Lo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var ki2 = (r3, e2) => {
  for (var t in e2 || (e2 = {})) ko3.call(e2, t) && Qe2(r3, t, e2[t]);
  if (Li2) for (var t of Li2(e2)) jo3.call(e2, t) && Qe2(r3, t, e2[t]);
  return r3;
};
var U = (r3, e2, t) => Qe2(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var ji2 = class extends f {
  constructor(e2, t, i3, s2 = W3, n4 = void 0) {
    super(e2, t, i3, s2), this.core = e2, this.logger = t, this.name = i3, U(this, "map", /* @__PURE__ */ new Map()), U(this, "version", jt3), U(this, "cached", []), U(this, "initialized", false), U(this, "getKey"), U(this, "storagePrefix", W3), U(this, "recentlyDeleted", []), U(this, "recentlyDeletedLimit", 200), U(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((o5) => {
        this.getKey && o5 !== null && !Dt2(o5) ? this.map.set(this.getKey(o5), o5) : Ga(o5) ? this.map.set(o5.id, o5) : za(o5) && this.map.set(o5.topic, o5);
      }), this.cached = [], this.initialized = true);
    }), U(this, "set", async (o5, a3) => {
      this.isInitialized(), this.map.has(o5) ? await this.update(o5, a3) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: o5, value: a3 }), this.map.set(o5, a3), await this.persist());
    }), U(this, "get", (o5) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: o5 }), this.getData(o5))), U(this, "getAll", (o5) => (this.isInitialized(), o5 ? this.values.filter((a3) => Object.keys(o5).every((c6) => zo3(a3[c6], o5[c6]))) : this.values)), U(this, "update", async (o5, a3) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: o5, update: a3 });
      const c6 = ki2(ki2({}, this.getData(o5)), a3);
      this.map.set(o5, c6), await this.persist();
    }), U(this, "delete", async (o5, a3) => {
      this.isInitialized(), this.map.has(o5) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: o5, reason: a3 }), this.map.delete(o5), this.addToRecentlyDeleted(o5), await this.persist());
    }), this.logger = X(t, this.name), this.storagePrefix = s2, this.getKey = n4;
  }
  get context() {
    return w(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  addToRecentlyDeleted(e2) {
    this.recentlyDeleted.push(e2), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
  }
  async setDataStore(e2) {
    await this.core.storage.setItem(this.storageKey, e2);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e2) {
    const t = this.map.get(e2);
    if (!t) {
      if (this.recentlyDeleted.includes(e2)) {
        const { message: s2 } = Bt2("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e2}`);
        throw this.logger.error(s2), new Error(s2);
      }
      const { message: i3 } = Bt2("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw this.logger.error(i3), new Error(i3);
    }
    return t;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e2 = await this.getDataStore();
      if (typeof e2 > "u" || !e2.length) return;
      if (this.map.size) {
        const { message: t } = Bt2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e2);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Uo3 = Object.defineProperty;
var Fo3 = (r3, e2, t) => e2 in r3 ? Uo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var d3 = (r3, e2, t) => Fo3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Ui2 = class {
  constructor(e2, t) {
    this.core = e2, this.logger = t, d3(this, "name", Kt3), d3(this, "version", Bt3), d3(this, "events", new import_events7.default()), d3(this, "pairings"), d3(this, "initialized", false), d3(this, "storagePrefix", W3), d3(this, "ignoredPayloadTypes", [ie]), d3(this, "registeredMethods", []), d3(this, "init", async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = true, this.logger.trace("Initialized"));
    }), d3(this, "register", ({ methods: i3 }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...i3])];
    }), d3(this, "create", async (i3) => {
      this.isInitialized();
      const s2 = la(), n4 = await this.core.crypto.setSymKey(s2), o5 = Ni(import_time4.FIVE_MINUTES), a3 = { protocol: Nt3 }, c6 = { topic: n4, expiry: o5, relay: a3, active: false, methods: i3?.methods }, h4 = $a({ protocol: this.core.protocol, version: this.core.version, topic: n4, symKey: s2, relay: a3, expiryTimestamp: o5, methods: i3?.methods });
      return this.events.emit(ae2.create, c6), this.core.expirer.set(n4, o5), await this.pairings.set(n4, c6), await this.core.relayer.subscribe(n4, { transportType: i3?.transportType, internal: i3?.internal }), { topic: n4, uri: h4 };
    }), d3(this, "pair", async (i3) => {
      this.isInitialized();
      const s2 = this.core.eventClient.createEvent({ properties: { topic: i3?.uri, trace: [Y2.pairing_started] } });
      this.isValidPair(i3, s2);
      const { topic: n4, symKey: o5, relay: a3, expiryTimestamp: c6, methods: h4 } = Ra(i3.uri);
      s2.props.properties.topic = n4, s2.addTrace(Y2.pairing_uri_validation_success), s2.addTrace(Y2.pairing_uri_not_expired);
      let l6;
      if (this.pairings.keys.includes(n4)) {
        if (l6 = this.pairings.get(n4), s2.addTrace(Y2.existing_pairing), l6.active) throw s2.setError(X3.active_pairing_already_exists), new Error(`Pairing already exists: ${n4}. Please try again with a new connection URI.`);
        s2.addTrace(Y2.pairing_not_expired);
      }
      const g4 = c6 || Ni(import_time4.FIVE_MINUTES), y4 = { topic: n4, relay: a3, expiry: g4, active: false, methods: h4 };
      this.core.expirer.set(n4, g4), await this.pairings.set(n4, y4), s2.addTrace(Y2.store_new_pairing), i3.activatePairing && await this.activate({ topic: n4 }), this.events.emit(ae2.create, y4), s2.addTrace(Y2.emit_inactive_pairing), this.core.crypto.keychain.has(n4) || await this.core.crypto.setSymKey(o5, n4), s2.addTrace(Y2.subscribing_pairing_topic);
      try {
        await this.core.relayer.confirmOnlineStateOrThrow();
      } catch {
        s2.setError(X3.no_internet_connection);
      }
      try {
        await this.core.relayer.subscribe(n4, { relay: a3 });
      } catch (_3) {
        throw s2.setError(X3.subscribe_pairing_topic_failure), _3;
      }
      return s2.addTrace(Y2.subscribe_pairing_topic_success), y4;
    }), d3(this, "activate", async ({ topic: i3 }) => {
      this.isInitialized();
      const s2 = Ni(import_time4.FIVE_MINUTES);
      this.core.expirer.set(i3, s2), await this.pairings.update(i3, { active: true, expiry: s2 });
    }), d3(this, "ping", async (i3) => {
      this.isInitialized(), await this.isValidPing(i3), this.logger.warn("ping() is deprecated and will be removed in the next major release.");
      const { topic: s2 } = i3;
      if (this.pairings.keys.includes(s2)) {
        const n4 = await this.sendRequest(s2, "wc_pairingPing", {}), { done: o5, resolve: a3, reject: c6 } = Bi();
        this.events.once(_i("pairing_ping", n4), ({ error: h4 }) => {
          h4 ? c6(h4) : a3();
        }), await o5();
      }
    }), d3(this, "updateExpiry", async ({ topic: i3, expiry: s2 }) => {
      this.isInitialized(), await this.pairings.update(i3, { expiry: s2 });
    }), d3(this, "updateMetadata", async ({ topic: i3, metadata: s2 }) => {
      this.isInitialized(), await this.pairings.update(i3, { peerMetadata: s2 });
    }), d3(this, "getPairings", () => (this.isInitialized(), this.pairings.values)), d3(this, "disconnect", async (i3) => {
      this.isInitialized(), await this.isValidDisconnect(i3);
      const { topic: s2 } = i3;
      this.pairings.keys.includes(s2) && (await this.sendRequest(s2, "wc_pairingDelete", zt2("USER_DISCONNECTED")), await this.deletePairing(s2));
    }), d3(this, "formatUriFromPairing", (i3) => {
      this.isInitialized();
      const { topic: s2, relay: n4, expiry: o5, methods: a3 } = i3, c6 = this.core.crypto.keychain.get(s2);
      return $a({ protocol: this.core.protocol, version: this.core.version, topic: s2, symKey: c6, relay: n4, expiryTimestamp: o5, methods: a3 });
    }), d3(this, "sendRequest", async (i3, s2, n4) => {
      const o5 = formatJsonRpcRequest(s2, n4), a3 = await this.core.crypto.encode(i3, o5), c6 = oe2[s2].req;
      return this.core.history.set(i3, o5), this.core.relayer.publish(i3, a3, c6), o5.id;
    }), d3(this, "sendResult", async (i3, s2, n4) => {
      const o5 = formatJsonRpcResult(i3, n4), a3 = await this.core.crypto.encode(s2, o5), c6 = (await this.core.history.get(s2, i3)).request.method, h4 = oe2[c6].res;
      await this.core.relayer.publish(s2, a3, h4), await this.core.history.resolve(o5);
    }), d3(this, "sendError", async (i3, s2, n4) => {
      const o5 = formatJsonRpcError(i3, n4), a3 = await this.core.crypto.encode(s2, o5), c6 = (await this.core.history.get(s2, i3)).request.method, h4 = oe2[c6] ? oe2[c6].res : oe2.unregistered_method.res;
      await this.core.relayer.publish(s2, a3, h4), await this.core.history.resolve(o5);
    }), d3(this, "deletePairing", async (i3, s2) => {
      await this.core.relayer.unsubscribe(i3), await Promise.all([this.pairings.delete(i3, zt2("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(i3), s2 ? Promise.resolve() : this.core.expirer.del(i3)]);
    }), d3(this, "cleanup", async () => {
      const i3 = this.pairings.getAll().filter((s2) => Ui(s2.expiry));
      await Promise.all(i3.map((s2) => this.deletePairing(s2.topic)));
    }), d3(this, "onRelayEventRequest", async (i3) => {
      const { topic: s2, payload: n4 } = i3;
      switch (n4.method) {
        case "wc_pairingPing":
          return await this.onPairingPingRequest(s2, n4);
        case "wc_pairingDelete":
          return await this.onPairingDeleteRequest(s2, n4);
        default:
          return await this.onUnknownRpcMethodRequest(s2, n4);
      }
    }), d3(this, "onRelayEventResponse", async (i3) => {
      const { topic: s2, payload: n4 } = i3, o5 = (await this.core.history.get(s2, n4.id)).request.method;
      switch (o5) {
        case "wc_pairingPing":
          return this.onPairingPingResponse(s2, n4);
        default:
          return this.onUnknownRpcMethodResponse(o5);
      }
    }), d3(this, "onPairingPingRequest", async (i3, s2) => {
      const { id: n4 } = s2;
      try {
        this.isValidPing({ topic: i3 }), await this.sendResult(n4, i3, true), this.events.emit(ae2.ping, { id: n4, topic: i3 });
      } catch (o5) {
        await this.sendError(n4, i3, o5), this.logger.error(o5);
      }
    }), d3(this, "onPairingPingResponse", (i3, s2) => {
      const { id: n4 } = s2;
      setTimeout(() => {
        isJsonRpcResult(s2) ? this.events.emit(_i("pairing_ping", n4), {}) : isJsonRpcError(s2) && this.events.emit(_i("pairing_ping", n4), { error: s2.error });
      }, 500);
    }), d3(this, "onPairingDeleteRequest", async (i3, s2) => {
      const { id: n4 } = s2;
      try {
        this.isValidDisconnect({ topic: i3 }), await this.deletePairing(i3), this.events.emit(ae2.delete, { id: n4, topic: i3 });
      } catch (o5) {
        await this.sendError(n4, i3, o5), this.logger.error(o5);
      }
    }), d3(this, "onUnknownRpcMethodRequest", async (i3, s2) => {
      const { id: n4, method: o5 } = s2;
      try {
        if (this.registeredMethods.includes(o5)) return;
        const a3 = zt2("WC_METHOD_UNSUPPORTED", o5);
        await this.sendError(n4, i3, a3), this.logger.error(a3);
      } catch (a3) {
        await this.sendError(n4, i3, a3), this.logger.error(a3);
      }
    }), d3(this, "onUnknownRpcMethodResponse", (i3) => {
      this.registeredMethods.includes(i3) || this.logger.error(zt2("WC_METHOD_UNSUPPORTED", i3));
    }), d3(this, "isValidPair", (i3, s2) => {
      var n4;
      if (!Qa(i3)) {
        const { message: a3 } = Bt2("MISSING_OR_INVALID", `pair() params: ${i3}`);
        throw s2.setError(X3.malformed_pairing_uri), new Error(a3);
      }
      if (!Za(i3.uri)) {
        const { message: a3 } = Bt2("MISSING_OR_INVALID", `pair() uri: ${i3.uri}`);
        throw s2.setError(X3.malformed_pairing_uri), new Error(a3);
      }
      const o5 = Ra(i3?.uri);
      if (!((n4 = o5?.relay) != null && n4.protocol)) {
        const { message: a3 } = Bt2("MISSING_OR_INVALID", "pair() uri#relay-protocol");
        throw s2.setError(X3.malformed_pairing_uri), new Error(a3);
      }
      if (!(o5 != null && o5.symKey)) {
        const { message: a3 } = Bt2("MISSING_OR_INVALID", "pair() uri#symKey");
        throw s2.setError(X3.malformed_pairing_uri), new Error(a3);
      }
      if (o5 != null && o5.expiryTimestamp && (0, import_time4.toMiliseconds)(o5?.expiryTimestamp) < Date.now()) {
        s2.setError(X3.pairing_expired);
        const { message: a3 } = Bt2("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
        throw new Error(a3);
      }
    }), d3(this, "isValidPing", async (i3) => {
      if (!Qa(i3)) {
        const { message: n4 } = Bt2("MISSING_OR_INVALID", `ping() params: ${i3}`);
        throw new Error(n4);
      }
      const { topic: s2 } = i3;
      await this.isValidPairingTopic(s2);
    }), d3(this, "isValidDisconnect", async (i3) => {
      if (!Qa(i3)) {
        const { message: n4 } = Bt2("MISSING_OR_INVALID", `disconnect() params: ${i3}`);
        throw new Error(n4);
      }
      const { topic: s2 } = i3;
      await this.isValidPairingTopic(s2);
    }), d3(this, "isValidPairingTopic", async (i3) => {
      if (!ft2(i3, false)) {
        const { message: s2 } = Bt2("MISSING_OR_INVALID", `pairing topic should be a string: ${i3}`);
        throw new Error(s2);
      }
      if (!this.pairings.keys.includes(i3)) {
        const { message: s2 } = Bt2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${i3}`);
        throw new Error(s2);
      }
      if (Ui(this.pairings.get(i3).expiry)) {
        await this.deletePairing(i3);
        const { message: s2 } = Bt2("EXPIRED", `pairing topic: ${i3}`);
        throw new Error(s2);
      }
    }), this.core = e2, this.logger = X(t, this.name), this.pairings = new ji2(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return w(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(C2.message, async (e2) => {
      const { topic: t, message: i3, transportType: s2 } = e2;
      if (this.pairings.keys.includes(t) && s2 !== ee2.link_mode && !this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(i3))) try {
        const n4 = await this.core.crypto.decode(t, i3);
        isJsonRpcRequest(n4) ? (this.core.history.set(t, n4), await this.onRelayEventRequest({ topic: t, payload: n4 })) : isJsonRpcResponse(n4) && (await this.core.history.resolve(n4), await this.onRelayEventResponse({ topic: t, payload: n4 }), this.core.history.delete(t, n4.id)), await this.core.relayer.messages.ack(t, i3);
      } catch (n4) {
        this.logger.error(n4);
      }
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on(q.expired, async (e2) => {
      const { topic: t } = Oi(e2.target);
      t && this.pairings.keys.includes(t) && (await this.deletePairing(t, true), this.events.emit(ae2.expire, { topic: t }));
    });
  }
};
var Mo3 = Object.defineProperty;
var Ko3 = (r3, e2, t) => e2 in r3 ? Mo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var N10 = (r3, e2, t) => Ko3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Fi2 = class extends I {
  constructor(e2, t) {
    super(e2, t), this.core = e2, this.logger = t, N10(this, "records", /* @__PURE__ */ new Map()), N10(this, "events", new import_events7.EventEmitter()), N10(this, "name", Vt3), N10(this, "version", qt3), N10(this, "cached", []), N10(this, "initialized", false), N10(this, "storagePrefix", W3), N10(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i3) => this.records.set(i3.id, i3)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), N10(this, "set", (i3, s2, n4) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: i3, request: s2, chainId: n4 }), this.records.has(s2.id)) return;
      const o5 = { id: s2.id, topic: i3, request: { method: s2.method, params: s2.params || null }, chainId: n4, expiry: Ni(import_time4.THIRTY_DAYS) };
      this.records.set(o5.id, o5), this.persist(), this.events.emit(V2.created, o5);
    }), N10(this, "resolve", async (i3) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: i3 }), !this.records.has(i3.id)) return;
      const s2 = await this.getRecord(i3.id);
      typeof s2.response > "u" && (s2.response = isJsonRpcError(i3) ? { error: i3.error } : { result: i3.result }, this.records.set(s2.id, s2), this.persist(), this.events.emit(V2.updated, s2));
    }), N10(this, "get", async (i3, s2) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: i3, id: s2 }), await this.getRecord(s2))), N10(this, "delete", (i3, s2) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: s2 }), this.values.forEach((n4) => {
        if (n4.topic === i3) {
          if (typeof s2 < "u" && n4.id !== s2) return;
          this.records.delete(n4.id), this.events.emit(V2.deleted, n4);
        }
      }), this.persist();
    }), N10(this, "exists", async (i3, s2) => (this.isInitialized(), this.records.has(s2) ? (await this.getRecord(s2)).topic === i3 : false)), N10(this, "on", (i3, s2) => {
      this.events.on(i3, s2);
    }), N10(this, "once", (i3, s2) => {
      this.events.once(i3, s2);
    }), N10(this, "off", (i3, s2) => {
      this.events.off(i3, s2);
    }), N10(this, "removeListener", (i3, s2) => {
      this.events.removeListener(i3, s2);
    }), this.logger = X(t, this.name);
  }
  get context() {
    return w(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e2 = [];
    return this.values.forEach((t) => {
      if (typeof t.response < "u") return;
      const i3 = { topic: t.topic, request: formatJsonRpcRequest(t.request.method, t.request.params, t.id), chainId: t.chainId };
      return e2.push(i3);
    }), e2;
  }
  async setJsonRpcRecords(e2) {
    await this.core.storage.setItem(this.storageKey, e2);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e2) {
    this.isInitialized();
    const t = this.records.get(e2);
    if (!t) {
      const { message: i3 } = Bt2("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw new Error(i3);
    }
    return t;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(V2.sync);
  }
  async restore() {
    try {
      const e2 = await this.getJsonRpcRecords();
      if (typeof e2 > "u" || !e2.length) return;
      if (this.records.size) {
        const { message: t } = Bt2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e2);
    }
  }
  registerEventListeners() {
    this.events.on(V2.created, (e2) => {
      const t = V2.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e2 });
    }), this.events.on(V2.updated, (e2) => {
      const t = V2.updated;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e2 });
    }), this.events.on(V2.deleted, (e2) => {
      const t = V2.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e2 });
    }), this.core.heartbeat.on(r.pulse, () => {
      this.cleanup();
    });
  }
  cleanup() {
    try {
      this.isInitialized();
      let e2 = false;
      this.records.forEach((t) => {
        (0, import_time4.toMiliseconds)(t.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t.id}`), this.records.delete(t.id), this.events.emit(V2.deleted, t, false), e2 = true);
      }), e2 && this.persist();
    } catch (e2) {
      this.logger.warn(e2);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Bo3 = Object.defineProperty;
var Vo3 = (r3, e2, t) => e2 in r3 ? Bo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var z3 = (r3, e2, t) => Vo3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Mi2 = class extends S {
  constructor(e2, t) {
    super(e2, t), this.core = e2, this.logger = t, z3(this, "expirations", /* @__PURE__ */ new Map()), z3(this, "events", new import_events7.EventEmitter()), z3(this, "name", Gt3), z3(this, "version", Wt3), z3(this, "cached", []), z3(this, "initialized", false), z3(this, "storagePrefix", W3), z3(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i3) => this.expirations.set(i3.target, i3)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), z3(this, "has", (i3) => {
      try {
        const s2 = this.formatTarget(i3);
        return typeof this.getExpiration(s2) < "u";
      } catch {
        return false;
      }
    }), z3(this, "set", (i3, s2) => {
      this.isInitialized();
      const n4 = this.formatTarget(i3), o5 = { target: n4, expiry: s2 };
      this.expirations.set(n4, o5), this.checkExpiry(n4, o5), this.events.emit(q.created, { target: n4, expiration: o5 });
    }), z3(this, "get", (i3) => {
      this.isInitialized();
      const s2 = this.formatTarget(i3);
      return this.getExpiration(s2);
    }), z3(this, "del", (i3) => {
      if (this.isInitialized(), this.has(i3)) {
        const s2 = this.formatTarget(i3), n4 = this.getExpiration(s2);
        this.expirations.delete(s2), this.events.emit(q.deleted, { target: s2, expiration: n4 });
      }
    }), z3(this, "on", (i3, s2) => {
      this.events.on(i3, s2);
    }), z3(this, "once", (i3, s2) => {
      this.events.once(i3, s2);
    }), z3(this, "off", (i3, s2) => {
      this.events.off(i3, s2);
    }), z3(this, "removeListener", (i3, s2) => {
      this.events.removeListener(i3, s2);
    }), this.logger = X(t, this.name);
  }
  get context() {
    return w(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e2) {
    if (typeof e2 == "string") return Ii(e2);
    if (typeof e2 == "number") return Si(e2);
    const { message: t } = Bt2("UNKNOWN_TYPE", `Target type: ${typeof e2}`);
    throw new Error(t);
  }
  async setExpirations(e2) {
    await this.core.storage.setItem(this.storageKey, e2);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit(q.sync);
  }
  async restore() {
    try {
      const e2 = await this.getExpirations();
      if (typeof e2 > "u" || !e2.length) return;
      if (this.expirations.size) {
        const { message: t } = Bt2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e2);
    }
  }
  getExpiration(e2) {
    const t = this.expirations.get(e2);
    if (!t) {
      const { message: i3 } = Bt2("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw this.logger.warn(i3), new Error(i3);
    }
    return t;
  }
  checkExpiry(e2, t) {
    const { expiry: i3 } = t;
    (0, import_time4.toMiliseconds)(i3) - Date.now() <= 0 && this.expire(e2, t);
  }
  expire(e2, t) {
    this.expirations.delete(e2), this.events.emit(q.expired, { target: e2, expiration: t });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e2, t) => this.checkExpiry(t, e2));
  }
  registerEventListeners() {
    this.core.heartbeat.on(r.pulse, () => this.checkExpirations()), this.events.on(q.created, (e2) => {
      const t = q.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e2 }), this.persist();
    }), this.events.on(q.expired, (e2) => {
      const t = q.expired;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e2 }), this.persist();
    }), this.events.on(q.deleted, (e2) => {
      const t = q.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e2 }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var qo3 = Object.defineProperty;
var Go3 = (r3, e2, t) => e2 in r3 ? qo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var P3 = (r3, e2, t) => Go3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Ki2 = class extends M {
  constructor(e2, t, i3) {
    super(e2, t, i3), this.core = e2, this.logger = t, this.store = i3, P3(this, "name", Ht3), P3(this, "abortController"), P3(this, "isDevEnv"), P3(this, "verifyUrlV3", Jt3), P3(this, "storagePrefix", W3), P3(this, "version", Fe2), P3(this, "publicKey"), P3(this, "fetchPromise"), P3(this, "init", async () => {
      var s2;
      this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0, import_time4.toMiliseconds)((s2 = this.publicKey) == null ? void 0 : s2.expiresAt) < Date.now() && (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
    }), P3(this, "register", async (s2) => {
      if (!Wt2() || this.isDevEnv) return;
      const n4 = window.location.origin, { id: o5, decryptedId: a3 } = s2, c6 = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${n4}&id=${o5}&decryptedId=${a3}`;
      try {
        const h4 = (0, import_window_getters2.getDocument)(), l6 = this.startAbortTimer(import_time4.ONE_SECOND * 5), g4 = await new Promise((y4, _3) => {
          const u2 = () => {
            window.removeEventListener("message", D3), h4.body.removeChild(m4), _3("attestation aborted");
          };
          this.abortController.signal.addEventListener("abort", u2);
          const m4 = h4.createElement("iframe");
          m4.src = c6, m4.style.display = "none", m4.addEventListener("error", u2, { signal: this.abortController.signal });
          const D3 = (w5) => {
            if (w5.data && typeof w5.data == "string") try {
              const E4 = JSON.parse(w5.data);
              if (E4.type === "verify_attestation") {
                if (sn(E4.attestation).payload.id !== o5) return;
                clearInterval(l6), h4.body.removeChild(m4), this.abortController.signal.removeEventListener("abort", u2), window.removeEventListener("message", D3), y4(E4.attestation === null ? "" : E4.attestation);
              }
            } catch (E4) {
              this.logger.warn(E4);
            }
          };
          h4.body.appendChild(m4), window.addEventListener("message", D3, { signal: this.abortController.signal });
        });
        return this.logger.debug(g4, "jwt attestation"), g4;
      } catch (h4) {
        this.logger.warn(h4);
      }
      return "";
    }), P3(this, "resolve", async (s2) => {
      if (this.isDevEnv) return "";
      const { attestationId: n4, hash: o5, encryptedId: a3 } = s2;
      if (n4 === "") {
        this.logger.debug("resolve: attestationId is empty, skipping");
        return;
      }
      if (n4) {
        if (sn(n4).payload.id !== a3) return;
        const h4 = await this.isValidJwtAttestation(n4);
        if (h4) {
          if (!h4.isVerified) {
            this.logger.warn("resolve: jwt attestation: origin url not verified");
            return;
          }
          return h4;
        }
      }
      if (!o5) return;
      const c6 = this.getVerifyUrl(s2?.verifyUrl);
      return this.fetchAttestation(o5, c6);
    }), P3(this, "fetchAttestation", async (s2, n4) => {
      this.logger.debug(`resolving attestation: ${s2} from url: ${n4}`);
      const o5 = this.startAbortTimer(import_time4.ONE_SECOND * 5), a3 = await fetch(`${n4}/attestation/${s2}?v2Supported=true`, { signal: this.abortController.signal });
      return clearTimeout(o5), a3.status === 200 ? await a3.json() : void 0;
    }), P3(this, "getVerifyUrl", (s2) => {
      let n4 = s2 || be3;
      return Xt3.includes(n4) || (this.logger.info(`verify url: ${n4}, not included in trusted list, assigning default: ${be3}`), n4 = be3), n4;
    }), P3(this, "fetchPublicKey", async () => {
      try {
        this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
        const s2 = this.startAbortTimer(import_time4.FIVE_SECONDS), n4 = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
        return clearTimeout(s2), await n4.json();
      } catch (s2) {
        this.logger.warn(s2);
      }
    }), P3(this, "persistPublicKey", async (s2) => {
      this.logger.debug(s2, "persisting public key to local storage"), await this.store.setItem(this.storeKey, s2), this.publicKey = s2;
    }), P3(this, "removePublicKey", async () => {
      this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;
    }), P3(this, "isValidJwtAttestation", async (s2) => {
      const n4 = await this.getPublicKey();
      try {
        if (n4) return this.validateAttestation(s2, n4);
      } catch (a3) {
        this.logger.error(a3), this.logger.warn("error validating attestation");
      }
      const o5 = await this.fetchAndPersistPublicKey();
      try {
        if (o5) return this.validateAttestation(s2, o5);
      } catch (a3) {
        this.logger.error(a3), this.logger.warn("error validating attestation");
      }
    }), P3(this, "getPublicKey", async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), P3(this, "fetchAndPersistPublicKey", async () => {
      if (this.fetchPromise) return await this.fetchPromise, this.publicKey;
      this.fetchPromise = new Promise(async (n4) => {
        const o5 = await this.fetchPublicKey();
        o5 && (await this.persistPublicKey(o5), n4(o5));
      });
      const s2 = await this.fetchPromise;
      return this.fetchPromise = void 0, s2;
    }), P3(this, "validateAttestation", (s2, n4) => {
      const o5 = Ea(s2, n4.publicKey), a3 = { hasExpired: (0, import_time4.toMiliseconds)(o5.exp) < Date.now(), payload: o5 };
      if (a3.hasExpired) throw this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired");
      return { origin: a3.payload.origin, isScam: a3.payload.isScam, isVerified: a3.payload.isVerified };
    }), this.logger = X(t, this.name), this.abortController = new AbortController(), this.isDevEnv = ji(), this.init();
  }
  get storeKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
  }
  get context() {
    return w(this.logger);
  }
  startAbortTimer(e2) {
    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), (0, import_time4.toMiliseconds)(e2));
  }
};
var Wo3 = Object.defineProperty;
var Ho3 = (r3, e2, t) => e2 in r3 ? Wo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var Bi2 = (r3, e2, t) => Ho3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Vi2 = class extends O2 {
  constructor(e2, t) {
    super(e2, t), this.projectId = e2, this.logger = t, Bi2(this, "context", Zt3), Bi2(this, "registerDeviceToken", async (i3) => {
      const { clientId: s2, token: n4, notificationType: o5, enableEncrypted: a3 = false } = i3, c6 = `${Qt3}/${this.projectId}/clients`;
      await fetch(c6, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ client_id: s2, type: o5, token: n4, always_raw: a3 }) });
    }), this.logger = X(t, this.context);
  }
};
var Yo3 = Object.defineProperty;
var qi2 = Object.getOwnPropertySymbols;
var Jo3 = Object.prototype.hasOwnProperty;
var Xo2 = Object.prototype.propertyIsEnumerable;
var et2 = (r3, e2, t) => e2 in r3 ? Yo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var _e3 = (r3, e2) => {
  for (var t in e2 || (e2 = {})) Jo3.call(e2, t) && et2(r3, t, e2[t]);
  if (qi2) for (var t of qi2(e2)) Xo2.call(e2, t) && et2(r3, t, e2[t]);
  return r3;
};
var A = (r3, e2, t) => et2(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Gi2 = class extends R {
  constructor(e2, t, i3 = true) {
    super(e2, t, i3), this.core = e2, this.logger = t, A(this, "context", ti), A(this, "storagePrefix", W3), A(this, "storageVersion", ei2), A(this, "events", /* @__PURE__ */ new Map()), A(this, "shouldPersist", false), A(this, "init", async () => {
      if (!ji()) try {
        const s2 = { eventId: Ci(), timestamp: Date.now(), domain: this.getAppDomain(), props: { event: "INIT", type: "", properties: { client_id: await this.core.crypto.getClientId(), user_agent: wr2(this.core.relayer.protocol, this.core.relayer.version, Pe3) } } };
        await this.sendEvent([s2]);
      } catch (s2) {
        this.logger.warn(s2);
      }
    }), A(this, "createEvent", (s2) => {
      const { event: n4 = "ERROR", type: o5 = "", properties: { topic: a3, trace: c6 } } = s2, h4 = Ci(), l6 = this.core.projectId || "", g4 = Date.now(), y4 = _e3({ eventId: h4, timestamp: g4, props: { event: n4, type: o5, properties: { topic: a3, trace: c6 } }, bundleId: l6, domain: this.getAppDomain() }, this.setMethods(h4));
      return this.telemetryEnabled && (this.events.set(h4, y4), this.shouldPersist = true), y4;
    }), A(this, "getEvent", (s2) => {
      const { eventId: n4, topic: o5 } = s2;
      if (n4) return this.events.get(n4);
      const a3 = Array.from(this.events.values()).find((c6) => c6.props.properties.topic === o5);
      if (a3) return _e3(_e3({}, a3), this.setMethods(a3.eventId));
    }), A(this, "deleteEvent", (s2) => {
      const { eventId: n4 } = s2;
      this.events.delete(n4), this.shouldPersist = true;
    }), A(this, "setEventListeners", () => {
      this.core.heartbeat.on(r.pulse, async () => {
        this.shouldPersist && await this.persist(), this.events.forEach((s2) => {
          (0, import_time4.fromMiliseconds)(Date.now()) - (0, import_time4.fromMiliseconds)(s2.timestamp) > ii2 && (this.events.delete(s2.eventId), this.shouldPersist = true);
        });
      });
    }), A(this, "setMethods", (s2) => ({ addTrace: (n4) => this.addTrace(s2, n4), setError: (n4) => this.setError(s2, n4) })), A(this, "addTrace", (s2, n4) => {
      const o5 = this.events.get(s2);
      o5 && (o5.props.properties.trace.push(n4), this.events.set(s2, o5), this.shouldPersist = true);
    }), A(this, "setError", (s2, n4) => {
      const o5 = this.events.get(s2);
      o5 && (o5.props.type = n4, o5.timestamp = Date.now(), this.events.set(s2, o5), this.shouldPersist = true);
    }), A(this, "persist", async () => {
      await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = false;
    }), A(this, "restore", async () => {
      try {
        const s2 = await this.core.storage.getItem(this.storageKey) || [];
        if (!s2.length) return;
        s2.forEach((n4) => {
          this.events.set(n4.eventId, _e3(_e3({}, n4), this.setMethods(n4.eventId)));
        });
      } catch (s2) {
        this.logger.warn(s2);
      }
    }), A(this, "submit", async () => {
      if (!this.telemetryEnabled || this.events.size === 0) return;
      const s2 = [];
      for (const [n4, o5] of this.events) o5.props.type && s2.push(o5);
      if (s2.length !== 0) try {
        if ((await this.sendEvent(s2)).ok) for (const n4 of s2) this.events.delete(n4.eventId), this.shouldPersist = true;
      } catch (n4) {
        this.logger.warn(n4);
      }
    }), A(this, "sendEvent", async (s2) => {
      const n4 = this.getAppDomain() ? "" : "&sp=desktop";
      return await fetch(`${si2}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${Pe3}${n4}`, { method: "POST", body: JSON.stringify(s2) });
    }), A(this, "getAppDomain", () => br2().url), this.logger = X(t, this.context), this.telemetryEnabled = i3, i3 ? this.restore().then(async () => {
      await this.submit(), this.setEventListeners();
    }) : this.persist();
  }
  get storageKey() {
    return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
  }
};
var Zo3 = Object.defineProperty;
var Wi2 = Object.getOwnPropertySymbols;
var Qo3 = Object.prototype.hasOwnProperty;
var ea2 = Object.prototype.propertyIsEnumerable;
var tt2 = (r3, e2, t) => e2 in r3 ? Zo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var Hi2 = (r3, e2) => {
  for (var t in e2 || (e2 = {})) Qo3.call(e2, t) && tt2(r3, t, e2[t]);
  if (Wi2) for (var t of Wi2(e2)) ea2.call(e2, t) && tt2(r3, t, e2[t]);
  return r3;
};
var v3 = (r3, e2, t) => tt2(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Oe3 = class _Oe extends h2 {
  constructor(e2) {
    var t;
    super(e2), v3(this, "protocol", Ue3), v3(this, "version", Fe2), v3(this, "name", ge3), v3(this, "relayUrl"), v3(this, "projectId"), v3(this, "customStoragePrefix"), v3(this, "events", new import_events7.EventEmitter()), v3(this, "logger"), v3(this, "heartbeat"), v3(this, "relayer"), v3(this, "crypto"), v3(this, "storage"), v3(this, "history"), v3(this, "expirer"), v3(this, "pairing"), v3(this, "verify"), v3(this, "echoClient"), v3(this, "linkModeSupportedApps"), v3(this, "eventClient"), v3(this, "initialized", false), v3(this, "logChunkController"), v3(this, "on", (a3, c6) => this.events.on(a3, c6)), v3(this, "once", (a3, c6) => this.events.once(a3, c6)), v3(this, "off", (a3, c6) => this.events.off(a3, c6)), v3(this, "removeListener", (a3, c6) => this.events.removeListener(a3, c6)), v3(this, "dispatchEnvelope", ({ topic: a3, message: c6, sessionExists: h4 }) => {
      if (!a3 || !c6) return;
      const l6 = { topic: a3, message: c6, publishedAt: Date.now(), transportType: ee2.link_mode };
      this.relayer.onLinkMessageEvent(l6, { sessionExists: h4 });
    });
    const i3 = this.getGlobalCore(e2?.customStoragePrefix);
    if (i3) try {
      return this.customStoragePrefix = i3.customStoragePrefix, this.logger = i3.logger, this.heartbeat = i3.heartbeat, this.crypto = i3.crypto, this.history = i3.history, this.expirer = i3.expirer, this.storage = i3.storage, this.relayer = i3.relayer, this.pairing = i3.pairing, this.verify = i3.verify, this.echoClient = i3.echoClient, this.linkModeSupportedApps = i3.linkModeSupportedApps, this.eventClient = i3.eventClient, this.initialized = i3.initialized, this.logChunkController = i3.logChunkController, i3;
    } catch (a3) {
      console.warn("Failed to copy global core", a3);
    }
    this.projectId = e2?.projectId, this.relayUrl = e2?.relayUrl || Ke3, this.customStoragePrefix = e2 != null && e2.customStoragePrefix ? `:${e2.customStoragePrefix}` : "";
    const s2 = D({ level: typeof e2?.logger == "string" && e2.logger ? e2.logger : Et3.logger, name: ge3 }), { logger: n4, chunkLoggerController: o5 } = Y({ opts: s2, maxSizeInBytes: e2?.maxLogBlobSizeInBytes, loggerOverride: e2?.logger });
    this.logChunkController = o5, (t = this.logChunkController) != null && t.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {
      var a3, c6;
      (a3 = this.logChunkController) != null && a3.downloadLogsBlobInBrowser && ((c6 = this.logChunkController) == null || c6.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
    }), this.logger = X(n4, this.name), this.heartbeat = new i(), this.crypto = new wi2(this, this.logger, e2?.keychain), this.history = new Fi2(this, this.logger), this.expirer = new Mi2(this, this.logger), this.storage = e2 != null && e2.storage ? e2.storage : new h(Hi2(Hi2({}, It3), e2?.storageOptions)), this.relayer = new Ai2({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new Ui2(this, this.logger), this.verify = new Ki2(this, this.logger, this.storage), this.echoClient = new Vi2(this.projectId || "", this.logger), this.linkModeSupportedApps = [], this.eventClient = new Gi2(this, this.logger, e2?.telemetryEnabled), this.setGlobalCore(this);
  }
  static async init(e2) {
    const t = new _Oe(e2);
    await t.initialize();
    const i3 = await t.crypto.getClientId();
    return await t.storage.setItem(Ut3, i3), t;
  }
  get context() {
    return w(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async getLogsBlob() {
    var e2;
    return (e2 = this.logChunkController) == null ? void 0 : e2.logsToBlob({ clientId: await this.crypto.getClientId() });
  }
  async addLinkModeSupportedApp(e2) {
    this.linkModeSupportedApps.includes(e2) || (this.linkModeSupportedApps.push(e2), await this.storage.setItem(Be3, this.linkModeSupportedApps));
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = await this.storage.getItem(Be3) || [], this.initialized = true, this.logger.info("Core Initialization Success");
    } catch (e2) {
      throw this.logger.warn(e2, `Core Initialization Failure at epoch ${Date.now()}`), this.logger.error(e2.message), e2;
    }
  }
  getGlobalCore(e2 = "") {
    try {
      if (this.isGlobalCoreDisabled()) return;
      const t = `_walletConnectCore_${e2}`, i3 = `${t}_count`;
      return globalThis[i3] = (globalThis[i3] || 0) + 1, globalThis[i3] > 1 && console.warn(`WalletConnect Core is already initialized. This is probably a mistake and can lead to unexpected behavior. Init() was called ${globalThis[i3]} times.`), globalThis[t];
    } catch (t) {
      console.warn("Failed to get global WalletConnect core", t);
      return;
    }
  }
  setGlobalCore(e2) {
    var t;
    try {
      if (this.isGlobalCoreDisabled()) return;
      const i3 = `_walletConnectCore_${((t = e2.opts) == null ? void 0 : t.customStoragePrefix) || ""}`;
      globalThis[i3] = e2;
    } catch (i3) {
      console.warn("Failed to set global WalletConnect core", i3);
    }
  }
  isGlobalCoreDisabled() {
    try {
      return typeof process < "u" && process.env.DISABLE_GLOBAL_CORE === "true";
    } catch {
      return true;
    }
  }
};
var ta2 = Oe3;

// node_modules/@walletconnect/sign-client/dist/index.js
var import_time5 = __toESM(require_cjs());
var Ve4 = "wc";
var ke3 = 2;
var De4 = "client";
var we3 = `${Ve4}@${ke3}:${De4}:`;
var me4 = { name: De4, logger: "error", controller: false, relayUrl: "wss://relay.walletconnect.org" };
var Le3 = "WALLETCONNECT_DEEPLINK_CHOICE";
var dt3 = "proposal";
var Me4 = "Proposal expired";
var ut3 = "session";
var W4 = import_time5.SEVEN_DAYS;
var gt3 = "engine";
var P4 = { wc_sessionPropose: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1100 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1101 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1120 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1121 } }, wc_sessionSettle: { req: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1102 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1104 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1105 } }, wc_sessionExtend: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1106 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1107 } }, wc_sessionRequest: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1108 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1109 } }, wc_sessionEvent: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1110 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1111 } }, wc_sessionDelete: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1112 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1113 } }, wc_sessionPing: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1114 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1115 } }, wc_sessionAuthenticate: { req: { ttl: import_time5.ONE_HOUR, prompt: true, tag: 1116 }, res: { ttl: import_time5.ONE_HOUR, prompt: false, tag: 1117 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1118 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1119 } } };
var _e4 = { min: import_time5.FIVE_MINUTES, max: import_time5.SEVEN_DAYS };
var $2 = { idle: "IDLE", active: "ACTIVE" };
var yt3 = { eth_sendTransaction: { key: "" }, eth_sendRawTransaction: { key: "" }, wallet_sendCalls: { key: "" }, solana_signTransaction: { key: "signature" }, solana_signAllTransactions: { key: "transactions" }, solana_signAndSendTransaction: { key: "signature" }, sui_signAndExecuteTransaction: { key: "digest" }, sui_signTransaction: { key: "" }, hedera_signAndExecuteTransaction: { key: "transactionId" }, hedera_executeTransaction: { key: "transactionId" }, near_signTransaction: { key: "" }, near_signTransactions: { key: "" }, tron_signTransaction: { key: "txID" }, xrpl_signTransaction: { key: "" }, xrpl_signTransactionFor: { key: "" }, algo_signTxn: { key: "" }, sendTransfer: { key: "txid" }, stacks_stxTransfer: { key: "txId" }, polkadot_signTransaction: { key: "" }, cosmos_signDirect: { key: "" } };
var wt3 = "request";
var mt2 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"];
var _t3 = "wc";
var ft3 = "auth";
var Et4 = "authKeys";
var St4 = "pairingTopics";
var Rt4 = "requests";
var le3 = `${_t3}@${1.5}:${ft3}:`;
var pe3 = `${le3}:PUB_KEY`;
var Ns2 = Object.defineProperty;
var Os2 = Object.defineProperties;
var bs2 = Object.getOwnPropertyDescriptors;
var vt3 = Object.getOwnPropertySymbols;
var As2 = Object.prototype.hasOwnProperty;
var xs2 = Object.prototype.propertyIsEnumerable;
var $e3 = (E4, o5, t) => o5 in E4 ? Ns2(E4, o5, { enumerable: true, configurable: true, writable: true, value: t }) : E4[o5] = t;
var R3 = (E4, o5) => {
  for (var t in o5 || (o5 = {})) As2.call(o5, t) && $e3(E4, t, o5[t]);
  if (vt3) for (var t of vt3(o5)) xs2.call(o5, t) && $e3(E4, t, o5[t]);
  return E4;
};
var O3 = (E4, o5) => Os2(E4, bs2(o5));
var c4 = (E4, o5, t) => $e3(E4, typeof o5 != "symbol" ? o5 + "" : o5, t);
var Cs2 = class extends V {
  constructor(o5) {
    super(o5), c4(this, "name", gt3), c4(this, "events", new import_events8.default()), c4(this, "initialized", false), c4(this, "requestQueue", { state: $2.idle, queue: [] }), c4(this, "sessionRequestQueue", { state: $2.idle, queue: [] }), c4(this, "emittedSessionRequests", new ki({ limit: 500 })), c4(this, "requestQueueDelay", import_time5.ONE_SECOND), c4(this, "expectedPairingMethodMap", /* @__PURE__ */ new Map()), c4(this, "recentlyDeletedMap", /* @__PURE__ */ new Map()), c4(this, "recentlyDeletedLimit", 200), c4(this, "relayMessageCache", []), c4(this, "pendingSessions", /* @__PURE__ */ new Map()), c4(this, "init", async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({ methods: Object.keys(P4) }), this.initialized = true, setTimeout(async () => {
        await this.processPendingMessageEvents(), this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
      }, (0, import_time5.toMiliseconds)(this.requestQueueDelay)));
    }), c4(this, "connect", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      const e2 = O3(R3({}, t), { requiredNamespaces: t.requiredNamespaces || {}, optionalNamespaces: t.optionalNamespaces || {} });
      await this.isValidConnect(e2), e2.optionalNamespaces = qa(e2.requiredNamespaces, e2.optionalNamespaces), e2.requiredNamespaces = {};
      const { pairingTopic: s2, requiredNamespaces: i3, optionalNamespaces: r3, sessionProperties: n4, scopedProperties: a3, relays: l6 } = e2;
      let p4 = s2, h4, u2 = false;
      try {
        if (p4) {
          const T4 = this.client.core.pairing.pairings.get(p4);
          this.client.logger.warn("connect() with existing pairing topic is deprecated and will be removed in the next major release."), u2 = T4.active;
        }
      } catch (T4) {
        throw this.client.logger.error(`connect() -> pairing.get(${p4}) failed`), T4;
      }
      if (!p4 || !u2) {
        const { topic: T4, uri: K5 } = await this.client.core.pairing.create({ internal: { skipSubscribe: true } });
        p4 = T4, h4 = K5;
      }
      if (!p4) {
        const { message: T4 } = Bt2("NO_MATCHING_KEY", `connect() pairing topic: ${p4}`);
        throw new Error(T4);
      }
      const d7 = await this.client.core.crypto.generateKeyPair(), y4 = P4.wc_sessionPropose.req.ttl || import_time5.FIVE_MINUTES, w5 = Ni(y4), m4 = O3(R3(R3({ requiredNamespaces: i3, optionalNamespaces: r3, relays: l6 ?? [{ protocol: Nt3 }], proposer: { publicKey: d7, metadata: this.client.metadata }, expiryTimestamp: w5, pairingTopic: p4 }, n4 && { sessionProperties: n4 }), a3 && { scopedProperties: a3 }), { id: payloadId() }), S4 = _i("session_connect", m4.id), { reject: _3, resolve: b4, done: V3 } = Bi(y4, Me4), I2 = ({ id: T4 }) => {
        T4 === m4.id && (this.client.events.off("proposal_expire", I2), this.pendingSessions.delete(m4.id), this.events.emit(S4, { error: { message: Me4, code: 0 } }));
      };
      return this.client.events.on("proposal_expire", I2), this.events.once(S4, ({ error: T4, session: K5 }) => {
        this.client.events.off("proposal_expire", I2), T4 ? _3(T4) : K5 && b4(K5);
      }), await this.sendProposeSession({ proposal: m4, publishOpts: { internal: { throwOnFailedPublish: true }, tvf: { correlationId: m4.id } } }), await this.setProposal(m4.id, m4), { uri: h4, approval: V3 };
    }), c4(this, "pair", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        return await this.client.core.pairing.pair(t);
      } catch (e2) {
        throw this.client.logger.error("pair() failed"), e2;
      }
    }), c4(this, "approve", async (t) => {
      var e2, s2, i3;
      const r3 = this.client.core.eventClient.createEvent({ properties: { topic: (e2 = t?.id) == null ? void 0 : e2.toString(), trace: [rr3.session_approve_started] } });
      try {
        this.isInitialized(), await this.confirmOnlineStateOrThrow();
      } catch (N12) {
        throw r3.setError(nr3.no_internet_connection), N12;
      }
      try {
        await this.isValidProposalId(t?.id);
      } catch (N12) {
        throw this.client.logger.error(`approve() -> proposal.get(${t?.id}) failed`), r3.setError(nr3.proposal_not_found), N12;
      }
      try {
        await this.isValidApprove(t);
      } catch (N12) {
        throw this.client.logger.error("approve() -> isValidApprove() failed"), r3.setError(nr3.session_approve_namespace_validation_failure), N12;
      }
      const { id: n4, relayProtocol: a3, namespaces: l6, sessionProperties: p4, scopedProperties: h4, sessionConfig: u2 } = t, d7 = this.client.proposal.get(n4);
      this.client.core.eventClient.deleteEvent({ eventId: r3.eventId });
      const { pairingTopic: y4, proposer: w5, requiredNamespaces: m4, optionalNamespaces: S4 } = d7;
      let _3 = (s2 = this.client.core.eventClient) == null ? void 0 : s2.getEvent({ topic: y4 });
      _3 || (_3 = (i3 = this.client.core.eventClient) == null ? void 0 : i3.createEvent({ type: rr3.session_approve_started, properties: { topic: y4, trace: [rr3.session_approve_started, rr3.session_namespaces_validation_success] } }));
      const b4 = await this.client.core.crypto.generateKeyPair(), V3 = w5.publicKey, I2 = await this.client.core.crypto.generateSharedKey(b4, V3), T4 = R3(R3(R3({ relay: { protocol: a3 ?? "irn" }, namespaces: l6, controller: { publicKey: b4, metadata: this.client.metadata }, expiry: Ni(W4) }, p4 && { sessionProperties: p4 }), h4 && { scopedProperties: h4 }), u2 && { sessionConfig: u2 }), K5 = ee2.relay;
      _3.addTrace(rr3.subscribing_session_topic);
      try {
        await this.client.core.relayer.subscribe(I2, { transportType: K5, internal: { skipSubscribe: true } });
      } catch (N12) {
        throw _3.setError(nr3.subscribe_session_topic_failure), N12;
      }
      _3.addTrace(rr3.subscribe_session_topic_success);
      const Ee4 = O3(R3({}, T4), { topic: I2, requiredNamespaces: m4, optionalNamespaces: S4, pairingTopic: y4, acknowledged: false, self: T4.controller, peer: { publicKey: w5.publicKey, metadata: w5.metadata }, controller: b4, transportType: ee2.relay });
      await this.client.session.set(I2, Ee4), _3.addTrace(rr3.store_session);
      try {
        await this.sendApproveSession({ sessionTopic: I2, proposal: d7, pairingProposalResponse: { relay: { protocol: a3 ?? "irn" }, responderPublicKey: b4 }, sessionSettleRequest: T4, publishOpts: { internal: { throwOnFailedPublish: true }, tvf: { correlationId: n4 } } }), _3.addTrace(rr3.session_approve_publish_success);
      } catch (N12) {
        throw this.client.logger.error(N12), this.client.session.delete(I2, zt2("USER_DISCONNECTED")), await this.client.core.relayer.unsubscribe(I2), N12;
      }
      return this.client.core.eventClient.deleteEvent({ eventId: _3.eventId }), await this.client.core.pairing.updateMetadata({ topic: y4, metadata: w5.metadata }), await this.deleteProposal(n4), await this.client.core.pairing.activate({ topic: y4 }), await this.setExpiry(I2, Ni(W4)), { topic: I2, acknowledged: () => Promise.resolve(this.client.session.get(I2)) };
    }), c4(this, "reject", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidReject(t);
      } catch (r3) {
        throw this.client.logger.error("reject() -> isValidReject() failed"), r3;
      }
      const { id: e2, reason: s2 } = t;
      let i3;
      try {
        i3 = this.client.proposal.get(e2).pairingTopic;
      } catch (r3) {
        throw this.client.logger.error(`reject() -> proposal.get(${e2}) failed`), r3;
      }
      i3 && await this.sendError({ id: e2, topic: i3, error: s2, rpcOpts: P4.wc_sessionPropose.reject }), await this.deleteProposal(e2);
    }), c4(this, "update", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidUpdate(t);
      } catch (h4) {
        throw this.client.logger.error("update() -> isValidUpdate() failed"), h4;
      }
      const { topic: e2, namespaces: s2 } = t, { done: i3, resolve: r3, reject: n4 } = Bi(), a3 = payloadId(), l6 = getBigIntRpcId().toString(), p4 = this.client.session.get(e2).namespaces;
      return this.events.once(_i("session_update", a3), ({ error: h4 }) => {
        h4 ? n4(h4) : r3();
      }), await this.client.session.update(e2, { namespaces: s2 }), await this.sendRequest({ topic: e2, method: "wc_sessionUpdate", params: { namespaces: s2 }, throwOnFailedPublish: true, clientRpcId: a3, relayRpcId: l6 }).catch((h4) => {
        this.client.logger.error(h4), this.client.session.update(e2, { namespaces: p4 }), n4(h4);
      }), { acknowledged: i3 };
    }), c4(this, "extend", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidExtend(t);
      } catch (a3) {
        throw this.client.logger.error("extend() -> isValidExtend() failed"), a3;
      }
      const { topic: e2 } = t, s2 = payloadId(), { done: i3, resolve: r3, reject: n4 } = Bi();
      return this.events.once(_i("session_extend", s2), ({ error: a3 }) => {
        a3 ? n4(a3) : r3();
      }), await this.setExpiry(e2, Ni(W4)), this.sendRequest({ topic: e2, method: "wc_sessionExtend", params: {}, clientRpcId: s2, throwOnFailedPublish: true }).catch((a3) => {
        n4(a3);
      }), { acknowledged: i3 };
    }), c4(this, "request", async (t) => {
      this.isInitialized();
      try {
        await this.isValidRequest(t);
      } catch (m4) {
        throw this.client.logger.error("request() -> isValidRequest() failed"), m4;
      }
      const { chainId: e2, request: s2, topic: i3, expiry: r3 = P4.wc_sessionRequest.req.ttl } = t, n4 = this.client.session.get(i3);
      n4?.transportType === ee2.relay && await this.confirmOnlineStateOrThrow();
      const a3 = payloadId(), l6 = getBigIntRpcId().toString(), { done: p4, resolve: h4, reject: u2 } = Bi(r3, "Request expired. Please try again.");
      this.events.once(_i("session_request", a3), ({ error: m4, result: S4 }) => {
        m4 ? u2(m4) : h4(S4);
      });
      const d7 = "wc_sessionRequest", y4 = this.getAppLinkIfEnabled(n4.peer.metadata, n4.transportType);
      if (y4) return await this.sendRequest({ clientRpcId: a3, relayRpcId: l6, topic: i3, method: d7, params: { request: O3(R3({}, s2), { expiryTimestamp: Ni(r3) }), chainId: e2 }, expiry: r3, throwOnFailedPublish: true, appLink: y4 }).catch((m4) => u2(m4)), this.client.events.emit("session_request_sent", { topic: i3, request: s2, chainId: e2, id: a3 }), await p4();
      const w5 = { request: O3(R3({}, s2), { expiryTimestamp: Ni(r3) }), chainId: e2 };
      return await Promise.all([new Promise(async (m4) => {
        await this.sendRequest({ clientRpcId: a3, relayRpcId: l6, topic: i3, method: d7, params: w5, expiry: r3, throwOnFailedPublish: true, tvf: this.getTVFParams(a3, w5) }).catch((S4) => u2(S4)), this.client.events.emit("session_request_sent", { topic: i3, request: s2, chainId: e2, id: a3 }), m4();
      }), new Promise(async (m4) => {
        var S4;
        if (!((S4 = n4.sessionConfig) != null && S4.disableDeepLink)) {
          const _3 = await $i(this.client.core.storage, Le3);
          await Ri({ id: a3, topic: i3, wcDeepLink: _3 });
        }
        m4();
      }), p4()]).then((m4) => m4[2]);
    }), c4(this, "respond", async (t) => {
      var e2, s2;
      this.isInitialized();
      const i3 = this.client.core.eventClient.createEvent({ properties: { topic: t?.topic || ((s2 = (e2 = t?.response) == null ? void 0 : e2.id) == null ? void 0 : s2.toString()), trace: [rr3.session_request_response_started] } });
      try {
        await this.isValidRespond(t);
      } catch (h4) {
        throw i3.addTrace(h4?.message), i3.setError(nr3.session_request_response_validation_failure), h4;
      }
      i3.addTrace(rr3.session_request_response_validation_success);
      const { topic: r3, response: n4 } = t, { id: a3 } = n4, l6 = this.client.session.get(r3);
      l6.transportType === ee2.relay && await this.confirmOnlineStateOrThrow();
      const p4 = this.getAppLinkIfEnabled(l6.peer.metadata, l6.transportType);
      try {
        i3.addTrace(rr3.session_request_response_publish_started), isJsonRpcResult(n4) ? await this.sendResult({ id: a3, topic: r3, result: n4.result, throwOnFailedPublish: true, appLink: p4 }) : isJsonRpcError(n4) && await this.sendError({ id: a3, topic: r3, error: n4.error, appLink: p4 }), this.cleanupAfterResponse(t);
      } catch (h4) {
        throw i3.addTrace(h4?.message), i3.setError(nr3.session_request_response_publish_failure), h4;
      }
    }), c4(this, "ping", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidPing(t);
      } catch (s2) {
        throw this.client.logger.error("ping() -> isValidPing() failed"), s2;
      }
      const { topic: e2 } = t;
      if (this.client.session.keys.includes(e2)) {
        const s2 = payloadId(), i3 = getBigIntRpcId().toString(), { done: r3, resolve: n4, reject: a3 } = Bi();
        this.events.once(_i("session_ping", s2), ({ error: l6 }) => {
          l6 ? a3(l6) : n4();
        }), await Promise.all([this.sendRequest({ topic: e2, method: "wc_sessionPing", params: {}, throwOnFailedPublish: true, clientRpcId: s2, relayRpcId: i3 }), r3()]);
      } else this.client.core.pairing.pairings.keys.includes(e2) && (this.client.logger.warn("ping() on pairing topic is deprecated and will be removed in the next major release."), await this.client.core.pairing.ping({ topic: e2 }));
    }), c4(this, "emit", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(t);
      const { topic: e2, event: s2, chainId: i3 } = t, r3 = getBigIntRpcId().toString(), n4 = payloadId();
      await this.sendRequest({ topic: e2, method: "wc_sessionEvent", params: { event: s2, chainId: i3 }, throwOnFailedPublish: true, relayRpcId: r3, clientRpcId: n4 });
    }), c4(this, "disconnect", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(t);
      const { topic: e2 } = t;
      if (this.client.session.keys.includes(e2)) await this.sendRequest({ topic: e2, method: "wc_sessionDelete", params: zt2("USER_DISCONNECTED"), throwOnFailedPublish: true }), await this.deleteSession({ topic: e2, emitEvent: false });
      else if (this.client.core.pairing.pairings.keys.includes(e2)) await this.client.core.pairing.disconnect({ topic: e2 });
      else {
        const { message: s2 } = Bt2("MISMATCHED_TOPIC", `Session or pairing topic not found: ${e2}`);
        throw new Error(s2);
      }
    }), c4(this, "find", (t) => (this.isInitialized(), this.client.session.getAll().filter((e2) => Fa(e2, t)))), c4(this, "getPendingSessionRequests", () => this.client.pendingRequest.getAll()), c4(this, "authenticate", async (t, e2) => {
      var s2;
      this.isInitialized(), this.isValidAuthenticate(t);
      const i3 = e2 && this.client.core.linkModeSupportedApps.includes(e2) && ((s2 = this.client.metadata.redirect) == null ? void 0 : s2.linkMode), r3 = i3 ? ee2.link_mode : ee2.relay;
      r3 === ee2.relay && await this.confirmOnlineStateOrThrow();
      const { chains: n4, statement: a3 = "", uri: l6, domain: p4, nonce: h4, type: u2, exp: d7, nbf: y4, methods: w5 = [], expiry: m4 } = t, S4 = [...t.resources || []], { topic: _3, uri: b4 } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r3 });
      this.client.logger.info({ message: "Generated new pairing", pairing: { topic: _3, uri: b4 } });
      const V3 = await this.client.core.crypto.generateKeyPair(), I2 = ha(V3);
      if (await Promise.all([this.client.auth.authKeys.set(pe3, { responseTopic: I2, publicKey: V3 }), this.client.auth.pairingTopics.set(I2, { topic: I2, pairingTopic: _3 })]), await this.client.core.relayer.subscribe(I2, { transportType: r3 }), this.client.logger.info(`sending request to new pairing topic: ${_3}`), w5.length > 0) {
        const { namespace: A3 } = Je2(n4[0]);
        let k4 = Kc(A3, "request", w5);
        je2(S4) && (k4 = qc(k4, S4.pop())), S4.push(k4);
      }
      const T4 = m4 && m4 > P4.wc_sessionAuthenticate.req.ttl ? m4 : P4.wc_sessionAuthenticate.req.ttl, K5 = { authPayload: { type: u2 ?? "caip122", chains: n4, statement: a3, aud: l6, domain: p4, version: "1", nonce: h4, iat: (/* @__PURE__ */ new Date()).toISOString(), exp: d7, nbf: y4, resources: S4 }, requester: { publicKey: V3, metadata: this.client.metadata }, expiryTimestamp: Ni(T4) }, Ee4 = { eip155: { chains: n4, methods: [.../* @__PURE__ */ new Set(["personal_sign", ...w5])], events: ["chainChanged", "accountsChanged"] } }, N12 = { requiredNamespaces: {}, optionalNamespaces: Ee4, relays: [{ protocol: "irn" }], pairingTopic: _3, proposer: { publicKey: V3, metadata: this.client.metadata }, expiryTimestamp: Ni(P4.wc_sessionPropose.req.ttl), id: payloadId() }, { done: Tt5, resolve: Ue5, reject: Se4 } = Bi(T4, "Request expired"), ie4 = payloadId(), he5 = _i("session_connect", N12.id), Re4 = _i("session_request", ie4), de4 = async ({ error: A3, session: k4 }) => {
        this.events.off(Re4, ve5), A3 ? Se4(A3) : k4 && Ue5({ session: k4 });
      }, ve5 = async (A3) => {
        var k4, Ge5, je3;
        if (await this.deletePendingAuthRequest(ie4, { message: "fulfilled", code: 0 }), A3.error) {
          const ne3 = zt2("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
          return A3.error.code === ne3.code ? void 0 : (this.events.off(he5, de4), Se4(A3.error.message));
        }
        await this.deleteProposal(N12.id), this.events.off(he5, de4);
        const { cacaos: Fe4, responder: H3 } = A3.result, Te4 = [], Qe4 = [];
        for (const ne3 of Fe4) {
          await Pc({ cacao: ne3, projectId: this.client.core.projectId }) || (this.client.logger.error(ne3, "Signature verification failed"), Se4(zt2("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
          const { p: qe4 } = ne3, Pe5 = je2(qe4.resources), He5 = [to2(qe4.iss)], qt5 = bn2(qe4.iss);
          if (Pe5) {
            const Ne3 = Fc(Pe5), Pt5 = Zc(Pe5);
            Te4.push(...Ne3), He5.push(...Pt5);
          }
          for (const Ne3 of He5) Qe4.push(`${Ne3}:${qt5}`);
        }
        const re4 = await this.client.core.crypto.generateSharedKey(V3, H3.publicKey);
        let ue2;
        Te4.length > 0 && (ue2 = { topic: re4, acknowledged: true, self: { publicKey: V3, metadata: this.client.metadata }, peer: H3, controller: H3.publicKey, expiry: Ni(W4), requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: _3, namespaces: Ka([...new Set(Te4)], [...new Set(Qe4)]), transportType: r3 }, await this.client.core.relayer.subscribe(re4, { transportType: r3 }), await this.client.session.set(re4, ue2), _3 && await this.client.core.pairing.updateMetadata({ topic: _3, metadata: H3.metadata }), ue2 = this.client.session.get(re4)), (k4 = this.client.metadata.redirect) != null && k4.linkMode && (Ge5 = H3.metadata.redirect) != null && Ge5.linkMode && (je3 = H3.metadata.redirect) != null && je3.universal && e2 && (this.client.core.addLinkModeSupportedApp(H3.metadata.redirect.universal), this.client.session.update(re4, { transportType: ee2.link_mode })), Ue5({ auths: Fe4, session: ue2 });
      };
      this.events.once(he5, de4), this.events.once(Re4, ve5);
      let Ie4;
      try {
        if (i3) {
          const A3 = formatJsonRpcRequest("wc_sessionAuthenticate", K5, ie4);
          this.client.core.history.set(_3, A3);
          const k4 = await this.client.core.crypto.encode("", A3, { type: we2, encoding: Ge2 });
          Ie4 = Ta(e2, _3, k4);
        } else await Promise.all([this.sendRequest({ topic: _3, method: "wc_sessionAuthenticate", params: K5, expiry: t.expiry, throwOnFailedPublish: true, clientRpcId: ie4 }), this.sendRequest({ topic: _3, method: "wc_sessionPropose", params: N12, expiry: P4.wc_sessionPropose.req.ttl, throwOnFailedPublish: true, clientRpcId: N12.id })]);
      } catch (A3) {
        throw this.events.off(he5, de4), this.events.off(Re4, ve5), A3;
      }
      return await this.setProposal(N12.id, N12), await this.setAuthRequest(ie4, { request: O3(R3({}, K5), { verifyContext: {} }), pairingTopic: _3, transportType: r3 }), { uri: Ie4 ?? b4, response: Tt5 };
    }), c4(this, "approveSessionAuthenticate", async (t) => {
      const { id: e2, auths: s2 } = t, i3 = this.client.core.eventClient.createEvent({ properties: { topic: e2.toString(), trace: [or3.authenticated_session_approve_started] } });
      try {
        this.isInitialized();
      } catch (m4) {
        throw i3.setError(ar3.no_internet_connection), m4;
      }
      const r3 = this.getPendingAuthRequest(e2);
      if (!r3) throw i3.setError(ar3.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${e2}`);
      const n4 = r3.transportType || ee2.relay;
      n4 === ee2.relay && await this.confirmOnlineStateOrThrow();
      const a3 = r3.requester.publicKey, l6 = await this.client.core.crypto.generateKeyPair(), p4 = ha(a3), h4 = { type: ie, receiverPublicKey: a3, senderPublicKey: l6 }, u2 = [], d7 = [];
      for (const m4 of s2) {
        if (!await Pc({ cacao: m4, projectId: this.client.core.projectId })) {
          i3.setError(ar3.invalid_cacao);
          const I2 = zt2("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
          throw await this.sendError({ id: e2, topic: p4, error: I2, encodeOpts: h4 }), new Error(I2.message);
        }
        i3.addTrace(or3.cacaos_verified);
        const { p: S4 } = m4, _3 = je2(S4.resources), b4 = [to2(S4.iss)], V3 = bn2(S4.iss);
        if (_3) {
          const I2 = Fc(_3), T4 = Zc(_3);
          u2.push(...I2), b4.push(...T4);
        }
        for (const I2 of b4) d7.push(`${I2}:${V3}`);
      }
      const y4 = await this.client.core.crypto.generateSharedKey(l6, a3);
      i3.addTrace(or3.create_authenticated_session_topic);
      let w5;
      if (u2?.length > 0) {
        w5 = { topic: y4, acknowledged: true, self: { publicKey: l6, metadata: this.client.metadata }, peer: { publicKey: a3, metadata: r3.requester.metadata }, controller: a3, expiry: Ni(W4), authentication: s2, requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: r3.pairingTopic, namespaces: Ka([...new Set(u2)], [...new Set(d7)]), transportType: n4 }, i3.addTrace(or3.subscribing_authenticated_session_topic);
        try {
          await this.client.core.relayer.subscribe(y4, { transportType: n4 });
        } catch (m4) {
          throw i3.setError(ar3.subscribe_authenticated_session_topic_failure), m4;
        }
        i3.addTrace(or3.subscribe_authenticated_session_topic_success), await this.client.session.set(y4, w5), i3.addTrace(or3.store_authenticated_session), await this.client.core.pairing.updateMetadata({ topic: r3.pairingTopic, metadata: r3.requester.metadata });
      }
      i3.addTrace(or3.publishing_authenticated_session_approve);
      try {
        await this.sendResult({ topic: p4, id: e2, result: { cacaos: s2, responder: { publicKey: l6, metadata: this.client.metadata } }, encodeOpts: h4, throwOnFailedPublish: true, appLink: this.getAppLinkIfEnabled(r3.requester.metadata, n4) });
      } catch (m4) {
        throw i3.setError(ar3.authenticated_session_approve_publish_failure), m4;
      }
      return await this.client.auth.requests.delete(e2, { message: "fulfilled", code: 0 }), await this.client.core.pairing.activate({ topic: r3.pairingTopic }), this.client.core.eventClient.deleteEvent({ eventId: i3.eventId }), { session: w5 };
    }), c4(this, "rejectSessionAuthenticate", async (t) => {
      this.isInitialized();
      const { id: e2, reason: s2 } = t, i3 = this.getPendingAuthRequest(e2);
      if (!i3) throw new Error(`Could not find pending auth request with id ${e2}`);
      i3.transportType === ee2.relay && await this.confirmOnlineStateOrThrow();
      const r3 = i3.requester.publicKey, n4 = await this.client.core.crypto.generateKeyPair(), a3 = ha(r3), l6 = { type: ie, receiverPublicKey: r3, senderPublicKey: n4 };
      await this.sendError({ id: e2, topic: a3, error: s2, encodeOpts: l6, rpcOpts: P4.wc_sessionAuthenticate.reject, appLink: this.getAppLinkIfEnabled(i3.requester.metadata, i3.transportType) }), await this.client.auth.requests.delete(e2, { message: "rejected", code: 0 }), await this.deleteProposal(e2);
    }), c4(this, "formatAuthMessage", (t) => {
      this.isInitialized();
      const { request: e2, iss: s2 } = t;
      return eo2(e2, s2);
    }), c4(this, "processRelayMessageCache", () => {
      setTimeout(async () => {
        if (this.relayMessageCache.length !== 0) for (; this.relayMessageCache.length > 0; ) try {
          const t = this.relayMessageCache.shift();
          t && await this.onRelayMessage(t);
        } catch (t) {
          this.client.logger.error(t);
        }
      }, 50);
    }), c4(this, "cleanupDuplicatePairings", async (t) => {
      if (t.pairingTopic) try {
        const e2 = this.client.core.pairing.pairings.get(t.pairingTopic), s2 = this.client.core.pairing.pairings.getAll().filter((i3) => {
          var r3, n4;
          return ((r3 = i3.peerMetadata) == null ? void 0 : r3.url) && ((n4 = i3.peerMetadata) == null ? void 0 : n4.url) === t.peer.metadata.url && i3.topic && i3.topic !== e2.topic;
        });
        if (s2.length === 0) return;
        this.client.logger.info(`Cleaning up ${s2.length} duplicate pairing(s)`), await Promise.all(s2.map((i3) => this.client.core.pairing.disconnect({ topic: i3.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
      } catch (e2) {
        this.client.logger.error(e2);
      }
    }), c4(this, "deleteSession", async (t) => {
      var e2;
      const { topic: s2, expirerHasDeleted: i3 = false, emitEvent: r3 = true, id: n4 = 0 } = t, { self: a3 } = this.client.session.get(s2);
      await this.client.core.relayer.unsubscribe(s2), await this.client.session.delete(s2, zt2("USER_DISCONNECTED")), this.addToRecentlyDeleted(s2, "session"), this.client.core.crypto.keychain.has(a3.publicKey) && await this.client.core.crypto.deleteKeyPair(a3.publicKey), this.client.core.crypto.keychain.has(s2) && await this.client.core.crypto.deleteSymKey(s2), i3 || this.client.core.expirer.del(s2), this.client.core.storage.removeItem(Le3).catch((l6) => this.client.logger.warn(l6)), this.getPendingSessionRequests().forEach((l6) => {
        l6.topic === s2 && this.deletePendingSessionRequest(l6.id, zt2("USER_DISCONNECTED"));
      }), s2 === ((e2 = this.sessionRequestQueue.queue[0]) == null ? void 0 : e2.topic) && (this.sessionRequestQueue.state = $2.idle), r3 && this.client.events.emit("session_delete", { id: n4, topic: s2 });
    }), c4(this, "deleteProposal", async (t, e2) => {
      if (e2) try {
        const s2 = this.client.proposal.get(t), i3 = this.client.core.eventClient.getEvent({ topic: s2.pairingTopic });
        i3?.setError(nr3.proposal_expired);
      } catch {
      }
      await Promise.all([this.client.proposal.delete(t, zt2("USER_DISCONNECTED")), e2 ? Promise.resolve() : this.client.core.expirer.del(t)]), this.addToRecentlyDeleted(t, "proposal");
    }), c4(this, "deletePendingSessionRequest", async (t, e2, s2 = false) => {
      await Promise.all([this.client.pendingRequest.delete(t, e2), s2 ? Promise.resolve() : this.client.core.expirer.del(t)]), this.addToRecentlyDeleted(t, "request"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i3) => i3.id !== t), s2 && (this.sessionRequestQueue.state = $2.idle, this.client.events.emit("session_request_expire", { id: t }));
    }), c4(this, "deletePendingAuthRequest", async (t, e2, s2 = false) => {
      await Promise.all([this.client.auth.requests.delete(t, e2), s2 ? Promise.resolve() : this.client.core.expirer.del(t)]);
    }), c4(this, "setExpiry", async (t, e2) => {
      this.client.session.keys.includes(t) && (this.client.core.expirer.set(t, e2), await this.client.session.update(t, { expiry: e2 }));
    }), c4(this, "setProposal", async (t, e2) => {
      this.client.core.expirer.set(t, Ni(P4.wc_sessionPropose.req.ttl)), await this.client.proposal.set(t, e2);
    }), c4(this, "setAuthRequest", async (t, e2) => {
      const { request: s2, pairingTopic: i3, transportType: r3 = ee2.relay } = e2;
      this.client.core.expirer.set(t, s2.expiryTimestamp), await this.client.auth.requests.set(t, { authPayload: s2.authPayload, requester: s2.requester, expiryTimestamp: s2.expiryTimestamp, id: t, pairingTopic: i3, verifyContext: s2.verifyContext, transportType: r3 });
    }), c4(this, "setPendingSessionRequest", async (t) => {
      const { id: e2, topic: s2, params: i3, verifyContext: r3 } = t, n4 = i3.request.expiryTimestamp || Ni(P4.wc_sessionRequest.req.ttl);
      this.client.core.expirer.set(e2, n4), await this.client.pendingRequest.set(e2, { id: e2, topic: s2, params: i3, verifyContext: r3 });
    }), c4(this, "sendRequest", async (t) => {
      const { topic: e2, method: s2, params: i3, expiry: r3, relayRpcId: n4, clientRpcId: a3, throwOnFailedPublish: l6, appLink: p4, tvf: h4, publishOpts: u2 = {} } = t, d7 = formatJsonRpcRequest(s2, i3, a3);
      let y4;
      const w5 = !!p4;
      try {
        const _3 = w5 ? Ge2 : oe;
        y4 = await this.client.core.crypto.encode(e2, d7, { encoding: _3 });
      } catch (_3) {
        throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${e2} failed`), _3;
      }
      let m4;
      if (mt2.includes(s2)) {
        const _3 = pa(JSON.stringify(d7)), b4 = pa(y4);
        m4 = await this.client.core.verify.register({ id: b4, decryptedId: _3 });
      }
      const S4 = R3(R3({}, P4[s2].req), u2);
      if (S4.attestation = m4, r3 && (S4.ttl = r3), n4 && (S4.id = n4), this.client.core.history.set(e2, d7), w5) {
        const _3 = Ta(p4, e2, y4);
        await global.Linking.openURL(_3, this.client.name);
      } else S4.tvf = O3(R3({}, h4), { correlationId: d7.id }), l6 ? (S4.internal = O3(R3({}, S4.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(e2, y4, S4)) : this.client.core.relayer.publish(e2, y4, S4).catch((_3) => this.client.logger.error(_3));
      return d7.id;
    }), c4(this, "sendProposeSession", async (t) => {
      const { proposal: e2, publishOpts: s2 } = t, i3 = formatJsonRpcRequest("wc_sessionPropose", e2, e2.id);
      this.client.core.history.set(e2.pairingTopic, i3);
      const r3 = await this.client.core.crypto.encode(e2.pairingTopic, i3, { encoding: oe }), n4 = pa(JSON.stringify(i3)), a3 = pa(r3), l6 = await this.client.core.verify.register({ id: a3, decryptedId: n4 });
      await this.client.core.relayer.publishCustom({ payload: { pairingTopic: e2.pairingTopic, sessionProposal: r3 }, opts: O3(R3({}, s2), { publishMethod: "wc_proposeSession", attestation: l6 }) });
    }), c4(this, "sendApproveSession", async (t) => {
      const { sessionTopic: e2, pairingProposalResponse: s2, proposal: i3, sessionSettleRequest: r3, publishOpts: n4 } = t, a3 = formatJsonRpcResult(i3.id, s2), l6 = await this.client.core.crypto.encode(i3.pairingTopic, a3, { encoding: oe }), p4 = formatJsonRpcRequest("wc_sessionSettle", r3, n4?.id), h4 = await this.client.core.crypto.encode(e2, p4, { encoding: oe });
      this.client.core.history.set(e2, p4), await this.client.core.relayer.publishCustom({ payload: { sessionTopic: e2, pairingTopic: i3.pairingTopic, sessionProposalResponse: l6, sessionSettlementRequest: h4 }, opts: O3(R3({}, n4), { publishMethod: "wc_approveSession" }) });
    }), c4(this, "sendResult", async (t) => {
      const { id: e2, topic: s2, result: i3, throwOnFailedPublish: r3, encodeOpts: n4, appLink: a3 } = t, l6 = formatJsonRpcResult(e2, i3);
      let p4;
      const h4 = a3 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const y4 = h4 ? Ge2 : oe;
        p4 = await this.client.core.crypto.encode(s2, l6, O3(R3({}, n4 || {}), { encoding: y4 }));
      } catch (y4) {
        throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s2} failed`), y4;
      }
      let u2, d7;
      try {
        u2 = await this.client.core.history.get(s2, e2);
        const y4 = u2.request;
        try {
          d7 = this.getTVFParams(e2, y4.params, i3);
        } catch (w5) {
          this.client.logger.warn(`sendResult() -> getTVFParams() failed: ${w5?.message}`);
        }
      } catch (y4) {
        throw this.client.logger.error(`sendResult() -> history.get(${s2}, ${e2}) failed`), y4;
      }
      if (h4) {
        const y4 = Ta(a3, s2, p4);
        await global.Linking.openURL(y4, this.client.name);
      } else {
        const y4 = u2.request.method, w5 = P4[y4].res;
        w5.tvf = O3(R3({}, d7), { correlationId: e2 }), r3 ? (w5.internal = O3(R3({}, w5.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(s2, p4, w5)) : this.client.core.relayer.publish(s2, p4, w5).catch((m4) => this.client.logger.error(m4));
      }
      await this.client.core.history.resolve(l6);
    }), c4(this, "sendError", async (t) => {
      const { id: e2, topic: s2, error: i3, encodeOpts: r3, rpcOpts: n4, appLink: a3 } = t, l6 = formatJsonRpcError(e2, i3);
      let p4;
      const h4 = a3 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const d7 = h4 ? Ge2 : oe;
        p4 = await this.client.core.crypto.encode(s2, l6, O3(R3({}, r3 || {}), { encoding: d7 }));
      } catch (d7) {
        throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s2} failed`), d7;
      }
      let u2;
      try {
        u2 = await this.client.core.history.get(s2, e2);
      } catch (d7) {
        throw this.client.logger.error(`sendError() -> history.get(${s2}, ${e2}) failed`), d7;
      }
      if (h4) {
        const d7 = Ta(a3, s2, p4);
        await global.Linking.openURL(d7, this.client.name);
      } else {
        const d7 = u2.request.method, y4 = n4 || P4[d7].res;
        this.client.core.relayer.publish(s2, p4, y4);
      }
      await this.client.core.history.resolve(l6);
    }), c4(this, "cleanup", async () => {
      const t = [], e2 = [];
      this.client.session.getAll().forEach((s2) => {
        let i3 = false;
        Ui(s2.expiry) && (i3 = true), this.client.core.crypto.keychain.has(s2.topic) || (i3 = true), i3 && t.push(s2.topic);
      }), this.client.proposal.getAll().forEach((s2) => {
        Ui(s2.expiryTimestamp) && e2.push(s2.id);
      }), await Promise.all([...t.map((s2) => this.deleteSession({ topic: s2 })), ...e2.map((s2) => this.deleteProposal(s2))]);
    }), c4(this, "onProviderMessageEvent", async (t) => {
      !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(t) : await this.onRelayMessage(t);
    }), c4(this, "onRelayEventRequest", async (t) => {
      this.requestQueue.queue.push(t), await this.processRequestsQueue();
    }), c4(this, "processRequestsQueue", async () => {
      if (this.requestQueue.state === $2.active) {
        this.client.logger.info("Request queue already active, skipping...");
        return;
      }
      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
        this.requestQueue.state = $2.active;
        const t = this.requestQueue.queue.shift();
        if (t) try {
          await this.processRequest(t);
        } catch (e2) {
          this.client.logger.warn(e2);
        }
      }
      this.requestQueue.state = $2.idle;
    }), c4(this, "processRequest", async (t) => {
      const { topic: e2, payload: s2, attestation: i3, transportType: r3, encryptedId: n4 } = t, a3 = s2.method;
      if (!this.shouldIgnorePairingRequest({ topic: e2, requestMethod: a3 })) switch (a3) {
        case "wc_sessionPropose":
          return await this.onSessionProposeRequest({ topic: e2, payload: s2, attestation: i3, encryptedId: n4 });
        case "wc_sessionSettle":
          return await this.onSessionSettleRequest(e2, s2);
        case "wc_sessionUpdate":
          return await this.onSessionUpdateRequest(e2, s2);
        case "wc_sessionExtend":
          return await this.onSessionExtendRequest(e2, s2);
        case "wc_sessionPing":
          return await this.onSessionPingRequest(e2, s2);
        case "wc_sessionDelete":
          return await this.onSessionDeleteRequest(e2, s2);
        case "wc_sessionRequest":
          return await this.onSessionRequest({ topic: e2, payload: s2, attestation: i3, encryptedId: n4, transportType: r3 });
        case "wc_sessionEvent":
          return await this.onSessionEventRequest(e2, s2);
        case "wc_sessionAuthenticate":
          return await this.onSessionAuthenticateRequest({ topic: e2, payload: s2, attestation: i3, encryptedId: n4, transportType: r3 });
        default:
          return this.client.logger.info(`Unsupported request method ${a3}`);
      }
    }), c4(this, "onRelayEventResponse", async (t) => {
      const { topic: e2, payload: s2, transportType: i3 } = t, r3 = (await this.client.core.history.get(e2, s2.id)).request.method;
      switch (r3) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(e2, s2, i3);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(e2, s2);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(e2, s2);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(e2, s2);
        case "wc_sessionPing":
          return this.onSessionPingResponse(e2, s2);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(e2, s2);
        case "wc_sessionAuthenticate":
          return this.onSessionAuthenticateResponse(e2, s2);
        default:
          return this.client.logger.info(`Unsupported response method ${r3}`);
      }
    }), c4(this, "onRelayEventUnknownPayload", (t) => {
      const { topic: e2 } = t, { message: s2 } = Bt2("MISSING_OR_INVALID", `Decoded payload on topic ${e2} is not identifiable as a JSON-RPC request or a response.`);
      throw new Error(s2);
    }), c4(this, "shouldIgnorePairingRequest", (t) => {
      const { topic: e2, requestMethod: s2 } = t, i3 = this.expectedPairingMethodMap.get(e2);
      return !i3 || i3.includes(s2) ? false : !!(i3.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
    }), c4(this, "onSessionProposeRequest", async (t) => {
      const { topic: e2, payload: s2, attestation: i3, encryptedId: r3 } = t, { params: n4, id: a3 } = s2;
      try {
        const l6 = this.client.core.eventClient.getEvent({ topic: e2 });
        this.client.events.listenerCount("session_proposal") === 0 && (console.warn("No listener for session_proposal event"), l6?.setError(X3.proposal_listener_not_found)), this.isValidConnect(R3({}, s2.params));
        const p4 = n4.expiryTimestamp || Ni(P4.wc_sessionPropose.req.ttl), h4 = R3({ id: a3, pairingTopic: e2, expiryTimestamp: p4, attestation: i3, encryptedId: r3 }, n4);
        await this.setProposal(a3, h4);
        const u2 = await this.getVerifyContext({ attestationId: i3, hash: pa(JSON.stringify(s2)), encryptedId: r3, metadata: h4.proposer.metadata });
        l6?.addTrace(Y2.emit_session_proposal), this.client.events.emit("session_proposal", { id: a3, params: h4, verifyContext: u2 });
      } catch (l6) {
        await this.sendError({ id: a3, topic: e2, error: l6, rpcOpts: P4.wc_sessionPropose.autoReject }), this.client.logger.error(l6);
      }
    }), c4(this, "onSessionProposeResponse", async (t, e2, s2) => {
      const { id: i3 } = e2;
      if (isJsonRpcResult(e2)) {
        const { result: r3 } = e2;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r3 });
        const n4 = this.client.proposal.get(i3);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: n4 });
        const a3 = n4.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a3 });
        const l6 = r3.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: l6 });
        const p4 = await this.client.core.crypto.generateSharedKey(a3, l6);
        this.pendingSessions.set(i3, { sessionTopic: p4, pairingTopic: t, proposalId: i3, publicKey: a3 });
        const h4 = await this.client.core.relayer.subscribe(p4, { transportType: s2 });
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: h4 }), await this.client.core.pairing.activate({ topic: t });
      } else if (isJsonRpcError(e2)) {
        await this.deleteProposal(i3);
        const r3 = _i("session_connect", i3);
        if (this.events.listenerCount(r3) === 0) throw new Error(`emitting ${r3} without any listeners, 954`);
        this.events.emit(r3, { error: e2.error });
      }
    }), c4(this, "onSessionSettleRequest", async (t, e2) => {
      const { id: s2, params: i3 } = e2;
      try {
        this.isValidSessionSettleRequest(i3);
        const { relay: r3, controller: n4, expiry: a3, namespaces: l6, sessionProperties: p4, scopedProperties: h4, sessionConfig: u2 } = e2.params, d7 = [...this.pendingSessions.values()].find((m4) => m4.sessionTopic === t);
        if (!d7) return this.client.logger.error(`Pending session not found for topic ${t}`);
        const y4 = this.client.proposal.get(d7.proposalId), w5 = O3(R3(R3(R3({ topic: t, relay: r3, expiry: a3, namespaces: l6, acknowledged: true, pairingTopic: d7.pairingTopic, requiredNamespaces: y4.requiredNamespaces, optionalNamespaces: y4.optionalNamespaces, controller: n4.publicKey, self: { publicKey: d7.publicKey, metadata: this.client.metadata }, peer: { publicKey: n4.publicKey, metadata: n4.metadata } }, p4 && { sessionProperties: p4 }), h4 && { scopedProperties: h4 }), u2 && { sessionConfig: u2 }), { transportType: ee2.relay });
        await this.client.session.set(w5.topic, w5), await this.setExpiry(w5.topic, w5.expiry), await this.client.core.pairing.updateMetadata({ topic: d7.pairingTopic, metadata: w5.peer.metadata }), this.client.events.emit("session_connect", { session: w5 }), this.events.emit(_i("session_connect", d7.proposalId), { session: w5 }), this.pendingSessions.delete(d7.proposalId), this.deleteProposal(d7.proposalId, false), this.cleanupDuplicatePairings(w5), await this.sendResult({ id: e2.id, topic: t, result: true });
      } catch (r3) {
        await this.sendError({ id: s2, topic: t, error: r3 }), this.client.logger.error(r3);
      }
    }), c4(this, "onSessionSettleResponse", async (t, e2) => {
      const { id: s2 } = e2;
      isJsonRpcResult(e2) ? (await this.client.session.update(t, { acknowledged: true }), this.events.emit(_i("session_approve", s2), {})) : isJsonRpcError(e2) && (await this.client.session.delete(t, zt2("USER_DISCONNECTED")), this.events.emit(_i("session_approve", s2), { error: e2.error }));
    }), c4(this, "onSessionUpdateRequest", async (t, e2) => {
      const { params: s2, id: i3 } = e2;
      try {
        const r3 = `${t}_session_update`, n4 = hu.get(r3);
        if (n4 && this.isRequestOutOfSync(n4, i3)) {
          this.client.logger.warn(`Discarding out of sync request - ${i3}`), this.sendError({ id: i3, topic: t, error: zt2("INVALID_UPDATE_REQUEST") });
          return;
        }
        this.isValidUpdate(R3({ topic: t }, s2));
        try {
          hu.set(r3, i3), await this.client.session.update(t, { namespaces: s2.namespaces }), await this.sendResult({ id: i3, topic: t, result: true });
        } catch (a3) {
          throw hu.delete(r3), a3;
        }
        this.client.events.emit("session_update", { id: i3, topic: t, params: s2 });
      } catch (r3) {
        await this.sendError({ id: i3, topic: t, error: r3 }), this.client.logger.error(r3);
      }
    }), c4(this, "isRequestOutOfSync", (t, e2) => e2.toString().slice(0, -3) < t.toString().slice(0, -3)), c4(this, "onSessionUpdateResponse", (t, e2) => {
      const { id: s2 } = e2, i3 = _i("session_update", s2);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(e2) ? this.events.emit(_i("session_update", s2), {}) : isJsonRpcError(e2) && this.events.emit(_i("session_update", s2), { error: e2.error });
    }), c4(this, "onSessionExtendRequest", async (t, e2) => {
      const { id: s2 } = e2;
      try {
        this.isValidExtend({ topic: t }), await this.setExpiry(t, Ni(W4)), await this.sendResult({ id: s2, topic: t, result: true }), this.client.events.emit("session_extend", { id: s2, topic: t });
      } catch (i3) {
        await this.sendError({ id: s2, topic: t, error: i3 }), this.client.logger.error(i3);
      }
    }), c4(this, "onSessionExtendResponse", (t, e2) => {
      const { id: s2 } = e2, i3 = _i("session_extend", s2);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(e2) ? this.events.emit(_i("session_extend", s2), {}) : isJsonRpcError(e2) && this.events.emit(_i("session_extend", s2), { error: e2.error });
    }), c4(this, "onSessionPingRequest", async (t, e2) => {
      const { id: s2 } = e2;
      try {
        this.isValidPing({ topic: t }), await this.sendResult({ id: s2, topic: t, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_ping", { id: s2, topic: t });
      } catch (i3) {
        await this.sendError({ id: s2, topic: t, error: i3 }), this.client.logger.error(i3);
      }
    }), c4(this, "onSessionPingResponse", (t, e2) => {
      const { id: s2 } = e2, i3 = _i("session_ping", s2);
      setTimeout(() => {
        if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners 2176`);
        isJsonRpcResult(e2) ? this.events.emit(_i("session_ping", s2), {}) : isJsonRpcError(e2) && this.events.emit(_i("session_ping", s2), { error: e2.error });
      }, 500);
    }), c4(this, "onSessionDeleteRequest", async (t, e2) => {
      const { id: s2 } = e2;
      try {
        this.isValidDisconnect({ topic: t, reason: e2.params }), await Promise.all([new Promise((i3) => {
          this.client.core.relayer.once(C2.publish, async () => {
            i3(await this.deleteSession({ topic: t, id: s2 }));
          });
        }), this.sendResult({ id: s2, topic: t, result: true }), this.cleanupPendingSentRequestsForTopic({ topic: t, error: zt2("USER_DISCONNECTED") })]).catch((i3) => this.client.logger.error(i3));
      } catch (i3) {
        this.client.logger.error(i3);
      }
    }), c4(this, "onSessionRequest", async (t) => {
      var e2, s2, i3;
      const { topic: r3, payload: n4, attestation: a3, encryptedId: l6, transportType: p4 } = t, { id: h4, params: u2 } = n4;
      try {
        await this.isValidRequest(R3({ topic: r3 }, u2));
        const d7 = this.client.session.get(r3), y4 = await this.getVerifyContext({ attestationId: a3, hash: pa(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", u2, h4))), encryptedId: l6, metadata: d7.peer.metadata, transportType: p4 }), w5 = { id: h4, topic: r3, params: u2, verifyContext: y4 };
        await this.setPendingSessionRequest(w5), p4 === ee2.link_mode && (e2 = d7.peer.metadata.redirect) != null && e2.universal && this.client.core.addLinkModeSupportedApp((s2 = d7.peer.metadata.redirect) == null ? void 0 : s2.universal), (i3 = this.client.signConfig) != null && i3.disableRequestQueue ? this.emitSessionRequest(w5) : (this.addSessionRequestToSessionRequestQueue(w5), this.processSessionRequestQueue());
      } catch (d7) {
        await this.sendError({ id: h4, topic: r3, error: d7 }), this.client.logger.error(d7);
      }
    }), c4(this, "onSessionRequestResponse", (t, e2) => {
      const { id: s2 } = e2, i3 = _i("session_request", s2);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(e2) ? this.events.emit(_i("session_request", s2), { result: e2.result }) : isJsonRpcError(e2) && this.events.emit(_i("session_request", s2), { error: e2.error });
    }), c4(this, "onSessionEventRequest", async (t, e2) => {
      const { id: s2, params: i3 } = e2;
      try {
        const r3 = `${t}_session_event_${i3.event.name}`, n4 = hu.get(r3);
        if (n4 && this.isRequestOutOfSync(n4, s2)) {
          this.client.logger.info(`Discarding out of sync request - ${s2}`);
          return;
        }
        this.isValidEmit(R3({ topic: t }, i3)), this.client.events.emit("session_event", { id: s2, topic: t, params: i3 }), hu.set(r3, s2);
      } catch (r3) {
        await this.sendError({ id: s2, topic: t, error: r3 }), this.client.logger.error(r3);
      }
    }), c4(this, "onSessionAuthenticateResponse", (t, e2) => {
      const { id: s2 } = e2;
      this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: t, payload: e2 }), isJsonRpcResult(e2) ? this.events.emit(_i("session_request", s2), { result: e2.result }) : isJsonRpcError(e2) && this.events.emit(_i("session_request", s2), { error: e2.error });
    }), c4(this, "onSessionAuthenticateRequest", async (t) => {
      var e2;
      const { topic: s2, payload: i3, attestation: r3, encryptedId: n4, transportType: a3 } = t;
      try {
        const { requester: l6, authPayload: p4, expiryTimestamp: h4 } = i3.params, u2 = await this.getVerifyContext({ attestationId: r3, hash: pa(JSON.stringify(i3)), encryptedId: n4, metadata: l6.metadata, transportType: a3 }), d7 = { requester: l6, pairingTopic: s2, id: i3.id, authPayload: p4, verifyContext: u2, expiryTimestamp: h4 };
        await this.setAuthRequest(i3.id, { request: d7, pairingTopic: s2, transportType: a3 }), a3 === ee2.link_mode && (e2 = l6.metadata.redirect) != null && e2.universal && this.client.core.addLinkModeSupportedApp(l6.metadata.redirect.universal), this.client.events.emit("session_authenticate", { topic: s2, params: i3.params, id: i3.id, verifyContext: u2 });
      } catch (l6) {
        this.client.logger.error(l6);
        const p4 = i3.params.requester.publicKey, h4 = await this.client.core.crypto.generateKeyPair(), u2 = this.getAppLinkIfEnabled(i3.params.requester.metadata, a3), d7 = { type: ie, receiverPublicKey: p4, senderPublicKey: h4 };
        await this.sendError({ id: i3.id, topic: s2, error: l6, encodeOpts: d7, rpcOpts: P4.wc_sessionAuthenticate.autoReject, appLink: u2 });
      }
    }), c4(this, "addSessionRequestToSessionRequestQueue", (t) => {
      this.sessionRequestQueue.queue.push(t);
    }), c4(this, "cleanupAfterResponse", (t) => {
      this.deletePendingSessionRequest(t.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
        this.sessionRequestQueue.state = $2.idle, this.processSessionRequestQueue();
      }, (0, import_time5.toMiliseconds)(this.requestQueueDelay));
    }), c4(this, "cleanupPendingSentRequestsForTopic", ({ topic: t, error: e2 }) => {
      const s2 = this.client.core.history.pending;
      s2.length > 0 && s2.filter((i3) => i3.topic === t && i3.request.method === "wc_sessionRequest").forEach((i3) => {
        const r3 = i3.request.id, n4 = _i("session_request", r3);
        if (this.events.listenerCount(n4) === 0) throw new Error(`emitting ${n4} without any listeners`);
        this.events.emit(_i("session_request", i3.request.id), { error: e2 });
      });
    }), c4(this, "processSessionRequestQueue", () => {
      if (this.sessionRequestQueue.state === $2.active) {
        this.client.logger.info("session request queue is already active.");
        return;
      }
      const t = this.sessionRequestQueue.queue[0];
      if (!t) {
        this.client.logger.info("session request queue is empty.");
        return;
      }
      try {
        this.emitSessionRequest(t);
      } catch (e2) {
        this.client.logger.error(e2);
      }
    }), c4(this, "emitSessionRequest", (t) => {
      if (this.emittedSessionRequests.has(t.id)) {
        this.client.logger.warn({ id: t.id }, `Skipping emitting \`session_request\` event for duplicate request. id: ${t.id}`);
        return;
      }
      this.sessionRequestQueue.state = $2.active, this.emittedSessionRequests.add(t.id), this.client.events.emit("session_request", t);
    }), c4(this, "onPairingCreated", (t) => {
      if (t.methods && this.expectedPairingMethodMap.set(t.topic, t.methods), t.active) return;
      const e2 = this.client.proposal.getAll().find((s2) => s2.pairingTopic === t.topic);
      e2 && this.onSessionProposeRequest({ topic: t.topic, payload: formatJsonRpcRequest("wc_sessionPropose", O3(R3({}, e2), { requiredNamespaces: e2.requiredNamespaces, optionalNamespaces: e2.optionalNamespaces, relays: e2.relays, proposer: e2.proposer, sessionProperties: e2.sessionProperties, scopedProperties: e2.scopedProperties }), e2.id), attestation: e2.attestation, encryptedId: e2.encryptedId });
    }), c4(this, "isValidConnect", async (t) => {
      if (!Qa(t)) {
        const { message: l6 } = Bt2("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(t)}`);
        throw new Error(l6);
      }
      const { pairingTopic: e2, requiredNamespaces: s2, optionalNamespaces: i3, sessionProperties: r3, scopedProperties: n4, relays: a3 } = t;
      if (Dt2(e2) || await this.isValidPairingTopic(e2), !Xa(a3, true)) {
        const { message: l6 } = Bt2("MISSING_OR_INVALID", `connect() relays: ${a3}`);
        throw new Error(l6);
      }
      if (s2 && !Dt2(s2) && Ye2(s2) !== 0) {
        const l6 = "requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces";
        ["fatal", "error", "silent"].includes(this.client.logger.level) ? console.warn(l6) : this.client.logger.warn(l6), this.validateNamespaces(s2, "requiredNamespaces");
      }
      if (i3 && !Dt2(i3) && Ye2(i3) !== 0 && this.validateNamespaces(i3, "optionalNamespaces"), r3 && !Dt2(r3) && this.validateSessionProps(r3, "sessionProperties"), n4 && !Dt2(n4)) {
        this.validateSessionProps(n4, "scopedProperties");
        const l6 = Object.keys(s2 || {}).concat(Object.keys(i3 || {}));
        if (!Object.keys(n4).every((p4) => l6.includes(p4.split(":")[0]))) throw new Error(`Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(n4)}, required/optional namespaces: ${JSON.stringify(l6)}`);
      }
    }), c4(this, "validateNamespaces", (t, e2) => {
      const s2 = Wa(t, "connect()", e2);
      if (s2) throw new Error(s2.message);
    }), c4(this, "isValidApprove", async (t) => {
      if (!Qa(t)) throw new Error(Bt2("MISSING_OR_INVALID", `approve() params: ${t}`).message);
      const { id: e2, namespaces: s2, relayProtocol: i3, sessionProperties: r3, scopedProperties: n4 } = t;
      this.checkRecentlyDeleted(e2), await this.isValidProposalId(e2);
      const a3 = this.client.proposal.get(e2), l6 = Ss(s2, "approve()");
      if (l6) throw new Error(l6.message);
      const p4 = Ns(a3.requiredNamespaces, s2, "approve()");
      if (p4) throw new Error(p4.message);
      if (!ft2(i3, true)) {
        const { message: h4 } = Bt2("MISSING_OR_INVALID", `approve() relayProtocol: ${i3}`);
        throw new Error(h4);
      }
      if (r3 && !Dt2(r3) && this.validateSessionProps(r3, "sessionProperties"), n4 && !Dt2(n4)) {
        this.validateSessionProps(n4, "scopedProperties");
        const h4 = new Set(Object.keys(s2));
        if (!Object.keys(n4).every((u2) => h4.has(u2.split(":")[0]))) throw new Error(`Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(n4)}, approved namespaces: ${Array.from(h4).join(", ")}`);
      }
    }), c4(this, "isValidReject", async (t) => {
      if (!Qa(t)) {
        const { message: i3 } = Bt2("MISSING_OR_INVALID", `reject() params: ${t}`);
        throw new Error(i3);
      }
      const { id: e2, reason: s2 } = t;
      if (this.checkRecentlyDeleted(e2), await this.isValidProposalId(e2), !tu(s2)) {
        const { message: i3 } = Bt2("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s2)}`);
        throw new Error(i3);
      }
    }), c4(this, "isValidSessionSettleRequest", (t) => {
      if (!Qa(t)) {
        const { message: l6 } = Bt2("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${t}`);
        throw new Error(l6);
      }
      const { relay: e2, controller: s2, namespaces: i3, expiry: r3 } = t;
      if (!Os(e2)) {
        const { message: l6 } = Bt2("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(l6);
      }
      const n4 = Ya(s2, "onSessionSettleRequest()");
      if (n4) throw new Error(n4.message);
      const a3 = Ss(i3, "onSessionSettleRequest()");
      if (a3) throw new Error(a3.message);
      if (Ui(r3)) {
        const { message: l6 } = Bt2("EXPIRED", "onSessionSettleRequest()");
        throw new Error(l6);
      }
    }), c4(this, "isValidUpdate", async (t) => {
      if (!Qa(t)) {
        const { message: a3 } = Bt2("MISSING_OR_INVALID", `update() params: ${t}`);
        throw new Error(a3);
      }
      const { topic: e2, namespaces: s2 } = t;
      this.checkRecentlyDeleted(e2), await this.isValidSessionTopic(e2);
      const i3 = this.client.session.get(e2), r3 = Ss(s2, "update()");
      if (r3) throw new Error(r3.message);
      const n4 = Ns(i3.requiredNamespaces, s2, "update()");
      if (n4) throw new Error(n4.message);
    }), c4(this, "isValidExtend", async (t) => {
      if (!Qa(t)) {
        const { message: s2 } = Bt2("MISSING_OR_INVALID", `extend() params: ${t}`);
        throw new Error(s2);
      }
      const { topic: e2 } = t;
      this.checkRecentlyDeleted(e2), await this.isValidSessionTopic(e2);
    }), c4(this, "isValidRequest", async (t) => {
      if (!Qa(t)) {
        const { message: a3 } = Bt2("MISSING_OR_INVALID", `request() params: ${t}`);
        throw new Error(a3);
      }
      const { topic: e2, request: s2, chainId: i3, expiry: r3 } = t;
      this.checkRecentlyDeleted(e2), await this.isValidSessionTopic(e2);
      const { namespaces: n4 } = this.client.session.get(e2);
      if (!ou(n4, i3)) {
        const { message: a3 } = Bt2("MISSING_OR_INVALID", `request() chainId: ${i3}`);
        throw new Error(a3);
      }
      if (!eu(s2)) {
        const { message: a3 } = Bt2("MISSING_OR_INVALID", `request() ${JSON.stringify(s2)}`);
        throw new Error(a3);
      }
      if (!su(n4, i3, s2.method)) {
        const { message: a3 } = Bt2("MISSING_OR_INVALID", `request() method: ${s2.method}`);
        throw new Error(a3);
      }
      if (r3 && !au(r3, _e4)) {
        const { message: a3 } = Bt2("MISSING_OR_INVALID", `request() expiry: ${r3}. Expiry must be a number (in seconds) between ${_e4.min} and ${_e4.max}`);
        throw new Error(a3);
      }
    }), c4(this, "isValidRespond", async (t) => {
      var e2;
      if (!Qa(t)) {
        const { message: n4 } = Bt2("MISSING_OR_INVALID", `respond() params: ${t}`);
        throw new Error(n4);
      }
      const { topic: s2, response: i3 } = t;
      try {
        await this.isValidSessionTopic(s2);
      } catch (n4) {
        throw (e2 = t?.response) != null && e2.id && this.cleanupAfterResponse(t), n4;
      }
      if (!nu(i3)) {
        const { message: n4 } = Bt2("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i3)}`);
        throw new Error(n4);
      }
      const r3 = this.client.pendingRequest.get(i3.id);
      if (r3.topic !== s2) {
        const { message: n4 } = Bt2("MISMATCHED_TOPIC", `Request response topic mismatch. reqId: ${i3.id}, expected topic: ${r3.topic}, received topic: ${s2}`);
        throw new Error(n4);
      }
    }), c4(this, "isValidPing", async (t) => {
      if (!Qa(t)) {
        const { message: s2 } = Bt2("MISSING_OR_INVALID", `ping() params: ${t}`);
        throw new Error(s2);
      }
      const { topic: e2 } = t;
      await this.isValidSessionOrPairingTopic(e2);
    }), c4(this, "isValidEmit", async (t) => {
      if (!Qa(t)) {
        const { message: n4 } = Bt2("MISSING_OR_INVALID", `emit() params: ${t}`);
        throw new Error(n4);
      }
      const { topic: e2, event: s2, chainId: i3 } = t;
      await this.isValidSessionTopic(e2);
      const { namespaces: r3 } = this.client.session.get(e2);
      if (!ou(r3, i3)) {
        const { message: n4 } = Bt2("MISSING_OR_INVALID", `emit() chainId: ${i3}`);
        throw new Error(n4);
      }
      if (!ru(s2)) {
        const { message: n4 } = Bt2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s2)}`);
        throw new Error(n4);
      }
      if (!iu(r3, i3, s2.name)) {
        const { message: n4 } = Bt2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s2)}`);
        throw new Error(n4);
      }
    }), c4(this, "isValidDisconnect", async (t) => {
      if (!Qa(t)) {
        const { message: s2 } = Bt2("MISSING_OR_INVALID", `disconnect() params: ${t}`);
        throw new Error(s2);
      }
      const { topic: e2 } = t;
      await this.isValidSessionOrPairingTopic(e2);
    }), c4(this, "isValidAuthenticate", (t) => {
      const { chains: e2, uri: s2, domain: i3, nonce: r3 } = t;
      if (!Array.isArray(e2) || e2.length === 0) throw new Error("chains is required and must be a non-empty array");
      if (!ft2(s2, false)) throw new Error("uri is required parameter");
      if (!ft2(i3, false)) throw new Error("domain is required parameter");
      if (!ft2(r3, false)) throw new Error("nonce is required parameter");
      if ([...new Set(e2.map((a3) => Je2(a3).namespace))].length > 1) throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
      const { namespace: n4 } = Je2(e2[0]);
      if (n4 !== "eip155") throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
    }), c4(this, "getVerifyContext", async (t) => {
      const { attestationId: e2, hash: s2, encryptedId: i3, metadata: r3, transportType: n4 } = t, a3 = { verified: { verifyUrl: r3.verifyUrl || be3, validation: "UNKNOWN", origin: r3.url || "" } };
      try {
        if (n4 === ee2.link_mode) {
          const p4 = this.getAppLinkIfEnabled(r3, n4);
          return a3.verified.validation = p4 && new URL(p4).origin === new URL(r3.url).origin ? "VALID" : "INVALID", a3;
        }
        const l6 = await this.client.core.verify.resolve({ attestationId: e2, hash: s2, encryptedId: i3, verifyUrl: r3.verifyUrl });
        l6 && (a3.verified.origin = l6.origin, a3.verified.isScam = l6.isScam, a3.verified.validation = l6.origin === new URL(r3.url).origin ? "VALID" : "INVALID");
      } catch (l6) {
        this.client.logger.warn(l6);
      }
      return this.client.logger.debug(`Verify context: ${JSON.stringify(a3)}`), a3;
    }), c4(this, "validateSessionProps", (t, e2) => {
      Object.values(t).forEach((s2, i3) => {
        if (s2 == null) {
          const { message: r3 } = Bt2("MISSING_OR_INVALID", `${e2} must contain an existing value for each key. Received: ${s2} for key ${Object.keys(t)[i3]}`);
          throw new Error(r3);
        }
      });
    }), c4(this, "getPendingAuthRequest", (t) => {
      const e2 = this.client.auth.requests.get(t);
      return typeof e2 == "object" ? e2 : void 0;
    }), c4(this, "addToRecentlyDeleted", (t, e2) => {
      if (this.recentlyDeletedMap.set(t, e2), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {
        let s2 = 0;
        const i3 = this.recentlyDeletedLimit / 2;
        for (const r3 of this.recentlyDeletedMap.keys()) {
          if (s2++ >= i3) break;
          this.recentlyDeletedMap.delete(r3);
        }
      }
    }), c4(this, "checkRecentlyDeleted", (t) => {
      const e2 = this.recentlyDeletedMap.get(t);
      if (e2) {
        const { message: s2 } = Bt2("MISSING_OR_INVALID", `Record was recently deleted - ${e2}: ${t}`);
        throw new Error(s2);
      }
    }), c4(this, "isLinkModeEnabled", (t, e2) => {
      var s2, i3, r3, n4, a3, l6, p4, h4, u2;
      return !t || e2 !== ee2.link_mode ? false : ((i3 = (s2 = this.client.metadata) == null ? void 0 : s2.redirect) == null ? void 0 : i3.linkMode) === true && ((n4 = (r3 = this.client.metadata) == null ? void 0 : r3.redirect) == null ? void 0 : n4.universal) !== void 0 && ((l6 = (a3 = this.client.metadata) == null ? void 0 : a3.redirect) == null ? void 0 : l6.universal) !== "" && ((p4 = t?.redirect) == null ? void 0 : p4.universal) !== void 0 && ((h4 = t?.redirect) == null ? void 0 : h4.universal) !== "" && ((u2 = t?.redirect) == null ? void 0 : u2.linkMode) === true && this.client.core.linkModeSupportedApps.includes(t.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < "u";
    }), c4(this, "getAppLinkIfEnabled", (t, e2) => {
      var s2;
      return this.isLinkModeEnabled(t, e2) ? (s2 = t?.redirect) == null ? void 0 : s2.universal : void 0;
    }), c4(this, "handleLinkModeMessage", ({ url: t }) => {
      if (!t || !t.includes("wc_ev") || !t.includes("topic")) return;
      const e2 = Ti(t, "topic") || "", s2 = decodeURIComponent(Ti(t, "wc_ev") || ""), i3 = this.client.session.keys.includes(e2);
      i3 && this.client.session.update(e2, { transportType: ee2.link_mode }), this.client.core.dispatchEnvelope({ topic: e2, message: s2, sessionExists: i3 });
    }), c4(this, "registerLinkModeListeners", async () => {
      var t;
      if (ji() || At() && (t = this.client.metadata.redirect) != null && t.linkMode) {
        const e2 = global == null ? void 0 : global.Linking;
        if (typeof e2 < "u") {
          e2.addEventListener("url", this.handleLinkModeMessage, this.client.name);
          const s2 = await e2.getInitialURL();
          s2 && setTimeout(() => {
            this.handleLinkModeMessage({ url: s2 });
          }, 50);
        }
      }
    }), c4(this, "getTVFParams", (t, e2, s2) => {
      var i3, r3, n4;
      if (!((i3 = e2.request) != null && i3.method)) return {};
      const a3 = { correlationId: t, rpcMethods: [e2.request.method], chainId: e2.chainId };
      try {
        const l6 = this.extractTxHashesFromResult(e2.request, s2);
        a3.txHashes = l6, a3.contractAddresses = this.isValidContractData(e2.request.params) ? [(n4 = (r3 = e2.request.params) == null ? void 0 : r3[0]) == null ? void 0 : n4.to] : [];
      } catch (l6) {
        this.client.logger.warn(l6, "Error getting TVF params");
      }
      return a3;
    }), c4(this, "isValidContractData", (t) => {
      var e2;
      if (!t) return false;
      try {
        const s2 = t?.data || ((e2 = t?.[0]) == null ? void 0 : e2.data);
        if (!s2.startsWith("0x")) return false;
        const i3 = s2.slice(2);
        return /^[0-9a-fA-F]*$/.test(i3) ? i3.length % 2 === 0 : false;
      } catch {
      }
      return false;
    }), c4(this, "extractTxHashesFromResult", (t, e2) => {
      var s2;
      try {
        if (!e2) return [];
        const i3 = t.method, r3 = yt3[i3];
        if (i3 === "sui_signTransaction") return [Oc(e2.transactionBytes)];
        if (i3 === "near_signTransaction") return [Nc(e2)];
        if (i3 === "near_signTransactions") return e2.map((a3) => Nc(a3));
        if (i3 === "xrpl_signTransactionFor" || i3 === "xrpl_signTransaction") return [(s2 = e2.tx_json) == null ? void 0 : s2.hash];
        if (i3 === "polkadot_signTransaction") return [mu({ transaction: t.params.transactionPayload, signature: e2.signature })];
        if (i3 === "algo_signTxn") return Ee2(e2) ? e2.map((a3) => Uc(a3)) : [Uc(e2)];
        if (i3 === "cosmos_signDirect") return [_c(e2)];
        if (i3 === "wallet_sendCalls") return Rc(e2);
        if (typeof e2 == "string") return [e2];
        const n4 = e2[r3.key];
        if (Ee2(n4)) return i3 === "solana_signAllTransactions" ? n4.map((a3) => Sc(a3)) : n4;
        if (typeof n4 == "string") return [n4];
      } catch (i3) {
        this.client.logger.warn(i3, "Error extracting tx hashes from result");
      }
      return [];
    });
  }
  async processPendingMessageEvents() {
    try {
      const o5 = this.client.session.keys, t = this.client.core.relayer.messages.getWithoutAck(o5);
      for (const [e2, s2] of Object.entries(t)) for (const i3 of s2) try {
        await this.onProviderMessageEvent({ topic: e2, message: i3, publishedAt: Date.now() });
      } catch {
        this.client.logger.warn(`Error processing pending message event for topic: ${e2}, message: ${i3}`);
      }
    } catch (o5) {
      this.client.logger.warn(o5, "processPendingMessageEvents failed");
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: o5 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(o5);
    }
  }
  async confirmOnlineStateOrThrow() {
    await this.client.core.relayer.confirmOnlineStateOrThrow();
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(C2.message, (o5) => {
      this.onProviderMessageEvent(o5);
    });
  }
  async onRelayMessage(o5) {
    const { topic: t, message: e2, attestation: s2, transportType: i3 } = o5, { publicKey: r3 } = this.client.auth.authKeys.keys.includes(pe3) ? this.client.auth.authKeys.get(pe3) : { responseTopic: void 0, publicKey: void 0 };
    try {
      const n4 = await this.client.core.crypto.decode(t, e2, { receiverPublicKey: r3, encoding: i3 === ee2.link_mode ? Ge2 : oe });
      isJsonRpcRequest(n4) ? (this.client.core.history.set(t, n4), await this.onRelayEventRequest({ topic: t, payload: n4, attestation: s2, transportType: i3, encryptedId: pa(e2) })) : isJsonRpcResponse(n4) ? (await this.client.core.history.resolve(n4), await this.onRelayEventResponse({ topic: t, payload: n4, transportType: i3 }), this.client.core.history.delete(t, n4.id)) : await this.onRelayEventUnknownPayload({ topic: t, payload: n4, transportType: i3 }), await this.client.core.relayer.messages.ack(t, e2);
    } catch (n4) {
      this.client.logger.error(n4);
    }
  }
  registerExpirerEvents() {
    this.client.core.expirer.on(q.expired, async (o5) => {
      const { topic: t, id: e2 } = Oi(o5.target);
      if (e2 && this.client.pendingRequest.keys.includes(e2)) return await this.deletePendingSessionRequest(e2, Bt2("EXPIRED"), true);
      if (e2 && this.client.auth.requests.keys.includes(e2)) return await this.deletePendingAuthRequest(e2, Bt2("EXPIRED"), true);
      t ? this.client.session.keys.includes(t) && (await this.deleteSession({ topic: t, expirerHasDeleted: true }), this.client.events.emit("session_expire", { topic: t })) : e2 && (await this.deleteProposal(e2, true), this.client.events.emit("proposal_expire", { id: e2 }));
    });
  }
  registerPairingEvents() {
    this.client.core.pairing.events.on(ae2.create, (o5) => this.onPairingCreated(o5)), this.client.core.pairing.events.on(ae2.delete, (o5) => {
      this.addToRecentlyDeleted(o5.topic, "pairing");
    });
  }
  isValidPairingTopic(o5) {
    if (!ft2(o5, false)) {
      const { message: t } = Bt2("MISSING_OR_INVALID", `pairing topic should be a string: ${o5}`);
      throw new Error(t);
    }
    if (!this.client.core.pairing.pairings.keys.includes(o5)) {
      const { message: t } = Bt2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${o5}`);
      throw new Error(t);
    }
    if (Ui(this.client.core.pairing.pairings.get(o5).expiry)) {
      const { message: t } = Bt2("EXPIRED", `pairing topic: ${o5}`);
      throw new Error(t);
    }
  }
  async isValidSessionTopic(o5) {
    if (!ft2(o5, false)) {
      const { message: t } = Bt2("MISSING_OR_INVALID", `session topic should be a string: ${o5}`);
      throw new Error(t);
    }
    if (this.checkRecentlyDeleted(o5), !this.client.session.keys.includes(o5)) {
      const { message: t } = Bt2("NO_MATCHING_KEY", `session topic doesn't exist: ${o5}`);
      throw new Error(t);
    }
    if (Ui(this.client.session.get(o5).expiry)) {
      await this.deleteSession({ topic: o5 });
      const { message: t } = Bt2("EXPIRED", `session topic: ${o5}`);
      throw new Error(t);
    }
    if (!this.client.core.crypto.keychain.has(o5)) {
      const { message: t } = Bt2("MISSING_OR_INVALID", `session topic does not exist in keychain: ${o5}`);
      throw await this.deleteSession({ topic: o5 }), new Error(t);
    }
  }
  async isValidSessionOrPairingTopic(o5) {
    if (this.checkRecentlyDeleted(o5), this.client.session.keys.includes(o5)) await this.isValidSessionTopic(o5);
    else if (this.client.core.pairing.pairings.keys.includes(o5)) this.isValidPairingTopic(o5);
    else if (ft2(o5, false)) {
      const { message: t } = Bt2("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${o5}`);
      throw new Error(t);
    } else {
      const { message: t } = Bt2("MISSING_OR_INVALID", `session or pairing topic should be a string: ${o5}`);
      throw new Error(t);
    }
  }
  async isValidProposalId(o5) {
    if (!Ja(o5)) {
      const { message: t } = Bt2("MISSING_OR_INVALID", `proposal id should be a number: ${o5}`);
      throw new Error(t);
    }
    if (!this.client.proposal.keys.includes(o5)) {
      const { message: t } = Bt2("NO_MATCHING_KEY", `proposal id doesn't exist: ${o5}`);
      throw new Error(t);
    }
    if (Ui(this.client.proposal.get(o5).expiryTimestamp)) {
      await this.deleteProposal(o5);
      const { message: t } = Bt2("EXPIRED", `proposal id: ${o5}`);
      throw new Error(t);
    }
  }
};
var Vs = class extends ji2 {
  constructor(o5, t) {
    super(o5, t, dt3, we3), this.core = o5, this.logger = t;
  }
};
var It4 = class extends ji2 {
  constructor(o5, t) {
    super(o5, t, ut3, we3), this.core = o5, this.logger = t;
  }
};
var ks2 = class extends ji2 {
  constructor(o5, t) {
    super(o5, t, wt3, we3, (e2) => e2.id), this.core = o5, this.logger = t;
  }
};
var Ds2 = class extends ji2 {
  constructor(o5, t) {
    super(o5, t, Et4, le3, () => pe3), this.core = o5, this.logger = t;
  }
};
var Ls2 = class extends ji2 {
  constructor(o5, t) {
    super(o5, t, St4, le3), this.core = o5, this.logger = t;
  }
};
var Ms = class extends ji2 {
  constructor(o5, t) {
    super(o5, t, Rt4, le3, (e2) => e2.id), this.core = o5, this.logger = t;
  }
};
var $s2 = Object.defineProperty;
var Ks = (E4, o5, t) => o5 in E4 ? $s2(E4, o5, { enumerable: true, configurable: true, writable: true, value: t }) : E4[o5] = t;
var Ke4 = (E4, o5, t) => Ks(E4, typeof o5 != "symbol" ? o5 + "" : o5, t);
var Us2 = class {
  constructor(o5, t) {
    this.core = o5, this.logger = t, Ke4(this, "authKeys"), Ke4(this, "pairingTopics"), Ke4(this, "requests"), this.authKeys = new Ds2(this.core, this.logger), this.pairingTopics = new Ls2(this.core, this.logger), this.requests = new Ms(this.core, this.logger);
  }
  async init() {
    await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
  }
};
var Gs = Object.defineProperty;
var js2 = (E4, o5, t) => o5 in E4 ? Gs(E4, o5, { enumerable: true, configurable: true, writable: true, value: t }) : E4[o5] = t;
var f4 = (E4, o5, t) => js2(E4, typeof o5 != "symbol" ? o5 + "" : o5, t);
var fe3 = class _fe extends J {
  constructor(o5) {
    super(o5), f4(this, "protocol", Ve4), f4(this, "version", ke3), f4(this, "name", me4.name), f4(this, "metadata"), f4(this, "core"), f4(this, "logger"), f4(this, "events", new import_events8.EventEmitter()), f4(this, "engine"), f4(this, "session"), f4(this, "proposal"), f4(this, "pendingRequest"), f4(this, "auth"), f4(this, "signConfig"), f4(this, "on", (e2, s2) => this.events.on(e2, s2)), f4(this, "once", (e2, s2) => this.events.once(e2, s2)), f4(this, "off", (e2, s2) => this.events.off(e2, s2)), f4(this, "removeListener", (e2, s2) => this.events.removeListener(e2, s2)), f4(this, "removeAllListeners", (e2) => this.events.removeAllListeners(e2)), f4(this, "connect", async (e2) => {
      try {
        return await this.engine.connect(e2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), f4(this, "pair", async (e2) => {
      try {
        return await this.engine.pair(e2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), f4(this, "approve", async (e2) => {
      try {
        return await this.engine.approve(e2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), f4(this, "reject", async (e2) => {
      try {
        return await this.engine.reject(e2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), f4(this, "update", async (e2) => {
      try {
        return await this.engine.update(e2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), f4(this, "extend", async (e2) => {
      try {
        return await this.engine.extend(e2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), f4(this, "request", async (e2) => {
      try {
        return await this.engine.request(e2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), f4(this, "respond", async (e2) => {
      try {
        return await this.engine.respond(e2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), f4(this, "ping", async (e2) => {
      try {
        return await this.engine.ping(e2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), f4(this, "emit", async (e2) => {
      try {
        return await this.engine.emit(e2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), f4(this, "disconnect", async (e2) => {
      try {
        return await this.engine.disconnect(e2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), f4(this, "find", (e2) => {
      try {
        return this.engine.find(e2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), f4(this, "getPendingSessionRequests", () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (e2) {
        throw this.logger.error(e2.message), e2;
      }
    }), f4(this, "authenticate", async (e2, s2) => {
      try {
        return await this.engine.authenticate(e2, s2);
      } catch (i3) {
        throw this.logger.error(i3.message), i3;
      }
    }), f4(this, "formatAuthMessage", (e2) => {
      try {
        return this.engine.formatAuthMessage(e2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), f4(this, "approveSessionAuthenticate", async (e2) => {
      try {
        return await this.engine.approveSessionAuthenticate(e2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), f4(this, "rejectSessionAuthenticate", async (e2) => {
      try {
        return await this.engine.rejectSessionAuthenticate(e2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), this.name = o5?.name || me4.name, this.metadata = di(o5?.metadata), this.signConfig = o5?.signConfig;
    const t = wu({ logger: o5?.logger || me4.logger, name: this.name });
    this.logger = t, this.core = o5?.core || new ta2(o5), this.session = new It4(this.core, this.logger), this.proposal = new Vs(this.core, this.logger), this.pendingRequest = new ks2(this.core, this.logger), this.engine = new Cs2(this), this.auth = new Us2(this.core, this.logger);
  }
  static async init(o5) {
    const t = new _fe(o5);
    return await t.initialize(), t;
  }
  get context() {
    return w(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info("SignClient Initialization Success");
    } catch (o5) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(o5.message), o5;
    }
  }
};
var Qs2 = fe3;

// node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js
var import_events9 = __toESM(require_events());
var import_cross_fetch = __toESM(require_browser_ponyfill());
var P5 = Object.defineProperty;
var w3 = Object.defineProperties;
var E2 = Object.getOwnPropertyDescriptors;
var c5 = Object.getOwnPropertySymbols;
var L = Object.prototype.hasOwnProperty;
var O4 = Object.prototype.propertyIsEnumerable;
var l5 = (r3, t, e2) => t in r3 ? P5(r3, t, { enumerable: true, configurable: true, writable: true, value: e2 }) : r3[t] = e2;
var p3 = (r3, t) => {
  for (var e2 in t || (t = {})) L.call(t, e2) && l5(r3, e2, t[e2]);
  if (c5) for (var e2 of c5(t)) O4.call(t, e2) && l5(r3, e2, t[e2]);
  return r3;
};
var v4 = (r3, t) => w3(r3, E2(t));
var j4 = { Accept: "application/json", "Content-Type": "application/json" };
var T2 = "POST";
var d4 = { headers: j4, method: T2 };
var g2 = 10;
var f5 = class {
  constructor(t, e2 = false) {
    if (this.url = t, this.disableProviderPing = e2, this.events = new import_events9.EventEmitter(), this.isAvailable = false, this.registering = false, !isHttpUrl(t)) throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);
    this.url = t, this.disableProviderPing = e2;
  }
  get connected() {
    return this.isAvailable;
  }
  get connecting() {
    return this.registering;
  }
  on(t, e2) {
    this.events.on(t, e2);
  }
  once(t, e2) {
    this.events.once(t, e2);
  }
  off(t, e2) {
    this.events.off(t, e2);
  }
  removeListener(t, e2) {
    this.events.removeListener(t, e2);
  }
  async open(t = this.url) {
    await this.register(t);
  }
  async close() {
    if (!this.isAvailable) throw new Error("Connection already closed");
    this.onClose();
  }
  async send(t) {
    this.isAvailable || await this.register();
    try {
      const e2 = safeJsonStringify(t), s2 = await (await (0, import_cross_fetch.default)(this.url, v4(p3({}, d4), { body: e2 }))).json();
      this.onPayload({ data: s2 });
    } catch (e2) {
      this.onError(t.id, e2);
    }
  }
  async register(t = this.url) {
    if (!isHttpUrl(t)) throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);
    if (this.registering) {
      const e2 = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= e2 || this.events.listenerCount("open") >= e2) && this.events.setMaxListeners(e2 + 1), new Promise((s2, i3) => {
        this.events.once("register_error", (n4) => {
          this.resetMaxListeners(), i3(n4);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.isAvailable > "u") return i3(new Error("HTTP connection is missing or invalid"));
          s2();
        });
      });
    }
    this.url = t, this.registering = true;
    try {
      if (!this.disableProviderPing) {
        const e2 = safeJsonStringify({ id: 1, jsonrpc: "2.0", method: "test", params: [] });
        await (0, import_cross_fetch.default)(t, v4(p3({}, d4), { body: e2 }));
      }
      this.onOpen();
    } catch (e2) {
      const s2 = this.parseError(e2);
      throw this.events.emit("register_error", s2), this.onClose(), s2;
    }
  }
  onOpen() {
    this.isAvailable = true, this.registering = false, this.events.emit("open");
  }
  onClose() {
    this.isAvailable = false, this.registering = false, this.events.emit("close");
  }
  onPayload(t) {
    if (typeof t.data > "u") return;
    const e2 = typeof t.data == "string" ? safeJsonParse(t.data) : t.data;
    this.events.emit("payload", e2);
  }
  onError(t, e2) {
    const s2 = this.parseError(e2), i3 = s2.message || s2.toString(), n4 = formatJsonRpcError(t, i3);
    this.events.emit("payload", n4);
  }
  parseError(t, e2 = this.url) {
    return parseConnectionError(t, e2, "HTTP");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > g2 && this.events.setMaxListeners(g2);
  }
};

// node_modules/@walletconnect/universal-provider/dist/index.js
var import_events10 = __toESM(require_events());
function _2(t) {
  return t == null || typeof t != "object" && typeof t != "function";
}
function Z(t) {
  return Object.getOwnPropertySymbols(t).filter((e2) => Object.prototype.propertyIsEnumerable.call(t, e2));
}
function T3(t) {
  return t == null ? t === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(t);
}
var Fe3 = "[object RegExp]";
var ee3 = "[object String]";
var te3 = "[object Number]";
var se2 = "[object Boolean]";
var ie3 = "[object Arguments]";
var He4 = "[object Symbol]";
var Ue4 = "[object Date]";
var Be4 = "[object Map]";
var Le4 = "[object Set]";
var Me5 = "[object Array]";
var ze3 = "[object ArrayBuffer]";
var Ge4 = "[object Object]";
var We4 = "[object DataView]";
var Je4 = "[object Uint8Array]";
var Ke5 = "[object Uint8ClampedArray]";
var Ve5 = "[object Uint16Array]";
var Ye4 = "[object Uint32Array]";
var Xe4 = "[object Int8Array]";
var ke4 = "[object Int16Array]";
var Qe3 = "[object Int32Array]";
var Ze4 = "[object Float32Array]";
var Te3 = "[object Float64Array]";
function x4(t) {
  return ArrayBuffer.isView(t) && !(t instanceof DataView);
}
function et3(t, e2) {
  return y3(t, void 0, t, /* @__PURE__ */ new Map(), e2);
}
function y3(t, e2, s2, i3 = /* @__PURE__ */ new Map(), r3 = void 0) {
  const a3 = r3?.(t, e2, s2, i3);
  if (a3 != null) return a3;
  if (_2(t)) return t;
  if (i3.has(t)) return i3.get(t);
  if (Array.isArray(t)) {
    const n4 = new Array(t.length);
    i3.set(t, n4);
    for (let c6 = 0; c6 < t.length; c6++) n4[c6] = y3(t[c6], c6, s2, i3, r3);
    return Object.hasOwn(t, "index") && (n4.index = t.index), Object.hasOwn(t, "input") && (n4.input = t.input), n4;
  }
  if (t instanceof Date) return new Date(t.getTime());
  if (t instanceof RegExp) {
    const n4 = new RegExp(t.source, t.flags);
    return n4.lastIndex = t.lastIndex, n4;
  }
  if (t instanceof Map) {
    const n4 = /* @__PURE__ */ new Map();
    i3.set(t, n4);
    for (const [c6, o5] of t) n4.set(c6, y3(o5, c6, s2, i3, r3));
    return n4;
  }
  if (t instanceof Set) {
    const n4 = /* @__PURE__ */ new Set();
    i3.set(t, n4);
    for (const c6 of t) n4.add(y3(c6, void 0, s2, i3, r3));
    return n4;
  }
  if (typeof Buffer < "u" && Buffer.isBuffer(t)) return t.subarray();
  if (x4(t)) {
    const n4 = new (Object.getPrototypeOf(t)).constructor(t.length);
    i3.set(t, n4);
    for (let c6 = 0; c6 < t.length; c6++) n4[c6] = y3(t[c6], c6, s2, i3, r3);
    return n4;
  }
  if (t instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && t instanceof SharedArrayBuffer) return t.slice(0);
  if (t instanceof DataView) {
    const n4 = new DataView(t.buffer.slice(0), t.byteOffset, t.byteLength);
    return i3.set(t, n4), m3(n4, t, s2, i3, r3), n4;
  }
  if (typeof File < "u" && t instanceof File) {
    const n4 = new File([t], t.name, { type: t.type });
    return i3.set(t, n4), m3(n4, t, s2, i3, r3), n4;
  }
  if (t instanceof Blob) {
    const n4 = new Blob([t], { type: t.type });
    return i3.set(t, n4), m3(n4, t, s2, i3, r3), n4;
  }
  if (t instanceof Error) {
    const n4 = new t.constructor();
    return i3.set(t, n4), n4.message = t.message, n4.name = t.name, n4.stack = t.stack, n4.cause = t.cause, m3(n4, t, s2, i3, r3), n4;
  }
  if (typeof t == "object" && tt3(t)) {
    const n4 = Object.create(Object.getPrototypeOf(t));
    return i3.set(t, n4), m3(n4, t, s2, i3, r3), n4;
  }
  return t;
}
function m3(t, e2, s2 = t, i3, r3) {
  const a3 = [...Object.keys(e2), ...Z(e2)];
  for (let n4 = 0; n4 < a3.length; n4++) {
    const c6 = a3[n4], o5 = Object.getOwnPropertyDescriptor(t, c6);
    (o5 == null || o5.writable) && (t[c6] = y3(e2[c6], c6, s2, i3, r3));
  }
}
function tt3(t) {
  switch (T3(t)) {
    case ie3:
    case Me5:
    case ze3:
    case We4:
    case se2:
    case Ue4:
    case Ze4:
    case Te3:
    case Xe4:
    case ke4:
    case Qe3:
    case Be4:
    case te3:
    case Ge4:
    case Fe3:
    case Le4:
    case ee3:
    case He4:
    case Je4:
    case Ke5:
    case Ve5:
    case Ye4:
      return true;
    default:
      return false;
  }
}
function st3(t, e2) {
  return et3(t, (s2, i3, r3, a3) => {
    const n4 = e2?.(s2, i3, r3, a3);
    if (n4 != null) return n4;
    if (typeof t == "object") switch (Object.prototype.toString.call(t)) {
      case te3:
      case ee3:
      case se2: {
        const c6 = new t.constructor(t?.valueOf());
        return m3(c6, t), c6;
      }
      case ie3: {
        const c6 = {};
        return m3(c6, t), c6.length = t.length, c6[Symbol.iterator] = t[Symbol.iterator], c6;
      }
      default:
        return;
    }
  });
}
function ne2(t) {
  return st3(t);
}
function re3(t) {
  return t !== null && typeof t == "object" && T3(t) === "[object Arguments]";
}
function ae3(t) {
  return typeof t == "object" && t !== null;
}
function it3() {
}
function nt3(t) {
  return x4(t);
}
function rt3(t) {
  if (typeof t != "object" || t == null) return false;
  if (Object.getPrototypeOf(t) === null) return true;
  if (Object.prototype.toString.call(t) !== "[object Object]") {
    const s2 = t[Symbol.toStringTag];
    return s2 == null || !Object.getOwnPropertyDescriptor(t, Symbol.toStringTag)?.writable ? false : t.toString() === `[object ${s2}]`;
  }
  let e2 = t;
  for (; Object.getPrototypeOf(e2) !== null; ) e2 = Object.getPrototypeOf(e2);
  return Object.getPrototypeOf(t) === e2;
}
function at(t) {
  if (_2(t)) return t;
  if (Array.isArray(t) || x4(t) || t instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && t instanceof SharedArrayBuffer) return t.slice(0);
  const e2 = Object.getPrototypeOf(t), s2 = e2.constructor;
  if (t instanceof Date || t instanceof Map || t instanceof Set) return new s2(t);
  if (t instanceof RegExp) {
    const i3 = new s2(t);
    return i3.lastIndex = t.lastIndex, i3;
  }
  if (t instanceof DataView) return new s2(t.buffer.slice(0));
  if (t instanceof Error) {
    const i3 = new s2(t.message);
    return i3.stack = t.stack, i3.name = t.name, i3.cause = t.cause, i3;
  }
  if (typeof File < "u" && t instanceof File) return new s2([t], t.name, { type: t.type, lastModified: t.lastModified });
  if (typeof t == "object") {
    const i3 = Object.create(e2);
    return Object.assign(i3, t);
  }
  return t;
}
function ct4(t, ...e2) {
  const s2 = e2.slice(0, -1), i3 = e2[e2.length - 1];
  let r3 = t;
  for (let a3 = 0; a3 < s2.length; a3++) {
    const n4 = s2[a3];
    r3 = $3(r3, n4, i3, /* @__PURE__ */ new Map());
  }
  return r3;
}
function $3(t, e2, s2, i3) {
  if (_2(t) && (t = Object(t)), e2 == null || typeof e2 != "object") return t;
  if (i3.has(e2)) return at(i3.get(e2));
  if (i3.set(e2, t), Array.isArray(e2)) {
    e2 = e2.slice();
    for (let a3 = 0; a3 < e2.length; a3++) e2[a3] = e2[a3] ?? void 0;
  }
  const r3 = [...Object.keys(e2), ...Z(e2)];
  for (let a3 = 0; a3 < r3.length; a3++) {
    const n4 = r3[a3];
    let c6 = e2[n4], o5 = t[n4];
    if (re3(c6) && (c6 = { ...c6 }), re3(o5) && (o5 = { ...o5 }), typeof Buffer < "u" && Buffer.isBuffer(c6) && (c6 = ne2(c6)), Array.isArray(c6)) if (typeof o5 == "object" && o5 != null) {
      const l6 = [], p4 = Reflect.ownKeys(o5);
      for (let f6 = 0; f6 < p4.length; f6++) {
        const u2 = p4[f6];
        l6[u2] = o5[u2];
      }
      o5 = l6;
    } else o5 = [];
    const h4 = s2(o5, c6, n4, t, e2, i3);
    h4 != null ? t[n4] = h4 : Array.isArray(c6) || ae3(o5) && ae3(c6) ? t[n4] = $3(o5, c6, s2, i3) : o5 == null && rt3(c6) ? t[n4] = $3({}, c6, s2, i3) : o5 == null && nt3(c6) ? t[n4] = ne2(c6) : (o5 === void 0 || c6 !== void 0) && (t[n4] = c6);
  }
  return t;
}
function ot2(t, ...e2) {
  return ct4(t, ...e2, it3);
}
var ce2 = "error";
var pt3 = "wss://relay.walletconnect.org";
var ht3 = "wc";
var oe3 = "universal_provider";
var A2 = `${ht3}@2:${oe3}:`;
var pe4 = "https://rpc.walletconnect.org/v1/";
var he4 = "generic";
var lt4 = `${pe4}bundler`;
var v5 = "call_status";
var ut4 = 86400;
var F = { DEFAULT_CHAIN_CHANGED: "default_chain_changed" };
var dt4 = Object.defineProperty;
var ft4 = Object.defineProperties;
var mt3 = Object.getOwnPropertyDescriptors;
var le4 = Object.getOwnPropertySymbols;
var gt4 = Object.prototype.hasOwnProperty;
var yt4 = Object.prototype.propertyIsEnumerable;
var ue = (t, e2, s2) => e2 in t ? dt4(t, e2, { enumerable: true, configurable: true, writable: true, value: s2 }) : t[e2] = s2;
var E3 = (t, e2) => {
  for (var s2 in e2 || (e2 = {})) gt4.call(e2, s2) && ue(t, s2, e2[s2]);
  if (le4) for (var s2 of le4(e2)) yt4.call(e2, s2) && ue(t, s2, e2[s2]);
  return t;
};
var vt4 = (t, e2) => ft4(t, mt3(e2));
function de3(t, e2, s2) {
  var i3;
  const r3 = Je2(t);
  return ((i3 = e2.rpcMap) == null ? void 0 : i3[r3.reference]) || `${pe4}?chainId=${r3.namespace}:${r3.reference}&projectId=${s2}`;
}
function wt4(t) {
  return t.includes(":") ? t.split(":")[1] : t;
}
function fe4(t) {
  return t.map((e2) => `${e2.split(":")[0]}:${e2.split(":")[1]}`);
}
function bt3(t, e2) {
  const s2 = Object.keys(e2.namespaces).filter((r3) => r3.includes(t));
  if (!s2.length) return [];
  const i3 = [];
  return s2.forEach((r3) => {
    const a3 = e2.namespaces[r3].accounts;
    i3.push(...a3);
  }), i3;
}
function me5(t) {
  return Object.fromEntries(Object.entries(t).filter(([e2, s2]) => {
    var i3, r3;
    return ((i3 = s2?.chains) == null ? void 0 : i3.length) && ((r3 = s2?.chains) == null ? void 0 : r3.length) > 0;
  }));
}
function C4(t = {}, e2 = {}) {
  const s2 = me5(ge4(t)), i3 = me5(ge4(e2));
  return ot2(s2, i3);
}
function ge4(t) {
  var e2, s2, i3, r3, a3;
  const n4 = {};
  if (!Ye2(t)) return n4;
  for (const [c6, o5] of Object.entries(t)) {
    const h4 = Gn2(c6) ? [c6] : o5.chains, l6 = o5.methods || [], p4 = o5.events || [], f6 = o5.rpcMap || {}, u2 = bs(c6);
    n4[u2] = vt4(E3(E3({}, n4[u2]), o5), { chains: ut2(h4, (e2 = n4[u2]) == null ? void 0 : e2.chains), methods: ut2(l6, (s2 = n4[u2]) == null ? void 0 : s2.methods), events: ut2(p4, (i3 = n4[u2]) == null ? void 0 : i3.events) }), (Ye2(f6) || Ye2(((r3 = n4[u2]) == null ? void 0 : r3.rpcMap) || {})) && (n4[u2].rpcMap = E3(E3({}, f6), (a3 = n4[u2]) == null ? void 0 : a3.rpcMap));
  }
  return n4;
}
function ye4(t) {
  return t.includes(":") ? t.split(":")[2] : t;
}
function ve4(t) {
  const e2 = {};
  for (const [s2, i3] of Object.entries(t)) {
    const r3 = i3.methods || [], a3 = i3.events || [], n4 = i3.accounts || [], c6 = Gn2(s2) ? [s2] : i3.chains ? i3.chains : fe4(i3.accounts);
    e2[s2] = { chains: c6, methods: r3, events: a3, accounts: n4 };
  }
  return e2;
}
function H2(t) {
  return typeof t == "number" ? t : t.includes("0x") ? parseInt(t, 16) : (t = t.includes(":") ? t.split(":")[1] : t, isNaN(Number(t)) ? t : Number(t));
}
function Pt4(t) {
  try {
    const e2 = JSON.parse(t);
    return typeof e2 == "object" && e2 !== null && !Array.isArray(e2);
  } catch {
    return false;
  }
}
var we4 = {};
var w4 = (t) => we4[t];
var U2 = (t, e2) => {
  we4[t] = e2;
};
var Ot5 = Object.defineProperty;
var be4 = Object.getOwnPropertySymbols;
var It5 = Object.prototype.hasOwnProperty;
var St5 = Object.prototype.propertyIsEnumerable;
var Pe4 = (t, e2, s2) => e2 in t ? Ot5(t, e2, { enumerable: true, configurable: true, writable: true, value: s2 }) : t[e2] = s2;
var Oe4 = (t, e2) => {
  for (var s2 in e2 || (e2 = {})) It5.call(e2, s2) && Pe4(t, s2, e2[s2]);
  if (be4) for (var s2 of be4(e2)) St5.call(e2, s2) && Pe4(t, s2, e2[s2]);
  return t;
};
var Ie3 = "eip155";
var $t4 = ["atomic", "flow-control", "paymasterService", "sessionKeys", "auxiliaryFunds"];
var At3 = (t) => t && t.startsWith("0x") ? BigInt(t).toString(10) : t;
var B = (t) => t && t.startsWith("0x") ? t : `0x${BigInt(t).toString(16)}`;
var Se3 = (t) => Object.keys(t).filter((e2) => $t4.includes(e2)).reduce((e2, s2) => (e2[s2] = Et5(t[s2]), e2), {});
var Et5 = (t) => typeof t == "string" && Pt4(t) ? JSON.parse(t) : t;
var Ct3 = (t, e2, s2) => {
  const { sessionProperties: i3 = {}, scopedProperties: r3 = {} } = t, a3 = {};
  if (!Ye2(r3) && !Ye2(i3)) return;
  const n4 = Se3(i3);
  for (const c6 of s2) {
    const o5 = At3(c6);
    if (!o5) continue;
    a3[B(o5)] = n4;
    const h4 = r3?.[`${Ie3}:${o5}`];
    if (h4) {
      const l6 = h4?.[`${Ie3}:${o5}:${e2}`];
      a3[B(o5)] = Oe4(Oe4({}, a3[B(o5)]), Se3(l6 || h4));
    }
  }
  for (const [c6, o5] of Object.entries(a3)) Object.keys(o5).length === 0 && delete a3[c6];
  return Object.keys(a3).length > 0 ? a3 : void 0;
};
var jt4 = Object.defineProperty;
var Nt5 = (t, e2, s2) => e2 in t ? jt4(t, e2, { enumerable: true, configurable: true, writable: true, value: s2 }) : t[e2] = s2;
var qt4 = (t, e2, s2) => Nt5(t, typeof e2 != "symbol" ? e2 + "" : e2, s2);
var L2;
var J5 = class _J {
  constructor(e2) {
    qt4(this, "storage"), this.storage = e2;
  }
  async getItem(e2) {
    return await this.storage.getItem(e2);
  }
  async setItem(e2, s2) {
    return await this.storage.setItem(e2, s2);
  }
  async removeItem(e2) {
    return await this.storage.removeItem(e2);
  }
  static getStorage(e2) {
    return L2 || (L2 = new _J(e2)), L2;
  }
};
var Dt3 = Object.defineProperty;
var Rt5 = Object.defineProperties;
var _t4 = Object.getOwnPropertyDescriptors;
var $e4 = Object.getOwnPropertySymbols;
var xt4 = Object.prototype.hasOwnProperty;
var Ft4 = Object.prototype.propertyIsEnumerable;
var Ae4 = (t, e2, s2) => e2 in t ? Dt3(t, e2, { enumerable: true, configurable: true, writable: true, value: s2 }) : t[e2] = s2;
var Ht4 = (t, e2) => {
  for (var s2 in e2 || (e2 = {})) xt4.call(e2, s2) && Ae4(t, s2, e2[s2]);
  if ($e4) for (var s2 of $e4(e2)) Ft4.call(e2, s2) && Ae4(t, s2, e2[s2]);
  return t;
};
var Ut4 = (t, e2) => Rt5(t, _t4(e2));
async function Bt4(t, e2) {
  const s2 = Je2(t.result.capabilities.caip345.caip2), i3 = t.result.capabilities.caip345.transactionHashes, r3 = await Promise.allSettled(i3.map((p4) => Lt4(s2.reference, p4, e2))), a3 = r3.filter((p4) => p4.status === "fulfilled").map((p4) => p4.value).filter((p4) => p4);
  r3.filter((p4) => p4.status === "rejected").forEach((p4) => console.warn("Failed to fetch transaction receipt:", p4.reason));
  const n4 = !a3.length || a3.some((p4) => !p4), c6 = a3.every((p4) => p4?.status === "0x1"), o5 = a3.every((p4) => p4?.status === "0x0"), h4 = a3.some((p4) => p4?.status === "0x0");
  let l6;
  return n4 ? l6 = 100 : c6 ? l6 = 200 : o5 ? l6 = 500 : h4 && (l6 = 600), { id: t.result.id, version: t.request.version, atomic: t.request.atomicRequired, chainId: t.request.chainId, capabilities: t.result.capabilities, receipts: a3, status: l6 };
}
async function Lt4(t, e2, s2) {
  return await s2(parseInt(t)).request(formatJsonRpcRequest("eth_getTransactionReceipt", [e2]));
}
async function Mt4({ sendCalls: t, storage: e2 }) {
  const s2 = await e2.getItem(v5);
  await e2.setItem(v5, Ut4(Ht4({}, s2), { [t.result.id]: { request: t.request, result: t.result, expiry: Ni(ut4) } }));
}
async function zt4({ resultId: t, storage: e2 }) {
  const s2 = await e2.getItem(v5);
  if (s2) {
    delete s2[t], await e2.setItem(v5, s2);
    for (const i3 in s2) Ui(s2[i3].expiry) && delete s2[i3];
    await e2.setItem(v5, s2);
  }
}
async function Gt4({ resultId: t, storage: e2 }) {
  const s2 = await e2.getItem(v5), i3 = s2?.[t];
  if (i3 && !Ui(i3.expiry)) return i3;
  await zt4({ resultId: t, storage: e2 });
}
var Wt4 = Object.defineProperty;
var Jt4 = Object.defineProperties;
var Kt4 = Object.getOwnPropertyDescriptors;
var Ee3 = Object.getOwnPropertySymbols;
var Vt4 = Object.prototype.hasOwnProperty;
var Yt3 = Object.prototype.propertyIsEnumerable;
var M4 = (t, e2, s2) => e2 in t ? Wt4(t, e2, { enumerable: true, configurable: true, writable: true, value: s2 }) : t[e2] = s2;
var z4 = (t, e2) => {
  for (var s2 in e2 || (e2 = {})) Vt4.call(e2, s2) && M4(t, s2, e2[s2]);
  if (Ee3) for (var s2 of Ee3(e2)) Yt3.call(e2, s2) && M4(t, s2, e2[s2]);
  return t;
};
var G4 = (t, e2) => Jt4(t, Kt4(e2));
var g3 = (t, e2, s2) => M4(t, typeof e2 != "symbol" ? e2 + "" : e2, s2);
var Xt4 = class {
  constructor(e2) {
    g3(this, "name", "eip155"), g3(this, "client"), g3(this, "chainId"), g3(this, "namespace"), g3(this, "httpProviders"), g3(this, "events"), g3(this, "storage"), this.namespace = e2.namespace, this.events = w4("events"), this.client = w4("client"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain()), this.storage = J5.getStorage(this.client.core.storage);
  }
  async request(e2) {
    switch (e2.request.method) {
      case "eth_requestAccounts":
        return this.getAccounts();
      case "eth_accounts":
        return this.getAccounts();
      case "wallet_switchEthereumChain":
        return await this.handleSwitchChain(e2);
      case "eth_chainId":
        return parseInt(this.getDefaultChain());
      case "wallet_getCapabilities":
        return await this.getCapabilities(e2);
      case "wallet_getCallsStatus":
        return await this.getCallStatus(e2);
      case "wallet_sendCalls":
        return await this.sendCalls(e2);
    }
    return this.namespace.methods.includes(e2.request.method) ? await this.client.request(e2) : this.getHttpProvider().request(e2.request);
  }
  updateNamespace(e2) {
    this.namespace = Object.assign(this.namespace, e2);
  }
  setDefaultChain(e2, s2) {
    this.httpProviders[e2] || this.setHttpProvider(parseInt(e2), s2);
    const i3 = this.chainId;
    this.chainId = parseInt(e2), this.events.emit(F.DEFAULT_CHAIN_CHANGED, { currentCaipChainId: `${this.name}:${e2}`, previousCaipChainId: `${this.name}:${i3}` });
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId.toString();
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const e2 = this.namespace.chains[0];
    if (!e2) throw new Error("ChainId not found");
    return e2.split(":")[1];
  }
  createHttpProvider(e2, s2) {
    const i3 = s2 || de3(`${this.name}:${e2}`, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${e2}`);
    return new o3(new f5(i3, w4("disableProviderPing")));
  }
  setHttpProvider(e2, s2) {
    const i3 = this.createHttpProvider(e2, s2);
    i3 && (this.httpProviders[e2] = i3);
  }
  createHttpProviders() {
    const e2 = {};
    return this.namespace.chains.forEach((s2) => {
      var i3;
      const r3 = parseInt(wt4(s2));
      e2[r3] = this.createHttpProvider(r3, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[s2]);
    }), e2;
  }
  getAccounts() {
    const e2 = this.namespace.accounts;
    return e2 ? [...new Set(e2.filter((s2) => s2.split(":")[1] === this.chainId.toString()).map((s2) => s2.split(":")[2]))] : [];
  }
  getHttpProvider(e2) {
    const s2 = e2 || this.chainId;
    return this.httpProviders[s2] || (this.httpProviders = G4(z4({}, this.httpProviders), { [s2]: this.createHttpProvider(s2) }), this.httpProviders[s2]);
  }
  async handleSwitchChain(e2) {
    var s2, i3;
    let r3 = e2.request.params ? (s2 = e2.request.params[0]) == null ? void 0 : s2.chainId : "0x0";
    r3 = r3.startsWith("0x") ? r3 : `0x${r3}`;
    const a3 = parseInt(r3, 16);
    if (this.isChainApproved(a3)) this.setDefaultChain(`${a3}`);
    else if (this.namespace.methods.includes("wallet_switchEthereumChain")) await this.client.request({ topic: e2.topic, request: { method: e2.request.method, params: [{ chainId: r3 }] }, chainId: (i3 = this.namespace.chains) == null ? void 0 : i3[0] }), this.setDefaultChain(`${a3}`);
    else throw new Error(`Failed to switch to chain 'eip155:${a3}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`);
    return null;
  }
  isChainApproved(e2) {
    return this.namespace.chains.includes(`${this.name}:${e2}`);
  }
  async getCapabilities(e2) {
    var s2, i3, r3, a3, n4;
    const c6 = (i3 = (s2 = e2.request) == null ? void 0 : s2.params) == null ? void 0 : i3[0], o5 = ((a3 = (r3 = e2.request) == null ? void 0 : r3.params) == null ? void 0 : a3[1]) || [];
    if (!c6) throw new Error("Missing address parameter in `wallet_getCapabilities` request");
    const h4 = this.client.session.get(e2.topic), l6 = ((n4 = h4?.sessionProperties) == null ? void 0 : n4.capabilities) || {}, p4 = `${c6}${o5.join(",")}`, f6 = l6?.[p4];
    if (f6) return f6;
    let u2;
    try {
      u2 = Ct3(h4, c6, o5);
    } catch (q2) {
      console.warn("Failed to extract capabilities from session", q2);
    }
    if (u2) return u2;
    const K5 = await this.client.request(e2);
    try {
      await this.client.session.update(e2.topic, { sessionProperties: G4(z4({}, h4.sessionProperties || {}), { capabilities: G4(z4({}, l6 || {}), { [p4]: K5 }) }) });
    } catch (q2) {
      console.warn("Failed to update session with capabilities", q2);
    }
    return K5;
  }
  async getCallStatus(e2) {
    var s2, i3, r3;
    const a3 = this.client.session.get(e2.topic), n4 = (s2 = a3.sessionProperties) == null ? void 0 : s2.bundler_name;
    if (n4) {
      const h4 = this.getBundlerUrl(e2.chainId, n4);
      try {
        return await this.getUserOperationReceipt(h4, e2);
      } catch (l6) {
        console.warn("Failed to fetch call status from bundler", l6, h4);
      }
    }
    const c6 = (i3 = a3.sessionProperties) == null ? void 0 : i3.bundler_url;
    if (c6) try {
      return await this.getUserOperationReceipt(c6, e2);
    } catch (h4) {
      console.warn("Failed to fetch call status from custom bundler", h4, c6);
    }
    const o5 = await Gt4({ resultId: (r3 = e2.request.params) == null ? void 0 : r3[0], storage: this.storage });
    if (o5) try {
      return await Bt4(o5, this.getHttpProvider.bind(this));
    } catch (h4) {
      console.warn("Failed to fetch call status from stored send calls", h4, o5);
    }
    if (this.namespace.methods.includes(e2.request.method)) return await this.client.request(e2);
    throw new Error("Fetching call status not approved by the wallet.");
  }
  async getUserOperationReceipt(e2, s2) {
    var i3;
    const r3 = new URL(e2), a3 = await fetch(r3, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(formatJsonRpcRequest("eth_getUserOperationReceipt", [(i3 = s2.request.params) == null ? void 0 : i3[0]])) });
    if (!a3.ok) throw new Error(`Failed to fetch user operation receipt - ${a3.status}`);
    return await a3.json();
  }
  getBundlerUrl(e2, s2) {
    return `${lt4}?projectId=${this.client.core.projectId}&chainId=${e2}&bundler=${s2}`;
  }
  async sendCalls(e2) {
    var s2, i3, r3;
    const a3 = await this.client.request(e2), n4 = (s2 = e2.request.params) == null ? void 0 : s2[0], c6 = a3?.id, o5 = a3?.capabilities || {}, h4 = (i3 = o5?.caip345) == null ? void 0 : i3.caip2, l6 = (r3 = o5?.caip345) == null ? void 0 : r3.transactionHashes;
    return !c6 || !h4 || !(l6 != null && l6.length) || await Mt4({ sendCalls: { request: n4, result: a3 }, storage: this.storage }), a3;
  }
};
var kt4 = Object.defineProperty;
var Qt4 = (t, e2, s2) => e2 in t ? kt4(t, e2, { enumerable: true, configurable: true, writable: true, value: s2 }) : t[e2] = s2;
var b3 = (t, e2, s2) => Qt4(t, typeof e2 != "symbol" ? e2 + "" : e2, s2);
var Zt4 = class {
  constructor(e2) {
    b3(this, "name", he4), b3(this, "client"), b3(this, "httpProviders"), b3(this, "events"), b3(this, "namespace"), b3(this, "chainId"), this.namespace = e2.namespace, this.events = w4("events"), this.client = w4("client"), this.chainId = this.getDefaultChain(), this.name = this.getNamespaceName(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(e2) {
    this.namespace.chains = [...new Set((this.namespace.chains || []).concat(e2.chains || []))], this.namespace.accounts = [...new Set((this.namespace.accounts || []).concat(e2.accounts || []))], this.namespace.methods = [...new Set((this.namespace.methods || []).concat(e2.methods || []))], this.namespace.events = [...new Set((this.namespace.events || []).concat(e2.events || []))], this.httpProviders = this.createHttpProviders();
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(e2) {
    return this.namespace.methods.includes(e2.request.method) ? this.client.request(e2) : this.getHttpProvider(e2.chainId).request(e2.request);
  }
  setDefaultChain(e2, s2) {
    this.httpProviders[e2] || this.setHttpProvider(e2, s2);
    const i3 = this.chainId;
    this.chainId = e2, this.events.emit(F.DEFAULT_CHAIN_CHANGED, { currentCaipChainId: `${this.name}:${e2}`, previousCaipChainId: `${this.name}:${i3}` });
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const e2 = this.namespace.chains[0];
    if (!e2) throw new Error("ChainId not found");
    return e2.split(":")[1];
  }
  getNamespaceName() {
    const e2 = this.namespace.chains[0];
    if (!e2) throw new Error("ChainId not found");
    return Je2(e2).namespace;
  }
  getAccounts() {
    const e2 = this.namespace.accounts;
    return e2 ? [...new Set(e2.filter((s2) => s2.split(":")[1] === this.chainId.toString()).map((s2) => s2.split(":")[2]))] : [];
  }
  createHttpProviders() {
    var e2, s2;
    const i3 = {};
    return (s2 = (e2 = this.namespace) == null ? void 0 : e2.accounts) == null || s2.forEach((r3) => {
      var a3, n4;
      const c6 = Je2(r3), o5 = (n4 = (a3 = this.namespace) == null ? void 0 : a3.rpcMap) == null ? void 0 : n4[`${c6.namespace}:${c6.reference}`];
      i3[c6.reference] = this.createHttpProvider(r3, o5);
    }), i3;
  }
  getHttpProvider(e2) {
    const s2 = Je2(e2).reference, i3 = this.httpProviders[s2];
    if (typeof i3 > "u") throw new Error(`JSON-RPC provider for ${e2} not found`);
    return i3;
  }
  setHttpProvider(e2, s2) {
    const i3 = this.createHttpProvider(e2, s2);
    i3 && (this.httpProviders[e2] = i3);
  }
  createHttpProvider(e2, s2) {
    const i3 = s2 || de3(e2, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${e2}`);
    return new o3(new f5(i3, w4("disableProviderPing")));
  }
};
var Tt4 = Object.defineProperty;
var es2 = Object.defineProperties;
var ts2 = Object.getOwnPropertyDescriptors;
var Ce3 = Object.getOwnPropertySymbols;
var ss2 = Object.prototype.hasOwnProperty;
var is2 = Object.prototype.propertyIsEnumerable;
var W5 = (t, e2, s2) => e2 in t ? Tt4(t, e2, { enumerable: true, configurable: true, writable: true, value: s2 }) : t[e2] = s2;
var S3 = (t, e2) => {
  for (var s2 in e2 || (e2 = {})) ss2.call(e2, s2) && W5(t, s2, e2[s2]);
  if (Ce3) for (var s2 of Ce3(e2)) is2.call(e2, s2) && W5(t, s2, e2[s2]);
  return t;
};
var j5 = (t, e2) => es2(t, ts2(e2));
var d5 = (t, e2, s2) => W5(t, typeof e2 != "symbol" ? e2 + "" : e2, s2);
var N11 = class _N {
  constructor(e2) {
    d5(this, "client"), d5(this, "namespaces"), d5(this, "optionalNamespaces"), d5(this, "sessionProperties"), d5(this, "scopedProperties"), d5(this, "events", new import_events10.default()), d5(this, "rpcProviders", {}), d5(this, "session"), d5(this, "providerOpts"), d5(this, "logger"), d5(this, "uri"), d5(this, "disableProviderPing", false);
    var s2, i3;
    this.providerOpts = e2, this.logger = wu({ logger: (s2 = e2.logger) != null ? s2 : ce2, name: (i3 = this.providerOpts.name) != null ? i3 : oe3 }), this.disableProviderPing = e2?.disableProviderPing || false;
  }
  static async init(e2) {
    const s2 = new _N(e2);
    return await s2.initialize(), s2;
  }
  async request(e2, s2, i3) {
    const [r3, a3] = this.validateChain(s2);
    if (!this.session) throw new Error("Please call connect() before request()");
    return await this.getProvider(r3).request({ request: S3({}, e2), chainId: `${r3}:${a3}`, topic: this.session.topic, expiry: i3 });
  }
  sendAsync(e2, s2, i3, r3) {
    const a3 = (/* @__PURE__ */ new Date()).getTime();
    this.request(e2, i3, r3).then((n4) => s2(null, formatJsonRpcResult(a3, n4))).catch((n4) => s2(n4, void 0));
  }
  async enable() {
    if (!this.client) throw new Error("Sign Client not initialized");
    return this.session || await this.connect({ namespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties }), await this.requestAccounts();
  }
  async disconnect() {
    var e2;
    if (!this.session) throw new Error("Please call connect() before enable()");
    await this.client.disconnect({ topic: (e2 = this.session) == null ? void 0 : e2.topic, reason: zt2("USER_DISCONNECTED") }), await this.cleanup();
  }
  async connect(e2) {
    if (!this.client) throw new Error("Sign Client not initialized");
    if (this.setNamespaces(e2), this.cleanupPendingPairings(), !e2.skipPairing) return await this.pair(e2.pairingTopic);
  }
  async authenticate(e2, s2) {
    if (!this.client) throw new Error("Sign Client not initialized");
    this.setNamespaces(e2), await this.cleanupPendingPairings();
    const { uri: i3, response: r3 } = await this.client.authenticate(e2, s2);
    i3 && (this.uri = i3, this.events.emit("display_uri", i3));
    const a3 = await r3();
    if (this.session = a3.session, this.session) {
      const n4 = ve4(this.session.namespaces);
      this.namespaces = C4(this.namespaces, n4), await this.persist("namespaces", this.namespaces), this.onConnect();
    }
    return a3;
  }
  on(e2, s2) {
    this.events.on(e2, s2);
  }
  once(e2, s2) {
    this.events.once(e2, s2);
  }
  removeListener(e2, s2) {
    this.events.removeListener(e2, s2);
  }
  off(e2, s2) {
    this.events.off(e2, s2);
  }
  get isWalletConnect() {
    return true;
  }
  async pair(e2) {
    const { uri: s2, approval: i3 } = await this.client.connect({ pairingTopic: e2, requiredNamespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties });
    s2 && (this.uri = s2, this.events.emit("display_uri", s2));
    const r3 = await i3();
    this.session = r3;
    const a3 = ve4(r3.namespaces);
    return this.namespaces = C4(this.namespaces, a3), await this.persist("namespaces", this.namespaces), await this.persist("optionalNamespaces", this.optionalNamespaces), this.onConnect(), this.session;
  }
  setDefaultChain(e2, s2) {
    try {
      if (!this.session) return;
      const [i3, r3] = this.validateChain(e2);
      this.getProvider(i3).setDefaultChain(r3, s2);
    } catch (i3) {
      if (!/Please call connect/.test(i3.message)) throw i3;
    }
  }
  async cleanupPendingPairings(e2 = {}) {
    try {
      this.logger.info("Cleaning up inactive pairings...");
      const s2 = this.client.pairing.getAll();
      if (!Ee2(s2)) return;
      for (const i3 of s2) e2.deletePairings ? this.client.core.expirer.set(i3.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(i3.topic);
      this.logger.info(`Inactive pairings cleared: ${s2.length}`);
    } catch (s2) {
      this.logger.warn(s2, "Failed to cleanup pending pairings");
    }
  }
  abortPairingAttempt() {
    this.logger.warn("abortPairingAttempt is deprecated. This is now a no-op.");
  }
  async checkStorage() {
    this.namespaces = await this.getFromStore("namespaces") || {}, this.optionalNamespaces = await this.getFromStore("optionalNamespaces") || {}, this.session && this.createProviders();
  }
  async initialize() {
    this.logger.trace("Initialized"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();
  }
  async createClient() {
    var e2, s2;
    if (this.client = this.providerOpts.client || await Qs2.init({ core: this.providerOpts.core, logger: this.providerOpts.logger || ce2, relayUrl: this.providerOpts.relayUrl || pt3, projectId: this.providerOpts.projectId, metadata: this.providerOpts.metadata, storageOptions: this.providerOpts.storageOptions, storage: this.providerOpts.storage, name: this.providerOpts.name, customStoragePrefix: this.providerOpts.customStoragePrefix, telemetryEnabled: this.providerOpts.telemetryEnabled }), this.providerOpts.session) try {
      this.session = this.client.session.get(this.providerOpts.session.topic);
    } catch (i3) {
      throw this.logger.error(i3, "Failed to get session"), new Error(`The provided session: ${(s2 = (e2 = this.providerOpts) == null ? void 0 : e2.session) == null ? void 0 : s2.topic} doesn't exist in the Sign client`);
    }
    else {
      const i3 = this.client.session.getAll();
      this.session = i3[0];
    }
    this.logger.trace("SignClient Initialized");
  }
  createProviders() {
    if (!this.client) throw new Error("Sign Client not initialized");
    if (!this.session) throw new Error("Session not initialized. Please call connect() before enable()");
    const e2 = [...new Set(Object.keys(this.session.namespaces).map((s2) => bs(s2)))];
    U2("client", this.client), U2("events", this.events), U2("disableProviderPing", this.disableProviderPing), e2.forEach((s2) => {
      if (!this.session) return;
      const i3 = bt3(s2, this.session);
      if (i3?.length === 0) return;
      const r3 = fe4(i3), a3 = C4(this.namespaces, this.optionalNamespaces), n4 = j5(S3({}, a3[s2]), { accounts: i3, chains: r3 });
      switch (s2) {
        case "eip155":
          this.rpcProviders[s2] = new Xt4({ namespace: n4 });
          break;
        default:
          this.rpcProviders[s2] = new Zt4({ namespace: n4 });
      }
    });
  }
  registerEventListeners() {
    if (typeof this.client > "u") throw new Error("Sign Client is not initialized");
    this.client.on("session_ping", (e2) => {
      var s2;
      const { topic: i3 } = e2;
      i3 === ((s2 = this.session) == null ? void 0 : s2.topic) && this.events.emit("session_ping", e2);
    }), this.client.on("session_event", (e2) => {
      var s2;
      const { params: i3, topic: r3 } = e2;
      if (r3 !== ((s2 = this.session) == null ? void 0 : s2.topic)) return;
      const { event: a3 } = i3;
      if (a3.name === "accountsChanged") {
        const n4 = a3.data;
        n4 && Ee2(n4) && this.events.emit("accountsChanged", n4.map(ye4));
      } else if (a3.name === "chainChanged") {
        const n4 = i3.chainId, c6 = i3.event.data, o5 = bs(n4), h4 = H2(n4) !== H2(c6) ? `${o5}:${H2(c6)}` : n4;
        this.onChainChanged({ currentCaipChainId: h4 });
      } else this.events.emit(a3.name, a3.data);
      this.events.emit("session_event", e2);
    }), this.client.on("session_update", ({ topic: e2, params: s2 }) => {
      var i3, r3;
      if (e2 !== ((i3 = this.session) == null ? void 0 : i3.topic)) return;
      const { namespaces: a3 } = s2, n4 = (r3 = this.client) == null ? void 0 : r3.session.get(e2);
      this.session = j5(S3({}, n4), { namespaces: a3 }), this.onSessionUpdate(), this.events.emit("session_update", { topic: e2, params: s2 });
    }), this.client.on("session_delete", async (e2) => {
      var s2;
      e2.topic === ((s2 = this.session) == null ? void 0 : s2.topic) && (await this.cleanup(), this.events.emit("session_delete", e2), this.events.emit("disconnect", j5(S3({}, zt2("USER_DISCONNECTED")), { data: e2.topic })));
    }), this.on(F.DEFAULT_CHAIN_CHANGED, (e2) => {
      this.onChainChanged(j5(S3({}, e2), { internal: true }));
    });
  }
  getProvider(e2) {
    return this.rpcProviders[e2] || this.rpcProviders[he4];
  }
  onSessionUpdate() {
    Object.keys(this.rpcProviders).forEach((e2) => {
      var s2;
      this.getProvider(e2).updateNamespace((s2 = this.session) == null ? void 0 : s2.namespaces[e2]);
    });
  }
  setNamespaces(e2) {
    const { namespaces: s2 = {}, optionalNamespaces: i3 = {}, sessionProperties: r3, scopedProperties: a3 } = e2;
    this.optionalNamespaces = C4(s2, i3), this.sessionProperties = r3, this.scopedProperties = a3;
  }
  validateChain(e2) {
    const [s2, i3] = e2?.split(":") || ["", ""];
    if (!this.namespaces || !Object.keys(this.namespaces).length) return [s2, i3];
    if (s2 && !Object.keys(this.namespaces || {}).map((n4) => bs(n4)).includes(s2)) throw new Error(`Namespace '${s2}' is not configured. Please call connect() first with namespace config.`);
    if (s2 && i3) return [s2, i3];
    const r3 = bs(Object.keys(this.namespaces)[0]), a3 = this.rpcProviders[r3].getDefaultChain();
    return [r3, a3];
  }
  async requestAccounts() {
    const [e2] = this.validateChain();
    return await this.getProvider(e2).requestAccounts();
  }
  async onChainChanged({ currentCaipChainId: e2, previousCaipChainId: s2, internal: i3 = false }) {
    if (!this.namespaces) return;
    const [r3, a3] = this.validateChain(e2);
    a3 && (this.updateNamespaceChain(r3, a3), i3 ? (this.events.emit("chainChanged", a3), this.emitAccountsChangedOnChainChange({ namespace: r3, currentCaipChainId: e2, previousCaipChainId: s2 })) : this.getProvider(r3).setDefaultChain(a3), await this.persist("namespaces", this.namespaces));
  }
  emitAccountsChangedOnChainChange({ namespace: e2, currentCaipChainId: s2, previousCaipChainId: i3 }) {
    var r3, a3;
    try {
      if (i3 === s2) return;
      const n4 = (a3 = (r3 = this.session) == null ? void 0 : r3.namespaces[e2]) == null ? void 0 : a3.accounts;
      if (!n4) return;
      const c6 = n4.filter((o5) => o5.includes(`${s2}:`)).map(ye4);
      if (!Ee2(c6)) return;
      this.events.emit("accountsChanged", c6);
    } catch (n4) {
      this.logger.warn(n4, "Failed to emit accountsChanged on chain change");
    }
  }
  updateNamespaceChain(e2, s2) {
    if (!this.namespaces) return;
    const i3 = this.namespaces[e2] ? e2 : `${e2}:${s2}`, r3 = { chains: [], methods: [], events: [], defaultChain: s2 };
    this.namespaces[i3] ? this.namespaces[i3] && (this.namespaces[i3].defaultChain = s2) : this.namespaces[i3] = r3;
  }
  onConnect() {
    this.createProviders(), this.events.emit("connect", { session: this.session });
  }
  async cleanup() {
    this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, await this.deleteFromStore("namespaces"), await this.deleteFromStore("optionalNamespaces"), await this.deleteFromStore("sessionProperties"), this.session = void 0, this.cleanupPendingPairings({ deletePairings: true }), await this.cleanupStorage();
  }
  async persist(e2, s2) {
    var i3;
    const r3 = ((i3 = this.session) == null ? void 0 : i3.topic) || "";
    await this.client.core.storage.setItem(`${A2}/${e2}${r3}`, s2);
  }
  async getFromStore(e2) {
    var s2;
    const i3 = ((s2 = this.session) == null ? void 0 : s2.topic) || "";
    return await this.client.core.storage.getItem(`${A2}/${e2}${i3}`);
  }
  async deleteFromStore(e2) {
    var s2;
    const i3 = ((s2 = this.session) == null ? void 0 : s2.topic) || "";
    await this.client.core.storage.removeItem(`${A2}/${e2}${i3}`);
  }
  async cleanupStorage() {
    var e2;
    try {
      if (((e2 = this.client) == null ? void 0 : e2.session.length) > 0) return;
      const s2 = await this.client.core.storage.getKeys();
      for (const i3 of s2) i3.startsWith(A2) && await this.client.core.storage.removeItem(i3);
    } catch (s2) {
      this.logger.warn(s2, "Failed to cleanup storage");
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/EnsUtil.js
var SLIP44_MSB = 2147483648;
var EnsUtil = {
  convertEVMChainIdToCoinType(chainId) {
    if (chainId >= SLIP44_MSB) {
      throw new Error("Invalid chainId");
    }
    return (SLIP44_MSB | chainId) >>> 0;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EnsController.js
var state2 = proxy({
  suggestions: [],
  loading: false
});
var controller2 = {
  state: state2,
  subscribe(callback) {
    return subscribe(state2, () => callback(state2));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state2, key, callback);
  },
  async resolveName(name2) {
    try {
      return await BlockchainApiController.lookupEnsName(name2);
    } catch (e2) {
      const error = e2;
      throw new Error(error?.reasons?.[0]?.description || "Error resolving name");
    }
  },
  async isNameRegistered(name2) {
    try {
      await BlockchainApiController.lookupEnsName(name2);
      return true;
    } catch {
      return false;
    }
  },
  async getSuggestions(value) {
    try {
      state2.loading = true;
      state2.suggestions = [];
      const response = await BlockchainApiController.getEnsNameSuggestions(value);
      state2.suggestions = response.suggestions || [];
      return state2.suggestions;
    } catch (e2) {
      const errorMessage = EnsController.parseEnsApiError(e2, "Error fetching name suggestions");
      throw new Error(errorMessage);
    } finally {
      state2.loading = false;
    }
  },
  async getNamesForAddress(address) {
    try {
      const network = ChainController.state.activeCaipNetwork;
      if (!network) {
        return [];
      }
      const cachedEns = StorageUtil.getEnsFromCacheForAddress(address);
      if (cachedEns) {
        return cachedEns;
      }
      const response = await BlockchainApiController.reverseLookupEnsName({ address });
      StorageUtil.updateEnsCache({
        address,
        ens: response,
        timestamp: Date.now()
      });
      return response;
    } catch (e2) {
      const errorMessage = EnsController.parseEnsApiError(e2, "Error fetching names for address");
      throw new Error(errorMessage);
    }
  },
  async registerName(name2) {
    const network = ChainController.state.activeCaipNetwork;
    const address = ChainController.getAccountData(network?.chainNamespace)?.address;
    const emailConnector = ConnectorController.getAuthConnector();
    if (!network) {
      throw new Error("Network not found");
    }
    if (!address || !emailConnector) {
      throw new Error("Address or auth connector not found");
    }
    state2.loading = true;
    try {
      const message = JSON.stringify({
        name: name2,
        attributes: {},
        // Unix timestamp
        timestamp: Math.floor(Date.now() / 1e3)
      });
      RouterController.pushTransactionStack({
        onCancel() {
          RouterController.replace("RegisterAccountName");
        }
      });
      const signature = await ConnectionController.signMessage(message);
      state2.loading = false;
      const networkId = network.id;
      if (!networkId) {
        throw new Error("Network not found");
      }
      const coinType = EnsUtil.convertEVMChainIdToCoinType(Number(networkId));
      await BlockchainApiController.registerEnsName({
        coinType,
        address,
        signature,
        message
      });
      ChainController.setAccountProp("profileName", name2, network.chainNamespace);
      StorageUtil.updateEnsCache({
        address,
        ens: [
          {
            name: name2,
            registered_at: (/* @__PURE__ */ new Date()).toISOString(),
            updated_at: void 0,
            addresses: {},
            attributes: []
          }
        ],
        timestamp: Date.now()
      });
      RouterController.replace("RegisterAccountNameSuccess");
    } catch (e2) {
      const errorMessage = EnsController.parseEnsApiError(e2, `Error registering name ${name2}`);
      RouterController.replace("RegisterAccountName");
      throw new Error(errorMessage);
    } finally {
      state2.loading = false;
    }
  },
  validateName(name2) {
    return /^[a-zA-Z0-9-]{4,}$/u.test(name2);
  },
  parseEnsApiError(error, defaultError) {
    const ensError = error;
    return ensError?.reasons?.[0]?.description || defaultError;
  }
};
var EnsController = withErrorBoundary(controller2);

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/WalletConnectUtil.js
var DEFAULT_METHODS = {
  solana: [
    "solana_signMessage",
    "solana_signTransaction",
    "solana_requestAccounts",
    "solana_getAccounts",
    "solana_signAllTransactions",
    "solana_signAndSendTransaction"
  ],
  eip155: [
    "eth_accounts",
    "eth_requestAccounts",
    "eth_sendRawTransaction",
    "eth_sign",
    "eth_signTransaction",
    "eth_signTypedData",
    "eth_signTypedData_v3",
    "eth_signTypedData_v4",
    "eth_sendTransaction",
    "personal_sign",
    "wallet_switchEthereumChain",
    "wallet_addEthereumChain",
    "wallet_getPermissions",
    "wallet_requestPermissions",
    "wallet_registerOnboarding",
    "wallet_watchAsset",
    "wallet_scanQRCode",
    // EIP-5792
    "wallet_getCallsStatus",
    "wallet_showCallsStatus",
    "wallet_sendCalls",
    "wallet_getCapabilities",
    // EIP-7715
    "wallet_grantPermissions",
    "wallet_revokePermissions",
    //EIP-7811
    "wallet_getAssets"
  ],
  bip122: ["sendTransfer", "signMessage", "signPsbt", "getAccountAddresses"]
};
var WcHelpersUtil = {
  RPC_ERROR_CODE: {
    USER_REJECTED: 5e3,
    USER_REJECTED_METHODS: 5002
  },
  getMethodsByChainNamespace(chainNamespace) {
    return DEFAULT_METHODS[chainNamespace] || [];
  },
  createDefaultNamespace(chainNamespace) {
    return {
      methods: this.getMethodsByChainNamespace(chainNamespace),
      events: ["accountsChanged", "chainChanged"],
      chains: [],
      rpcMap: {}
    };
  },
  applyNamespaceOverrides(baseNamespaces, overrides) {
    if (!overrides) {
      return { ...baseNamespaces };
    }
    const result = { ...baseNamespaces };
    const namespacesToOverride = /* @__PURE__ */ new Set();
    if (overrides.methods) {
      Object.keys(overrides.methods).forEach((ns2) => namespacesToOverride.add(ns2));
    }
    if (overrides.chains) {
      Object.keys(overrides.chains).forEach((ns2) => namespacesToOverride.add(ns2));
    }
    if (overrides.events) {
      Object.keys(overrides.events).forEach((ns2) => namespacesToOverride.add(ns2));
    }
    if (overrides.rpcMap) {
      Object.keys(overrides.rpcMap).forEach((chainId) => {
        const [ns2] = chainId.split(":");
        if (ns2) {
          namespacesToOverride.add(ns2);
        }
      });
    }
    namespacesToOverride.forEach((ns2) => {
      if (!result[ns2]) {
        result[ns2] = this.createDefaultNamespace(ns2);
      }
    });
    if (overrides.methods) {
      Object.entries(overrides.methods).forEach(([ns2, methods]) => {
        if (result[ns2]) {
          result[ns2].methods = methods;
        }
      });
    }
    if (overrides.chains) {
      Object.entries(overrides.chains).forEach(([ns2, chains]) => {
        if (result[ns2]) {
          result[ns2].chains = chains;
        }
      });
    }
    if (overrides.events) {
      Object.entries(overrides.events).forEach(([ns2, events]) => {
        if (result[ns2]) {
          result[ns2].events = events;
        }
      });
    }
    if (overrides.rpcMap) {
      const processedNamespaces = /* @__PURE__ */ new Set();
      Object.entries(overrides.rpcMap).forEach(([chainId, rpcUrl]) => {
        const [ns2, id] = chainId.split(":");
        if (!ns2 || !id || !result[ns2]) {
          return;
        }
        if (!result[ns2].rpcMap) {
          result[ns2].rpcMap = {};
        }
        if (!processedNamespaces.has(ns2)) {
          result[ns2].rpcMap = {};
          processedNamespaces.add(ns2);
        }
        result[ns2].rpcMap[id] = rpcUrl;
      });
    }
    return result;
  },
  createNamespaces(caipNetworks, configOverride) {
    const defaultNamespaces = caipNetworks.reduce((acc, chain2) => {
      const { id, chainNamespace, rpcUrls } = chain2;
      const rpcUrl = rpcUrls.default.http[0];
      if (!acc[chainNamespace]) {
        acc[chainNamespace] = this.createDefaultNamespace(chainNamespace);
      }
      const caipNetworkId = `${chainNamespace}:${id}`;
      const namespace = acc[chainNamespace];
      namespace.chains.push(caipNetworkId);
      switch (caipNetworkId) {
        case "solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp":
          namespace.chains.push("solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ");
          break;
        case "solana:EtWTRABZaYq6iMfeYKouRu166VU2xqa1":
          namespace.chains.push("solana:8E9rvCKLFQia2Y35HXjjpWzj8weVo44K");
          break;
        default:
      }
      if (namespace?.rpcMap && rpcUrl) {
        namespace.rpcMap[id] = rpcUrl;
      }
      return acc;
    }, {});
    return this.applyNamespaceOverrides(defaultNamespaces, configOverride);
  },
  resolveReownName: async (name2) => {
    const wcNameAddress = await EnsController.resolveName(name2);
    const networkNameAddresses = Object.values(wcNameAddress?.addresses) || [];
    return networkNameAddresses[0]?.address || false;
  },
  getChainsFromNamespaces(namespaces = {}) {
    return Object.values(namespaces).flatMap((namespace) => {
      const chains = namespace.chains || [];
      const accountsChains = namespace.accounts.map((account) => {
        const [chainNamespace, chainId] = account.split(":");
        return `${chainNamespace}:${chainId}`;
      });
      return Array.from(/* @__PURE__ */ new Set([...chains, ...accountsChains]));
    });
  },
  isSessionEventData(data) {
    return typeof data === "object" && data !== null && "id" in data && "topic" in data && "params" in data && typeof data.params === "object" && data.params !== null && "chainId" in data.params && "event" in data.params && typeof data.params.event === "object" && data.params.event !== null;
  },
  isUserRejectedRequestError(error) {
    try {
      if (typeof error === "object" && error !== null) {
        const objErr = error;
        const hasCode = typeof objErr["code"] === "number";
        const hasUserRejectedMethods = hasCode && objErr["code"] === WcHelpersUtil.RPC_ERROR_CODE.USER_REJECTED_METHODS;
        const hasUserRejected = hasCode && objErr["code"] === WcHelpersUtil.RPC_ERROR_CODE.USER_REJECTED;
        return hasUserRejectedMethods || hasUserRejected;
      }
      return false;
    } catch {
      return false;
    }
  },
  isOriginAllowed(currentOrigin, allowedPatterns, defaultAllowedOrigins) {
    for (const pattern of [...allowedPatterns, ...defaultAllowedOrigins]) {
      if (pattern.includes("*")) {
        const escapedPattern = pattern.replace(/[.*+?^${}()|[\]\\]/gu, "\\$&");
        const regexString = `^${escapedPattern.replace(/\\\*/gu, ".*")}$`;
        const regex = new RegExp(regexString, "u");
        if (regex.test(currentOrigin)) {
          return true;
        }
      } else {
        try {
          if (new URL(pattern).origin === currentOrigin) {
            return true;
          }
        } catch (e2) {
          if (pattern === currentOrigin) {
            return true;
          }
        }
      }
    }
    return false;
  },
  listenWcProvider({ universalProvider, namespace, onConnect, onDisconnect, onAccountsChanged, onChainChanged, onDisplayUri }) {
    if (onConnect) {
      universalProvider.on("connect", () => {
        const accounts = WcHelpersUtil.getWalletConnectAccounts(universalProvider, namespace);
        onConnect(accounts);
      });
    }
    if (onDisconnect) {
      universalProvider.on("disconnect", () => {
        onDisconnect();
      });
    }
    if (onAccountsChanged) {
      universalProvider.on("accountsChanged", (accounts) => {
        try {
          const allAccounts = universalProvider.session?.namespaces?.[namespace]?.accounts || [];
          const defaultChain = universalProvider.rpcProviders?.[namespace]?.getDefaultChain();
          const parsedAccounts = accounts.map((account) => {
            const caipAccount = allAccounts.find((acc) => acc.includes(`${namespace}:${defaultChain}:${account}`));
            if (!caipAccount) {
              return void 0;
            }
            const { chainId, chainNamespace } = ParseUtil.parseCaipAddress(caipAccount);
            return {
              address: account,
              chainId,
              chainNamespace
            };
          }).filter((account) => account !== void 0);
          if (parsedAccounts.length > 0) {
            onAccountsChanged(parsedAccounts);
          }
        } catch (error) {
          console.warn("Failed to parse accounts for namespace on accountsChanged event", namespace, accounts, error);
        }
      });
    }
    if (onChainChanged) {
      universalProvider.on("chainChanged", (chainId) => {
        onChainChanged(chainId);
      });
    }
    if (onDisplayUri) {
      universalProvider.on("display_uri", (uri) => {
        onDisplayUri(uri);
      });
    }
  },
  getWalletConnectAccounts(universalProvider, namespace) {
    const accountsAdded = /* @__PURE__ */ new Set();
    const accounts = universalProvider?.session?.namespaces?.[namespace]?.accounts?.map((account) => ParseUtil.parseCaipAddress(account)).filter(({ address }) => {
      if (accountsAdded.has(address.toLowerCase())) {
        return false;
      }
      accountsAdded.add(address.toLowerCase());
      return true;
    });
    if (accounts && accounts.length > 0) {
      return accounts;
    }
    return [];
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AdapterController/ChainAdapterBlueprint.js
var IGNORED_CONNECTOR_IDS_FOR_LISTENER = [
  ConstantsUtil.CONNECTOR_ID.AUTH,
  ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT
];
var AdapterBlueprint = class {
  /**
   * Creates an instance of AdapterBlueprint.
   * @param {AdapterBlueprint.Params} params - The parameters for initializing the adapter
   */
  constructor(params) {
    this.availableConnectors = [];
    this.availableConnections = [];
    this.providerHandlers = {};
    this.eventListeners = /* @__PURE__ */ new Map();
    this.getCaipNetworks = (namespace) => ChainController.getCaipNetworks(namespace);
    this.getConnectorId = (namespace) => ConnectorController.getConnectorId(namespace);
    if (params) {
      this.construct(params);
    }
  }
  /**
   * Initializes the adapter with the given parameters.
   * @param {AdapterBlueprint.Params} params - The parameters for initializing the adapter
   */
  construct(params) {
    this.projectId = params.projectId;
    this.namespace = params.namespace;
    this.adapterType = params.adapterType;
  }
  /**
   * Gets the available connectors.
   * @returns {Connector[]} An array of available connectors
   */
  get connectors() {
    return this.availableConnectors;
  }
  /**
   * Gets the available connections.
   * @returns {Connection[]} An array of available connections
   */
  get connections() {
    return this.availableConnections;
  }
  /**
   * Gets the supported networks.
   * @returns {CaipNetwork[]} An array of supported networks
   */
  get networks() {
    return this.getCaipNetworks(this.namespace);
  }
  /**
   * Handles the auth connected event.
   * @param {W3mFrameTypes.Responses['FrameGetUserResponse']} user - The user response
   */
  onAuthConnected({ accounts, chainId }) {
    const caipNetwork = this.getCaipNetworks().filter((n4) => n4.chainNamespace === this.namespace).find((n4) => n4.id.toString() === chainId?.toString());
    if (accounts && caipNetwork) {
      this.addConnection({
        connectorId: ConstantsUtil.CONNECTOR_ID.AUTH,
        accounts,
        caipNetwork
      });
    }
  }
  /**
   * Sets the auth provider.
   * @param {W3mFrameProvider} authProvider - The auth provider instance
   */
  setAuthProvider(authProvider) {
    authProvider.onConnect(this.onAuthConnected.bind(this));
    authProvider.onSocialConnected(this.onAuthConnected.bind(this));
    this.addConnector({
      id: ConstantsUtil.CONNECTOR_ID.AUTH,
      type: "AUTH",
      name: ConstantsUtil.CONNECTOR_NAMES.AUTH,
      provider: authProvider,
      imageId: void 0,
      chain: this.namespace,
      chains: []
    });
  }
  /**
   * Adds one or more connectors to the available connectors list.
   * @param {...Connector} connectors - The connectors to add
   */
  addConnector(...connectors) {
    const connectorsAdded = /* @__PURE__ */ new Set();
    this.availableConnectors = [...connectors, ...this.availableConnectors].filter((connector) => {
      if (connectorsAdded.has(connector.id)) {
        return false;
      }
      connectorsAdded.add(connector.id);
      return true;
    });
    this.emit("connectors", this.availableConnectors);
  }
  /**
   * Adds connections to the available connections list
   * @param {...Connection} connections - The connections to add
   */
  addConnection(...connections) {
    const connectionsAdded = /* @__PURE__ */ new Set();
    this.availableConnections = [...connections, ...this.availableConnections].filter((connection) => {
      if (connectionsAdded.has(connection.connectorId.toLowerCase())) {
        return false;
      }
      connectionsAdded.add(connection.connectorId.toLowerCase());
      return true;
    });
    this.emit("connections", this.availableConnections);
  }
  /**
   * Deletes a connection from the available connections list
   * @param {string} connectorId - The connector ID of the connection to delete
   */
  deleteConnection(connectorId) {
    this.availableConnections = this.availableConnections.filter((c6) => c6.connectorId.toLowerCase() !== connectorId.toLowerCase());
    this.emit("connections", this.availableConnections);
  }
  /**
   * Clears all connections from the available connections list
   * @param {boolean} emit - Whether to emit the connections event
   */
  clearConnections(emit = false) {
    this.availableConnections = [];
    if (emit) {
      this.emit("connections", this.availableConnections);
    }
  }
  setStatus(status, chainNamespace) {
    ChainController.setAccountProp("status", status, chainNamespace);
  }
  /**
   * Adds an event listener for a specific event.
   * @template T
   * @param {T} eventName - The name of the event
   * @param {EventCallback<T>} callback - The callback function to be called when the event is emitted
   */
  on(eventName, callback) {
    if (!this.eventListeners.has(eventName)) {
      this.eventListeners.set(eventName, /* @__PURE__ */ new Set());
    }
    this.eventListeners.get(eventName)?.add(callback);
  }
  /**
   * Removes an event listener for a specific event.
   * @template T
   * @param {T} eventName - The name of the event
   * @param {EventCallback<T>} callback - The callback function to be removed
   */
  off(eventName, callback) {
    const listeners = this.eventListeners.get(eventName);
    if (listeners) {
      listeners.delete(callback);
    }
  }
  /**
   * Removes all event listeners.
   */
  removeAllEventListeners() {
    this.eventListeners.forEach((listeners) => {
      listeners.clear();
    });
  }
  /**
   * Emits an event with the given name and optional data.
   * @template T
   * @param {T} eventName - The name of the event to emit
   * @param {EventData[T]} [data] - The optional data to be passed to the event listeners
   */
  emit(eventName, data) {
    const listeners = this.eventListeners.get(eventName);
    if (listeners) {
      listeners.forEach((callback) => callback(data));
    }
  }
  /**
   * Connects to WalletConnect.
   * @param {number | string} [_chainId] - Optional chain ID to connect to
   */
  async connectWalletConnect(_chainId) {
    try {
      const connector = this.getWalletConnectConnector();
      const result = await connector.connectWalletConnect();
      return { clientId: result.clientId };
    } catch (err) {
      if (WcHelpersUtil.isUserRejectedRequestError(err)) {
        throw new UserRejectedRequestError(err);
      }
      throw err;
    }
  }
  /**
   * Switches the network.
   * @param {AdapterBlueprint.SwitchNetworkParams} params - Network switching parameters
   */
  async switchNetwork(params) {
    const { caipNetwork } = params;
    const providerType = ProviderController.getProviderId(caipNetwork.chainNamespace);
    const provider = ProviderController.getProvider(caipNetwork.chainNamespace);
    if (!provider) {
      throw new Error("Provider not found");
    }
    if (providerType === "WALLET_CONNECT") {
      const walletConnectProvider = provider;
      walletConnectProvider.setDefaultChain(caipNetwork.caipNetworkId);
      return;
    }
    if (providerType === "AUTH") {
      const authProvider = ConnectorController.getAuthConnector()?.provider;
      if (!authProvider) {
        throw new Error("Auth provider not found");
      }
      const preferredAccountType = getPreferredAccountType(caipNetwork.chainNamespace);
      await authProvider.switchNetwork({ chainId: caipNetwork.caipNetworkId });
      const user = await authProvider.getUser({
        chainId: caipNetwork.caipNetworkId,
        preferredAccountType
      });
      this.emit("switchNetwork", user);
    }
  }
  getWalletConnectConnector() {
    const connector = this.connectors.find((c6) => c6.id === "walletConnect");
    if (!connector) {
      throw new Error("WalletConnectConnector not found");
    }
    return connector;
  }
  /**
   * Handles connect event for a specific connector.
   * @param {string[]} accounts - The accounts that changed
   * @param {string} connectorId - The ID of the connector
   */
  onConnect(accounts, connectorId) {
    if (accounts.length > 0) {
      const { address, chainId } = CoreHelperUtil.getAccount(accounts[0]);
      const caipNetwork = this.getCaipNetworks().filter((n4) => n4.chainNamespace === this.namespace).find((n4) => n4.id.toString() === chainId?.toString());
      const connector = this.connectors.find((c6) => c6.id === connectorId);
      if (address) {
        this.emit("accountChanged", {
          address,
          chainId,
          connector
        });
        this.addConnection({
          connectorId,
          accounts: accounts.map((_account) => {
            const { address: address2 } = CoreHelperUtil.getAccount(_account);
            return { address: address2 };
          }),
          caipNetwork
        });
      }
    }
  }
  /**
   * Handles accounts changed event for a specific connector.
   * @param {string[]} accounts - The accounts that changed
   * @param {string} connectorId - The ID of the connector
   */
  onAccountsChanged(accounts, connectorId, disconnectIfNoAccounts = true) {
    if (accounts.length > 0) {
      const { address } = CoreHelperUtil.getAccount(accounts[0]);
      const connection = this.getConnection({
        connectorId,
        connections: this.connections,
        connectors: this.connectors
      });
      if (address && this.getConnectorId(ConstantsUtil.CHAIN.EVM)?.toLowerCase() === connectorId.toLowerCase()) {
        this.emit("accountChanged", {
          address,
          chainId: connection?.caipNetwork?.id,
          connector: connection?.connector
        });
      }
      this.addConnection({
        connectorId,
        accounts: accounts.map((_account) => {
          const { address: address2 } = CoreHelperUtil.getAccount(_account);
          return { address: address2 };
        }),
        caipNetwork: connection?.caipNetwork
      });
    } else if (disconnectIfNoAccounts) {
      this.onDisconnect(connectorId);
    }
  }
  /**
   * Handles disconnect event for a specific connector.
   * @param {string} connectorId - The ID of the connector
   */
  onDisconnect(connectorId) {
    this.removeProviderListeners(connectorId);
    this.deleteConnection(connectorId);
    if (this.getConnectorId(ConstantsUtil.CHAIN.EVM)?.toLowerCase() === connectorId.toLowerCase()) {
      this.emitFirstAvailableConnection();
    }
    if (this.connections.length === 0) {
      this.emit("disconnect");
    }
  }
  /**
   * Handles chain changed event for a specific connector.
   * @param {string} chainId - The ID of the chain that changed
   * @param {string} connectorId - The ID of the connector
   */
  onChainChanged(chainId, connectorId) {
    const formattedChainId = typeof chainId === "string" && chainId.startsWith("0x") ? parseInt(chainId, 16).toString() : chainId.toString();
    const connection = this.getConnection({
      connectorId,
      connections: this.connections,
      connectors: this.connectors
    });
    const caipNetwork = this.getCaipNetworks().filter((n4) => n4.chainNamespace === this.namespace).find((n4) => n4.id.toString() === formattedChainId);
    if (connection) {
      this.addConnection({
        connectorId,
        accounts: connection.accounts,
        caipNetwork
      });
    }
    if (this.getConnectorId(ConstantsUtil.CHAIN.EVM)?.toLowerCase() === connectorId.toLowerCase()) {
      this.emit("switchNetwork", { chainId: formattedChainId });
    }
  }
  /**
   * Listens to provider events for a specific connector.
   * @param {string} connectorId - The ID of the connector
   * @param {Provider | CombinedProvider} provider - The provider to listen to
   */
  listenProviderEvents(connectorId, provider) {
    if (IGNORED_CONNECTOR_IDS_FOR_LISTENER.includes(connectorId)) {
      return;
    }
    const accountsChangedHandler = (accounts) => this.onAccountsChanged(accounts, connectorId);
    const chainChangedHandler = (chainId) => this.onChainChanged(chainId, connectorId);
    const disconnectHandler = () => this.onDisconnect(connectorId);
    if (!this.providerHandlers[connectorId]) {
      provider.on("disconnect", disconnectHandler);
      provider.on("accountsChanged", accountsChangedHandler);
      provider.on("chainChanged", chainChangedHandler);
      this.providerHandlers[connectorId] = {
        provider,
        disconnect: disconnectHandler,
        accountsChanged: accountsChangedHandler,
        chainChanged: chainChangedHandler
      };
    }
  }
  /**
   * Removes provider listeners for a specific connector.
   * @param {string} connectorId - The ID of the connector
   */
  removeProviderListeners(connectorId) {
    if (this.providerHandlers[connectorId]) {
      const { provider, disconnect, accountsChanged, chainChanged } = this.providerHandlers[connectorId];
      provider.removeListener("disconnect", disconnect);
      provider.removeListener("accountsChanged", accountsChanged);
      provider.removeListener("chainChanged", chainChanged);
      this.providerHandlers[connectorId] = null;
    }
  }
  /**
   * Emits the first available connection.
   */
  emitFirstAvailableConnection() {
    const connection = this.getConnection({
      connections: this.connections,
      connectors: this.connectors
    });
    if (connection) {
      const [account] = connection.accounts;
      this.emit("accountChanged", {
        address: account?.address,
        chainId: connection.caipNetwork?.id,
        connector: connection.connector
      });
    }
  }
  /**
   * Gets a connection based on provided parameters.
   * If connectorId is provided, returns connection for that specific connector.
   * Otherwise, returns the first available valid connection.
   *
   * @param params - Connection parameters
   * @param params.address - Optional address to filter by
   * @param params.connectorId - Optional connector ID to filter by
   * @param params.connections - List of available connections
   * @param params.connectors - List of available connectors
   * @returns Connection or null if none found
   */
  getConnection({ address, connectorId, connections, connectors }) {
    if (connectorId) {
      const connection = connections.find((c6) => c6.connectorId.toLowerCase() === connectorId.toLowerCase());
      if (!connection) {
        return null;
      }
      const connector = connectors.find((c6) => c6.id.toLowerCase() === connection.connectorId.toLowerCase());
      const account = address ? connection.accounts.find((a3) => a3.address.toLowerCase() === address.toLowerCase()) : connection.accounts[0];
      return { ...connection, account, connector };
    }
    const validConnection = connections.find((c6) => c6.accounts.length > 0 && connectors.some((conn) => conn.id.toLowerCase() === c6.connectorId.toLowerCase()));
    if (validConnection) {
      const [account] = validConnection.accounts;
      const connector = connectors.find((c6) => c6.id.toLowerCase() === validConnection.connectorId.toLowerCase());
      return {
        ...validConnection,
        account,
        connector
      };
    }
    return null;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/SIWXUtil.js
var addEmbeddedWalletSessionPromise = null;
var SIWXUtil = {
  getSIWX() {
    return OptionsController.state.siwx;
  },
  async initializeIfEnabled(caipAddress = ChainController.getActiveCaipAddress()) {
    const siwx = OptionsController.state.siwx;
    if (!(siwx && caipAddress)) {
      return;
    }
    const [namespace, chainId, address] = caipAddress.split(":");
    if (!ChainController.checkIfSupportedNetwork(namespace, `${namespace}:${chainId}`)) {
      return;
    }
    try {
      if (OptionsController.state.remoteFeatures?.emailCapture) {
        const user = ChainController.getAccountData(namespace)?.user;
        await ModalController.open({
          view: "DataCapture",
          data: {
            email: user?.email ?? void 0
          }
        });
        return;
      }
      if (addEmbeddedWalletSessionPromise) {
        await addEmbeddedWalletSessionPromise;
      }
      const sessions = await siwx.getSessions(`${namespace}:${chainId}`, address);
      if (sessions.length) {
        return;
      }
      await ModalController.open({
        view: "SIWXSignMessage"
      });
    } catch (error) {
      console.error("SIWXUtil:initializeIfEnabled", error);
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_ERROR",
        properties: this.getSIWXEventProperties(error)
      });
      await ConnectionController._getClient()?.disconnect().catch(console.error);
      RouterController.reset("Connect");
      SnackController.showError("A problem occurred while trying initialize authentication");
    }
  },
  async isAuthenticated(caipAddress = ChainController.getActiveCaipAddress()) {
    const siwx = OptionsController.state.siwx;
    if (!siwx) {
      return true;
    }
    if (!caipAddress) {
      return true;
    }
    const { chainNamespace, chainId, address } = ParseUtil.parseCaipAddress(caipAddress);
    const caipNetworkId = `${chainNamespace}:${chainId}`;
    const sessions = await SIWXUtil.getSessions({
      address,
      caipNetworkId
    });
    return sessions.length > 0;
  },
  async requestSignMessage() {
    const siwx = OptionsController.state.siwx;
    const address = CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress());
    const network = getActiveCaipNetwork();
    const client = ConnectionController._getClient();
    if (!siwx) {
      throw new Error("SIWX is not enabled");
    }
    if (!address) {
      throw new Error("No ActiveCaipAddress found");
    }
    if (!network) {
      throw new Error("No ActiveCaipNetwork or client found");
    }
    if (!client) {
      throw new Error("No ConnectionController client found");
    }
    try {
      const siwxMessage = await siwx.createMessage({
        chainId: network.caipNetworkId,
        accountAddress: address
      });
      const message = siwxMessage.toString();
      const connectorId = ConnectorController.getConnectorId(network.chainNamespace);
      if (connectorId === ConstantsUtil.CONNECTOR_ID.AUTH) {
        RouterController.pushTransactionStack({});
      }
      const signature = await client.signMessage(message);
      await siwx.addSession({
        data: siwxMessage,
        message,
        signature
      });
      ChainController.setLastConnectedSIWECaipNetwork(network);
      ModalController.close();
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_SUCCESS",
        properties: this.getSIWXEventProperties()
      });
    } catch (error) {
      if (!ModalController.state.open || RouterController.state.view === "ApproveTransaction") {
        await ModalController.open({
          view: "SIWXSignMessage"
        });
      }
      SnackController.showError("Error signing message");
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_ERROR",
        properties: this.getSIWXEventProperties(error)
      });
      console.error("SWIXUtil:requestSignMessage", error);
    }
  },
  async cancelSignMessage() {
    try {
      const siwx = this.getSIWX();
      const isRequired = siwx?.getRequired?.();
      if (isRequired) {
        const lastNetwork = ChainController.getLastConnectedSIWECaipNetwork();
        if (lastNetwork) {
          const sessions = await siwx?.getSessions(lastNetwork?.caipNetworkId, CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress()) || "");
          if (sessions && sessions.length > 0) {
            await ChainController.switchActiveNetwork(lastNetwork);
          } else {
            await ConnectionController.disconnect();
          }
        } else {
          await ConnectionController.disconnect();
        }
      } else {
        ModalController.close();
      }
      ModalController.close();
      EventsController.sendEvent({
        event: "CLICK_CANCEL_SIWX",
        type: "track",
        properties: this.getSIWXEventProperties()
      });
    } catch (error) {
      console.error("SIWXUtil:cancelSignMessage", error);
    }
  },
  async getAllSessions() {
    const siwx = this.getSIWX();
    const allRequestedCaipNetworks = ChainController.getAllRequestedCaipNetworks();
    const sessions = [];
    await Promise.all(allRequestedCaipNetworks.map(async (caipNetwork) => {
      const session = await siwx?.getSessions(caipNetwork.caipNetworkId, CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress()) || "");
      if (session) {
        sessions.push(...session);
      }
    }));
    return sessions;
  },
  async getSessions(args) {
    const siwx = OptionsController.state.siwx;
    let address = args?.address;
    if (!address) {
      const activeCaipAddress = ChainController.getActiveCaipAddress();
      address = CoreHelperUtil.getPlainAddress(activeCaipAddress);
    }
    let network = args?.caipNetworkId;
    if (!network) {
      const activeCaipNetwork = ChainController.getActiveCaipNetwork();
      network = activeCaipNetwork?.caipNetworkId;
    }
    if (!(siwx && address && network)) {
      return [];
    }
    return siwx.getSessions(network, address);
  },
  async isSIWXCloseDisabled() {
    const siwx = this.getSIWX();
    if (siwx) {
      const isApproveSignScreen = RouterController.state.view === "ApproveTransaction";
      const isSiwxSignMessage = RouterController.state.view === "SIWXSignMessage";
      if (isApproveSignScreen || isSiwxSignMessage) {
        return siwx.getRequired?.() && (await this.getSessions()).length === 0;
      }
    }
    return false;
  },
  async authConnectorAuthenticate({ authConnector, chainId, socialUri, preferredAccountType, chainNamespace }) {
    const siwx = SIWXUtil.getSIWX();
    const network = getActiveCaipNetwork();
    if (!siwx || !chainNamespace.includes(ConstantsUtil.CHAIN.EVM) || // Request to input email and sign message when email capture is enabled
    OptionsController.state.remoteFeatures?.emailCapture) {
      const result2 = await authConnector.connect({
        chainId,
        socialUri,
        preferredAccountType
      });
      return {
        address: result2.address,
        chainId: result2.chainId,
        accounts: result2.accounts
      };
    }
    const caipNetwork = `${chainNamespace}:${chainId}`;
    const siwxMessage = await siwx.createMessage({
      chainId: caipNetwork,
      accountAddress: "<<AccountAddress>>"
    });
    const siwxMessageData = {
      accountAddress: siwxMessage.accountAddress,
      chainId: siwxMessage.chainId,
      domain: siwxMessage.domain,
      uri: siwxMessage.uri,
      version: siwxMessage.version,
      nonce: siwxMessage.nonce,
      notBefore: siwxMessage.notBefore,
      statement: siwxMessage.statement,
      resources: siwxMessage.resources,
      requestId: siwxMessage.requestId,
      issuedAt: siwxMessage.issuedAt,
      expirationTime: siwxMessage.expirationTime,
      serializedMessage: siwxMessage.toString()
    };
    const result = await authConnector.connect({
      chainId,
      socialUri,
      siwxMessage: siwxMessageData,
      preferredAccountType
    });
    siwxMessageData.accountAddress = result.address;
    siwxMessageData.serializedMessage = result.message || "";
    if (result.signature && result.message) {
      const promise = SIWXUtil.addEmbeddedWalletSession(siwxMessageData, result.message, result.signature);
      await promise;
    }
    ChainController.setLastConnectedSIWECaipNetwork(network);
    return {
      address: result.address,
      chainId: result.chainId,
      accounts: result.accounts
    };
  },
  async addEmbeddedWalletSession(siwxMessageData, message, signature) {
    if (addEmbeddedWalletSessionPromise) {
      return addEmbeddedWalletSessionPromise;
    }
    const siwx = SIWXUtil.getSIWX();
    if (!siwx) {
      return Promise.resolve();
    }
    addEmbeddedWalletSessionPromise = siwx.addSession({
      data: siwxMessageData,
      message,
      signature
    }).finally(() => {
      addEmbeddedWalletSessionPromise = null;
    });
    return addEmbeddedWalletSessionPromise;
  },
  async universalProviderAuthenticate({ universalProvider, chains, methods }) {
    const siwx = SIWXUtil.getSIWX();
    const network = getActiveCaipNetwork();
    const namespaces = new Set(chains.map((chain2) => chain2.split(":")[0]));
    if (!siwx || namespaces.size !== 1 || !namespaces.has("eip155")) {
      return false;
    }
    const siwxMessage = await siwx.createMessage({
      chainId: getActiveCaipNetwork()?.caipNetworkId || "",
      accountAddress: ""
    });
    const result = await universalProvider.authenticate({
      nonce: siwxMessage.nonce,
      domain: siwxMessage.domain,
      uri: siwxMessage.uri,
      exp: siwxMessage.expirationTime,
      iat: siwxMessage.issuedAt,
      nbf: siwxMessage.notBefore,
      requestId: siwxMessage.requestId,
      version: siwxMessage.version,
      resources: siwxMessage.resources,
      statement: siwxMessage.statement,
      chainId: siwxMessage.chainId,
      methods,
      // The first chainId is what is used for universal provider to build the message
      chains: [siwxMessage.chainId, ...chains.filter((chain2) => chain2 !== siwxMessage.chainId)]
    });
    SnackController.showLoading("Authenticating...", { autoClose: false });
    const walletInfo = {
      ...result.session.peer.metadata,
      name: result.session.peer.metadata.name,
      icon: result.session.peer.metadata.icons?.[0],
      type: "WALLET_CONNECT"
    };
    ChainController.setAccountProp("connectedWalletInfo", walletInfo, Array.from(namespaces)[0]);
    if (result?.auths?.length) {
      const sessions = result.auths.map((cacao) => {
        const message = universalProvider.client.formatAuthMessage({
          request: cacao.p,
          iss: cacao.p.iss
        });
        return {
          data: {
            ...cacao.p,
            accountAddress: cacao.p.iss.split(":").slice(-1).join(""),
            chainId: cacao.p.iss.split(":").slice(2, 4).join(":"),
            uri: cacao.p.aud,
            version: cacao.p.version || siwxMessage.version,
            expirationTime: cacao.p.exp,
            issuedAt: cacao.p.iat,
            notBefore: cacao.p.nbf
          },
          message,
          signature: cacao.s.s,
          cacao
        };
      });
      try {
        await siwx.setSessions(sessions);
        if (network) {
          ChainController.setLastConnectedSIWECaipNetwork(network);
        }
        EventsController.sendEvent({
          type: "track",
          event: "SIWX_AUTH_SUCCESS",
          properties: SIWXUtil.getSIWXEventProperties()
        });
      } catch (error) {
        console.error("SIWX:universalProviderAuth - failed to set sessions", error);
        EventsController.sendEvent({
          type: "track",
          event: "SIWX_AUTH_ERROR",
          properties: SIWXUtil.getSIWXEventProperties(error)
        });
        await universalProvider.disconnect().catch(console.error);
        throw error;
      } finally {
        SnackController.hide();
      }
    }
    return true;
  },
  getSIWXEventProperties(error) {
    const namespace = ChainController.state.activeChain;
    if (!namespace) {
      throw new Error("SIWXUtil:getSIWXEventProperties - namespace is required");
    }
    return {
      network: ChainController.state.activeCaipNetwork?.caipNetworkId || "",
      isSmartAccount: getPreferredAccountType(namespace) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
      message: error ? CoreHelperUtil.parseError(error) : void 0
    };
  },
  async clearSessions() {
    const siwx = this.getSIWX();
    if (siwx) {
      await siwx.setSessions([]);
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AdapterController/WalletConnectConnector.js
var WalletConnectConnector = class {
  constructor({ provider, namespace }) {
    this.id = ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT;
    this.name = "WalletConnect";
    this.type = "WALLET_CONNECT";
    this.imageId = "ef1a1fcf-7fe8-4d69-bd6d-fda1345b4400";
    this.getCaipNetworks = ChainController.getCaipNetworks.bind(ChainController);
    this.caipNetworks = this.getCaipNetworks();
    this.provider = provider;
    this.chain = namespace;
  }
  get chains() {
    return this.getCaipNetworks();
  }
  async connectWalletConnect() {
    const isAuthenticated = await this.authenticate();
    if (!isAuthenticated) {
      const caipNetworks = this.getCaipNetworks();
      const universalProviderConfigOverride = OptionsController.state.universalProviderConfigOverride;
      const namespaces = WcHelpersUtil.createNamespaces(caipNetworks, universalProviderConfigOverride);
      await this.provider.connect({ optionalNamespaces: namespaces });
    }
    return {
      clientId: await this.provider.client.core.crypto.getClientId(),
      session: this.provider.session
    };
  }
  async disconnect() {
    await this.provider.disconnect();
  }
  async authenticate() {
    const chains = this.chains.map((network) => network.caipNetworkId);
    return SIWXUtil.universalProviderAuthenticate({
      universalProvider: this.provider,
      chains,
      methods: OPTIONAL_METHODS
    });
  }
};
var OPTIONAL_METHODS = [
  "eth_accounts",
  "eth_requestAccounts",
  "eth_sendRawTransaction",
  "eth_sign",
  "eth_signTransaction",
  "eth_signTypedData",
  "eth_signTypedData_v3",
  "eth_signTypedData_v4",
  "eth_sendTransaction",
  "personal_sign",
  "wallet_switchEthereumChain",
  "wallet_addEthereumChain",
  "wallet_getPermissions",
  "wallet_requestPermissions",
  "wallet_registerOnboarding",
  "wallet_watchAsset",
  "wallet_scanQRCode",
  // EIP-5792
  "wallet_getCallsStatus",
  "wallet_sendCalls",
  "wallet_getCapabilities",
  // EIP-7715
  "wallet_grantPermissions",
  "wallet_revokePermissions",
  //EIP-7811
  "wallet_getAssets"
];

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/SwapCalculationUtil.js
var SwapCalculationUtil = {
  getGasPriceInEther(gas, gasPrice) {
    const totalGasCostInWei = gasPrice * gas;
    const totalGasCostInEther = Number(totalGasCostInWei) / 1e18;
    return totalGasCostInEther;
  },
  getGasPriceInUSD(networkPrice, gas, gasPrice) {
    const totalGasCostInEther = SwapCalculationUtil.getGasPriceInEther(gas, gasPrice);
    const networkPriceInUSD = NumberUtil.bigNumber(networkPrice);
    const gasCostInUSD = networkPriceInUSD.times(totalGasCostInEther);
    return gasCostInUSD.toNumber();
  },
  getPriceImpact({ sourceTokenAmount, sourceTokenPriceInUSD, toTokenPriceInUSD, toTokenAmount }) {
    const inputValue = NumberUtil.bigNumber(sourceTokenAmount).times(sourceTokenPriceInUSD);
    const outputValue = NumberUtil.bigNumber(toTokenAmount).times(toTokenPriceInUSD);
    const priceImpact = inputValue.minus(outputValue).div(inputValue).times(100);
    return priceImpact.toNumber();
  },
  getMaxSlippage(slippage, toTokenAmount) {
    const slippageToleranceDecimal = NumberUtil.bigNumber(slippage).div(100);
    const maxSlippageAmount = NumberUtil.multiply(toTokenAmount, slippageToleranceDecimal);
    return maxSlippageAmount.toNumber();
  },
  getProviderFee(sourceTokenAmount, feePercentage = 85e-4) {
    const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(feePercentage);
    return providerFee.toString();
  },
  isInsufficientNetworkTokenForGas(networkBalanceInUSD, gasPriceInUSD) {
    const gasPrice = gasPriceInUSD || "0";
    if (NumberUtil.bigNumber(networkBalanceInUSD).eq(0)) {
      return true;
    }
    return NumberUtil.bigNumber(NumberUtil.bigNumber(gasPrice)).gt(networkBalanceInUSD);
  },
  isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, balance) {
    const sourceTokenBalance = balance?.find((token) => token.address === sourceTokenAddress)?.quantity?.numeric;
    const isInSufficientBalance = NumberUtil.bigNumber(sourceTokenBalance || "0").lt(sourceTokenAmount);
    return isInSufficientBalance;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AlertController.js
var state3 = proxy({
  message: "",
  variant: "info",
  open: false
});
var controller3 = {
  state: state3,
  subscribeKey(key, callback) {
    return subscribeKey(state3, key, callback);
  },
  open(message, variant) {
    const { debug } = OptionsController.state;
    const { code: code2, displayMessage, debugMessage } = message;
    if (displayMessage && debug) {
      state3.message = displayMessage;
      state3.variant = variant;
      state3.open = true;
    }
    if (debugMessage) {
      console.error(typeof debugMessage === "function" ? debugMessage() : debugMessage, code2 ? { code: code2 } : void 0);
    }
  },
  warn(title, description, code2) {
    state3.open = true;
    state3.message = title;
    state3.variant = "warning";
    if (description) {
      console.warn(description, code2);
    }
  },
  close() {
    state3.open = false;
    state3.message = "";
    state3.variant = "info";
  }
};
var AlertController = withErrorBoundary(controller3);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SwapController.js
var INITIAL_GAS_LIMIT = 15e4;
var TO_AMOUNT_DECIMALS = 6;
var initialState = {
  // Loading states
  initializing: false,
  initialized: false,
  loadingPrices: false,
  loadingQuote: false,
  loadingApprovalTransaction: false,
  loadingBuildTransaction: false,
  loadingTransaction: false,
  // Control states
  switchingTokens: false,
  // Error states
  fetchError: false,
  // Approval & Swap transaction states
  approvalTransaction: void 0,
  swapTransaction: void 0,
  transactionError: void 0,
  // Input values
  sourceToken: void 0,
  sourceTokenAmount: "",
  sourceTokenPriceInUSD: 0,
  toToken: void 0,
  toTokenAmount: "",
  toTokenPriceInUSD: 0,
  networkPrice: "0",
  networkBalanceInUSD: "0",
  networkTokenSymbol: "",
  inputError: void 0,
  // Request values
  slippage: ConstantsUtil2.CONVERT_SLIPPAGE_TOLERANCE,
  // Tokens
  tokens: void 0,
  popularTokens: void 0,
  suggestedTokens: void 0,
  foundTokens: void 0,
  myTokensWithBalance: void 0,
  tokensPriceMap: {},
  // Calculations
  gasFee: "0",
  gasPriceInUSD: 0,
  priceImpact: void 0,
  maxSlippage: void 0,
  providerFee: void 0
};
var state4 = proxy({ ...initialState });
var controller4 = {
  state: state4,
  subscribe(callback) {
    return subscribe(state4, () => callback(state4));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state4, key, callback);
  },
  getParams() {
    const namespace = ChainController.state.activeChain;
    const caipAddress = ChainController.getAccountData(namespace)?.caipAddress ?? ChainController.state.activeCaipAddress;
    const address = CoreHelperUtil.getPlainAddress(caipAddress);
    const networkAddress = getActiveNetworkTokenAddress();
    const connectorId = ConnectorController.getConnectorId(ChainController.state.activeChain);
    if (!address) {
      throw new Error("No address found to swap the tokens from.");
    }
    const invalidToToken = !state4.toToken?.address || !state4.toToken?.decimals;
    const invalidSourceToken = !state4.sourceToken?.address || !state4.sourceToken?.decimals || !NumberUtil.bigNumber(state4.sourceTokenAmount).gt(0);
    const invalidSourceTokenAmount = !state4.sourceTokenAmount;
    return {
      networkAddress,
      fromAddress: address,
      fromCaipAddress: caipAddress,
      sourceTokenAddress: state4.sourceToken?.address,
      toTokenAddress: state4.toToken?.address,
      toTokenAmount: state4.toTokenAmount,
      toTokenDecimals: state4.toToken?.decimals,
      sourceTokenAmount: state4.sourceTokenAmount,
      sourceTokenDecimals: state4.sourceToken?.decimals,
      invalidToToken,
      invalidSourceToken,
      invalidSourceTokenAmount,
      availableToSwap: caipAddress && !invalidToToken && !invalidSourceToken && !invalidSourceTokenAmount,
      isAuthConnector: connectorId === ConstantsUtil.CONNECTOR_ID.AUTH
    };
  },
  async setSourceToken(sourceToken) {
    if (!sourceToken) {
      state4.sourceToken = sourceToken;
      state4.sourceTokenAmount = "";
      state4.sourceTokenPriceInUSD = 0;
      return;
    }
    state4.sourceToken = sourceToken;
    await SwapController.setTokenPrice(sourceToken.address, "sourceToken");
  },
  setSourceTokenAmount(amount) {
    state4.sourceTokenAmount = amount;
  },
  async setToToken(toToken) {
    if (!toToken) {
      state4.toToken = toToken;
      state4.toTokenAmount = "";
      state4.toTokenPriceInUSD = 0;
      return;
    }
    state4.toToken = toToken;
    await SwapController.setTokenPrice(toToken.address, "toToken");
  },
  setToTokenAmount(amount) {
    state4.toTokenAmount = amount ? NumberUtil.toFixed(amount, TO_AMOUNT_DECIMALS) : "";
  },
  async setTokenPrice(address, target) {
    let price = state4.tokensPriceMap[address] || 0;
    if (!price) {
      state4.loadingPrices = true;
      price = await SwapController.getAddressPrice(address);
    }
    if (target === "sourceToken") {
      state4.sourceTokenPriceInUSD = price;
    } else if (target === "toToken") {
      state4.toTokenPriceInUSD = price;
    }
    if (state4.loadingPrices) {
      state4.loadingPrices = false;
    }
    if (SwapController.getParams().availableToSwap && !state4.switchingTokens) {
      SwapController.swapTokens();
    }
  },
  async switchTokens() {
    if (state4.initializing || !state4.initialized || state4.switchingTokens) {
      return;
    }
    state4.switchingTokens = true;
    try {
      const newSourceToken = state4.toToken ? { ...state4.toToken } : void 0;
      const newToToken = state4.sourceToken ? { ...state4.sourceToken } : void 0;
      const newSourceTokenAmount = newSourceToken && state4.toTokenAmount === "" ? "1" : state4.toTokenAmount;
      SwapController.setSourceTokenAmount(newSourceTokenAmount);
      SwapController.setToTokenAmount("");
      await SwapController.setSourceToken(newSourceToken);
      await SwapController.setToToken(newToToken);
      state4.switchingTokens = false;
      SwapController.swapTokens();
    } catch (error) {
      state4.switchingTokens = false;
      throw error;
    }
  },
  resetState() {
    state4.myTokensWithBalance = initialState.myTokensWithBalance;
    state4.tokensPriceMap = initialState.tokensPriceMap;
    state4.initialized = initialState.initialized;
    state4.initializing = initialState.initializing;
    state4.switchingTokens = initialState.switchingTokens;
    state4.sourceToken = initialState.sourceToken;
    state4.sourceTokenAmount = initialState.sourceTokenAmount;
    state4.sourceTokenPriceInUSD = initialState.sourceTokenPriceInUSD;
    state4.toToken = initialState.toToken;
    state4.toTokenAmount = initialState.toTokenAmount;
    state4.toTokenPriceInUSD = initialState.toTokenPriceInUSD;
    state4.networkPrice = initialState.networkPrice;
    state4.networkTokenSymbol = initialState.networkTokenSymbol;
    state4.networkBalanceInUSD = initialState.networkBalanceInUSD;
    state4.inputError = initialState.inputError;
  },
  resetValues() {
    const { networkAddress } = SwapController.getParams();
    const networkToken = state4.tokens?.find((token) => token.address === networkAddress);
    SwapController.setSourceToken(networkToken);
    SwapController.setToToken(void 0);
  },
  getApprovalLoadingState() {
    return state4.loadingApprovalTransaction;
  },
  clearError() {
    state4.transactionError = void 0;
  },
  async initializeState() {
    if (state4.initializing) {
      return;
    }
    state4.initializing = true;
    if (!state4.initialized) {
      try {
        await SwapController.fetchTokens();
        state4.initialized = true;
      } catch (error) {
        state4.initialized = false;
        SnackController.showError("Failed to initialize swap");
        RouterController.goBack();
      }
    }
    state4.initializing = false;
  },
  async fetchTokens() {
    const { networkAddress } = SwapController.getParams();
    await SwapController.getNetworkTokenPrice();
    await SwapController.getMyTokensWithBalance();
    const networkToken = state4.myTokensWithBalance?.find((token) => token.address === networkAddress);
    if (networkToken) {
      state4.networkTokenSymbol = networkToken.symbol;
      SwapController.setSourceToken(networkToken);
      SwapController.setSourceTokenAmount("0");
    }
  },
  async getTokenList() {
    const activeCaipNetworkId = ChainController.state.activeCaipNetwork?.caipNetworkId;
    if (state4.caipNetworkId === activeCaipNetworkId && state4.tokens) {
      return;
    }
    try {
      state4.tokensLoading = true;
      const tokens2 = await SwapApiUtil.getTokenList(activeCaipNetworkId);
      state4.tokens = tokens2;
      state4.caipNetworkId = activeCaipNetworkId;
      state4.popularTokens = tokens2.sort((aTokenInfo, bTokenInfo) => {
        if (aTokenInfo.symbol < bTokenInfo.symbol) {
          return -1;
        }
        if (aTokenInfo.symbol > bTokenInfo.symbol) {
          return 1;
        }
        return 0;
      });
      const suggestedTokensByChain = activeCaipNetworkId && ConstantsUtil2.SUGGESTED_TOKENS_BY_CHAIN?.[activeCaipNetworkId] || [];
      const suggestedTokenObjects = suggestedTokensByChain.map((symbol) => tokens2.find((t) => t.symbol === symbol)).filter((t) => Boolean(t));
      const allSuggestedTokens = ConstantsUtil2.SWAP_SUGGESTED_TOKENS || [];
      const allSuggestedTokenObjects = allSuggestedTokens.map((symbol) => tokens2.find((t) => t.symbol === symbol)).filter((t) => Boolean(t)).filter((t) => !suggestedTokenObjects.some((ct5) => ct5.address === t.address));
      state4.suggestedTokens = [...suggestedTokenObjects, ...allSuggestedTokenObjects];
    } catch (error) {
      state4.tokens = [];
      state4.popularTokens = [];
      state4.suggestedTokens = [];
    } finally {
      state4.tokensLoading = false;
    }
  },
  async getAddressPrice(address) {
    const existPrice = state4.tokensPriceMap[address];
    if (existPrice) {
      return existPrice;
    }
    const response = await BlockchainApiController.fetchTokenPrice({
      addresses: [address]
    });
    const fungibles = response?.fungibles || [];
    const allTokens = [...state4.tokens || [], ...state4.myTokensWithBalance || []];
    const symbol = allTokens?.find((token) => token.address === address)?.symbol;
    const price = fungibles.find((p4) => p4.symbol.toLowerCase() === symbol?.toLowerCase())?.price || 0;
    const priceAsFloat = parseFloat(price.toString());
    state4.tokensPriceMap[address] = priceAsFloat;
    return priceAsFloat;
  },
  async getNetworkTokenPrice() {
    const { networkAddress } = SwapController.getParams();
    const response = await BlockchainApiController.fetchTokenPrice({
      addresses: [networkAddress]
    }).catch(() => {
      SnackController.showError("Failed to fetch network token price");
      return { fungibles: [] };
    });
    const token = response.fungibles?.[0];
    const price = token?.price.toString() || "0";
    state4.tokensPriceMap[networkAddress] = parseFloat(price);
    state4.networkTokenSymbol = token?.symbol || "";
    state4.networkPrice = price;
  },
  async getMyTokensWithBalance(forceUpdate) {
    const balances = await BalanceUtil.getMyTokensWithBalance(forceUpdate);
    const swapBalances = SwapApiUtil.mapBalancesToSwapTokens(balances);
    if (!swapBalances) {
      return;
    }
    await SwapController.getInitialGasPrice();
    SwapController.setBalances(swapBalances);
  },
  setBalances(balances) {
    const { networkAddress } = SwapController.getParams();
    const caipNetwork = ChainController.state.activeCaipNetwork;
    if (!caipNetwork) {
      return;
    }
    const networkToken = balances.find((token) => token.address === networkAddress);
    balances.forEach((token) => {
      state4.tokensPriceMap[token.address] = token.price || 0;
    });
    state4.myTokensWithBalance = balances.filter((token) => token.address.startsWith(caipNetwork.caipNetworkId));
    state4.networkBalanceInUSD = networkToken ? NumberUtil.multiply(networkToken.quantity.numeric, networkToken.price).toString() : "0";
  },
  async getInitialGasPrice() {
    const res = await SwapApiUtil.fetchGasPrice();
    if (!res) {
      return { gasPrice: null, gasPriceInUSD: null };
    }
    switch (ChainController.state?.activeCaipNetwork?.chainNamespace) {
      case ConstantsUtil.CHAIN.SOLANA:
        state4.gasFee = res.standard ?? "0";
        state4.gasPriceInUSD = NumberUtil.multiply(res.standard, state4.networkPrice).div(1e9).toNumber();
        return {
          gasPrice: BigInt(state4.gasFee),
          gasPriceInUSD: Number(state4.gasPriceInUSD)
        };
      case ConstantsUtil.CHAIN.EVM:
      default:
        const value = res.standard ?? "0";
        const gasFee = BigInt(value);
        const gasLimit = BigInt(INITIAL_GAS_LIMIT);
        const gasPrice = SwapCalculationUtil.getGasPriceInUSD(state4.networkPrice, gasLimit, gasFee);
        state4.gasFee = value;
        state4.gasPriceInUSD = gasPrice;
        return { gasPrice: gasFee, gasPriceInUSD: gasPrice };
    }
  },
  // -- Swap -------------------------------------- //
  async swapTokens() {
    const address = ChainController.getAccountData()?.address;
    const sourceToken = state4.sourceToken;
    const toToken = state4.toToken;
    const haveSourceTokenAmount = NumberUtil.bigNumber(state4.sourceTokenAmount).gt(0);
    if (!haveSourceTokenAmount) {
      SwapController.setToTokenAmount("");
    }
    if (!toToken || !sourceToken || state4.loadingPrices || !haveSourceTokenAmount || !address) {
      return;
    }
    state4.loadingQuote = true;
    const amountDecimal = NumberUtil.bigNumber(state4.sourceTokenAmount).times(10 ** sourceToken.decimals).round(0);
    try {
      const quoteResponse = await BlockchainApiController.fetchSwapQuote({
        userAddress: address,
        from: sourceToken.address,
        to: toToken.address,
        gasPrice: state4.gasFee,
        amount: amountDecimal.toString()
      });
      state4.loadingQuote = false;
      const quoteToAmount = quoteResponse?.quotes?.[0]?.toAmount;
      if (!quoteToAmount) {
        AlertController.open({
          displayMessage: "Incorrect amount",
          debugMessage: "Please enter a valid amount"
        }, "error");
        return;
      }
      const toTokenAmount = NumberUtil.bigNumber(quoteToAmount).div(10 ** toToken.decimals).toString();
      SwapController.setToTokenAmount(toTokenAmount);
      const isInsufficientToken = SwapController.hasInsufficientToken(state4.sourceTokenAmount, sourceToken.address);
      if (isInsufficientToken) {
        state4.inputError = "Insufficient balance";
      } else {
        state4.inputError = void 0;
        SwapController.setTransactionDetails();
      }
    } catch (error) {
      const response = await SwapApiUtil.handleSwapError(error);
      state4.loadingQuote = false;
      state4.inputError = response || "Insufficient balance";
    }
  },
  // -- Create Transactions -------------------------------------- //
  async getTransaction() {
    const { fromCaipAddress, availableToSwap } = SwapController.getParams();
    const sourceToken = state4.sourceToken;
    const toToken = state4.toToken;
    if (!fromCaipAddress || !availableToSwap || !sourceToken || !toToken || state4.loadingQuote) {
      return void 0;
    }
    try {
      state4.loadingBuildTransaction = true;
      const hasAllowance = await SwapApiUtil.fetchSwapAllowance({
        userAddress: fromCaipAddress,
        tokenAddress: sourceToken.address,
        sourceTokenAmount: state4.sourceTokenAmount,
        sourceTokenDecimals: sourceToken.decimals
      });
      let transaction = void 0;
      if (hasAllowance) {
        transaction = await SwapController.createSwapTransaction();
      } else {
        transaction = await SwapController.createAllowanceTransaction();
      }
      state4.loadingBuildTransaction = false;
      state4.fetchError = false;
      return transaction;
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to check allowance");
      state4.loadingBuildTransaction = false;
      state4.approvalTransaction = void 0;
      state4.swapTransaction = void 0;
      state4.fetchError = true;
      return void 0;
    }
  },
  async createAllowanceTransaction() {
    const { fromCaipAddress, sourceTokenAddress, toTokenAddress } = SwapController.getParams();
    if (!fromCaipAddress || !toTokenAddress) {
      return void 0;
    }
    if (!sourceTokenAddress) {
      throw new Error("createAllowanceTransaction - No source token address found.");
    }
    try {
      const response = await BlockchainApiController.generateApproveCalldata({
        from: sourceTokenAddress,
        to: toTokenAddress,
        userAddress: fromCaipAddress
      });
      const address = CoreHelperUtil.getPlainAddress(response.tx.from);
      if (!address) {
        throw new Error("SwapController:createAllowanceTransaction - address is required");
      }
      const transaction = {
        data: response.tx.data,
        to: address,
        gasPrice: BigInt(response.tx.eip155.gasPrice),
        value: BigInt(response.tx.value),
        toAmount: state4.toTokenAmount
      };
      state4.swapTransaction = void 0;
      state4.approvalTransaction = {
        data: transaction.data,
        to: transaction.to,
        gasPrice: transaction.gasPrice,
        value: transaction.value,
        toAmount: transaction.toAmount
      };
      return {
        data: transaction.data,
        to: transaction.to,
        gasPrice: transaction.gasPrice,
        value: transaction.value,
        toAmount: transaction.toAmount
      };
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to create approval transaction");
      state4.approvalTransaction = void 0;
      state4.swapTransaction = void 0;
      state4.fetchError = true;
      return void 0;
    }
  },
  async createSwapTransaction() {
    const { networkAddress, fromCaipAddress, sourceTokenAmount } = SwapController.getParams();
    const sourceToken = state4.sourceToken;
    const toToken = state4.toToken;
    if (!fromCaipAddress || !sourceTokenAmount || !sourceToken || !toToken) {
      return void 0;
    }
    const amount = ConnectionController.parseUnits(sourceTokenAmount, sourceToken.decimals)?.toString();
    try {
      const response = await BlockchainApiController.generateSwapCalldata({
        userAddress: fromCaipAddress,
        from: sourceToken.address,
        to: toToken.address,
        amount,
        disableEstimate: true
      });
      const isSourceTokenIsNetworkToken = sourceToken.address === networkAddress;
      const gas = BigInt(response.tx.eip155.gas);
      const gasPrice = BigInt(response.tx.eip155.gasPrice);
      const address = CoreHelperUtil.getPlainAddress(response.tx.to);
      if (!address) {
        throw new Error("SwapController:createSwapTransaction - address is required");
      }
      const transaction = {
        data: response.tx.data,
        to: address,
        gas,
        gasPrice,
        value: isSourceTokenIsNetworkToken ? BigInt(amount ?? "0") : BigInt("0"),
        toAmount: state4.toTokenAmount
      };
      state4.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state4.networkPrice, gas, gasPrice);
      state4.approvalTransaction = void 0;
      state4.swapTransaction = transaction;
      return transaction;
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to create transaction");
      state4.approvalTransaction = void 0;
      state4.swapTransaction = void 0;
      state4.fetchError = true;
      return void 0;
    }
  },
  onEmbeddedWalletApprovalSuccess() {
    SnackController.showLoading("Approve limit increase in your wallet");
    RouterController.replace("SwapPreview");
  },
  // -- Send Transactions --------------------------------- //
  async sendTransactionForApproval(data) {
    const { fromAddress, isAuthConnector } = SwapController.getParams();
    state4.loadingApprovalTransaction = true;
    const approveLimitMessage = `Approve limit increase in your wallet`;
    if (isAuthConnector) {
      RouterController.pushTransactionStack({
        onSuccess: SwapController.onEmbeddedWalletApprovalSuccess
      });
    } else {
      SnackController.showLoading(approveLimitMessage);
    }
    try {
      await ConnectionController.sendTransaction({
        address: fromAddress,
        to: data.to,
        data: data.data,
        value: data.value,
        chainNamespace: ConstantsUtil.CHAIN.EVM
      });
      await SwapController.swapTokens();
      await SwapController.getTransaction();
      state4.approvalTransaction = void 0;
      state4.loadingApprovalTransaction = false;
    } catch (err) {
      const error = err;
      state4.transactionError = error?.displayMessage;
      state4.loadingApprovalTransaction = false;
      SnackController.showError(error?.displayMessage || "Transaction error");
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_APPROVAL_ERROR",
        properties: {
          message: error?.displayMessage || error?.message || "Unknown",
          network: ChainController.state.activeCaipNetwork?.caipNetworkId || "",
          swapFromToken: SwapController.state.sourceToken?.symbol || "",
          swapToToken: SwapController.state.toToken?.symbol || "",
          swapFromAmount: SwapController.state.sourceTokenAmount || "",
          swapToAmount: SwapController.state.toTokenAmount || "",
          isSmartAccount: getPreferredAccountType(ConstantsUtil.CHAIN.EVM) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
    }
  },
  async sendTransactionForSwap(data) {
    if (!data) {
      return void 0;
    }
    const { fromAddress, toTokenAmount, isAuthConnector } = SwapController.getParams();
    state4.loadingTransaction = true;
    const snackbarPendingMessage = `Swapping ${state4.sourceToken?.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${state4.toToken?.symbol}`;
    const snackbarSuccessMessage = `Swapped ${state4.sourceToken?.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${state4.toToken?.symbol}`;
    if (isAuthConnector) {
      RouterController.pushTransactionStack({
        onSuccess() {
          RouterController.replace("Account");
          SnackController.showLoading(snackbarPendingMessage);
          controller4.resetState();
        }
      });
    } else {
      SnackController.showLoading("Confirm transaction in your wallet");
    }
    try {
      const forceUpdateAddresses = [state4.sourceToken?.address, state4.toToken?.address].join(",");
      const transactionHash = await ConnectionController.sendTransaction({
        address: fromAddress,
        to: data.to,
        data: data.data,
        value: data.value,
        chainNamespace: ConstantsUtil.CHAIN.EVM
      });
      state4.loadingTransaction = false;
      SnackController.showSuccess(snackbarSuccessMessage);
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_SUCCESS",
        properties: {
          network: ChainController.state.activeCaipNetwork?.caipNetworkId || "",
          swapFromToken: SwapController.state.sourceToken?.symbol || "",
          swapToToken: SwapController.state.toToken?.symbol || "",
          swapFromAmount: SwapController.state.sourceTokenAmount || "",
          swapToAmount: SwapController.state.toTokenAmount || "",
          isSmartAccount: getPreferredAccountType(ConstantsUtil.CHAIN.EVM) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
      controller4.resetState();
      if (!isAuthConnector) {
        RouterController.replace("Account");
      }
      controller4.getMyTokensWithBalance(forceUpdateAddresses);
      return transactionHash;
    } catch (err) {
      const error = err;
      state4.transactionError = error?.displayMessage;
      state4.loadingTransaction = false;
      SnackController.showError(error?.displayMessage || "Transaction error");
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_ERROR",
        properties: {
          message: error?.displayMessage || error?.message || "Unknown",
          network: ChainController.state.activeCaipNetwork?.caipNetworkId || "",
          swapFromToken: SwapController.state.sourceToken?.symbol || "",
          swapToToken: SwapController.state.toToken?.symbol || "",
          swapFromAmount: SwapController.state.sourceTokenAmount || "",
          swapToAmount: SwapController.state.toTokenAmount || "",
          isSmartAccount: getPreferredAccountType(ConstantsUtil.CHAIN.EVM) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
      return void 0;
    }
  },
  // -- Checks -------------------------------------------- //
  hasInsufficientToken(sourceTokenAmount, sourceTokenAddress) {
    const isInsufficientSourceTokenForSwap = SwapCalculationUtil.isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, state4.myTokensWithBalance);
    return isInsufficientSourceTokenForSwap;
  },
  // -- Calculations -------------------------------------- //
  setTransactionDetails() {
    const { toTokenAddress, toTokenDecimals } = SwapController.getParams();
    if (!toTokenAddress || !toTokenDecimals) {
      return;
    }
    state4.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state4.networkPrice, BigInt(state4.gasFee), BigInt(INITIAL_GAS_LIMIT));
    state4.priceImpact = SwapCalculationUtil.getPriceImpact({
      sourceTokenAmount: state4.sourceTokenAmount,
      sourceTokenPriceInUSD: state4.sourceTokenPriceInUSD,
      toTokenPriceInUSD: state4.toTokenPriceInUSD,
      toTokenAmount: state4.toTokenAmount
    });
    state4.maxSlippage = SwapCalculationUtil.getMaxSlippage(state4.slippage, state4.toTokenAmount);
    state4.providerFee = SwapCalculationUtil.getProviderFee(state4.sourceTokenAmount);
  }
};
var SwapController = withErrorBoundary(controller4);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/TooltipController.js
var state5 = proxy({
  message: "",
  open: false,
  triggerRect: {
    width: 0,
    height: 0,
    top: 0,
    left: 0
  },
  variant: "shade"
});
var controller5 = {
  state: state5,
  subscribe(callback) {
    return subscribe(state5, () => callback(state5));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state5, key, callback);
  },
  showTooltip({ message, triggerRect, variant }) {
    state5.open = true;
    state5.message = message;
    state5.triggerRect = triggerRect;
    state5.variant = variant;
  },
  hide() {
    state5.open = false;
    state5.message = "";
    state5.triggerRect = {
      width: 0,
      height: 0,
      top: 0,
      left: 0
    };
  }
};
var TooltipController = withErrorBoundary(controller5);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsStateController.js
var state6 = proxy({
  isLegalCheckboxChecked: false
});
var OptionsStateController = {
  state: state6,
  subscribe(callback) {
    return subscribe(state6, () => callback(state6));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state6, key, callback);
  },
  setIsLegalCheckboxChecked(isLegalCheckboxChecked) {
    state6.isLegalCheckboxChecked = isLegalCheckboxChecked;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ExchangeUtil.js
var CHAIN_ASSET_INFO_MAP = {
  eip155: {
    native: { assetNamespace: "slip44", assetReference: "60" },
    defaultTokenNamespace: "erc20"
  },
  solana: {
    native: { assetNamespace: "slip44", assetReference: "501" },
    defaultTokenNamespace: "token"
  }
};
var JsonRpcError = class extends Error {
};
function getApiUrl() {
  const { sdkType, sdkVersion, projectId } = OptionsController.getSnapshot();
  const url = new URL("https://rpc.walletconnect.org/v1/json-rpc");
  url.searchParams.set("projectId", projectId);
  url.searchParams.set("st", sdkType);
  url.searchParams.set("sv", sdkVersion);
  url.searchParams.set("source", "fund-wallet");
  return url.toString();
}
async function sendRequest(method, params) {
  const url = getApiUrl();
  const { projectId } = OptionsController.getSnapshot();
  const requestBody = {
    jsonrpc: "2.0",
    id: 1,
    method,
    params: {
      ...params || {},
      projectId
    }
  };
  const response = await fetch(url, {
    method: "POST",
    body: JSON.stringify(requestBody),
    headers: { "Content-Type": "application/json" }
  });
  const json = await response.json();
  if (json.error) {
    throw new JsonRpcError(json.error.message);
  }
  return json;
}
async function getExchanges(params) {
  const response = await sendRequest("reown_getExchanges", params);
  return response.result;
}
async function getPayUrl(params) {
  const response = await sendRequest("reown_getExchangePayUrl", params);
  return response.result;
}
async function getBuyStatus(params) {
  const response = await sendRequest("reown_getExchangeBuyStatus", params);
  return response.result;
}
function formatCaip19Asset(caipNetworkId, asset) {
  const { chainNamespace, chainId } = ParseUtil.parseCaipNetworkId(caipNetworkId);
  const chainInfo = CHAIN_ASSET_INFO_MAP[chainNamespace];
  if (!chainInfo) {
    throw new Error(`Unsupported chain namespace for CAIP-19 formatting: ${chainNamespace}`);
  }
  let assetNamespace = chainInfo.native.assetNamespace;
  let assetReference = chainInfo.native.assetReference;
  if (asset !== "native") {
    assetNamespace = chainInfo.defaultTokenNamespace;
    assetReference = asset;
  }
  const networkPart = `${chainNamespace}:${chainId}`;
  return `${networkPart}/${assetNamespace}:${assetReference}`;
}
var ethereumETH = {
  network: "eip155:1",
  asset: "native",
  metadata: {
    name: "Ethereum",
    symbol: "ETH",
    decimals: 18
  }
};
var baseETH = {
  network: "eip155:8453",
  asset: "native",
  metadata: {
    name: "Ethereum",
    symbol: "ETH",
    decimals: 18
  }
};
var baseUSDC = {
  network: "eip155:8453",
  asset: "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
  metadata: {
    name: "USD Coin",
    symbol: "USDC",
    decimals: 6
  }
};
var baseSepoliaUSDC = {
  network: "eip155:84532",
  asset: "0x036CbD53842c5426634e7929541eC2318f3dCF7e",
  metadata: {
    name: "USD Coin",
    symbol: "USDC",
    decimals: 6
  }
};
var baseSepoliaETH = {
  network: "eip155:84532",
  asset: "native",
  metadata: {
    name: "Ethereum",
    symbol: "ETH",
    decimals: 18
  }
};
var ethereumUSDC = {
  network: "eip155:1",
  asset: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
  metadata: {
    name: "USD Coin",
    symbol: "USDC",
    decimals: 6
  }
};
var arbitrumUSDC = {
  network: "eip155:42161",
  asset: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
  metadata: {
    name: "USD Coin",
    symbol: "USDC",
    decimals: 6
  }
};
var polygonUSDC = {
  network: "eip155:137",
  asset: "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
  metadata: {
    name: "USD Coin",
    symbol: "USDC",
    decimals: 6
  }
};
var solanaUSDC = {
  network: "solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp",
  asset: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
  metadata: {
    name: "USD Coin",
    symbol: "USDC",
    decimals: 6
  }
};
var ethereumUSDT = {
  network: "eip155:1",
  asset: "0xdAC17F958D2ee523a2206206994597C13D831ec7",
  metadata: {
    name: "Tether USD",
    symbol: "USDT",
    decimals: 6
  }
};
var optimismUSDT = {
  network: "eip155:10",
  asset: "0x94b008aA00579c1307B0EF2c499aD98a8ce58e58",
  metadata: {
    name: "Tether USD",
    symbol: "USDT",
    decimals: 6
  }
};
var arbitrumUSDT = {
  network: "eip155:42161",
  asset: "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
  metadata: {
    name: "Tether USD",
    symbol: "USDT",
    decimals: 6
  }
};
var polygonUSDT = {
  network: "eip155:137",
  asset: "0xc2132d05d31c914a87c6611c10748aeb04b58e8f",
  metadata: {
    name: "Tether USD",
    symbol: "USDT",
    decimals: 6
  }
};
var solanaUSDT = {
  network: "solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp",
  asset: "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB",
  metadata: {
    name: "Tether USD",
    symbol: "USDT",
    decimals: 6
  }
};
var solanaSOL = {
  network: "solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp",
  asset: "native",
  metadata: {
    name: "Solana",
    symbol: "SOL",
    decimals: 9
  }
};
var assets = {
  ethereumETH,
  baseETH,
  baseUSDC,
  baseSepoliaETH,
  ethereumUSDC,
  arbitrumUSDC,
  polygonUSDC,
  solanaUSDC,
  ethereumUSDT,
  optimismUSDT,
  arbitrumUSDT,
  polygonUSDT,
  solanaUSDT,
  solanaSOL
};
function getPaymentAssetsForNetwork(network) {
  return Object.values(assets).filter((asset) => asset.network === network);
}

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ExchangeController.js
var DEFAULT_PAGE = 0;
var DEFAULT_STATE = {
  paymentAsset: null,
  amount: null,
  tokenAmount: 0,
  priceLoading: false,
  error: null,
  exchanges: [],
  isLoading: false,
  currentPayment: void 0,
  isPaymentInProgress: false,
  paymentId: "",
  assets: []
};
var state7 = proxy(DEFAULT_STATE);
var ExchangeController = {
  state: state7,
  // -- Subscriptions ----------------------------------- //
  subscribe(callback) {
    return subscribe(state7, () => callback(state7));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state7, key, callback);
  },
  resetState() {
    Object.assign(state7, { ...DEFAULT_STATE });
  },
  async getAssetsForNetwork(network) {
    const assets2 = getPaymentAssetsForNetwork(network);
    const metadata = await ExchangeController.getAssetsImageAndPrice(assets2);
    const assetsWithPrice = assets2.map((asset) => {
      const assetAddress = asset.asset === "native" ? getActiveNetworkTokenAddress() : `${asset.network}:${asset.asset}`;
      const assetMetadata = metadata.find((m4) => m4.fungibles?.[0]?.address?.toLowerCase() === assetAddress.toLowerCase());
      return {
        ...asset,
        price: assetMetadata?.fungibles?.[0]?.price || 1,
        metadata: {
          ...asset.metadata,
          iconUrl: assetMetadata?.fungibles?.[0]?.iconUrl
        }
      };
    });
    state7.assets = assetsWithPrice;
    return assetsWithPrice;
  },
  async getAssetsImageAndPrice(assets2) {
    const addresses = assets2.map((asset) => asset.asset === "native" ? getActiveNetworkTokenAddress() : `${asset.network}:${asset.asset}`);
    const metadata = await Promise.all(addresses.map((address) => BlockchainApiController.fetchTokenPrice({ addresses: [address] })));
    return metadata;
  },
  getTokenAmount() {
    if (!state7?.paymentAsset?.price) {
      throw new Error("Cannot get token price");
    }
    const bigAmount = NumberUtil.bigNumber(state7.amount ?? 0).round(8);
    const bigPrice = NumberUtil.bigNumber(state7.paymentAsset.price).round(8);
    return bigAmount.div(bigPrice).round(8).toNumber();
  },
  setAmount(amount) {
    state7.amount = amount;
    if (state7.paymentAsset?.price) {
      state7.tokenAmount = ExchangeController.getTokenAmount();
    }
  },
  setPaymentAsset(asset) {
    state7.paymentAsset = asset;
  },
  isPayWithExchangeEnabled() {
    return OptionsController.state.remoteFeatures?.payWithExchange;
  },
  isPayWithExchangeSupported() {
    return ExchangeController.isPayWithExchangeEnabled() && ChainController.state.activeCaipNetwork && ConstantsUtil2.PAY_WITH_EXCHANGE_SUPPORTED_CHAIN_NAMESPACES.includes(ChainController.state.activeCaipNetwork.chainNamespace);
  },
  // -- Getters ----------------------------------------- //
  async fetchExchanges() {
    try {
      const isPayWithExchangeSupported = ExchangeController.isPayWithExchangeSupported();
      if (!state7.paymentAsset || !isPayWithExchangeSupported) {
        state7.exchanges = [];
        state7.isLoading = false;
        return;
      }
      state7.isLoading = true;
      const response = await getExchanges({
        page: DEFAULT_PAGE,
        asset: formatCaip19Asset(state7.paymentAsset.network, state7.paymentAsset.asset),
        amount: state7.amount?.toString() ?? "0"
      });
      state7.exchanges = response.exchanges.slice(0, 2);
    } catch (error) {
      SnackController.showError("Unable to get exchanges");
      throw new Error("Unable to get exchanges");
    } finally {
      state7.isLoading = false;
    }
  },
  async getPayUrl(exchangeId, params) {
    try {
      const numericAmount = Number(params.amount);
      const response = await getPayUrl({
        exchangeId,
        asset: formatCaip19Asset(params.network, params.asset),
        amount: numericAmount.toString(),
        recipient: `${params.network}:${params.recipient}`
      });
      EventsController.sendEvent({
        type: "track",
        event: "PAY_EXCHANGE_SELECTED",
        properties: {
          exchange: {
            id: exchangeId
          },
          configuration: {
            network: params.network,
            asset: params.asset,
            recipient: params.recipient,
            amount: numericAmount
          },
          currentPayment: {
            type: "exchange",
            exchangeId
          },
          source: "fund-from-exchange",
          headless: false
        }
      });
      return response;
    } catch (error) {
      if (error instanceof Error && error.message.includes("is not supported")) {
        throw new Error("Asset not supported");
      }
      throw new Error(error.message);
    }
  },
  async handlePayWithExchange(exchangeId) {
    try {
      const address = ChainController.getAccountData()?.address;
      if (!address) {
        throw new Error("No account connected");
      }
      if (!state7.paymentAsset) {
        throw new Error("No payment asset selected");
      }
      const popupWindow = CoreHelperUtil.returnOpenHref("", "popupWindow", "scrollbar=yes,width=480,height=720");
      if (!popupWindow) {
        throw new Error("Could not create popup window");
      }
      state7.isPaymentInProgress = true;
      state7.paymentId = crypto.randomUUID();
      state7.currentPayment = {
        type: "exchange",
        exchangeId
      };
      const { network, asset } = state7.paymentAsset;
      const payUrlParams = {
        network,
        asset,
        amount: state7.tokenAmount,
        recipient: address
      };
      const payUrl = await ExchangeController.getPayUrl(exchangeId, payUrlParams);
      if (!payUrl) {
        try {
          popupWindow.close();
        } catch (err) {
          console.error("Unable to close popup window", err);
        }
        throw new Error("Unable to initiate payment");
      }
      state7.currentPayment.sessionId = payUrl.sessionId;
      state7.currentPayment.status = "IN_PROGRESS";
      state7.currentPayment.exchangeId = exchangeId;
      popupWindow.location.href = payUrl.url;
    } catch (error) {
      state7.error = "Unable to initiate payment";
      SnackController.showError(state7.error);
    }
  },
  async waitUntilComplete({ exchangeId, sessionId, paymentId, retries = 20 }) {
    const status = await ExchangeController.getBuyStatus(exchangeId, sessionId, paymentId);
    if (status.status === "SUCCESS" || status.status === "FAILED") {
      return status;
    }
    if (retries === 0) {
      throw new Error("Unable to get deposit status");
    }
    await new Promise((resolve) => {
      setTimeout(resolve, 5e3);
    });
    return ExchangeController.waitUntilComplete({
      exchangeId,
      sessionId,
      paymentId,
      retries: retries - 1
    });
  },
  async getBuyStatus(exchangeId, sessionId, paymentId) {
    try {
      if (!state7.currentPayment) {
        throw new Error("No current payment");
      }
      const status = await getBuyStatus({ sessionId, exchangeId });
      state7.currentPayment.status = status.status;
      if (status.status === "SUCCESS" || status.status === "FAILED") {
        const address = ChainController.getAccountData()?.address;
        state7.currentPayment.result = status.txHash;
        state7.isPaymentInProgress = false;
        EventsController.sendEvent({
          type: "track",
          event: status.status === "SUCCESS" ? "PAY_SUCCESS" : "PAY_ERROR",
          properties: {
            message: status.status === "FAILED" ? CoreHelperUtil.parseError(state7.error) : void 0,
            source: "fund-from-exchange",
            paymentId,
            configuration: {
              network: state7.paymentAsset?.network || "",
              asset: state7.paymentAsset?.asset || "",
              recipient: address || "",
              amount: state7.amount ?? 0
            },
            currentPayment: {
              type: "exchange",
              exchangeId: state7.currentPayment?.exchangeId,
              sessionId: state7.currentPayment?.sessionId,
              result: status.txHash
            }
          }
        });
      }
      return status;
    } catch (error) {
      return {
        status: "UNKNOWN",
        txHash: ""
      };
    }
  },
  reset() {
    state7.currentPayment = void 0;
    state7.isPaymentInProgress = false;
    state7.paymentId = "";
    state7.paymentAsset = null;
    state7.amount = 0;
    state7.tokenAmount = 0;
    state7.priceLoading = false;
    state7.error = null;
    state7.exchanges = [];
    state7.isLoading = false;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ModalUtil.js
var ModalUtil = {
  isUnsupportedChainView() {
    return RouterController.state.view === "UnsupportedChain" || RouterController.state.view === "SwitchNetwork" && RouterController.state.history.includes("UnsupportedChain");
  },
  async safeClose() {
    if (this.isUnsupportedChainView()) {
      ModalController.shake();
      return;
    }
    const isSIWXCloseDisabled = await SIWXUtil.isSIWXCloseDisabled();
    if (isSIWXCloseDisabled) {
      ModalController.shake();
      return;
    }
    if (RouterController.state.view === "DataCapture" || RouterController.state.view === "DataCaptureOtpConfirm") {
      ConnectionController.disconnect();
    }
    ModalController.close();
  }
};

// node_modules/@reown/appkit-ui/dist/esm/src/utils/MathUtil.js
var MathUtil = {
  interpolate(inputRange, outputRange, value) {
    if (inputRange.length !== 2 || outputRange.length !== 2) {
      throw new Error("inputRange and outputRange must be an array of length 2");
    }
    const originalRangeMin = inputRange[0] || 0;
    const originalRangeMax = inputRange[1] || 0;
    const newRangeMin = outputRange[0] || 0;
    const newRangeMax = outputRange[1] || 0;
    if (value < originalRangeMin) {
      return newRangeMin;
    }
    if (value > originalRangeMax) {
      return newRangeMax;
    }
    return (newRangeMax - newRangeMin) / (originalRangeMax - originalRangeMin) * (value - originalRangeMin) + newRangeMin;
  }
};

// node_modules/lit-html/development/lit-html.js
var DEV_MODE = true;
var ENABLE_EXTRA_SECURITY_HOOKS = true;
var ENABLE_SHADYDOM_NOPATCH = true;
var NODE_MODE = false;
var global2 = globalThis;
var debugLogEvent = DEV_MODE ? (event) => {
  const shouldEmit = global2.emitLitDebugLogEvents;
  if (!shouldEmit) {
    return;
  }
  global2.dispatchEvent(new CustomEvent("lit-debug", {
    detail: event
  }));
} : void 0;
var debugLogRenderId = 0;
var issueWarning;
if (DEV_MODE) {
  global2.litIssuedWarnings ??= /* @__PURE__ */ new Set();
  issueWarning = (code2, warning) => {
    warning += code2 ? ` See https://lit.dev/msg/${code2} for more information.` : "";
    if (!global2.litIssuedWarnings.has(warning) && !global2.litIssuedWarnings.has(code2)) {
      console.warn(warning);
      global2.litIssuedWarnings.add(warning);
    }
  };
  queueMicrotask(() => {
    issueWarning("dev-mode", `Lit is in dev mode. Not recommended for production!`);
  });
}
var wrap = ENABLE_SHADYDOM_NOPATCH && global2.ShadyDOM?.inUse && global2.ShadyDOM?.noPatch === true ? global2.ShadyDOM.wrap : (node) => node;
var trustedTypes = global2.trustedTypes;
var policy = trustedTypes ? trustedTypes.createPolicy("lit-html", {
  createHTML: (s2) => s2
}) : void 0;
var identityFunction = (value) => value;
var noopSanitizer = (_node, _name, _type) => identityFunction;
var setSanitizer = (newSanitizer) => {
  if (!ENABLE_EXTRA_SECURITY_HOOKS) {
    return;
  }
  if (sanitizerFactoryInternal !== noopSanitizer) {
    throw new Error(`Attempted to overwrite existing lit-html security policy. setSanitizeDOMValueFactory should be called at most once.`);
  }
  sanitizerFactoryInternal = newSanitizer;
};
var _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {
  sanitizerFactoryInternal = noopSanitizer;
};
var createSanitizer = (node, name2, type) => {
  return sanitizerFactoryInternal(node, name2, type);
};
var boundAttributeSuffix = "$lit$";
var marker = `lit$${Math.random().toFixed(9).slice(2)}$`;
var markerMatch = "?" + marker;
var nodeMarker = `<${markerMatch}>`;
var d6 = NODE_MODE && global2.document === void 0 ? {
  createTreeWalker() {
    return {};
  }
} : document;
var createMarker = () => d6.createComment("");
var isPrimitive2 = (value) => value === null || typeof value != "object" && typeof value != "function";
var isArray = Array.isArray;
var isIterable = (value) => isArray(value) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
typeof value?.[Symbol.iterator] === "function";
var SPACE_CHAR = `[ 	
\f\r]`;
var ATTR_VALUE_CHAR = `[^ 	
\f\r"'\`<>=]`;
var NAME_CHAR = `[^\\s"'>=/]`;
var textEndRegex = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
var COMMENT_START = 1;
var TAG_NAME = 2;
var DYNAMIC_TAG_NAME = 3;
var commentEndRegex = /-->/g;
var comment2EndRegex = />/g;
var tagEndRegex = new RegExp(`>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|("|')|))|$)`, "g");
var ENTIRE_MATCH = 0;
var ATTRIBUTE_NAME = 1;
var SPACES_AND_EQUALS = 2;
var QUOTE_CHAR = 3;
var singleQuoteAttrEndRegex = /'/g;
var doubleQuoteAttrEndRegex = /"/g;
var rawTextElement = /^(?:script|style|textarea|title)$/i;
var HTML_RESULT = 1;
var SVG_RESULT = 2;
var MATHML_RESULT = 3;
var ATTRIBUTE_PART = 1;
var CHILD_PART = 2;
var PROPERTY_PART = 3;
var BOOLEAN_ATTRIBUTE_PART = 4;
var EVENT_PART = 5;
var ELEMENT_PART = 6;
var COMMENT_PART = 7;
var tag = (type) => (strings, ...values) => {
  if (DEV_MODE && strings.some((s2) => s2 === void 0)) {
    console.warn("Some template strings are undefined.\nThis is probably caused by illegal octal escape sequences.");
  }
  if (DEV_MODE) {
    if (values.some((val) => val?.["_$litStatic$"])) {
      issueWarning("", `Static values 'literal' or 'unsafeStatic' cannot be used as values to non-static templates.
Please use the static 'html' tag function. See https://lit.dev/docs/templates/expressions/#static-expressions`);
    }
  }
  return {
    // This property needs to remain unminified.
    ["_$litType$"]: type,
    strings,
    values
  };
};
var html = tag(HTML_RESULT);
var svg = tag(SVG_RESULT);
var mathml = tag(MATHML_RESULT);
var noChange = Symbol.for("lit-noChange");
var nothing = Symbol.for("lit-nothing");
var templateCache = /* @__PURE__ */ new WeakMap();
var walker = d6.createTreeWalker(
  d6,
  129
  /* NodeFilter.SHOW_{ELEMENT|COMMENT} */
);
var sanitizerFactoryInternal = noopSanitizer;
function trustFromTemplateString(tsa, stringFromTSA) {
  if (!isArray(tsa) || !tsa.hasOwnProperty("raw")) {
    let message = "invalid template strings array";
    if (DEV_MODE) {
      message = `
          Internal Error: expected template strings to be an array
          with a 'raw' field. Faking a template strings array by
          calling html or svg like an ordinary function is effectively
          the same as calling unsafeHtml and can lead to major security
          issues, e.g. opening your code up to XSS attacks.
          If you're using the html or svg tagged template functions normally
          and still seeing this error, please file a bug at
          https://github.com/lit/lit/issues/new?template=bug_report.md
          and include information about your build tooling, if any.
        `.trim().replace(/\n */g, "\n");
    }
    throw new Error(message);
  }
  return policy !== void 0 ? policy.createHTML(stringFromTSA) : stringFromTSA;
}
var getTemplateHtml = (strings, type) => {
  const l6 = strings.length - 1;
  const attrNames = [];
  let html2 = type === SVG_RESULT ? "<svg>" : type === MATHML_RESULT ? "<math>" : "";
  let rawTextEndRegex;
  let regex = textEndRegex;
  for (let i3 = 0; i3 < l6; i3++) {
    const s2 = strings[i3];
    let attrNameEndIndex = -1;
    let attrName;
    let lastIndex = 0;
    let match;
    while (lastIndex < s2.length) {
      regex.lastIndex = lastIndex;
      match = regex.exec(s2);
      if (match === null) {
        break;
      }
      lastIndex = regex.lastIndex;
      if (regex === textEndRegex) {
        if (match[COMMENT_START] === "!--") {
          regex = commentEndRegex;
        } else if (match[COMMENT_START] !== void 0) {
          regex = comment2EndRegex;
        } else if (match[TAG_NAME] !== void 0) {
          if (rawTextElement.test(match[TAG_NAME])) {
            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, "g");
          }
          regex = tagEndRegex;
        } else if (match[DYNAMIC_TAG_NAME] !== void 0) {
          if (DEV_MODE) {
            throw new Error("Bindings in tag names are not supported. Please use static templates instead. See https://lit.dev/docs/templates/expressions/#static-expressions");
          }
          regex = tagEndRegex;
        }
      } else if (regex === tagEndRegex) {
        if (match[ENTIRE_MATCH] === ">") {
          regex = rawTextEndRegex ?? textEndRegex;
          attrNameEndIndex = -1;
        } else if (match[ATTRIBUTE_NAME] === void 0) {
          attrNameEndIndex = -2;
        } else {
          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;
          attrName = match[ATTRIBUTE_NAME];
          regex = match[QUOTE_CHAR] === void 0 ? tagEndRegex : match[QUOTE_CHAR] === '"' ? doubleQuoteAttrEndRegex : singleQuoteAttrEndRegex;
        }
      } else if (regex === doubleQuoteAttrEndRegex || regex === singleQuoteAttrEndRegex) {
        regex = tagEndRegex;
      } else if (regex === commentEndRegex || regex === comment2EndRegex) {
        regex = textEndRegex;
      } else {
        regex = tagEndRegex;
        rawTextEndRegex = void 0;
      }
    }
    if (DEV_MODE) {
      console.assert(attrNameEndIndex === -1 || regex === tagEndRegex || regex === singleQuoteAttrEndRegex || regex === doubleQuoteAttrEndRegex, "unexpected parse state B");
    }
    const end = regex === tagEndRegex && strings[i3 + 1].startsWith("/>") ? " " : "";
    html2 += regex === textEndRegex ? s2 + nodeMarker : attrNameEndIndex >= 0 ? (attrNames.push(attrName), s2.slice(0, attrNameEndIndex) + boundAttributeSuffix + s2.slice(attrNameEndIndex)) + marker + end : s2 + marker + (attrNameEndIndex === -2 ? i3 : end);
  }
  const htmlResult = html2 + (strings[l6] || "<?>") + (type === SVG_RESULT ? "</svg>" : type === MATHML_RESULT ? "</math>" : "");
  return [trustFromTemplateString(strings, htmlResult), attrNames];
};
var Template = class _Template {
  constructor({ strings, ["_$litType$"]: type }, options) {
    this.parts = [];
    let node;
    let nodeIndex = 0;
    let attrNameIndex = 0;
    const partCount = strings.length - 1;
    const parts = this.parts;
    const [html2, attrNames] = getTemplateHtml(strings, type);
    this.el = _Template.createElement(html2, options);
    walker.currentNode = this.el.content;
    if (type === SVG_RESULT || type === MATHML_RESULT) {
      const wrapper = this.el.content.firstChild;
      wrapper.replaceWith(...wrapper.childNodes);
    }
    while ((node = walker.nextNode()) !== null && parts.length < partCount) {
      if (node.nodeType === 1) {
        if (DEV_MODE) {
          const tag2 = node.localName;
          if (/^(?:textarea|template)$/i.test(tag2) && node.innerHTML.includes(marker)) {
            const m4 = `Expressions are not supported inside \`${tag2}\` elements. See https://lit.dev/msg/expression-in-${tag2} for more information.`;
            if (tag2 === "template") {
              throw new Error(m4);
            } else
              issueWarning("", m4);
          }
        }
        if (node.hasAttributes()) {
          for (const name2 of node.getAttributeNames()) {
            if (name2.endsWith(boundAttributeSuffix)) {
              const realName = attrNames[attrNameIndex++];
              const value = node.getAttribute(name2);
              const statics = value.split(marker);
              const m4 = /([.?@])?(.*)/.exec(realName);
              parts.push({
                type: ATTRIBUTE_PART,
                index: nodeIndex,
                name: m4[2],
                strings: statics,
                ctor: m4[1] === "." ? PropertyPart : m4[1] === "?" ? BooleanAttributePart : m4[1] === "@" ? EventPart : AttributePart
              });
              node.removeAttribute(name2);
            } else if (name2.startsWith(marker)) {
              parts.push({
                type: ELEMENT_PART,
                index: nodeIndex
              });
              node.removeAttribute(name2);
            }
          }
        }
        if (rawTextElement.test(node.tagName)) {
          const strings2 = node.textContent.split(marker);
          const lastIndex = strings2.length - 1;
          if (lastIndex > 0) {
            node.textContent = trustedTypes ? trustedTypes.emptyScript : "";
            for (let i3 = 0; i3 < lastIndex; i3++) {
              node.append(strings2[i3], createMarker());
              walker.nextNode();
              parts.push({ type: CHILD_PART, index: ++nodeIndex });
            }
            node.append(strings2[lastIndex], createMarker());
          }
        }
      } else if (node.nodeType === 8) {
        const data = node.data;
        if (data === markerMatch) {
          parts.push({ type: CHILD_PART, index: nodeIndex });
        } else {
          let i3 = -1;
          while ((i3 = node.data.indexOf(marker, i3 + 1)) !== -1) {
            parts.push({ type: COMMENT_PART, index: nodeIndex });
            i3 += marker.length - 1;
          }
        }
      }
      nodeIndex++;
    }
    if (DEV_MODE) {
      if (attrNames.length !== attrNameIndex) {
        throw new Error(`Detected duplicate attribute bindings. This occurs if your template has duplicate attributes on an element tag. For example "<input ?disabled=\${true} ?disabled=\${false}>" contains a duplicate "disabled" attribute. The error was detected in the following template: 
\`` + strings.join("${...}") + "`");
      }
    }
    debugLogEvent && debugLogEvent({
      kind: "template prep",
      template: this,
      clonableTemplate: this.el,
      parts: this.parts,
      strings
    });
  }
  // Overridden via `litHtmlPolyfillSupport` to provide platform support.
  /** @nocollapse */
  static createElement(html2, _options) {
    const el = d6.createElement("template");
    el.innerHTML = html2;
    return el;
  }
};
function resolveDirective(part, value, parent = part, attributeIndex) {
  if (value === noChange) {
    return value;
  }
  let currentDirective = attributeIndex !== void 0 ? parent.__directives?.[attributeIndex] : parent.__directive;
  const nextDirectiveConstructor = isPrimitive2(value) ? void 0 : (
    // This property needs to remain unminified.
    value["_$litDirective$"]
  );
  if (currentDirective?.constructor !== nextDirectiveConstructor) {
    currentDirective?.["_$notifyDirectiveConnectionChanged"]?.(false);
    if (nextDirectiveConstructor === void 0) {
      currentDirective = void 0;
    } else {
      currentDirective = new nextDirectiveConstructor(part);
      currentDirective._$initialize(part, parent, attributeIndex);
    }
    if (attributeIndex !== void 0) {
      (parent.__directives ??= [])[attributeIndex] = currentDirective;
    } else {
      parent.__directive = currentDirective;
    }
  }
  if (currentDirective !== void 0) {
    value = resolveDirective(part, currentDirective._$resolve(part, value.values), currentDirective, attributeIndex);
  }
  return value;
}
var TemplateInstance = class {
  constructor(template, parent) {
    this._$parts = [];
    this._$disconnectableChildren = void 0;
    this._$template = template;
    this._$parent = parent;
  }
  // Called by ChildPart parentNode getter
  get parentNode() {
    return this._$parent.parentNode;
  }
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    return this._$parent._$isConnected;
  }
  // This method is separate from the constructor because we need to return a
  // DocumentFragment and we don't want to hold onto it with an instance field.
  _clone(options) {
    const { el: { content }, parts } = this._$template;
    const fragment = (options?.creationScope ?? d6).importNode(content, true);
    walker.currentNode = fragment;
    let node = walker.nextNode();
    let nodeIndex = 0;
    let partIndex = 0;
    let templatePart = parts[0];
    while (templatePart !== void 0) {
      if (nodeIndex === templatePart.index) {
        let part;
        if (templatePart.type === CHILD_PART) {
          part = new ChildPart(node, node.nextSibling, this, options);
        } else if (templatePart.type === ATTRIBUTE_PART) {
          part = new templatePart.ctor(node, templatePart.name, templatePart.strings, this, options);
        } else if (templatePart.type === ELEMENT_PART) {
          part = new ElementPart(node, this, options);
        }
        this._$parts.push(part);
        templatePart = parts[++partIndex];
      }
      if (nodeIndex !== templatePart?.index) {
        node = walker.nextNode();
        nodeIndex++;
      }
    }
    walker.currentNode = d6;
    return fragment;
  }
  _update(values) {
    let i3 = 0;
    for (const part of this._$parts) {
      if (part !== void 0) {
        debugLogEvent && debugLogEvent({
          kind: "set part",
          part,
          value: values[i3],
          valueIndex: i3,
          values,
          templateInstance: this
        });
        if (part.strings !== void 0) {
          part._$setValue(values, part, i3);
          i3 += part.strings.length - 2;
        } else {
          part._$setValue(values[i3]);
        }
      }
      i3++;
    }
  }
};
var ChildPart = class _ChildPart {
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    return this._$parent?._$isConnected ?? this.__isConnected;
  }
  constructor(startNode, endNode, parent, options) {
    this.type = CHILD_PART;
    this._$committedValue = nothing;
    this._$disconnectableChildren = void 0;
    this._$startNode = startNode;
    this._$endNode = endNode;
    this._$parent = parent;
    this.options = options;
    this.__isConnected = options?.isConnected ?? true;
    if (ENABLE_EXTRA_SECURITY_HOOKS) {
      this._textSanitizer = void 0;
    }
  }
  /**
   * The parent node into which the part renders its content.
   *
   * A ChildPart's content consists of a range of adjacent child nodes of
   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and
   * `.endNode`).
   *
   * - If both `.startNode` and `.endNode` are non-null, then the part's content
   * consists of all siblings between `.startNode` and `.endNode`, exclusively.
   *
   * - If `.startNode` is non-null but `.endNode` is null, then the part's
   * content consists of all siblings following `.startNode`, up to and
   * including the last child of `.parentNode`. If `.endNode` is non-null, then
   * `.startNode` will always be non-null.
   *
   * - If both `.endNode` and `.startNode` are null, then the part's content
   * consists of all child nodes of `.parentNode`.
   */
  get parentNode() {
    let parentNode = wrap(this._$startNode).parentNode;
    const parent = this._$parent;
    if (parent !== void 0 && parentNode?.nodeType === 11) {
      parentNode = parent.parentNode;
    }
    return parentNode;
  }
  /**
   * The part's leading marker node, if any. See `.parentNode` for more
   * information.
   */
  get startNode() {
    return this._$startNode;
  }
  /**
   * The part's trailing marker node, if any. See `.parentNode` for more
   * information.
   */
  get endNode() {
    return this._$endNode;
  }
  _$setValue(value, directiveParent = this) {
    if (DEV_MODE && this.parentNode === null) {
      throw new Error(`This \`ChildPart\` has no \`parentNode\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \`innerHTML\` or \`textContent\` can do this.`);
    }
    value = resolveDirective(this, value, directiveParent);
    if (isPrimitive2(value)) {
      if (value === nothing || value == null || value === "") {
        if (this._$committedValue !== nothing) {
          debugLogEvent && debugLogEvent({
            kind: "commit nothing to child",
            start: this._$startNode,
            end: this._$endNode,
            parent: this._$parent,
            options: this.options
          });
          this._$clear();
        }
        this._$committedValue = nothing;
      } else if (value !== this._$committedValue && value !== noChange) {
        this._commitText(value);
      }
    } else if (value["_$litType$"] !== void 0) {
      this._commitTemplateResult(value);
    } else if (value.nodeType !== void 0) {
      if (DEV_MODE && this.options?.host === value) {
        this._commitText(`[probable mistake: rendered a template's host in itself (commonly caused by writing \${this} in a template]`);
        console.warn(`Attempted to render the template host`, value, `inside itself. This is almost always a mistake, and in dev mode `, `we render some warning text. In production however, we'll `, `render it, which will usually result in an error, and sometimes `, `in the element disappearing from the DOM.`);
        return;
      }
      this._commitNode(value);
    } else if (isIterable(value)) {
      this._commitIterable(value);
    } else {
      this._commitText(value);
    }
  }
  _insert(node) {
    return wrap(wrap(this._$startNode).parentNode).insertBefore(node, this._$endNode);
  }
  _commitNode(value) {
    if (this._$committedValue !== value) {
      this._$clear();
      if (ENABLE_EXTRA_SECURITY_HOOKS && sanitizerFactoryInternal !== noopSanitizer) {
        const parentNodeName = this._$startNode.parentNode?.nodeName;
        if (parentNodeName === "STYLE" || parentNodeName === "SCRIPT") {
          let message = "Forbidden";
          if (DEV_MODE) {
            if (parentNodeName === "STYLE") {
              message = `Lit does not support binding inside style nodes. This is a security risk, as style injection attacks can exfiltrate data and spoof UIs. Consider instead using css\`...\` literals to compose styles, and do dynamic styling with css custom properties, ::parts, <slot>s, and by mutating the DOM rather than stylesheets.`;
            } else {
              message = `Lit does not support binding inside script nodes. This is a security risk, as it could allow arbitrary code execution.`;
            }
          }
          throw new Error(message);
        }
      }
      debugLogEvent && debugLogEvent({
        kind: "commit node",
        start: this._$startNode,
        parent: this._$parent,
        value,
        options: this.options
      });
      this._$committedValue = this._insert(value);
    }
  }
  _commitText(value) {
    if (this._$committedValue !== nothing && isPrimitive2(this._$committedValue)) {
      const node = wrap(this._$startNode).nextSibling;
      if (ENABLE_EXTRA_SECURITY_HOOKS) {
        if (this._textSanitizer === void 0) {
          this._textSanitizer = createSanitizer(node, "data", "property");
        }
        value = this._textSanitizer(value);
      }
      debugLogEvent && debugLogEvent({
        kind: "commit text",
        node,
        value,
        options: this.options
      });
      node.data = value;
    } else {
      if (ENABLE_EXTRA_SECURITY_HOOKS) {
        const textNode = d6.createTextNode("");
        this._commitNode(textNode);
        if (this._textSanitizer === void 0) {
          this._textSanitizer = createSanitizer(textNode, "data", "property");
        }
        value = this._textSanitizer(value);
        debugLogEvent && debugLogEvent({
          kind: "commit text",
          node: textNode,
          value,
          options: this.options
        });
        textNode.data = value;
      } else {
        this._commitNode(d6.createTextNode(value));
        debugLogEvent && debugLogEvent({
          kind: "commit text",
          node: wrap(this._$startNode).nextSibling,
          value,
          options: this.options
        });
      }
    }
    this._$committedValue = value;
  }
  _commitTemplateResult(result) {
    const { values, ["_$litType$"]: type } = result;
    const template = typeof type === "number" ? this._$getTemplate(result) : (type.el === void 0 && (type.el = Template.createElement(trustFromTemplateString(type.h, type.h[0]), this.options)), type);
    if (this._$committedValue?._$template === template) {
      debugLogEvent && debugLogEvent({
        kind: "template updating",
        template,
        instance: this._$committedValue,
        parts: this._$committedValue._$parts,
        options: this.options,
        values
      });
      this._$committedValue._update(values);
    } else {
      const instance = new TemplateInstance(template, this);
      const fragment = instance._clone(this.options);
      debugLogEvent && debugLogEvent({
        kind: "template instantiated",
        template,
        instance,
        parts: instance._$parts,
        options: this.options,
        fragment,
        values
      });
      instance._update(values);
      debugLogEvent && debugLogEvent({
        kind: "template instantiated and updated",
        template,
        instance,
        parts: instance._$parts,
        options: this.options,
        fragment,
        values
      });
      this._commitNode(fragment);
      this._$committedValue = instance;
    }
  }
  // Overridden via `litHtmlPolyfillSupport` to provide platform support.
  /** @internal */
  _$getTemplate(result) {
    let template = templateCache.get(result.strings);
    if (template === void 0) {
      templateCache.set(result.strings, template = new Template(result));
    }
    return template;
  }
  _commitIterable(value) {
    if (!isArray(this._$committedValue)) {
      this._$committedValue = [];
      this._$clear();
    }
    const itemParts = this._$committedValue;
    let partIndex = 0;
    let itemPart;
    for (const item of value) {
      if (partIndex === itemParts.length) {
        itemParts.push(itemPart = new _ChildPart(this._insert(createMarker()), this._insert(createMarker()), this, this.options));
      } else {
        itemPart = itemParts[partIndex];
      }
      itemPart._$setValue(item);
      partIndex++;
    }
    if (partIndex < itemParts.length) {
      this._$clear(itemPart && wrap(itemPart._$endNode).nextSibling, partIndex);
      itemParts.length = partIndex;
    }
  }
  /**
   * Removes the nodes contained within this Part from the DOM.
   *
   * @param start Start node to clear from, for clearing a subset of the part's
   *     DOM (used when truncating iterables)
   * @param from  When `start` is specified, the index within the iterable from
   *     which ChildParts are being removed, used for disconnecting directives
   *     in those Parts.
   *
   * @internal
   */
  _$clear(start = wrap(this._$startNode).nextSibling, from11) {
    this._$notifyConnectionChanged?.(false, true, from11);
    while (start !== this._$endNode) {
      const n4 = wrap(start).nextSibling;
      wrap(start).remove();
      start = n4;
    }
  }
  /**
   * Implementation of RootPart's `isConnected`. Note that this method
   * should only be called on `RootPart`s (the `ChildPart` returned from a
   * top-level `render()` call). It has no effect on non-root ChildParts.
   * @param isConnected Whether to set
   * @internal
   */
  setConnected(isConnected) {
    if (this._$parent === void 0) {
      this.__isConnected = isConnected;
      this._$notifyConnectionChanged?.(isConnected);
    } else if (DEV_MODE) {
      throw new Error("part.setConnected() may only be called on a RootPart returned from render().");
    }
  }
};
var AttributePart = class {
  get tagName() {
    return this.element.tagName;
  }
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    return this._$parent._$isConnected;
  }
  constructor(element, name2, strings, parent, options) {
    this.type = ATTRIBUTE_PART;
    this._$committedValue = nothing;
    this._$disconnectableChildren = void 0;
    this.element = element;
    this.name = name2;
    this._$parent = parent;
    this.options = options;
    if (strings.length > 2 || strings[0] !== "" || strings[1] !== "") {
      this._$committedValue = new Array(strings.length - 1).fill(new String());
      this.strings = strings;
    } else {
      this._$committedValue = nothing;
    }
    if (ENABLE_EXTRA_SECURITY_HOOKS) {
      this._sanitizer = void 0;
    }
  }
  /**
   * Sets the value of this part by resolving the value from possibly multiple
   * values and static strings and committing it to the DOM.
   * If this part is single-valued, `this._strings` will be undefined, and the
   * method will be called with a single value argument. If this part is
   * multi-value, `this._strings` will be defined, and the method is called
   * with the value array of the part's owning TemplateInstance, and an offset
   * into the value array from which the values should be read.
   * This method is overloaded this way to eliminate short-lived array slices
   * of the template instance values, and allow a fast-path for single-valued
   * parts.
   *
   * @param value The part value, or an array of values for multi-valued parts
   * @param valueIndex the index to start reading values from. `undefined` for
   *   single-valued parts
   * @param noCommit causes the part to not commit its value to the DOM. Used
   *   in hydration to prime attribute parts with their first-rendered value,
   *   but not set the attribute, and in SSR to no-op the DOM operation and
   *   capture the value for serialization.
   *
   * @internal
   */
  _$setValue(value, directiveParent = this, valueIndex, noCommit) {
    const strings = this.strings;
    let change = false;
    if (strings === void 0) {
      value = resolveDirective(this, value, directiveParent, 0);
      change = !isPrimitive2(value) || value !== this._$committedValue && value !== noChange;
      if (change) {
        this._$committedValue = value;
      }
    } else {
      const values = value;
      value = strings[0];
      let i3, v6;
      for (i3 = 0; i3 < strings.length - 1; i3++) {
        v6 = resolveDirective(this, values[valueIndex + i3], directiveParent, i3);
        if (v6 === noChange) {
          v6 = this._$committedValue[i3];
        }
        change ||= !isPrimitive2(v6) || v6 !== this._$committedValue[i3];
        if (v6 === nothing) {
          value = nothing;
        } else if (value !== nothing) {
          value += (v6 ?? "") + strings[i3 + 1];
        }
        this._$committedValue[i3] = v6;
      }
    }
    if (change && !noCommit) {
      this._commitValue(value);
    }
  }
  /** @internal */
  _commitValue(value) {
    if (value === nothing) {
      wrap(this.element).removeAttribute(this.name);
    } else {
      if (ENABLE_EXTRA_SECURITY_HOOKS) {
        if (this._sanitizer === void 0) {
          this._sanitizer = sanitizerFactoryInternal(this.element, this.name, "attribute");
        }
        value = this._sanitizer(value ?? "");
      }
      debugLogEvent && debugLogEvent({
        kind: "commit attribute",
        element: this.element,
        name: this.name,
        value,
        options: this.options
      });
      wrap(this.element).setAttribute(this.name, value ?? "");
    }
  }
};
var PropertyPart = class extends AttributePart {
  constructor() {
    super(...arguments);
    this.type = PROPERTY_PART;
  }
  /** @internal */
  _commitValue(value) {
    if (ENABLE_EXTRA_SECURITY_HOOKS) {
      if (this._sanitizer === void 0) {
        this._sanitizer = sanitizerFactoryInternal(this.element, this.name, "property");
      }
      value = this._sanitizer(value);
    }
    debugLogEvent && debugLogEvent({
      kind: "commit property",
      element: this.element,
      name: this.name,
      value,
      options: this.options
    });
    this.element[this.name] = value === nothing ? void 0 : value;
  }
};
var BooleanAttributePart = class extends AttributePart {
  constructor() {
    super(...arguments);
    this.type = BOOLEAN_ATTRIBUTE_PART;
  }
  /** @internal */
  _commitValue(value) {
    debugLogEvent && debugLogEvent({
      kind: "commit boolean attribute",
      element: this.element,
      name: this.name,
      value: !!(value && value !== nothing),
      options: this.options
    });
    wrap(this.element).toggleAttribute(this.name, !!value && value !== nothing);
  }
};
var EventPart = class extends AttributePart {
  constructor(element, name2, strings, parent, options) {
    super(element, name2, strings, parent, options);
    this.type = EVENT_PART;
    if (DEV_MODE && this.strings !== void 0) {
      throw new Error(`A \`<${element.localName}>\` has a \`@${name2}=...\` listener with invalid content. Event listeners in templates must have exactly one expression and no surrounding text.`);
    }
  }
  // EventPart does not use the base _$setValue/_resolveValue implementation
  // since the dirty checking is more complex
  /** @internal */
  _$setValue(newListener, directiveParent = this) {
    newListener = resolveDirective(this, newListener, directiveParent, 0) ?? nothing;
    if (newListener === noChange) {
      return;
    }
    const oldListener = this._$committedValue;
    const shouldRemoveListener = newListener === nothing && oldListener !== nothing || newListener.capture !== oldListener.capture || newListener.once !== oldListener.once || newListener.passive !== oldListener.passive;
    const shouldAddListener = newListener !== nothing && (oldListener === nothing || shouldRemoveListener);
    debugLogEvent && debugLogEvent({
      kind: "commit event listener",
      element: this.element,
      name: this.name,
      value: newListener,
      options: this.options,
      removeListener: shouldRemoveListener,
      addListener: shouldAddListener,
      oldListener
    });
    if (shouldRemoveListener) {
      this.element.removeEventListener(this.name, this, oldListener);
    }
    if (shouldAddListener) {
      this.element.addEventListener(this.name, this, newListener);
    }
    this._$committedValue = newListener;
  }
  handleEvent(event) {
    if (typeof this._$committedValue === "function") {
      this._$committedValue.call(this.options?.host ?? this.element, event);
    } else {
      this._$committedValue.handleEvent(event);
    }
  }
};
var ElementPart = class {
  constructor(element, parent, options) {
    this.element = element;
    this.type = ELEMENT_PART;
    this._$disconnectableChildren = void 0;
    this._$parent = parent;
    this.options = options;
  }
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    return this._$parent._$isConnected;
  }
  _$setValue(value) {
    debugLogEvent && debugLogEvent({
      kind: "commit to element binding",
      element: this.element,
      value,
      options: this.options
    });
    resolveDirective(this, value);
  }
};
var _$LH = {
  // Used in lit-ssr
  _boundAttributeSuffix: boundAttributeSuffix,
  _marker: marker,
  _markerMatch: markerMatch,
  _HTML_RESULT: HTML_RESULT,
  _getTemplateHtml: getTemplateHtml,
  // Used in tests and private-ssr-support
  _TemplateInstance: TemplateInstance,
  _isIterable: isIterable,
  _resolveDirective: resolveDirective,
  _ChildPart: ChildPart,
  _AttributePart: AttributePart,
  _BooleanAttributePart: BooleanAttributePart,
  _EventPart: EventPart,
  _PropertyPart: PropertyPart,
  _ElementPart: ElementPart
};
var polyfillSupport = DEV_MODE ? global2.litHtmlPolyfillSupportDevMode : global2.litHtmlPolyfillSupport;
polyfillSupport?.(Template, ChildPart);
(global2.litHtmlVersions ??= []).push("3.3.1");
if (DEV_MODE && global2.litHtmlVersions.length > 1) {
  queueMicrotask(() => {
    issueWarning("multiple-versions", `Multiple versions of Lit loaded. Loading multiple versions is not recommended.`);
  });
}
var render = (value, container, options) => {
  if (DEV_MODE && container == null) {
    throw new TypeError(`The container to render into may not be ${container}`);
  }
  const renderId = DEV_MODE ? debugLogRenderId++ : 0;
  const partOwnerNode = options?.renderBefore ?? container;
  let part = partOwnerNode["_$litPart$"];
  debugLogEvent && debugLogEvent({
    kind: "begin render",
    id: renderId,
    value,
    container,
    options,
    part
  });
  if (part === void 0) {
    const endNode = options?.renderBefore ?? null;
    partOwnerNode["_$litPart$"] = part = new ChildPart(container.insertBefore(createMarker(), endNode), endNode, void 0, options ?? {});
  }
  part._$setValue(value);
  debugLogEvent && debugLogEvent({
    kind: "end render",
    id: renderId,
    value,
    container,
    options,
    part
  });
  return part;
};
if (ENABLE_EXTRA_SECURITY_HOOKS) {
  render.setSanitizer = setSanitizer;
  render.createSanitizer = createSanitizer;
  if (DEV_MODE) {
    render._testOnlyClearSanitizerFactoryDoNotCallOrElse = _testOnlyClearSanitizerFactoryDoNotCallOrElse;
  }
}

// node_modules/@lit/reactive-element/development/css-tag.js
var NODE_MODE2 = false;
var global3 = globalThis;
var supportsAdoptingStyleSheets = global3.ShadowRoot && (global3.ShadyCSS === void 0 || global3.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
var constructionToken = Symbol();
var cssTagCache = /* @__PURE__ */ new WeakMap();
var CSSResult = class {
  constructor(cssText, strings, safeToken) {
    this["_$cssResult$"] = true;
    if (safeToken !== constructionToken) {
      throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    }
    this.cssText = cssText;
    this._strings = strings;
  }
  // This is a getter so that it's lazy. In practice, this means stylesheets
  // are not created until the first element instance is made.
  get styleSheet() {
    let styleSheet = this._styleSheet;
    const strings = this._strings;
    if (supportsAdoptingStyleSheets && styleSheet === void 0) {
      const cacheable = strings !== void 0 && strings.length === 1;
      if (cacheable) {
        styleSheet = cssTagCache.get(strings);
      }
      if (styleSheet === void 0) {
        (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(this.cssText);
        if (cacheable) {
          cssTagCache.set(strings, styleSheet);
        }
      }
    }
    return styleSheet;
  }
  toString() {
    return this.cssText;
  }
};
var textFromCSSResult = (value) => {
  if (value["_$cssResult$"] === true) {
    return value.cssText;
  } else if (typeof value === "number") {
    return value;
  } else {
    throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.`);
  }
};
var unsafeCSS = (value) => new CSSResult(typeof value === "string" ? value : String(value), void 0, constructionToken);
var css = (strings, ...values) => {
  const cssText = strings.length === 1 ? strings[0] : values.reduce((acc, v6, idx) => acc + textFromCSSResult(v6) + strings[idx + 1], strings[0]);
  return new CSSResult(cssText, strings, constructionToken);
};
var adoptStyles = (renderRoot, styles2) => {
  if (supportsAdoptingStyleSheets) {
    renderRoot.adoptedStyleSheets = styles2.map((s2) => s2 instanceof CSSStyleSheet ? s2 : s2.styleSheet);
  } else {
    for (const s2 of styles2) {
      const style = document.createElement("style");
      const nonce = global3["litNonce"];
      if (nonce !== void 0) {
        style.setAttribute("nonce", nonce);
      }
      style.textContent = s2.cssText;
      renderRoot.appendChild(style);
    }
  }
};
var cssResultFromStyleSheet = (sheet) => {
  let cssText = "";
  for (const rule of sheet.cssRules) {
    cssText += rule.cssText;
  }
  return unsafeCSS(cssText);
};
var getCompatibleStyle = supportsAdoptingStyleSheets || NODE_MODE2 && global3.CSSStyleSheet === void 0 ? (s2) => s2 : (s2) => s2 instanceof CSSStyleSheet ? cssResultFromStyleSheet(s2) : s2;

// node_modules/@lit/reactive-element/development/reactive-element.js
var { is: is3, defineProperty, getOwnPropertyDescriptor, getOwnPropertyNames, getOwnPropertySymbols, getPrototypeOf } = Object;
var NODE_MODE3 = false;
var global4 = globalThis;
if (NODE_MODE3) {
  global4.customElements ??= customElements;
}
var DEV_MODE2 = true;
var issueWarning2;
var trustedTypes2 = global4.trustedTypes;
var emptyStringForBooleanAttribute = trustedTypes2 ? trustedTypes2.emptyScript : "";
var polyfillSupport2 = DEV_MODE2 ? global4.reactiveElementPolyfillSupportDevMode : global4.reactiveElementPolyfillSupport;
if (DEV_MODE2) {
  global4.litIssuedWarnings ??= /* @__PURE__ */ new Set();
  issueWarning2 = (code2, warning) => {
    warning += ` See https://lit.dev/msg/${code2} for more information.`;
    if (!global4.litIssuedWarnings.has(warning) && !global4.litIssuedWarnings.has(code2)) {
      console.warn(warning);
      global4.litIssuedWarnings.add(warning);
    }
  };
  queueMicrotask(() => {
    issueWarning2("dev-mode", `Lit is in dev mode. Not recommended for production!`);
    if (global4.ShadyDOM?.inUse && polyfillSupport2 === void 0) {
      issueWarning2("polyfill-support-missing", `Shadow DOM is being polyfilled via \`ShadyDOM\` but the \`polyfill-support\` module has not been loaded.`);
    }
  });
}
var debugLogEvent2 = DEV_MODE2 ? (event) => {
  const shouldEmit = global4.emitLitDebugLogEvents;
  if (!shouldEmit) {
    return;
  }
  global4.dispatchEvent(new CustomEvent("lit-debug", {
    detail: event
  }));
} : void 0;
var JSCompiler_renameProperty = (prop, _obj) => prop;
var defaultConverter = {
  toAttribute(value, type) {
    switch (type) {
      case Boolean:
        value = value ? emptyStringForBooleanAttribute : null;
        break;
      case Object:
      case Array:
        value = value == null ? value : JSON.stringify(value);
        break;
    }
    return value;
  },
  fromAttribute(value, type) {
    let fromValue = value;
    switch (type) {
      case Boolean:
        fromValue = value !== null;
        break;
      case Number:
        fromValue = value === null ? null : Number(value);
        break;
      case Object:
      case Array:
        try {
          fromValue = JSON.parse(value);
        } catch (e2) {
          fromValue = null;
        }
        break;
    }
    return fromValue;
  }
};
var notEqual = (value, old) => !is3(value, old);
var defaultPropertyDeclaration = {
  attribute: true,
  type: String,
  converter: defaultConverter,
  reflect: false,
  useDefault: false,
  hasChanged: notEqual
};
Symbol.metadata ??= Symbol("metadata");
global4.litPropertyMetadata ??= /* @__PURE__ */ new WeakMap();
var ReactiveElement = class extends HTMLElement {
  /**
   * Adds an initializer function to the class that is called during instance
   * construction.
   *
   * This is useful for code that runs against a `ReactiveElement`
   * subclass, such as a decorator, that needs to do work for each
   * instance, such as setting up a `ReactiveController`.
   *
   * ```ts
   * const myDecorator = (target: typeof ReactiveElement, key: string) => {
   *   target.addInitializer((instance: ReactiveElement) => {
   *     // This is run during construction of the element
   *     new MyController(instance);
   *   });
   * }
   * ```
   *
   * Decorating a field will then cause each instance to run an initializer
   * that adds a controller:
   *
   * ```ts
   * class MyElement extends LitElement {
   *   @myDecorator foo;
   * }
   * ```
   *
   * Initializers are stored per-constructor. Adding an initializer to a
   * subclass does not add it to a superclass. Since initializers are run in
   * constructors, initializers will run in order of the class hierarchy,
   * starting with superclasses and progressing to the instance's class.
   *
   * @nocollapse
   */
  static addInitializer(initializer) {
    this.__prepare();
    (this._initializers ??= []).push(initializer);
  }
  /**
   * Returns a list of attributes corresponding to the registered properties.
   * @nocollapse
   * @category attributes
   */
  static get observedAttributes() {
    this.finalize();
    return this.__attributeToPropertyMap && [...this.__attributeToPropertyMap.keys()];
  }
  /**
   * Creates a property accessor on the element prototype if one does not exist
   * and stores a {@linkcode PropertyDeclaration} for the property with the
   * given options. The property setter calls the property's `hasChanged`
   * property option or uses a strict identity check to determine whether or not
   * to request an update.
   *
   * This method may be overridden to customize properties; however,
   * when doing so, it's important to call `super.createProperty` to ensure
   * the property is setup correctly. This method calls
   * `getPropertyDescriptor` internally to get a descriptor to install.
   * To customize what properties do when they are get or set, override
   * `getPropertyDescriptor`. To customize the options for a property,
   * implement `createProperty` like this:
   *
   * ```ts
   * static createProperty(name, options) {
   *   options = Object.assign(options, {myOption: true});
   *   super.createProperty(name, options);
   * }
   * ```
   *
   * @nocollapse
   * @category properties
   */
  static createProperty(name2, options = defaultPropertyDeclaration) {
    if (options.state) {
      options.attribute = false;
    }
    this.__prepare();
    if (this.prototype.hasOwnProperty(name2)) {
      options = Object.create(options);
      options.wrapped = true;
    }
    this.elementProperties.set(name2, options);
    if (!options.noAccessor) {
      const key = DEV_MODE2 ? (
        // Use Symbol.for in dev mode to make it easier to maintain state
        // when doing HMR.
        Symbol.for(`${String(name2)} (@property() cache)`)
      ) : Symbol();
      const descriptor = this.getPropertyDescriptor(name2, key, options);
      if (descriptor !== void 0) {
        defineProperty(this.prototype, name2, descriptor);
      }
    }
  }
  /**
   * Returns a property descriptor to be defined on the given named property.
   * If no descriptor is returned, the property will not become an accessor.
   * For example,
   *
   * ```ts
   * class MyElement extends LitElement {
   *   static getPropertyDescriptor(name, key, options) {
   *     const defaultDescriptor =
   *         super.getPropertyDescriptor(name, key, options);
   *     const setter = defaultDescriptor.set;
   *     return {
   *       get: defaultDescriptor.get,
   *       set(value) {
   *         setter.call(this, value);
   *         // custom action.
   *       },
   *       configurable: true,
   *       enumerable: true
   *     }
   *   }
   * }
   * ```
   *
   * @nocollapse
   * @category properties
   */
  static getPropertyDescriptor(name2, key, options) {
    const { get: get2, set: set2 } = getOwnPropertyDescriptor(this.prototype, name2) ?? {
      get() {
        return this[key];
      },
      set(v6) {
        this[key] = v6;
      }
    };
    if (DEV_MODE2 && get2 == null) {
      if ("value" in (getOwnPropertyDescriptor(this.prototype, name2) ?? {})) {
        throw new Error(`Field ${JSON.stringify(String(name2))} on ${this.name} was declared as a reactive property but it's actually declared as a value on the prototype. Usually this is due to using @property or @state on a method.`);
      }
      issueWarning2("reactive-property-without-getter", `Field ${JSON.stringify(String(name2))} on ${this.name} was declared as a reactive property but it does not have a getter. This will be an error in a future version of Lit.`);
    }
    return {
      get: get2,
      set(value) {
        const oldValue = get2?.call(this);
        set2?.call(this, value);
        this.requestUpdate(name2, oldValue, options);
      },
      configurable: true,
      enumerable: true
    };
  }
  /**
   * Returns the property options associated with the given property.
   * These options are defined with a `PropertyDeclaration` via the `properties`
   * object or the `@property` decorator and are registered in
   * `createProperty(...)`.
   *
   * Note, this method should be considered "final" and not overridden. To
   * customize the options for a given property, override
   * {@linkcode createProperty}.
   *
   * @nocollapse
   * @final
   * @category properties
   */
  static getPropertyOptions(name2) {
    return this.elementProperties.get(name2) ?? defaultPropertyDeclaration;
  }
  /**
   * Initializes static own properties of the class used in bookkeeping
   * for element properties, initializers, etc.
   *
   * Can be called multiple times by code that needs to ensure these
   * properties exist before using them.
   *
   * This method ensures the superclass is finalized so that inherited
   * property metadata can be copied down.
   * @nocollapse
   */
  static __prepare() {
    if (this.hasOwnProperty(JSCompiler_renameProperty("elementProperties", this))) {
      return;
    }
    const superCtor = getPrototypeOf(this);
    superCtor.finalize();
    if (superCtor._initializers !== void 0) {
      this._initializers = [...superCtor._initializers];
    }
    this.elementProperties = new Map(superCtor.elementProperties);
  }
  /**
   * Finishes setting up the class so that it's ready to be registered
   * as a custom element and instantiated.
   *
   * This method is called by the ReactiveElement.observedAttributes getter.
   * If you override the observedAttributes getter, you must either call
   * super.observedAttributes to trigger finalization, or call finalize()
   * yourself.
   *
   * @nocollapse
   */
  static finalize() {
    if (this.hasOwnProperty(JSCompiler_renameProperty("finalized", this))) {
      return;
    }
    this.finalized = true;
    this.__prepare();
    if (this.hasOwnProperty(JSCompiler_renameProperty("properties", this))) {
      const props = this.properties;
      const propKeys = [
        ...getOwnPropertyNames(props),
        ...getOwnPropertySymbols(props)
      ];
      for (const p4 of propKeys) {
        this.createProperty(p4, props[p4]);
      }
    }
    const metadata = this[Symbol.metadata];
    if (metadata !== null) {
      const properties = litPropertyMetadata.get(metadata);
      if (properties !== void 0) {
        for (const [p4, options] of properties) {
          this.elementProperties.set(p4, options);
        }
      }
    }
    this.__attributeToPropertyMap = /* @__PURE__ */ new Map();
    for (const [p4, options] of this.elementProperties) {
      const attr = this.__attributeNameForProperty(p4, options);
      if (attr !== void 0) {
        this.__attributeToPropertyMap.set(attr, p4);
      }
    }
    this.elementStyles = this.finalizeStyles(this.styles);
    if (DEV_MODE2) {
      if (this.hasOwnProperty("createProperty")) {
        issueWarning2("no-override-create-property", "Overriding ReactiveElement.createProperty() is deprecated. The override will not be called with standard decorators");
      }
      if (this.hasOwnProperty("getPropertyDescriptor")) {
        issueWarning2("no-override-get-property-descriptor", "Overriding ReactiveElement.getPropertyDescriptor() is deprecated. The override will not be called with standard decorators");
      }
    }
  }
  /**
   * Takes the styles the user supplied via the `static styles` property and
   * returns the array of styles to apply to the element.
   * Override this method to integrate into a style management system.
   *
   * Styles are deduplicated preserving the _last_ instance in the list. This
   * is a performance optimization to avoid duplicated styles that can occur
   * especially when composing via subclassing. The last item is kept to try
   * to preserve the cascade order with the assumption that it's most important
   * that last added styles override previous styles.
   *
   * @nocollapse
   * @category styles
   */
  static finalizeStyles(styles2) {
    const elementStyles2 = [];
    if (Array.isArray(styles2)) {
      const set2 = new Set(styles2.flat(Infinity).reverse());
      for (const s2 of set2) {
        elementStyles2.unshift(getCompatibleStyle(s2));
      }
    } else if (styles2 !== void 0) {
      elementStyles2.push(getCompatibleStyle(styles2));
    }
    return elementStyles2;
  }
  /**
   * Returns the property name for the given attribute `name`.
   * @nocollapse
   */
  static __attributeNameForProperty(name2, options) {
    const attribute = options.attribute;
    return attribute === false ? void 0 : typeof attribute === "string" ? attribute : typeof name2 === "string" ? name2.toLowerCase() : void 0;
  }
  constructor() {
    super();
    this.__instanceProperties = void 0;
    this.isUpdatePending = false;
    this.hasUpdated = false;
    this.__reflectingProperty = null;
    this.__initialize();
  }
  /**
   * Internal only override point for customizing work done when elements
   * are constructed.
   */
  __initialize() {
    this.__updatePromise = new Promise((res) => this.enableUpdating = res);
    this._$changedProperties = /* @__PURE__ */ new Map();
    this.__saveInstanceProperties();
    this.requestUpdate();
    this.constructor._initializers?.forEach((i3) => i3(this));
  }
  /**
   * Registers a `ReactiveController` to participate in the element's reactive
   * update cycle. The element automatically calls into any registered
   * controllers during its lifecycle callbacks.
   *
   * If the element is connected when `addController()` is called, the
   * controller's `hostConnected()` callback will be immediately called.
   * @category controllers
   */
  addController(controller6) {
    (this.__controllers ??= /* @__PURE__ */ new Set()).add(controller6);
    if (this.renderRoot !== void 0 && this.isConnected) {
      controller6.hostConnected?.();
    }
  }
  /**
   * Removes a `ReactiveController` from the element.
   * @category controllers
   */
  removeController(controller6) {
    this.__controllers?.delete(controller6);
  }
  /**
   * Fixes any properties set on the instance before upgrade time.
   * Otherwise these would shadow the accessor and break these properties.
   * The properties are stored in a Map which is played back after the
   * constructor runs.
   */
  __saveInstanceProperties() {
    const instanceProperties = /* @__PURE__ */ new Map();
    const elementProperties = this.constructor.elementProperties;
    for (const p4 of elementProperties.keys()) {
      if (this.hasOwnProperty(p4)) {
        instanceProperties.set(p4, this[p4]);
        delete this[p4];
      }
    }
    if (instanceProperties.size > 0) {
      this.__instanceProperties = instanceProperties;
    }
  }
  /**
   * Returns the node into which the element should render and by default
   * creates and returns an open shadowRoot. Implement to customize where the
   * element's DOM is rendered. For example, to render into the element's
   * childNodes, return `this`.
   *
   * @return Returns a node into which to render.
   * @category rendering
   */
  createRenderRoot() {
    const renderRoot = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
    adoptStyles(renderRoot, this.constructor.elementStyles);
    return renderRoot;
  }
  /**
   * On first connection, creates the element's renderRoot, sets up
   * element styling, and enables updating.
   * @category lifecycle
   */
  connectedCallback() {
    this.renderRoot ??= this.createRenderRoot();
    this.enableUpdating(true);
    this.__controllers?.forEach((c6) => c6.hostConnected?.());
  }
  /**
   * Note, this method should be considered final and not overridden. It is
   * overridden on the element instance with a function that triggers the first
   * update.
   * @category updates
   */
  enableUpdating(_requestedUpdate) {
  }
  /**
   * Allows for `super.disconnectedCallback()` in extensions while
   * reserving the possibility of making non-breaking feature additions
   * when disconnecting at some point in the future.
   * @category lifecycle
   */
  disconnectedCallback() {
    this.__controllers?.forEach((c6) => c6.hostDisconnected?.());
  }
  /**
   * Synchronizes property values when attributes change.
   *
   * Specifically, when an attribute is set, the corresponding property is set.
   * You should rarely need to implement this callback. If this method is
   * overridden, `super.attributeChangedCallback(name, _old, value)` must be
   * called.
   *
   * See [responding to attribute changes](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements#responding_to_attribute_changes)
   * on MDN for more information about the `attributeChangedCallback`.
   * @category attributes
   */
  attributeChangedCallback(name2, _old, value) {
    this._$attributeToProperty(name2, value);
  }
  __propertyToAttribute(name2, value) {
    const elemProperties = this.constructor.elementProperties;
    const options = elemProperties.get(name2);
    const attr = this.constructor.__attributeNameForProperty(name2, options);
    if (attr !== void 0 && options.reflect === true) {
      const converter = options.converter?.toAttribute !== void 0 ? options.converter : defaultConverter;
      const attrValue = converter.toAttribute(value, options.type);
      if (DEV_MODE2 && this.constructor.enabledWarnings.includes("migration") && attrValue === void 0) {
        issueWarning2("undefined-attribute-value", `The attribute value for the ${name2} property is undefined on element ${this.localName}. The attribute will be removed, but in the previous version of \`ReactiveElement\`, the attribute would not have changed.`);
      }
      this.__reflectingProperty = name2;
      if (attrValue == null) {
        this.removeAttribute(attr);
      } else {
        this.setAttribute(attr, attrValue);
      }
      this.__reflectingProperty = null;
    }
  }
  /** @internal */
  _$attributeToProperty(name2, value) {
    const ctor = this.constructor;
    const propName = ctor.__attributeToPropertyMap.get(name2);
    if (propName !== void 0 && this.__reflectingProperty !== propName) {
      const options = ctor.getPropertyOptions(propName);
      const converter = typeof options.converter === "function" ? { fromAttribute: options.converter } : options.converter?.fromAttribute !== void 0 ? options.converter : defaultConverter;
      this.__reflectingProperty = propName;
      const convertedValue = converter.fromAttribute(value, options.type);
      this[propName] = convertedValue ?? this.__defaultValues?.get(propName) ?? // eslint-disable-next-line @typescript-eslint/no-explicit-any
      convertedValue;
      this.__reflectingProperty = null;
    }
  }
  /**
   * Requests an update which is processed asynchronously. This should be called
   * when an element should update based on some state not triggered by setting
   * a reactive property. In this case, pass no arguments. It should also be
   * called when manually implementing a property setter. In this case, pass the
   * property `name` and `oldValue` to ensure that any configured property
   * options are honored.
   *
   * @param name name of requesting property
   * @param oldValue old value of requesting property
   * @param options property options to use instead of the previously
   *     configured options
   * @category updates
   */
  requestUpdate(name2, oldValue, options) {
    if (name2 !== void 0) {
      if (DEV_MODE2 && name2 instanceof Event) {
        issueWarning2(``, `The requestUpdate() method was called with an Event as the property name. This is probably a mistake caused by binding this.requestUpdate as an event listener. Instead bind a function that will call it with no arguments: () => this.requestUpdate()`);
      }
      const ctor = this.constructor;
      const newValue = this[name2];
      options ??= ctor.getPropertyOptions(name2);
      const changed = (options.hasChanged ?? notEqual)(newValue, oldValue) || // When there is no change, check a corner case that can occur when
      // 1. there's a initial value which was not reflected
      // 2. the property is subsequently set to this value.
      // For example, `prop: {useDefault: true, reflect: true}`
      // and el.prop = 'foo'. This should be considered a change if the
      // attribute is not set because we will now reflect the property to the attribute.
      options.useDefault && options.reflect && newValue === this.__defaultValues?.get(name2) && !this.hasAttribute(ctor.__attributeNameForProperty(name2, options));
      if (changed) {
        this._$changeProperty(name2, oldValue, options);
      } else {
        return;
      }
    }
    if (this.isUpdatePending === false) {
      this.__updatePromise = this.__enqueueUpdate();
    }
  }
  /**
   * @internal
   */
  _$changeProperty(name2, oldValue, { useDefault, reflect, wrapped }, initializeValue) {
    if (useDefault && !(this.__defaultValues ??= /* @__PURE__ */ new Map()).has(name2)) {
      this.__defaultValues.set(name2, initializeValue ?? oldValue ?? this[name2]);
      if (wrapped !== true || initializeValue !== void 0) {
        return;
      }
    }
    if (!this._$changedProperties.has(name2)) {
      if (!this.hasUpdated && !useDefault) {
        oldValue = void 0;
      }
      this._$changedProperties.set(name2, oldValue);
    }
    if (reflect === true && this.__reflectingProperty !== name2) {
      (this.__reflectingProperties ??= /* @__PURE__ */ new Set()).add(name2);
    }
  }
  /**
   * Sets up the element to asynchronously update.
   */
  async __enqueueUpdate() {
    this.isUpdatePending = true;
    try {
      await this.__updatePromise;
    } catch (e2) {
      Promise.reject(e2);
    }
    const result = this.scheduleUpdate();
    if (result != null) {
      await result;
    }
    return !this.isUpdatePending;
  }
  /**
   * Schedules an element update. You can override this method to change the
   * timing of updates by returning a Promise. The update will await the
   * returned Promise, and you should resolve the Promise to allow the update
   * to proceed. If this method is overridden, `super.scheduleUpdate()`
   * must be called.
   *
   * For instance, to schedule updates to occur just before the next frame:
   *
   * ```ts
   * override protected async scheduleUpdate(): Promise<unknown> {
   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
   *   super.scheduleUpdate();
   * }
   * ```
   * @category updates
   */
  scheduleUpdate() {
    const result = this.performUpdate();
    if (DEV_MODE2 && this.constructor.enabledWarnings.includes("async-perform-update") && typeof result?.then === "function") {
      issueWarning2("async-perform-update", `Element ${this.localName} returned a Promise from performUpdate(). This behavior is deprecated and will be removed in a future version of ReactiveElement.`);
    }
    return result;
  }
  /**
   * Performs an element update. Note, if an exception is thrown during the
   * update, `firstUpdated` and `updated` will not be called.
   *
   * Call `performUpdate()` to immediately process a pending update. This should
   * generally not be needed, but it can be done in rare cases when you need to
   * update synchronously.
   *
   * @category updates
   */
  performUpdate() {
    if (!this.isUpdatePending) {
      return;
    }
    debugLogEvent2?.({ kind: "update" });
    if (!this.hasUpdated) {
      this.renderRoot ??= this.createRenderRoot();
      if (DEV_MODE2) {
        const ctor = this.constructor;
        const shadowedProperties = [...ctor.elementProperties.keys()].filter((p4) => this.hasOwnProperty(p4) && p4 in getPrototypeOf(this));
        if (shadowedProperties.length) {
          throw new Error(`The following properties on element ${this.localName} will not trigger updates as expected because they are set using class fields: ${shadowedProperties.join(", ")}. Native class fields and some compiled output will overwrite accessors used for detecting changes. See https://lit.dev/msg/class-field-shadowing for more information.`);
        }
      }
      if (this.__instanceProperties) {
        for (const [p4, value] of this.__instanceProperties) {
          this[p4] = value;
        }
        this.__instanceProperties = void 0;
      }
      const elementProperties = this.constructor.elementProperties;
      if (elementProperties.size > 0) {
        for (const [p4, options] of elementProperties) {
          const { wrapped } = options;
          const value = this[p4];
          if (wrapped === true && !this._$changedProperties.has(p4) && value !== void 0) {
            this._$changeProperty(p4, void 0, options, value);
          }
        }
      }
    }
    let shouldUpdate = false;
    const changedProperties = this._$changedProperties;
    try {
      shouldUpdate = this.shouldUpdate(changedProperties);
      if (shouldUpdate) {
        this.willUpdate(changedProperties);
        this.__controllers?.forEach((c6) => c6.hostUpdate?.());
        this.update(changedProperties);
      } else {
        this.__markUpdated();
      }
    } catch (e2) {
      shouldUpdate = false;
      this.__markUpdated();
      throw e2;
    }
    if (shouldUpdate) {
      this._$didUpdate(changedProperties);
    }
  }
  /**
   * Invoked before `update()` to compute values needed during the update.
   *
   * Implement `willUpdate` to compute property values that depend on other
   * properties and are used in the rest of the update process.
   *
   * ```ts
   * willUpdate(changedProperties) {
   *   // only need to check changed properties for an expensive computation.
   *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {
   *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);
   *   }
   * }
   *
   * render() {
   *   return html`SHA: ${this.sha}`;
   * }
   * ```
   *
   * @category updates
   */
  willUpdate(_changedProperties) {
  }
  // Note, this is an override point for polyfill-support.
  // @internal
  _$didUpdate(changedProperties) {
    this.__controllers?.forEach((c6) => c6.hostUpdated?.());
    if (!this.hasUpdated) {
      this.hasUpdated = true;
      this.firstUpdated(changedProperties);
    }
    this.updated(changedProperties);
    if (DEV_MODE2 && this.isUpdatePending && this.constructor.enabledWarnings.includes("change-in-update")) {
      issueWarning2("change-in-update", `Element ${this.localName} scheduled an update (generally because a property was set) after an update completed, causing a new update to be scheduled. This is inefficient and should be avoided unless the next update can only be scheduled as a side effect of the previous update.`);
    }
  }
  __markUpdated() {
    this._$changedProperties = /* @__PURE__ */ new Map();
    this.isUpdatePending = false;
  }
  /**
   * Returns a Promise that resolves when the element has completed updating.
   * The Promise value is a boolean that is `true` if the element completed the
   * update without triggering another update. The Promise result is `false` if
   * a property was set inside `updated()`. If the Promise is rejected, an
   * exception was thrown during the update.
   *
   * To await additional asynchronous work, override the `getUpdateComplete`
   * method. For example, it is sometimes useful to await a rendered element
   * before fulfilling this Promise. To do this, first await
   * `super.getUpdateComplete()`, then any subsequent state.
   *
   * @return A promise of a boolean that resolves to true if the update completed
   *     without triggering another update.
   * @category updates
   */
  get updateComplete() {
    return this.getUpdateComplete();
  }
  /**
   * Override point for the `updateComplete` promise.
   *
   * It is not safe to override the `updateComplete` getter directly due to a
   * limitation in TypeScript which means it is not possible to call a
   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
   * This method should be overridden instead. For example:
   *
   * ```ts
   * class MyElement extends LitElement {
   *   override async getUpdateComplete() {
   *     const result = await super.getUpdateComplete();
   *     await this._myChild.updateComplete;
   *     return result;
   *   }
   * }
   * ```
   *
   * @return A promise of a boolean that resolves to true if the update completed
   *     without triggering another update.
   * @category updates
   */
  getUpdateComplete() {
    return this.__updatePromise;
  }
  /**
   * Controls whether or not `update()` should be called when the element requests
   * an update. By default, this method always returns `true`, but this can be
   * customized to control when to update.
   *
   * @param _changedProperties Map of changed properties with old values
   * @category updates
   */
  shouldUpdate(_changedProperties) {
    return true;
  }
  /**
   * Updates the element. This method reflects property values to attributes.
   * It can be overridden to render and keep updated element DOM.
   * Setting properties inside this method will *not* trigger
   * another update.
   *
   * @param _changedProperties Map of changed properties with old values
   * @category updates
   */
  update(_changedProperties) {
    this.__reflectingProperties &&= this.__reflectingProperties.forEach((p4) => this.__propertyToAttribute(p4, this[p4]));
    this.__markUpdated();
  }
  /**
   * Invoked whenever the element is updated. Implement to perform
   * post-updating tasks via DOM APIs, for example, focusing an element.
   *
   * Setting properties inside this method will trigger the element to update
   * again after this update cycle completes.
   *
   * @param _changedProperties Map of changed properties with old values
   * @category updates
   */
  updated(_changedProperties) {
  }
  /**
   * Invoked when the element is first updated. Implement to perform one time
   * work on the element after update.
   *
   * ```ts
   * firstUpdated() {
   *   this.renderRoot.getElementById('my-text-area').focus();
   * }
   * ```
   *
   * Setting properties inside this method will trigger the element to update
   * again after this update cycle completes.
   *
   * @param _changedProperties Map of changed properties with old values
   * @category updates
   */
  firstUpdated(_changedProperties) {
  }
};
ReactiveElement.elementStyles = [];
ReactiveElement.shadowRootOptions = { mode: "open" };
ReactiveElement[JSCompiler_renameProperty("elementProperties", ReactiveElement)] = /* @__PURE__ */ new Map();
ReactiveElement[JSCompiler_renameProperty("finalized", ReactiveElement)] = /* @__PURE__ */ new Map();
polyfillSupport2?.({ ReactiveElement });
if (DEV_MODE2) {
  ReactiveElement.enabledWarnings = [
    "change-in-update",
    "async-perform-update"
  ];
  const ensureOwnWarnings = function(ctor) {
    if (!ctor.hasOwnProperty(JSCompiler_renameProperty("enabledWarnings", ctor))) {
      ctor.enabledWarnings = ctor.enabledWarnings.slice();
    }
  };
  ReactiveElement.enableWarning = function(warning) {
    ensureOwnWarnings(this);
    if (!this.enabledWarnings.includes(warning)) {
      this.enabledWarnings.push(warning);
    }
  };
  ReactiveElement.disableWarning = function(warning) {
    ensureOwnWarnings(this);
    const i3 = this.enabledWarnings.indexOf(warning);
    if (i3 >= 0) {
      this.enabledWarnings.splice(i3, 1);
    }
  };
}
(global4.reactiveElementVersions ??= []).push("2.1.1");
if (DEV_MODE2 && global4.reactiveElementVersions.length > 1) {
  queueMicrotask(() => {
    issueWarning2("multiple-versions", `Multiple versions of Lit loaded. Loading multiple versions is not recommended.`);
  });
}

// node_modules/lit-element/development/lit-element.js
var JSCompiler_renameProperty2 = (prop, _obj) => prop;
var DEV_MODE3 = true;
var global5 = globalThis;
var issueWarning3;
if (DEV_MODE3) {
  global5.litIssuedWarnings ??= /* @__PURE__ */ new Set();
  issueWarning3 = (code2, warning) => {
    warning += ` See https://lit.dev/msg/${code2} for more information.`;
    if (!global5.litIssuedWarnings.has(warning) && !global5.litIssuedWarnings.has(code2)) {
      console.warn(warning);
      global5.litIssuedWarnings.add(warning);
    }
  };
}
var LitElement = class extends ReactiveElement {
  constructor() {
    super(...arguments);
    this.renderOptions = { host: this };
    this.__childPart = void 0;
  }
  /**
   * @category rendering
   */
  createRenderRoot() {
    const renderRoot = super.createRenderRoot();
    this.renderOptions.renderBefore ??= renderRoot.firstChild;
    return renderRoot;
  }
  /**
   * Updates the element. This method reflects property values to attributes
   * and calls `render` to render DOM via lit-html. Setting properties inside
   * this method will *not* trigger another update.
   * @param changedProperties Map of changed properties with old values
   * @category updates
   */
  update(changedProperties) {
    const value = this.render();
    if (!this.hasUpdated) {
      this.renderOptions.isConnected = this.isConnected;
    }
    super.update(changedProperties);
    this.__childPart = render(value, this.renderRoot, this.renderOptions);
  }
  /**
   * Invoked when the component is added to the document's DOM.
   *
   * In `connectedCallback()` you should setup tasks that should only occur when
   * the element is connected to the document. The most common of these is
   * adding event listeners to nodes external to the element, like a keydown
   * event handler added to the window.
   *
   * ```ts
   * connectedCallback() {
   *   super.connectedCallback();
   *   addEventListener('keydown', this._handleKeydown);
   * }
   * ```
   *
   * Typically, anything done in `connectedCallback()` should be undone when the
   * element is disconnected, in `disconnectedCallback()`.
   *
   * @category lifecycle
   */
  connectedCallback() {
    super.connectedCallback();
    this.__childPart?.setConnected(true);
  }
  /**
   * Invoked when the component is removed from the document's DOM.
   *
   * This callback is the main signal to the element that it may no longer be
   * used. `disconnectedCallback()` should ensure that nothing is holding a
   * reference to the element (such as event listeners added to nodes external
   * to the element), so that it is free to be garbage collected.
   *
   * ```ts
   * disconnectedCallback() {
   *   super.disconnectedCallback();
   *   window.removeEventListener('keydown', this._handleKeydown);
   * }
   * ```
   *
   * An element may be re-connected after being disconnected.
   *
   * @category lifecycle
   */
  disconnectedCallback() {
    super.disconnectedCallback();
    this.__childPart?.setConnected(false);
  }
  /**
   * Invoked on each update to perform rendering tasks. This method may return
   * any value renderable by lit-html's `ChildPart` - typically a
   * `TemplateResult`. Setting properties inside this method will *not* trigger
   * the element to update.
   * @category rendering
   */
  render() {
    return noChange;
  }
};
LitElement["_$litElement$"] = true;
LitElement[JSCompiler_renameProperty2("finalized", LitElement)] = true;
global5.litElementHydrateSupport?.({ LitElement });
var polyfillSupport3 = DEV_MODE3 ? global5.litElementPolyfillSupportDevMode : global5.litElementPolyfillSupport;
polyfillSupport3?.({ LitElement });
(global5.litElementVersions ??= []).push("4.2.1");
if (DEV_MODE3 && global5.litElementVersions.length > 1) {
  queueMicrotask(() => {
    issueWarning3("multiple-versions", `Multiple versions of Lit loaded. Loading multiple versions is not recommended.`);
  });
}

// node_modules/@reown/appkit-ui/dist/esm/src/utils/ThemeConstantsUtil.js
var colors = {
  black: "#202020",
  white: "#FFFFFF",
  white010: "rgba(255, 255, 255, 0.1)",
  accent010: "rgba(9, 136, 240, 0.1)",
  accent020: "rgba(9, 136, 240, 0.2)",
  accent030: "rgba(9, 136, 240, 0.3)",
  accent040: "rgba(9, 136, 240, 0.4)",
  accent050: "rgba(9, 136, 240, 0.5)",
  accent060: "rgba(9, 136, 240, 0.6)",
  accent070: "rgba(9, 136, 240, 0.7)",
  accent080: "rgba(9, 136, 240, 0.8)",
  accent090: "rgba(9, 136, 240, 0.9)",
  accent100: "rgba(9, 136, 240, 1.0)",
  accentSecondary010: "rgba(199, 185, 148, 0.1)",
  accentSecondary020: "rgba(199, 185, 148, 0.2)",
  accentSecondary030: "rgba(199, 185, 148, 0.3)",
  accentSecondary040: "rgba(199, 185, 148, 0.4)",
  accentSecondary050: "rgba(199, 185, 148, 0.5)",
  accentSecondary060: "rgba(199, 185, 148, 0.6)",
  accentSecondary070: "rgba(199, 185, 148, 0.7)",
  accentSecondary080: "rgba(199, 185, 148, 0.8)",
  accentSecondary090: "rgba(199, 185, 148, 0.9)",
  accentSecondary100: "rgba(199, 185, 148, 1.0)",
  productWalletKit: "#FFB800",
  productAppKit: "#FF573B",
  productCloud: "#0988F0",
  productDocumentation: "#008847",
  neutrals050: "#F6F6F6",
  neutrals100: "#F3F3F3",
  neutrals200: "#E9E9E9",
  neutrals300: "#D0D0D0",
  neutrals400: "#BBB",
  neutrals500: "#9A9A9A",
  neutrals600: "#6C6C6C",
  neutrals700: "#4F4F4F",
  neutrals800: "#363636",
  neutrals900: "#2A2A2A",
  neutrals1000: "#252525",
  semanticSuccess010: "rgba(48, 164, 107, 0.1)",
  semanticSuccess020: "rgba(48, 164, 107, 0.2)",
  semanticSuccess030: "rgba(48, 164, 107, 0.3)",
  semanticSuccess040: "rgba(48, 164, 107, 0.4)",
  semanticSuccess050: "rgba(48, 164, 107, 0.5)",
  semanticSuccess060: "rgba(48, 164, 107, 0.6)",
  semanticSuccess070: "rgba(48, 164, 107, 0.7)",
  semanticSuccess080: "rgba(48, 164, 107, 0.8)",
  semanticSuccess090: "rgba(48, 164, 107, 0.9)",
  semanticSuccess100: "rgba(48, 164, 107, 1.0)",
  semanticError010: "rgba(223, 74, 52, 0.1)",
  semanticError020: "rgba(223, 74, 52, 0.2)",
  semanticError030: "rgba(223, 74, 52, 0.3)",
  semanticError040: "rgba(223, 74, 52, 0.4)",
  semanticError050: "rgba(223, 74, 52, 0.5)",
  semanticError060: "rgba(223, 74, 52, 0.6)",
  semanticError070: "rgba(223, 74, 52, 0.7)",
  semanticError080: "rgba(223, 74, 52, 0.8)",
  semanticError090: "rgba(223, 74, 52, 0.9)",
  semanticError100: "rgba(223, 74, 52, 1.0)",
  semanticWarning010: "rgba(243, 161, 63, 0.1)",
  semanticWarning020: "rgba(243, 161, 63, 0.2)",
  semanticWarning030: "rgba(243, 161, 63, 0.3)",
  semanticWarning040: "rgba(243, 161, 63, 0.4)",
  semanticWarning050: "rgba(243, 161, 63, 0.5)",
  semanticWarning060: "rgba(243, 161, 63, 0.6)",
  semanticWarning070: "rgba(243, 161, 63, 0.7)",
  semanticWarning080: "rgba(243, 161, 63, 0.8)",
  semanticWarning090: "rgba(243, 161, 63, 0.9)",
  semanticWarning100: "rgba(243, 161, 63, 1.0)"
};
var tokens = {
  core: {
    backgroundAccentPrimary: "#0988F0",
    backgroundAccentCertified: "#C7B994",
    backgroundWalletKit: "#FFB800",
    backgroundAppKit: "#FF573B",
    backgroundCloud: "#0988F0",
    backgroundDocumentation: "#008847",
    backgroundSuccess: "rgba(48, 164, 107, 0.20)",
    backgroundError: "rgba(223, 74, 52, 0.20)",
    backgroundWarning: "rgba(243, 161, 63, 0.20)",
    textAccentPrimary: "#0988F0",
    textAccentCertified: "#C7B994",
    textWalletKit: "#FFB800",
    textAppKit: "#FF573B",
    textCloud: "#0988F0",
    textDocumentation: "#008847",
    textSuccess: "#30A46B",
    textError: "#DF4A34",
    textWarning: "#F3A13F",
    borderAccentPrimary: "#0988F0",
    borderSecondary: "#C7B994",
    borderSuccess: "#30A46B",
    borderError: "#DF4A34",
    borderWarning: "#F3A13F",
    foregroundAccent010: "rgba(9, 136, 240, 0.1)",
    foregroundAccent020: "rgba(9, 136, 240, 0.2)",
    foregroundAccent040: "rgba(9, 136, 240, 0.4)",
    foregroundAccent060: "rgba(9, 136, 240, 0.6)",
    foregroundSecondary020: "rgba(199, 185, 148, 0.2)",
    foregroundSecondary040: "rgba(199, 185, 148, 0.4)",
    foregroundSecondary060: "rgba(199, 185, 148, 0.6)",
    iconAccentPrimary: "#0988F0",
    iconAccentCertified: "#C7B994",
    iconSuccess: "#30A46B",
    iconError: "#DF4A34",
    iconWarning: "#F3A13F",
    glass010: "rgba(255, 255, 255, 0.1)",
    zIndex: "9999"
  },
  dark: {
    overlay: "rgba(0, 0, 0, 0.50)",
    backgroundPrimary: "#202020",
    backgroundInvert: "#FFFFFF",
    textPrimary: "#FFFFFF",
    textSecondary: "#9A9A9A",
    textTertiary: "#BBBBBB",
    textInvert: "#202020",
    borderPrimary: "#2A2A2A",
    borderPrimaryDark: "#363636",
    borderSecondary: "#4F4F4F",
    foregroundPrimary: "#252525",
    foregroundSecondary: "#2A2A2A",
    foregroundTertiary: "#363636",
    iconDefault: "#9A9A9A",
    iconInverse: "#FFFFFF"
  },
  light: {
    overlay: "rgba(230 , 230, 230, 0.5)",
    backgroundPrimary: "#FFFFFF",
    borderPrimaryDark: "#E9E9E9",
    backgroundInvert: "#202020",
    textPrimary: "#202020",
    textSecondary: "#9A9A9A",
    textTertiary: "#6C6C6C",
    textInvert: "#FFFFFF",
    borderPrimary: "#E9E9E9",
    borderSecondary: "#D0D0D0",
    foregroundPrimary: "#F3F3F3",
    foregroundSecondary: "#E9E9E9",
    foregroundTertiary: "#D0D0D0",
    iconDefault: "#9A9A9A",
    iconInverse: "#202020"
  }
};
var borderRadius = {
  "1": "4px",
  "2": "8px",
  "10": "10px",
  "3": "12px",
  "4": "16px",
  "6": "24px",
  "5": "20px",
  "8": "32px",
  "16": "64px",
  "20": "80px",
  "32": "128px",
  "64": "256px",
  "128": "512px",
  round: "9999px"
};
var spacing = {
  "0": "0px",
  "01": "2px",
  "1": "4px",
  "2": "8px",
  "3": "12px",
  "4": "16px",
  "5": "20px",
  "6": "24px",
  "7": "28px",
  "8": "32px",
  "9": "36px",
  "10": "40px",
  "12": "48px",
  "14": "56px",
  "16": "64px",
  "20": "80px",
  "32": "128px",
  "64": "256px"
};
var fontFamily = {
  regular: "KHTeka",
  mono: "KHTekaMono"
};
var fontWeight = {
  regular: "400",
  medium: "500"
};
var textSize = {
  h1: "50px",
  h2: "44px",
  h3: "38px",
  h4: "32px",
  h5: "26px",
  h6: "20px",
  large: "16px",
  medium: "14px",
  small: "12px"
};
var typography = {
  "h1-regular-mono": { lineHeight: "50px", letterSpacing: "-3px" },
  "h1-regular": { lineHeight: "50px", letterSpacing: "-1px" },
  "h1-medium": { lineHeight: "50px", letterSpacing: "-0.84px" },
  "h2-regular-mono": { lineHeight: "44px", letterSpacing: "-2.64px" },
  "h2-regular": { lineHeight: "44px", letterSpacing: "-0.88px" },
  "h2-medium": { lineHeight: "44px", letterSpacing: "-0.88px" },
  "h3-regular-mono": { lineHeight: "38px", letterSpacing: "-2.28px" },
  "h3-regular": { lineHeight: "38px", letterSpacing: "-0.76px" },
  "h3-medium": { lineHeight: "38px", letterSpacing: "-0.76px" },
  "h4-regular-mono": { lineHeight: "32px", letterSpacing: "-1.92px" },
  "h4-regular": { lineHeight: "32px", letterSpacing: "-0.32px" },
  "h4-medium": { lineHeight: "32px", letterSpacing: "-0.32px" },
  "h5-regular-mono": { lineHeight: "26px", letterSpacing: "-1.56px" },
  "h5-regular": { lineHeight: "26px", letterSpacing: "-0.26px" },
  "h5-medium": { lineHeight: "26px", letterSpacing: "-0.26px" },
  "h6-regular-mono": { lineHeight: "20px", letterSpacing: "-1.2px" },
  "h6-regular": { lineHeight: "20px", letterSpacing: "-0.6px" },
  "h6-medium": { lineHeight: "20px", letterSpacing: "-0.6px" },
  "lg-regular-mono": { lineHeight: "16px", letterSpacing: "-0.96px" },
  "lg-regular": { lineHeight: "18px", letterSpacing: "-0.16px" },
  "lg-medium": { lineHeight: "18px", letterSpacing: "-0.16px" },
  "md-regular-mono": { lineHeight: "14px", letterSpacing: "-0.84px" },
  "md-regular": { lineHeight: "16px", letterSpacing: "-0.14px" },
  "md-medium": { lineHeight: "16px", letterSpacing: "-0.14px" },
  "sm-regular-mono": { lineHeight: "12px", letterSpacing: "-0.72px" },
  "sm-regular": { lineHeight: "14px", letterSpacing: "-0.12px" },
  "sm-medium": { lineHeight: "14px", letterSpacing: "-0.12px" }
};
var easings = {
  "ease-out-power-2": "cubic-bezier(0.23, 0.09, 0.08, 1.13)",
  "ease-out-power-1": "cubic-bezier(0.12, 0.04, 0.2, 1.06)",
  "ease-in-power-2": "cubic-bezier(0.92, -0.13, 0.77, 0.91)",
  "ease-in-power-1": "cubic-bezier(0.88, -0.06, 0.8, 0.96)",
  "ease-inout-power-2": "cubic-bezier(0.77, 0.09, 0.23, 1.13)",
  "ease-inout-power-1": "cubic-bezier(0.88, 0.04, 0.12, 1.06)"
};
var durations = {
  xl: "400ms",
  lg: "200ms",
  md: "125ms",
  sm: "75ms"
};
var styles = {
  colors,
  fontFamily,
  fontWeight,
  textSize,
  typography,
  tokens: {
    core: tokens.core,
    theme: tokens.dark
  },
  borderRadius,
  spacing,
  durations,
  easings
};

// node_modules/@reown/appkit-ui/dist/esm/src/utils/ThemeHelperUtil.js
var PREFIX_VAR = "--apkt";
var ThemeHelperUtil = {
  createCSSVariables(styles2) {
    const cssVariables = {};
    const cssVariablesVarPrefix = {};
    function createVars(_styles, parent, currentVar = "") {
      for (const [styleKey, styleValue] of Object.entries(_styles)) {
        const variable = currentVar ? `${currentVar}-${styleKey}` : styleKey;
        if (styleValue && typeof styleValue === "object" && Object.keys(styleValue).length) {
          parent[styleKey] = {};
          createVars(styleValue, parent[styleKey], variable);
        } else if (typeof styleValue === "string") {
          parent[styleKey] = `${PREFIX_VAR}-${variable}`;
        }
      }
    }
    function addVarsPrefix(_styles, parent) {
      for (const [key, value] of Object.entries(_styles)) {
        if (value && typeof value === "object") {
          parent[key] = {};
          addVarsPrefix(value, parent[key]);
        } else if (typeof value === "string") {
          parent[key] = `var(${value})`;
        }
      }
    }
    createVars(styles2, cssVariables);
    addVarsPrefix(cssVariables, cssVariablesVarPrefix);
    return { cssVariables, cssVariablesVarPrefix };
  },
  assignCSSVariables(vars2, styles2) {
    const assignedCSSVariables = {};
    function assignVars(_vars, _styles, variable) {
      for (const [varKey, varValue] of Object.entries(_vars)) {
        const nextVariable = variable ? `${variable}-${varKey}` : varKey;
        const styleValues = _styles[varKey];
        if (varValue && typeof varValue === "object") {
          assignVars(varValue, styleValues, nextVariable);
        } else if (typeof styleValues === "string") {
          assignedCSSVariables[`${PREFIX_VAR}-${nextVariable}`] = styleValues;
        }
      }
    }
    assignVars(vars2, styles2);
    return assignedCSSVariables;
  },
  createRootStyles(theme, themeVariables) {
    const styles2 = {
      ...styles,
      tokens: { ...styles.tokens, theme: theme === "light" ? tokens.light : tokens.dark }
    };
    const { cssVariables } = ThemeHelperUtil.createCSSVariables(styles2);
    const assignedCSSVariables = ThemeHelperUtil.assignCSSVariables(cssVariables, styles2);
    const w3mVariables = ThemeHelperUtil.generateW3MVariables(themeVariables);
    const w3mOverrides = ThemeHelperUtil.generateW3MOverrides(themeVariables);
    const scaledVariables = ThemeHelperUtil.generateScaledVariables(themeVariables);
    const baseVariables = ThemeHelperUtil.generateBaseVariables(assignedCSSVariables);
    const allVariables = {
      ...assignedCSSVariables,
      ...baseVariables,
      ...w3mVariables,
      ...w3mOverrides,
      ...scaledVariables
    };
    const colorMixVariables = ThemeHelperUtil.applyColorMixToVariables(themeVariables, allVariables);
    const finalVariables = {
      ...allVariables,
      ...colorMixVariables
    };
    const rootStyles = Object.entries(finalVariables).map(([key, style]) => `${key}:${style.replace("/[:;{}</>]/g", "")};`).join("");
    return `:root {${rootStyles}}`;
  },
  generateW3MVariables(themeVariables) {
    if (!themeVariables) {
      return {};
    }
    const variables = {};
    variables["--w3m-font-family"] = themeVariables["--w3m-font-family"] || "KHTeka";
    variables["--w3m-accent"] = themeVariables["--w3m-accent"] || "#0988F0";
    variables["--w3m-color-mix"] = themeVariables["--w3m-color-mix"] || "#000";
    variables["--w3m-color-mix-strength"] = `${themeVariables["--w3m-color-mix-strength"] || 0}%`;
    variables["--w3m-font-size-master"] = themeVariables["--w3m-font-size-master"] || "10px";
    variables["--w3m-border-radius-master"] = themeVariables["--w3m-border-radius-master"] || "4px";
    return variables;
  },
  generateW3MOverrides(themeVariables) {
    if (!themeVariables) {
      return {};
    }
    const overrides = {};
    if (themeVariables["--w3m-accent"]) {
      const accentColor = themeVariables["--w3m-accent"];
      overrides["--apkt-tokens-core-iconAccentPrimary"] = accentColor;
      overrides["--apkt-tokens-core-borderAccentPrimary"] = accentColor;
      overrides["--apkt-tokens-core-textAccentPrimary"] = accentColor;
      overrides["--apkt-tokens-core-backgroundAccentPrimary"] = accentColor;
    }
    if (themeVariables["--w3m-font-family"]) {
      overrides["--apkt-fontFamily-regular"] = themeVariables["--w3m-font-family"];
    }
    if (themeVariables["--w3m-z-index"]) {
      overrides["--apkt-tokens-core-zIndex"] = `${themeVariables["--w3m-z-index"]}`;
    }
    return overrides;
  },
  generateScaledVariables(themeVariables) {
    if (!themeVariables) {
      return {};
    }
    const scaledVars = {};
    if (themeVariables["--w3m-font-size-master"]) {
      const masterSize = parseFloat(themeVariables["--w3m-font-size-master"].replace("px", ""));
      scaledVars["--apkt-textSize-h1"] = `${Number(masterSize) * 5}px`;
      scaledVars["--apkt-textSize-h2"] = `${Number(masterSize) * 4.4}px`;
      scaledVars["--apkt-textSize-h3"] = `${Number(masterSize) * 3.8}px`;
      scaledVars["--apkt-textSize-h4"] = `${Number(masterSize) * 3.2}px`;
      scaledVars["--apkt-textSize-h5"] = `${Number(masterSize) * 2.6}px`;
      scaledVars["--apkt-textSize-h6"] = `${Number(masterSize) * 2}px`;
      scaledVars["--apkt-textSize-large"] = `${Number(masterSize) * 1.6}px`;
      scaledVars["--apkt-textSize-medium"] = `${Number(masterSize) * 1.4}px`;
      scaledVars["--apkt-textSize-small"] = `${Number(masterSize) * 1.2}px`;
    }
    if (themeVariables["--w3m-border-radius-master"]) {
      const masterRadius = parseFloat(themeVariables["--w3m-border-radius-master"].replace("px", ""));
      scaledVars["--apkt-borderRadius-1"] = `${Number(masterRadius)}px`;
      scaledVars["--apkt-borderRadius-2"] = `${Number(masterRadius) * 2}px`;
      scaledVars["--apkt-borderRadius-3"] = `${Number(masterRadius) * 3}px`;
      scaledVars["--apkt-borderRadius-4"] = `${Number(masterRadius) * 4}px`;
      scaledVars["--apkt-borderRadius-5"] = `${Number(masterRadius) * 5}px`;
      scaledVars["--apkt-borderRadius-6"] = `${Number(masterRadius) * 6}px`;
      scaledVars["--apkt-borderRadius-8"] = `${Number(masterRadius) * 8}px`;
      scaledVars["--apkt-borderRadius-16"] = `${Number(masterRadius) * 16}px`;
      scaledVars["--apkt-borderRadius-20"] = `${Number(masterRadius) * 20}px`;
      scaledVars["--apkt-borderRadius-32"] = `${Number(masterRadius) * 32}px`;
      scaledVars["--apkt-borderRadius-64"] = `${Number(masterRadius) * 64}px`;
      scaledVars["--apkt-borderRadius-128"] = `${Number(masterRadius) * 128}px`;
    }
    return scaledVars;
  },
  generateColorMixCSS(themeVariables, allVariables) {
    if (!themeVariables?.["--w3m-color-mix"] || !themeVariables["--w3m-color-mix-strength"]) {
      return "";
    }
    const colorMix = themeVariables["--w3m-color-mix"];
    const strength = themeVariables["--w3m-color-mix-strength"];
    if (!strength || strength === 0) {
      return "";
    }
    const colorVariables = Object.keys(allVariables || {}).filter((key) => {
      const isColorToken = key.includes("-tokens-core-background") || key.includes("-tokens-core-text") || key.includes("-tokens-core-border") || key.includes("-tokens-core-foreground") || key.includes("-tokens-core-icon") || key.includes("-tokens-theme-background") || key.includes("-tokens-theme-text") || key.includes("-tokens-theme-border") || key.includes("-tokens-theme-foreground") || key.includes("-tokens-theme-icon");
      const isDimensional = key.includes("-borderRadius-") || key.includes("-spacing-") || key.includes("-textSize-") || key.includes("-fontFamily-") || key.includes("-fontWeight-") || key.includes("-typography-") || key.includes("-duration-") || key.includes("-ease-") || key.includes("-path-") || key.includes("-width-") || key.includes("-height-") || key.includes("-visual-size-") || key.includes("-modal-width") || key.includes("-cover");
      return isColorToken && !isDimensional;
    });
    if (colorVariables.length === 0) {
      return "";
    }
    const colorMixVariables = colorVariables.map((key) => {
      const originalValue = allVariables?.[key] || "";
      if (originalValue.includes("color-mix") || originalValue.startsWith("#") || originalValue.startsWith("rgb")) {
        return `${key}: color-mix(in srgb, ${colorMix} ${strength}%, ${originalValue});`;
      }
      return `${key}: color-mix(in srgb, ${colorMix} ${strength}%, var(${key}-base, ${originalValue}));`;
    }).join("");
    return ` @supports (background: color-mix(in srgb, white 50%, black)) {
      :root {
        ${colorMixVariables}
      }
    }`;
  },
  generateBaseVariables(assignedCSSVariables) {
    const baseVariables = {};
    const themeBackgroundPrimary = assignedCSSVariables["--apkt-tokens-theme-backgroundPrimary"];
    if (themeBackgroundPrimary) {
      baseVariables["--apkt-tokens-theme-backgroundPrimary-base"] = themeBackgroundPrimary;
    }
    const coreBackgroundAccentPrimary = assignedCSSVariables["--apkt-tokens-core-backgroundAccentPrimary"];
    if (coreBackgroundAccentPrimary) {
      baseVariables["--apkt-tokens-core-backgroundAccentPrimary-base"] = coreBackgroundAccentPrimary;
    }
    return baseVariables;
  },
  applyColorMixToVariables(themeVariables, allVariables) {
    const colorMixVariables = {};
    if (allVariables?.["--apkt-tokens-theme-backgroundPrimary"]) {
      colorMixVariables["--apkt-tokens-theme-backgroundPrimary"] = "var(--apkt-tokens-theme-backgroundPrimary-base)";
    }
    if (allVariables?.["--apkt-tokens-core-backgroundAccentPrimary"]) {
      colorMixVariables["--apkt-tokens-core-backgroundAccentPrimary"] = "var(--apkt-tokens-core-backgroundAccentPrimary-base)";
    }
    if (!themeVariables?.["--w3m-color-mix"] || !themeVariables["--w3m-color-mix-strength"]) {
      return colorMixVariables;
    }
    const colorMix = themeVariables["--w3m-color-mix"];
    const strength = themeVariables["--w3m-color-mix-strength"];
    if (!strength || strength === 0) {
      return colorMixVariables;
    }
    const colorVariables = Object.keys(allVariables || {}).filter((key) => {
      const isColorToken = key.includes("-tokens-core-background") || key.includes("-tokens-core-text") || key.includes("-tokens-core-border") || key.includes("-tokens-core-foreground") || key.includes("-tokens-core-icon") || key.includes("-tokens-theme-background") || key.includes("-tokens-theme-text") || key.includes("-tokens-theme-border") || key.includes("-tokens-theme-foreground") || key.includes("-tokens-theme-icon") || key.includes("-tokens-theme-overlay");
      const isDimensional = key.includes("-borderRadius-") || key.includes("-spacing-") || key.includes("-textSize-") || key.includes("-fontFamily-") || key.includes("-fontWeight-") || key.includes("-typography-") || key.includes("-duration-") || key.includes("-ease-") || key.includes("-path-") || key.includes("-width-") || key.includes("-height-") || key.includes("-visual-size-") || key.includes("-modal-width") || key.includes("-cover");
      return isColorToken && !isDimensional;
    });
    if (colorVariables.length === 0) {
      return colorMixVariables;
    }
    colorVariables.forEach((key) => {
      const originalValue = allVariables?.[key] || "";
      if (key.endsWith("-base")) {
        return;
      }
      if (key === "--apkt-tokens-theme-backgroundPrimary" || key === "--apkt-tokens-core-backgroundAccentPrimary") {
        colorMixVariables[key] = `color-mix(in srgb, ${colorMix} ${strength}%, var(${key}-base))`;
      } else if (originalValue.includes("color-mix") || originalValue.startsWith("#") || originalValue.startsWith("rgb")) {
        colorMixVariables[key] = `color-mix(in srgb, ${colorMix} ${strength}%, ${originalValue})`;
      } else {
        colorMixVariables[key] = `color-mix(in srgb, ${colorMix} ${strength}%, var(${key}-base, ${originalValue}))`;
      }
    });
    return colorMixVariables;
  }
};
var { cssVariablesVarPrefix: vars } = ThemeHelperUtil.createCSSVariables(styles);
function css2(strings, ...values) {
  return css(strings, ...values.map((value) => typeof value === "function" ? unsafeCSS(value(vars)) : unsafeCSS(value)));
}

// node_modules/@reown/appkit-ui/dist/esm/src/utils/ThemeUtil.js
var apktTag = void 0;
var themeTag = void 0;
var darkModeTag = void 0;
var lightModeTag = void 0;
var currentThemeVariables = void 0;
var fonts = {
  "KHTeka-500-woff2": "https://fonts.reown.com/KHTeka-Medium.woff2",
  "KHTeka-400-woff2": "https://fonts.reown.com/KHTeka-Regular.woff2",
  "KHTeka-300-woff2": "https://fonts.reown.com/KHTeka-Light.woff2",
  "KHTekaMono-400-woff2": "https://fonts.reown.com/KHTekaMono-Regular.woff2",
  "KHTeka-500-woff": "https://fonts.reown.com/KHTeka-Light.woff",
  "KHTeka-400-woff": "https://fonts.reown.com/KHTeka-Regular.woff",
  "KHTeka-300-woff": "https://fonts.reown.com/KHTeka-Light.woff",
  "KHTekaMono-400-woff": "https://fonts.reown.com/KHTekaMono-Regular.woff"
};
function createAppKitTheme(themeVariables, theme = "dark") {
  if (apktTag) {
    document.head.removeChild(apktTag);
  }
  apktTag = document.createElement("style");
  apktTag.textContent = ThemeHelperUtil.createRootStyles(theme, themeVariables);
  document.head.appendChild(apktTag);
}
function initializeTheming(themeVariables, themeMode = "dark") {
  currentThemeVariables = themeVariables;
  themeTag = document.createElement("style");
  darkModeTag = document.createElement("style");
  lightModeTag = document.createElement("style");
  themeTag.textContent = createRootStyles(themeVariables).core.cssText;
  darkModeTag.textContent = createRootStyles(themeVariables).dark.cssText;
  lightModeTag.textContent = createRootStyles(themeVariables).light.cssText;
  document.head.appendChild(themeTag);
  document.head.appendChild(darkModeTag);
  document.head.appendChild(lightModeTag);
  createAppKitTheme(themeVariables, themeMode);
  setColorTheme(themeMode);
  if (!themeVariables?.["--w3m-font-family"]) {
    for (const [key, url] of Object.entries(fonts)) {
      const link = document.createElement("link");
      link.rel = "preload";
      link.href = url;
      link.as = "font";
      link.type = key.includes("woff2") ? "font/woff2" : "font/woff";
      link.crossOrigin = "anonymous";
      document.head.appendChild(link);
    }
  }
  setColorTheme(themeMode);
}
function setColorTheme(themeMode = "dark") {
  if (darkModeTag && lightModeTag && apktTag) {
    if (themeMode === "light") {
      createAppKitTheme(currentThemeVariables, themeMode);
      darkModeTag.removeAttribute("media");
      lightModeTag.media = "enabled";
    } else {
      createAppKitTheme(currentThemeVariables, themeMode);
      lightModeTag.removeAttribute("media");
      darkModeTag.media = "enabled";
    }
  }
}
function setThemeVariables(_themeVariables) {
  currentThemeVariables = _themeVariables;
  if (themeTag && darkModeTag && lightModeTag) {
    themeTag.textContent = createRootStyles(_themeVariables).core.cssText;
    darkModeTag.textContent = createRootStyles(_themeVariables).dark.cssText;
    lightModeTag.textContent = createRootStyles(_themeVariables).light.cssText;
    if (_themeVariables?.["--w3m-font-family"]) {
      const fontFamily2 = _themeVariables["--w3m-font-family"];
      themeTag.textContent = themeTag.textContent?.replace("font-family: KHTeka", `font-family: ${fontFamily2}`);
      darkModeTag.textContent = darkModeTag.textContent?.replace("font-family: KHTeka", `font-family: ${fontFamily2}`);
      lightModeTag.textContent = lightModeTag.textContent?.replace("font-family: KHTeka", `font-family: ${fontFamily2}`);
    }
  }
  if (apktTag) {
    const currentMode = lightModeTag?.media === "enabled" ? "light" : "dark";
    createAppKitTheme(_themeVariables, currentMode);
  }
}
function createRootStyles(_themeVariables) {
  const hasCustomFontFamily = Boolean(_themeVariables?.["--w3m-font-family"]);
  return {
    core: css`
      ${hasCustomFontFamily ? css`` : css`
            @font-face {
              font-family: 'KHTeka';
              src:
                url(${unsafeCSS(fonts["KHTeka-400-woff2"])}) format('woff2'),
                url(${unsafeCSS(fonts["KHTeka-400-woff"])}) format('woff');
              font-weight: 400;
              font-style: normal;
              font-display: swap;
            }

            @font-face {
              font-family: 'KHTeka';
              src:
                url(${unsafeCSS(fonts["KHTeka-300-woff2"])}) format('woff2'),
                url(${unsafeCSS(fonts["KHTeka-300-woff"])}) format('woff');
              font-weight: 300;
              font-style: normal;
            }

            @font-face {
              font-family: 'KHTekaMono';
              src:
                url(${unsafeCSS(fonts["KHTekaMono-400-woff2"])}) format('woff2'),
                url(${unsafeCSS(fonts["KHTekaMono-400-woff"])}) format('woff');
              font-weight: 400;
              font-style: normal;
            }

            @font-face {
              font-family: 'KHTeka';
              src:
                url(${unsafeCSS(fonts["KHTeka-400-woff2"])}) format('woff2'),
                url(${unsafeCSS(fonts["KHTeka-400-woff"])}) format('woff');
              font-weight: 400;
              font-style: normal;
            }
          `}

      @keyframes w3m-shake {
        0% {
          transform: scale(1) rotate(0deg);
        }
        20% {
          transform: scale(1) rotate(-1deg);
        }
        40% {
          transform: scale(1) rotate(1.5deg);
        }
        60% {
          transform: scale(1) rotate(-1.5deg);
        }
        80% {
          transform: scale(1) rotate(1deg);
        }
        100% {
          transform: scale(1) rotate(0deg);
        }
      }
      @keyframes w3m-iframe-fade-out {
        0% {
          opacity: 1;
        }
        100% {
          opacity: 0;
        }
      }
      @keyframes w3m-iframe-zoom-in {
        0% {
          transform: translateY(50px);
          opacity: 0;
        }
        100% {
          transform: translateY(0px);
          opacity: 1;
        }
      }
      @keyframes w3m-iframe-zoom-in-mobile {
        0% {
          transform: scale(0.95);
          opacity: 0;
        }
        100% {
          transform: scale(1);
          opacity: 1;
        }
      }
      :root {
        --apkt-modal-width: 370px;

        --apkt-visual-size-inherit: inherit;
        --apkt-visual-size-sm: 40px;
        --apkt-visual-size-md: 55px;
        --apkt-visual-size-lg: 80px;

        --apkt-path-network-sm: path(
          'M15.4 2.1a5.21 5.21 0 0 1 5.2 0l11.61 6.7a5.21 5.21 0 0 1 2.61 4.52v13.4c0 1.87-1 3.59-2.6 4.52l-11.61 6.7c-1.62.93-3.6.93-5.22 0l-11.6-6.7a5.21 5.21 0 0 1-2.61-4.51v-13.4c0-1.87 1-3.6 2.6-4.52L15.4 2.1Z'
        );

        --apkt-path-network-md: path(
          'M43.4605 10.7248L28.0485 1.61089C25.5438 0.129705 22.4562 0.129705 19.9515 1.61088L4.53951 10.7248C2.03626 12.2051 0.5 14.9365 0.5 17.886V36.1139C0.5 39.0635 2.03626 41.7949 4.53951 43.2752L19.9515 52.3891C22.4562 53.8703 25.5438 53.8703 28.0485 52.3891L43.4605 43.2752C45.9637 41.7949 47.5 39.0635 47.5 36.114V17.8861C47.5 14.9365 45.9637 12.2051 43.4605 10.7248Z'
        );

        --apkt-path-network-lg: path(
          'M78.3244 18.926L50.1808 2.45078C45.7376 -0.150261 40.2624 -0.150262 35.8192 2.45078L7.6756 18.926C3.23322 21.5266 0.5 26.3301 0.5 31.5248V64.4752C0.5 69.6699 3.23322 74.4734 7.6756 77.074L35.8192 93.5492C40.2624 96.1503 45.7376 96.1503 50.1808 93.5492L78.3244 77.074C82.7668 74.4734 85.5 69.6699 85.5 64.4752V31.5248C85.5 26.3301 82.7668 21.5266 78.3244 18.926Z'
        );

        --apkt-width-network-sm: 36px;
        --apkt-width-network-md: 48px;
        --apkt-width-network-lg: 86px;

        --apkt-duration-dynamic: 0ms;
        --apkt-height-network-sm: 40px;
        --apkt-height-network-md: 54px;
        --apkt-height-network-lg: 96px;
      }
    `,
    dark: css`
      :root {
      }
    `,
    light: css`
      :root {
      }
    `
  };
}
var resetStyles = css`
  div,
  span,
  iframe,
  a,
  img,
  form,
  button,
  label,
  *::after,
  *::before {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-style: normal;
    text-rendering: optimizeSpeed;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -webkit-tap-highlight-color: transparent;
    backface-visibility: hidden;
  }

  :host {
    font-family: var(--apkt-fontFamily-regular);
  }
`;
var elementStyles = css`
  button,
  a {
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;

    will-change: background-color, color, border, box-shadow, width, height, transform, opacity;
    outline: none;
    border: none;
    text-decoration: none;
    transition:
      background-color var(--apkt-durations-lg) var(--apkt-easings-ease-out-power-2),
      color var(--apkt-durations-lg) var(--apkt-easings-ease-out-power-2),
      border var(--apkt-durations-lg) var(--apkt-easings-ease-out-power-2),
      box-shadow var(--apkt-durations-lg) var(--apkt-easings-ease-out-power-2),
      width var(--apkt-durations-lg) var(--apkt-easings-ease-out-power-2),
      height var(--apkt-durations-lg) var(--apkt-easings-ease-out-power-2),
      transform var(--apkt-durations-lg) var(--apkt-easings-ease-out-power-2),
      opacity var(--apkt-durations-lg) var(--apkt-easings-ease-out-power-2),
      scale var(--apkt-durations-lg) var(--apkt-easings-ease-out-power-2),
      border-radius var(--apkt-durations-lg) var(--apkt-easings-ease-out-power-2);
    will-change:
      background-color, color, border, box-shadow, width, height, transform, opacity, scale,
      border-radius;
  }

  a:active:not([disabled]),
  button:active:not([disabled]) {
    scale: 0.975;
    transform-origin: center;
  }

  button:disabled {
    cursor: default;
  }

  input {
    border: none;
    outline: none;
    appearance: none;
  }
`;

// node_modules/@reown/appkit-ui/dist/esm/src/utils/UiHelperUtil.js
var DECIMAL_POINT = ".";
var UiHelperUtil = {
  getSpacingStyles(spacing2, index) {
    if (Array.isArray(spacing2)) {
      return spacing2[index] ? `var(--apkt-spacing-${spacing2[index]})` : void 0;
    } else if (typeof spacing2 === "string") {
      return `var(--apkt-spacing-${spacing2})`;
    }
    return void 0;
  },
  getFormattedDate(date) {
    return new Intl.DateTimeFormat("en-US", { month: "short", day: "numeric" }).format(date);
  },
  formatCurrency(amount = 0, options = {}) {
    const numericAmount = Number(amount);
    if (isNaN(numericAmount)) {
      return "$0.00";
    }
    const formatter = new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
      ...options
    });
    return formatter.format(numericAmount);
  },
  getHostName(url) {
    try {
      const newUrl = new URL(url);
      return newUrl.hostname;
    } catch (error) {
      return "";
    }
  },
  getTruncateString({ string: string2, charsStart, charsEnd, truncate }) {
    if (string2.length <= charsStart + charsEnd) {
      return string2;
    }
    if (truncate === "end") {
      return `${string2.substring(0, charsStart)}...`;
    } else if (truncate === "start") {
      return `...${string2.substring(string2.length - charsEnd)}`;
    }
    return `${string2.substring(0, Math.floor(charsStart))}...${string2.substring(string2.length - Math.floor(charsEnd))}`;
  },
  generateAvatarColors(address) {
    const hash = address.toLowerCase().replace(/^0x/iu, "").replace(/[^a-f0-9]/gu, "");
    const baseColor = hash.substring(0, 6).padEnd(6, "0");
    const rgbColor = this.hexToRgb(baseColor);
    const masterBorderRadius = getComputedStyle(document.documentElement).getPropertyValue("--w3m-border-radius-master");
    const radius = Number(masterBorderRadius?.replace("px", ""));
    const edge = 100 - 3 * radius;
    const gradientCircle = `${edge}% ${edge}% at 65% 40%`;
    const colors2 = [];
    for (let i3 = 0; i3 < 5; i3 += 1) {
      const tintedColor = this.tintColor(rgbColor, 0.15 * i3);
      colors2.push(`rgb(${tintedColor[0]}, ${tintedColor[1]}, ${tintedColor[2]})`);
    }
    return `
    --local-color-1: ${colors2[0]};
    --local-color-2: ${colors2[1]};
    --local-color-3: ${colors2[2]};
    --local-color-4: ${colors2[3]};
    --local-color-5: ${colors2[4]};
    --local-radial-circle: ${gradientCircle}
   `;
  },
  hexToRgb(hex2) {
    const bigint = parseInt(hex2, 16);
    const r3 = bigint >> 16 & 255;
    const g4 = bigint >> 8 & 255;
    const b4 = bigint & 255;
    return [r3, g4, b4];
  },
  tintColor(rgb, tint) {
    const [r3, g4, b4] = rgb;
    const tintedR = Math.round(r3 + (255 - r3) * tint);
    const tintedG = Math.round(g4 + (255 - g4) * tint);
    const tintedB = Math.round(b4 + (255 - b4) * tint);
    return [tintedR, tintedG, tintedB];
  },
  isNumber(character) {
    const regex = {
      number: /^[0-9]+$/u
    };
    return regex.number.test(character);
  },
  getColorTheme(theme) {
    if (theme) {
      return theme;
    } else if (typeof window !== "undefined" && window.matchMedia && typeof window.matchMedia === "function") {
      if (window.matchMedia("(prefers-color-scheme: dark)")?.matches) {
        return "dark";
      }
      return "light";
    }
    return "dark";
  },
  splitBalance(input) {
    const parts = input.split(".");
    if (parts.length === 2) {
      return [parts[0], parts[1]];
    }
    return ["0", "00"];
  },
  roundNumber(number, threshold, fixed) {
    const roundedNumber = number.toString().length >= threshold ? Number(number).toFixed(fixed) : number;
    return roundedNumber;
  },
  cssDurationToNumber(duration) {
    if (duration.endsWith("s")) {
      return Number(duration.replace("s", "")) * 1e3;
    } else if (duration.endsWith("ms")) {
      return Number(duration.replace("ms", ""));
    }
    return 0;
  },
  maskInput({ value, decimals, integers }) {
    value = value.replace(",", ".");
    if (value === DECIMAL_POINT) {
      return `0${DECIMAL_POINT}`;
    }
    const [integerPart = "", decimalsPart] = value.split(DECIMAL_POINT).map((p4) => p4.replace(/[^0-9]/gu, ""));
    const limitedInteger = integers ? integerPart.substring(0, integers) : integerPart;
    const cleanIntegerPart = limitedInteger.length === 2 ? String(Number(limitedInteger)) : limitedInteger;
    const cleanDecimalsPart = typeof decimals === "number" ? decimalsPart?.substring(0, decimals) : decimalsPart;
    const canIncludeDecimals = typeof decimals !== "number" || decimals > 0;
    const maskValue = typeof cleanDecimalsPart === "string" && canIncludeDecimals ? [cleanIntegerPart, cleanDecimalsPart].join(DECIMAL_POINT) : cleanIntegerPart;
    return maskValue ?? "";
  },
  capitalize(value) {
    if (!value) {
      return "";
    }
    return value.charAt(0).toUpperCase() + value.slice(1);
  }
};

// node_modules/@reown/appkit-ui/dist/esm/src/utils/WebComponentsUtil.js
function standardCustomElement(tagName, descriptor) {
  const { kind, elements } = descriptor;
  return {
    kind,
    elements,
    finisher(clazz) {
      if (!customElements.get(tagName)) {
        customElements.define(tagName, clazz);
      }
    }
  };
}
function legacyCustomElement(tagName, clazz) {
  if (!customElements.get(tagName)) {
    customElements.define(tagName, clazz);
  }
  return clazz;
}
function customElement(tagName) {
  return function create4(classOrDescriptor) {
    return typeof classOrDescriptor === "function" ? legacyCustomElement(tagName, classOrDescriptor) : standardCustomElement(tagName, classOrDescriptor);
  };
}

// node_modules/@reown/appkit-ui/dist/esm/src/utils/TransactionUtil.js
var FLOAT_FIXED_VALUE = 3;
var GAS_FEE_THRESHOLD = 0.1;
var plusTypes = ["receive", "deposit", "borrow", "claim"];
var minusTypes = ["withdraw", "repay", "burn"];
var TransactionUtil = {
  getTransactionGroupTitle(year, month) {
    const currentYear = DateUtil.getYear();
    const monthName = DateUtil.getMonthNameByIndex(month);
    const isCurrentYear = year === currentYear;
    const groupTitle = isCurrentYear ? monthName : `${monthName} ${year}`;
    return groupTitle;
  },
  getTransactionImages(transfers) {
    const [transfer] = transfers;
    const hasMultipleTransfers = transfers?.length > 1;
    if (hasMultipleTransfers) {
      return transfers.map((item) => this.getTransactionImage(item));
    }
    return [this.getTransactionImage(transfer)];
  },
  getTransactionImage(transfer) {
    return {
      type: TransactionUtil.getTransactionTransferTokenType(transfer),
      url: TransactionUtil.getTransactionImageURL(transfer)
    };
  },
  getTransactionImageURL(transfer) {
    let imageURL = void 0;
    const isNFT = Boolean(transfer?.nft_info);
    const isFungible = Boolean(transfer?.fungible_info);
    if (transfer && isNFT) {
      imageURL = transfer?.nft_info?.content?.preview?.url;
    } else if (transfer && isFungible) {
      imageURL = transfer?.fungible_info?.icon?.url;
    }
    return imageURL;
  },
  getTransactionTransferTokenType(transfer) {
    if (transfer?.fungible_info) {
      return "FUNGIBLE";
    } else if (transfer?.nft_info) {
      return "NFT";
    }
    return void 0;
  },
  getTransactionDescriptions(transaction, mergedTransfers) {
    const type = transaction?.metadata?.operationType;
    const transfers = mergedTransfers || transaction?.transfers;
    const hasTransfer = transfers?.length > 0;
    const hasMultipleTransfers = transfers?.length > 1;
    const isFungible = hasTransfer && transfers?.every((transfer) => Boolean(transfer?.fungible_info));
    const [firstTransfer, secondTransfer] = transfers;
    let firstDescription = this.getTransferDescription(firstTransfer);
    let secondDescription = this.getTransferDescription(secondTransfer);
    if (!hasTransfer) {
      const isSendOrReceive = type === "send" || type === "receive";
      if (isSendOrReceive && isFungible) {
        firstDescription = UiHelperUtil.getTruncateString({
          string: transaction?.metadata.sentFrom,
          charsStart: 4,
          charsEnd: 6,
          truncate: "middle"
        });
        secondDescription = UiHelperUtil.getTruncateString({
          string: transaction?.metadata.sentTo,
          charsStart: 4,
          charsEnd: 6,
          truncate: "middle"
        });
        return [firstDescription, secondDescription];
      }
      return [transaction.metadata.status];
    }
    if (hasMultipleTransfers) {
      return transfers.map((item) => this.getTransferDescription(item));
    }
    let prefix = "";
    if (plusTypes.includes(type)) {
      prefix = "+";
    } else if (minusTypes.includes(type)) {
      prefix = "-";
    }
    firstDescription = prefix.concat(firstDescription);
    return [firstDescription];
  },
  getTransferDescription(transfer) {
    let description = "";
    if (!transfer) {
      return description;
    }
    if (transfer?.nft_info) {
      description = transfer?.nft_info?.name || "-";
    } else if (transfer?.fungible_info) {
      description = this.getFungibleTransferDescription(transfer) || "-";
    }
    return description;
  },
  getFungibleTransferDescription(transfer) {
    if (!transfer) {
      return null;
    }
    const quantity = this.getQuantityFixedValue(transfer?.quantity.numeric);
    const description = [quantity, transfer?.fungible_info?.symbol].join(" ").trim();
    return description;
  },
  mergeTransfers(transfers) {
    if (transfers?.length <= 1) {
      return transfers;
    }
    const filteredTransfers = this.filterGasFeeTransfers(transfers);
    const mergedTransfers = filteredTransfers.reduce((acc, t) => {
      const name2 = t?.fungible_info?.name;
      const existingTransfer = acc.find(({ fungible_info, direction }) => name2 && name2 === fungible_info?.name && direction === t.direction);
      if (existingTransfer) {
        const quantity = Number(existingTransfer.quantity.numeric) + Number(t.quantity.numeric);
        existingTransfer.quantity.numeric = quantity.toString();
        existingTransfer.value = (existingTransfer.value || 0) + (t.value || 0);
      } else {
        acc.push(t);
      }
      return acc;
    }, []);
    let finalTransfers = mergedTransfers;
    if (mergedTransfers.length > 2) {
      finalTransfers = mergedTransfers.sort((a3, b4) => (b4.value || 0) - (a3.value || 0)).slice(0, 2);
    }
    finalTransfers = finalTransfers.sort((a3, b4) => {
      if (a3.direction === "out" && b4.direction === "in") {
        return -1;
      }
      if (a3.direction === "in" && b4.direction === "out") {
        return 1;
      }
      return 0;
    });
    return finalTransfers;
  },
  filterGasFeeTransfers(transfers) {
    const tokenGroups = transfers.reduce((groups, transfer) => {
      const tokenName = transfer?.fungible_info?.name;
      if (tokenName) {
        if (!groups[tokenName]) {
          groups[tokenName] = [];
        }
        groups[tokenName].push(transfer);
      }
      return groups;
    }, {});
    const filteredTransfers = [];
    Object.values(tokenGroups).forEach((tokenTransfers) => {
      if (tokenTransfers.length === 1) {
        const firstTransfer = tokenTransfers[0];
        if (firstTransfer) {
          filteredTransfers.push(firstTransfer);
        }
      } else {
        const inTransfers = tokenTransfers.filter((t) => t.direction === "in");
        const outTransfers = tokenTransfers.filter((t) => t.direction === "out");
        if (inTransfers.length === 1 && outTransfers.length === 1) {
          const inTransfer = inTransfers[0];
          const outTransfer = outTransfers[0];
          let didApplyGasFeeFilter = false;
          if (inTransfer && outTransfer) {
            const inAmount = Number(inTransfer.quantity.numeric);
            const outAmount = Number(outTransfer.quantity.numeric);
            if (outAmount < inAmount * GAS_FEE_THRESHOLD) {
              filteredTransfers.push(inTransfer);
              didApplyGasFeeFilter = true;
            } else if (inAmount < outAmount * GAS_FEE_THRESHOLD) {
              filteredTransfers.push(outTransfer);
              didApplyGasFeeFilter = true;
            }
          }
          if (!didApplyGasFeeFilter) {
            filteredTransfers.push(...tokenTransfers);
          }
        } else {
          const significantTransfers = this.filterGasFeesFromTokenGroup(tokenTransfers);
          filteredTransfers.push(...significantTransfers);
        }
      }
    });
    transfers.forEach((transfer) => {
      if (!transfer?.fungible_info?.name) {
        filteredTransfers.push(transfer);
      }
    });
    return filteredTransfers;
  },
  filterGasFeesFromTokenGroup(tokenTransfers) {
    if (tokenTransfers.length <= 1) {
      return tokenTransfers;
    }
    const amounts = tokenTransfers.map((t) => Number(t.quantity.numeric));
    const maxAmount = Math.max(...amounts);
    const minAmount = Math.min(...amounts);
    const extremeGasThreshold = 0.01;
    if (minAmount < maxAmount * extremeGasThreshold) {
      const filtered = tokenTransfers.filter((t) => {
        const amount = Number(t.quantity.numeric);
        return amount >= maxAmount * extremeGasThreshold;
      });
      return filtered;
    }
    const inTransfers = tokenTransfers.filter((t) => t.direction === "in");
    const outTransfers = tokenTransfers.filter((t) => t.direction === "out");
    if (inTransfers.length === 1 && outTransfers.length === 1) {
      const inTransfer = inTransfers[0];
      const outTransfer = outTransfers[0];
      if (inTransfer && outTransfer) {
        const inAmount = Number(inTransfer.quantity.numeric);
        const outAmount = Number(outTransfer.quantity.numeric);
        if (outAmount < inAmount * GAS_FEE_THRESHOLD) {
          return [inTransfer];
        } else if (inAmount < outAmount * GAS_FEE_THRESHOLD) {
          return [outTransfer];
        }
      }
    }
    return tokenTransfers;
  },
  getQuantityFixedValue(value) {
    if (!value) {
      return null;
    }
    const parsedValue = parseFloat(value);
    return parsedValue.toFixed(FLOAT_FIXED_VALUE);
  }
};

export {
  OnRampController,
  esm_default2 as esm_default,
  N11 as N,
  EnsController,
  WcHelpersUtil,
  AdapterBlueprint,
  SIWXUtil,
  WalletConnectConnector,
  AlertController,
  SwapController,
  TooltipController,
  OptionsStateController,
  baseUSDC,
  baseSepoliaUSDC,
  ExchangeController,
  ModalUtil,
  MathUtil,
  css,
  defaultConverter,
  notEqual,
  html,
  svg,
  mathml,
  noChange,
  nothing,
  _$LH,
  LitElement,
  vars,
  css2,
  initializeTheming,
  setColorTheme,
  setThemeVariables,
  resetStyles,
  elementStyles,
  UiHelperUtil,
  TransactionUtil,
  customElement
};
/*! Bundled license information:

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

@walletconnect/relay-auth/dist/index.es.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/utils.js:
@noble/curves/esm/abstract/modular.js:
@noble/curves/esm/abstract/curve.js:
@noble/curves/esm/abstract/weierstrass.js:
@noble/curves/esm/_shortw_utils.js:
@noble/curves/esm/secp256k1.js:
@noble/curves/esm/abstract/bls.js:
@noble/curves/esm/abstract/tower.js:
@noble/curves/esm/bls12-381.js:
@noble/curves/esm/abstract/edwards.js:
@noble/curves/esm/abstract/montgomery.js:
@noble/curves/esm/ed25519.js:
@noble/curves/esm/utils.js:
@noble/curves/esm/abstract/modular.js:
@noble/curves/esm/abstract/curve.js:
@noble/curves/esm/abstract/weierstrass.js:
@noble/curves/esm/_shortw_utils.js:
@noble/curves/esm/secp256k1.js:
@noble/curves/esm/nist.js:
@noble/curves/esm/p256.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@scure/base/lib/esm/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@scure/bip32/lib/esm/index.js:
  (*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) *)

@noble/ciphers/esm/utils.js:
@walletconnect/utils/dist/index.js:
  (*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) *)

@scure/bip39/esm/index.js:
  (*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) *)

lit-html/development/lit-html.js:
@lit/reactive-element/development/reactive-element.js:
lit-element/development/lit-element.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/development/css-tag.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/is-server.js:
  (**
   * @license
   * Copyright 2022 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
*/
//# sourceMappingURL=chunk-EUUS47WX.js.map
